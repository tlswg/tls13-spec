<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.8 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" number="XXXX" category="std" obsoletes="5077, 5246, 6961" updates="4492, 5705, 6066" submissionType="IETF" consensus="yes">

  <front>
    <title abbrev="TLS">The Transport Layer Security (TLS) Protocol Version 1.3</title>

    <author initials="E." surname="Rescorla" fullname="Eric Rescorla">
      <organization>RTFM, Inc.</organization>
      <address>
        <email>ekr@rtfm.com</email>
      </address>
    </author>

    <date year="2018" month="April" day="10"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document specifies version 1.3 of the Transport Layer Security
(TLS) protocol.  TLS allows client/server applications to communicate
over the Internet in a way that is designed to prevent eavesdropping,
tampering, and message forgery.</t>

<t>This document updates RFCs 4492, 5705, and 6066 and it obsoletes
RFCs 5077, 5246, and 6961. This document also specifies new
requirements for TLS 1.2 implementations.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The primary goal of TLS is to provide a secure channel between two
communicating peers; the only requirement from the underlying
transport is a reliable, in-order, data stream. Specifically, the
secure channel should provide the following properties:</t>

<t><list style="symbols">
  <t>Authentication: The server side of the channel is always
authenticated; the client side is optionally
authenticated. Authentication can happen via asymmetric cryptography
(e.g., RSA <xref target="RSA"/>, ECDSA <xref target="ECDSA"/>, EdDSA <xref target="RFC8032"/>) or a pre-shared key (PSK).</t>
  <t>Confidentiality: Data sent over the channel after establishment
is only visible to the
endpoints. TLS does not hide the length of the data it transmits,
though endpoints are able to pad TLS records in order to obscure lengths
and improve protection against traffic analysis techniques.</t>
  <t>Integrity: Data sent over the channel after establishment cannot be
modified by attackers.</t>
</list></t>

<t>These properties should be true even in the face of an attacker who has complete
control of the network, as described in <xref target="RFC3552"/>.
See <xref target="security-analysis"/> for a more complete statement of the relevant security
properties.</t>

<t>TLS consists of two primary components:</t>

<t><list style="symbols">
  <t>A handshake protocol (<xref target="handshake-protocol"/>) that authenticates the communicating parties,
negotiates cryptographic modes and parameters, and establishes
shared keying material. The handshake protocol is designed to
resist tampering; an active attacker should not be able to force
the peers to negotiate different parameters than they would
if the connection were not under attack.</t>
  <t>A record protocol (<xref target="record-protocol"/>) that uses the parameters established by the
handshake protocol to protect traffic between the communicating
peers. The record protocol divides traffic up into a series of
records, each of which is independently protected using the
traffic keys.</t>
</list></t>

<t>TLS is application protocol independent; higher-level protocols can
layer on top of TLS transparently. The TLS standard, however, does not
specify how protocols add security with TLS; how to
initiate TLS handshaking and how to interpret the authentication
certificates exchanged are left to the judgment of the designers and
implementors of protocols that run on top of TLS.</t>

<t>This document defines TLS version 1.3. While TLS 1.3 is not directly
compatible with previous versions, all versions of TLS incorporate a
versioning mechanism which allows clients and servers to interoperably
negotiate a common version if one is supported by both peers.</t>

<t>This document supersedes and obsoletes previous versions of TLS
including version 1.2 <xref target="RFC5246"/>.  It also obsoletes the TLS ticket
mechanism defined in <xref target="RFC5077"/> and replaces it with the mechanism
defined in <xref target="resumption-and-psk"/>. <xref target="negotiated-groups"/> updates
<xref target="RFC4492"/> by modifying the protocol attributes used to negotiate
Elliptic Curves.  Because TLS 1.3 changes the way keys are derived, it
updates <xref target="RFC5705"/> as described in <xref target="exporters"/>.  It also changes
how OCSP messages are carried and therefore updates <xref target="RFC6066"/>
and obsoletes <xref target="RFC6961"/> as described in section <xref target="ocsp-and-sct"/>.</t>

<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>The following terms are used:</t>

<t>client: The endpoint initiating the TLS connection.</t>

<t>connection: A transport-layer connection between two endpoints.</t>

<t>endpoint: Either the client or server of the connection.</t>

<t>handshake: An initial negotiation between client and server that establishes the parameters of their subsequent interactions within TLS.</t>

<t>peer: An endpoint. When discussing a particular endpoint, “peer” refers to the endpoint that is not the primary subject of discussion.</t>

<t>receiver: An endpoint that is receiving records.</t>

<t>sender: An endpoint that is transmitting records.</t>

<t>server: The endpoint which did not initiate the TLS connection.</t>

</section>

<section anchor="major-differences-from-tls-12" title="Major Differences from TLS 1.2">

<t>The following is a list of the major functional differences between
TLS 1.2 and TLS 1.3. It is not intended to be exhaustive and there
are many minor differences.</t>

<t><list style="symbols">
  <t>The list of supported symmetric algorithms has been pruned of all algorithms that
are considered legacy. Those that remain all use Authenticated Encryption
with Associated Data (AEAD) algorithms. The ciphersuite concept has been
changed to separate the authentication and key exchange mechanisms from
the record protection algorithm (including secret key length) and a hash
to be used with the key derivation function and HMAC.</t>
  <t>A 0-RTT mode was added, saving a round-trip at connection setup for
some application data, at the cost of certain security properties.</t>
  <t>Static RSA and Diffie-Hellman cipher suites have been removed;
all public-key based key exchange mechanisms now provide forward secrecy.</t>
  <t>All handshake messages after the ServerHello are now encrypted. The
newly introduced EncryptedExtension message allows various extensions
previously sent in clear in the ServerHello to also enjoy
confidentiality protection from active attackers.</t>
  <t>The key derivation functions have been re-designed. The new design allows
easier analysis by cryptographers due to their improved key separation
properties. The HMAC-based Extract-and-Expand Key Derivation Function (HKDF)
is used as an underlying primitive.</t>
  <t>The handshake state machine has been significantly restructured to
be more consistent and to remove superfluous messages such as
ChangeCipherSpec (except when needed for middlebox compatibility).</t>
  <t>Elliptic curve algorithms are now in the base spec and new signature
algorithms, such as ed25519 and ed448, are included. TLS 1.3 removed point format
negotiation in favor of a single point format for each curve.</t>
  <t>Other cryptographic improvements including the removal of compression and
custom DHE groups, changing the RSA padding to use RSASSA-PSS, and the removal of
DSA.</t>
  <t>The TLS 1.2 version negotiation mechanism has been deprecated in favor
of a version list in an extension. This increases compatibility with
existing servers that incorrectly implemented version negotiation.</t>
  <t>Session resumption with and without server-side state as well as the
PSK-based ciphersuites of earlier TLS versions have been replaced by a
single new PSK exchange.</t>
  <t>Updated references to point to the updated versions of RFCs, as
appropriate (e.g., RFC 5280 rather than RFC 3280).</t>
</list></t>

</section>
<section anchor="updates-affecting-tls-12" title="Updates Affecting TLS 1.2">

<t>This document defines several changes that optionally affect
implementations of TLS 1.2, including those which do not also
support TLS 1.3:</t>

<t><list style="symbols">
  <t>A version downgrade protection mechanism is described in <xref target="server-hello"/>.</t>
  <t>RSASSA-PSS signature schemes are defined in <xref target="signature-algorithms"/>.</t>
  <t>The “supported_versions” ClientHello extension can be used to negotiate
the version of TLS to use, in preference to the legacy_version field of
the ClientHello.</t>
  <t>The “signature_algorithms_cert” extension allows a client to indicate
which signature algorithms it can validate in X.509 certificates</t>
</list></t>

<t>Additionally, this document clarifies some compliance requirements for earlier
versions of TLS; see <xref target="protocol-invariants"/>.</t>

</section>
</section>
<section anchor="protocol-overview" title="Protocol Overview">

<t>The cryptographic parameters used by the secure channel are produced by the
TLS handshake protocol. This sub-protocol of TLS is used by the client
and server when first communicating with each other.
The handshake protocol allows peers to negotiate a protocol version,
select cryptographic algorithms, optionally authenticate each other,
and establish shared secret keying material.
Once the handshake is complete, the peers use the established keys
to protect the application layer traffic.</t>

<t>A failure of the handshake or other protocol error triggers the
termination of the connection, optionally preceded by an alert message
(<xref target="alert-protocol"/>).</t>

<t>TLS supports three basic key exchange modes:</t>

<t><list style="symbols">
  <t>(EC)DHE (Diffie-Hellman over either finite fields or elliptic curves)</t>
  <t>PSK-only</t>
  <t>PSK with (EC)DHE</t>
</list></t>

<t><xref target="tls-full"/> below shows the basic full TLS handshake:</t>

<figure title="Message flow for full TLS Handshake" anchor="tls-full"><artwork><![CDATA[
       Client                                               Server

Key  ^ ClientHello
Exch | + key_share*
     | + signature_algorithms*
     | + psk_key_exchange_modes*
     v + pre_shared_key*         -------->
                                                       ServerHello  ^ Key
                                                      + key_share*  | Exch
                                                 + pre_shared_key*  v
                                             {EncryptedExtensions}  ^  Server
                                             {CertificateRequest*}  v  Params
                                                    {Certificate*}  ^
                                              {CertificateVerify*}  | Auth
                                                        {Finished}  v
                                 <--------     [Application Data*]
     ^ {Certificate*}
Auth | {CertificateVerify*}
     v {Finished}                -------->
       [Application Data]        <------->      [Application Data]

              +  Indicates noteworthy extensions sent in the
                 previously noted message.

              *  Indicates optional or situation-dependent
                 messages/extensions that are not always sent.

              {} Indicates messages protected using keys
                 derived from a [sender]_handshake_traffic_secret.

              [] Indicates messages protected using keys
                 derived from [sender]_application_traffic_secret_N
]]></artwork></figure>

<t>The handshake can be thought of as having three phases (indicated
in the diagram above):</t>

<t><list style="symbols">
  <t>Key Exchange: Establish shared keying material and select the
 cryptographic parameters. Everything after this phase is
 encrypted.</t>
  <t>Server Parameters: Establish other handshake parameters
 (whether the client is authenticated, application layer protocol support, etc.).</t>
  <t>Authentication: Authenticate the server (and optionally the client)
 and provide key confirmation and handshake integrity.</t>
</list></t>

<t>In the Key Exchange phase, the client sends the ClientHello
(<xref target="client-hello"/>) message, which contains a random nonce
(ClientHello.random); its offered protocol versions; a list of
symmetric cipher/HKDF hash pairs; either a set of Diffie-Hellman key shares (in the
“key_share” extension <xref target="key-share"/>), a set of pre-shared key labels (in the
“pre_shared_key” extension <xref target="pre-shared-key-extension"/>) or both; and
potentially additional extensions.  Additional fields and/or messages
may also be present for middlebox compatibility.</t>

<t>The server processes the ClientHello and determines the appropriate
cryptographic parameters for the connection. It then responds with its
own ServerHello (<xref target="server-hello"/>), which indicates the negotiated connection
parameters. The combination of the ClientHello
and the ServerHello determines the shared keys. If (EC)DHE
key establishment is in use, then the ServerHello
contains a “key_share” extension with the server’s ephemeral
Diffie-Hellman share; the server’s share MUST be in the same group as one of the
client’s shares. If PSK key establishment is
in use, then the ServerHello contains a “pre_shared_key”
extension indicating which of the client’s offered PSKs was selected.
Note that implementations can use (EC)DHE and PSK together, in which
case both extensions will be supplied.</t>

<t>The server then sends two messages to establish the Server Parameters:</t>

<t><list style="hanging">
  <t hangText='EncryptedExtensions:'>
  responses to ClientHello extensions that are not required to
determine the cryptographic parameters, other than those
that are specific to individual certificates. [<xref target="encrypted-extensions"/>]</t>
  <t hangText='CertificateRequest:'>
  if certificate-based client authentication is desired, the
desired parameters for that certificate. This message is
omitted if client authentication is not desired. [<xref target="certificate-request"/>]</t>
</list></t>

<t>Finally, the client and server exchange Authentication messages. TLS
uses the same set of messages every time that certificate-based
authentication is needed.  (PSK-based authentication happens as a side
effect of key exchange.)
Specifically:</t>

<t><list style="hanging">
  <t hangText='Certificate:'>
  the certificate of the endpoint and any per-certificate extensions.
This message is omitted by the server if not authenticating with a
certificate and by the client if the server did not send
CertificateRequest (thus indicating that the client should not
authenticate with a certificate). Note that if raw
public keys <xref target="RFC7250"/> or the cached information extension
<xref target="RFC7924"/> are in use, then this message will not
contain a certificate but rather some other value corresponding to
the server’s long-term key.  [<xref target="certificate"/>]</t>
  <t hangText='CertificateVerify:'>
  a signature over the entire handshake using the private key
corresponding to the public key in the Certificate message. This
message is omitted if the endpoint is not authenticating via a
certificate. [<xref target="certificate-verify"/>]</t>
  <t hangText='Finished:'>
  a MAC (Message Authentication Code) over the entire handshake.
This message provides key confirmation, binds the endpoint’s identity
to the exchanged keys, and in PSK mode
also authenticates the handshake. [<xref target="finished"/>]</t>
</list></t>

<t>Upon receiving the server’s messages, the client responds with its Authentication
messages, namely Certificate and CertificateVerify (if requested), and Finished.</t>

<t>At this point, the handshake is complete, and the client and server
derive the keying material required by the record layer to exchange
application-layer data protected through authenticated encryption.
Application data MUST NOT be sent prior to sending the Finished message,
except as specified
in [<xref target="zero-rtt-data"/>].
Note that while the server may send application data prior to receiving
the client’s Authentication messages, any data sent at that point is,
of course, being sent to an unauthenticated peer.</t>

<section anchor="incorrect-dhe-share" title="Incorrect DHE Share">

<t>If the client has not provided a sufficient “key_share” extension (e.g., it
includes only DHE or ECDHE groups unacceptable to or unsupported by the
server), the server corrects the mismatch with a HelloRetryRequest and
the client needs to restart the handshake with an appropriate
“key_share” extension, as shown in Figure 2.
If no common cryptographic parameters can be negotiated,
the server MUST abort the handshake with an appropriate alert.</t>

<figure title="Message flow for a full handshake with mismatched parameters" anchor="tls-restart"><artwork><![CDATA[
         Client                                               Server

         ClientHello
         + key_share             -------->
                                                   HelloRetryRequest
                                 <--------               + key_share
         ClientHello
         + key_share             -------->
                                                         ServerHello
                                                         + key_share
                                               {EncryptedExtensions}
                                               {CertificateRequest*}
                                                      {Certificate*}
                                                {CertificateVerify*}
                                                          {Finished}
                                 <--------       [Application Data*]
         {Certificate*}
         {CertificateVerify*}
         {Finished}              -------->
         [Application Data]      <------->        [Application Data]
]]></artwork></figure>

<t>Note: The handshake transcript incorporates the initial
ClientHello/HelloRetryRequest exchange; it is not reset with the new
ClientHello.</t>

<t>TLS also allows several optimized variants of the basic handshake, as
described in the following sections.</t>

</section>
<section anchor="resumption-and-psk" title="Resumption and Pre-Shared Key (PSK)">

<t>Although TLS PSKs can be established out of band,
PSKs can also be established in a previous connection and
then used to establish a new connection (“session resumption” or “resuming” with a PSK).
Once a handshake has completed, the server can
send to the client a PSK identity that corresponds to a unique key derived from
the initial handshake (see <xref target="NSTMessage"/>). The client
can then use that PSK identity in future handshakes to negotiate the use
of the associated PSK. If the server accepts the PSK, then the security context of the
new connection is cryptographically tied to the original connection and the key derived
from the initial handshake is used to bootstrap the cryptographic state
instead of a full handshake.
In TLS 1.2 and below, this functionality was provided by “session IDs” and
“session tickets” <xref target="RFC5077"/>. Both mechanisms are obsoleted in TLS 1.3.</t>

<t>PSKs can be used with (EC)DHE key exchange in order to provide forward
secrecy in combination with shared keys, or can be used alone, at the
cost of losing forward secrecy for the application data.</t>

<t><xref target="tls-resumption-psk"/> shows a pair of handshakes in which the first establishes
a PSK and the second uses it:</t>

<figure title="Message flow for resumption and PSK" anchor="tls-resumption-psk"><artwork><![CDATA[
       Client                                               Server

Initial Handshake:
       ClientHello
       + key_share               -------->
                                                       ServerHello
                                                       + key_share
                                             {EncryptedExtensions}
                                             {CertificateRequest*}
                                                    {Certificate*}
                                              {CertificateVerify*}
                                                        {Finished}
                                 <--------     [Application Data*]
       {Certificate*}
       {CertificateVerify*}
       {Finished}                -------->
                                 <--------      [NewSessionTicket]
       [Application Data]        <------->      [Application Data]


Subsequent Handshake:
       ClientHello
       + key_share*
       + pre_shared_key          -------->
                                                       ServerHello
                                                  + pre_shared_key
                                                      + key_share*
                                             {EncryptedExtensions}
                                                        {Finished}
                                 <--------     [Application Data*]
       {Finished}                -------->
       [Application Data]        <------->      [Application Data]
]]></artwork></figure>

<t>As the server is authenticating via a PSK, it does not send a
Certificate or a CertificateVerify message. When a client offers resumption
via PSK, it SHOULD also supply a “key_share” extension to the server to
allow the server to decline resumption and fall back
to a full handshake, if needed. The server responds with a “pre_shared_key”
extension to negotiate use of PSK key establishment and can (as shown here)
respond with a “key_share” extension to do (EC)DHE key establishment, thus
providing forward secrecy.</t>

<t>When PSKs are provisioned out of band, the PSK identity and the KDF hash
algorithm to
be used with the PSK MUST also be provisioned.</t>

<t><list style="hanging">
  <t hangText='Note:'>
  When using an out-of-band provisioned pre-shared secret, a critical
consideration is using sufficient entropy during the key generation, as
discussed in <xref target="RFC4086"></xref>. Deriving a shared secret from a password or other
low-entropy sources is not secure. A low-entropy secret, or password, is
subject to dictionary attacks based on the PSK binder.  The specified PSK
authentication is not a strong password-based authenticated key exchange even
when used with Diffie-Hellman key establishment.  Specifically, it does not
prevent an attacker that can observe the handshake from performing
a brute-force attack on the password/pre-shared key.</t>
</list></t>

</section>
<section anchor="zero-rtt-data" title="0-RTT Data">

<t>When clients and servers share a PSK (either obtained externally or
via a previous handshake), TLS 1.3 allows clients to send data on the
first flight (“early data”). The client uses the PSK to authenticate
the server and to encrypt the early data.</t>

<t>As shown in <xref target="tls-0-rtt"/>, the 0-RTT data is just added to the 1-RTT
handshake in the first flight. The rest of the handshake uses the same messages
as for a 1-RTT handshake with PSK resumption.</t>

<figure title="Message flow for a zero round trip handshake" anchor="tls-0-rtt"><artwork><![CDATA[
         Client                                               Server

         ClientHello
         + early_data
         + key_share*
         + psk_key_exchange_modes
         + pre_shared_key
         (Application Data*)     -------->
                                                         ServerHello
                                                    + pre_shared_key
                                                        + key_share*
                                               {EncryptedExtensions}
                                                       + early_data*
                                                          {Finished}
                                 <--------       [Application Data*]
         (EndOfEarlyData)
         {Finished}              -------->
         [Application Data]      <------->        [Application Data]

               +  Indicates noteworthy extensions sent in the
                  previously noted message.

               *  Indicates optional or situation-dependent
                  messages/extensions that are not always sent.

               () Indicates messages protected using keys
                  derived from client_early_traffic_secret.

               {} Indicates messages protected using keys
                  derived from a [sender]_handshake_traffic_secret.

               [] Indicates messages protected using keys
                  derived from [sender]_application_traffic_secret_N
]]></artwork></figure>

<t>IMPORTANT NOTE: The security properties for 0-RTT data are weaker than
those for other kinds of TLS data.  Specifically:</t>

<t><list style="numbers">
  <t>This data is not forward secret, as it is encrypted solely under
keys derived using the offered PSK.</t>
  <t>There are no guarantees of non-replay between connections.
Protection against replay for ordinary TLS 1.3 1-RTT data is
provided via the server’s Random value, but 0-RTT data does not depend
on the ServerHello and therefore has weaker guarantees.  This is especially
relevant if the data is authenticated either with TLS client
authentication or inside the application protocol. The same warnings
apply to any use of the early_exporter_master_secret.</t>
</list></t>

<t>0-RTT data cannot be duplicated within a connection (i.e., the server will
not process the same data twice for the same connection) and an
attacker will not be able to make 0-RTT data appear to be 1-RTT data
(because it is protected with different keys.) <xref target="replay-0rtt"/>
contains a description of potential attacks and <xref target="anti-replay"/>
describes mechanisms which the server can use to limit the impact of
replay.</t>

</section>
</section>
<section anchor="presentation-language" title="Presentation Language">

<t>This document deals with the formatting of data in an external representation.
The following very basic and somewhat casually defined presentation syntax will
be used.</t>

<section anchor="basic-block-size" title="Basic Block Size">

<t>The representation of all data items is explicitly specified. The basic data
block size is one byte (i.e., 8 bits). Multiple byte data items are
concatenations of bytes, from left to right, from top to bottom. From the byte
stream, a multi-byte item (a numeric in the example) is formed (using C
notation) by:</t>

<figure><artwork><![CDATA[
   value = (byte[0] << 8*(n-1)) | (byte[1] << 8*(n-2)) |
           ... | byte[n-1];
]]></artwork></figure>

<t>This byte ordering for multi-byte values is the commonplace network byte order
or big-endian format.</t>

</section>
<section anchor="miscellaneous" title="Miscellaneous">

<t>Comments begin with “/*” and end with “*/”.</t>

<t>Optional components are denoted by enclosing them in “[[ ]]” double
brackets.</t>

<t>Single-byte entities containing uninterpreted data are of type
opaque.</t>

<t>A type alias T’ for an existing type T is defined by:</t>

<figure><artwork><![CDATA[
   T T';
]]></artwork></figure>

</section>
<section anchor="numbers" title="Numbers">

<t>The basic numeric data type is an unsigned byte (uint8). All larger numeric
data types are formed from fixed-length series of bytes concatenated as
described in <xref target="basic-block-size"/> and are also unsigned. The following numeric
types are predefined.</t>

<figure><artwork><![CDATA[
   uint8 uint16[2];
   uint8 uint24[3];
   uint8 uint32[4];
   uint8 uint64[8];
]]></artwork></figure>

<t>All values, here and elsewhere in the specification, are transmitted in network byte
(big-endian) order; the uint32 represented by the hex bytes 01 02 03 04 is
equivalent to the decimal value 16909060.</t>

</section>
<section anchor="vectors" title="Vectors">

<t>A vector (single-dimensioned array) is a stream of homogeneous data elements.
The size of the vector may be specified at documentation time or left
unspecified until runtime. In either case, the length declares the number of
bytes, not the number of elements, in the vector. The syntax for specifying a
new type, T’, that is a fixed-length vector of type T is</t>

<figure><artwork><![CDATA[
   T T'[n];
]]></artwork></figure>

<t>Here, T’ occupies n bytes in the data stream, where n is a multiple of the size
of T.  The length of the vector is not included in the encoded stream.</t>

<t>In the following example, Datum is defined to be three consecutive bytes that
the protocol does not interpret, while Data is three consecutive Datum,
consuming a total of nine bytes.</t>

<figure><artwork><![CDATA[
   opaque Datum[3];      /* three uninterpreted bytes */
   Datum Data[9];        /* 3 consecutive 3-byte vectors */
]]></artwork></figure>

<t>Variable-length vectors are defined by specifying a subrange of legal lengths,
inclusively, using the notation &lt;floor..ceiling&gt;. When these are encoded, the
actual length precedes the vector’s contents in the byte stream. The length
will be in the form of a number consuming as many bytes as required to hold the
vector’s specified maximum (ceiling) length. A variable-length vector with an
actual length field of zero is referred to as an empty vector.</t>

<figure><artwork><![CDATA[
   T T'<floor..ceiling>;
]]></artwork></figure>

<t>In the following example, mandatory is a vector that must contain between 300
and 400 bytes of type opaque. It can never be empty. The actual length field
consumes two bytes, a uint16, which is sufficient to represent the value 400
(see <xref target="numbers"/>). Similarly, longer can represent up to 800 bytes of
data, or 400 uint16 elements, and it may be empty. Its encoding will include a
two-byte actual length field prepended to the vector. The length of an encoded
vector must be an exact multiple of the length of a single element (e.g.,
a 17-byte vector of uint16 would be illegal).</t>

<figure><artwork><![CDATA[
   opaque mandatory<300..400>;
         /* length field is 2 bytes, cannot be empty */
   uint16 longer<0..800>;
         /* zero to 400 16-bit unsigned integers */
]]></artwork></figure>

</section>
<section anchor="enumerateds" title="Enumerateds">

<t>An additional sparse data type is available called enum or
enumerated. Each definition is a different type. Only enumerateds of
the same type may be assigned or compared.  Every element of an
enumerated must be assigned a value, as demonstrated in the following
example. Since the elements of the enumerated are not ordered, they
can be assigned any unique value, in any order.</t>

<figure><artwork><![CDATA[
   enum { e1(v1), e2(v2), ... , en(vn) [[, (n)]] } Te;
]]></artwork></figure>

<t>Future extensions or additions to the protocol may define new values.
Implementations need to be able to parse and ignore unknown values unless the
definition of the field states otherwise.</t>

<t>An enumerated occupies as much space in the byte stream as would its maximal
defined ordinal value. The following definition would cause one byte to be used
to carry fields of type Color.</t>

<figure><artwork><![CDATA[
   enum { red(3), blue(5), white(7) } Color;
]]></artwork></figure>

<t>One may optionally specify a value without its associated tag to force the
width definition without defining a superfluous element.</t>

<t>In the following example, Taste will consume two bytes in the data stream but
can only assume the values 1, 2, or 4 in the current version of the protocol.</t>

<figure><artwork><![CDATA[
   enum { sweet(1), sour(2), bitter(4), (32000) } Taste;
]]></artwork></figure>

<t>The names of the elements of an enumeration are scoped within the defined type.
In the first example, a fully qualified reference to the second element of the
enumeration would be Color.blue. Such qualification is not required if the
target of the assignment is well specified.</t>

<figure><artwork><![CDATA[
   Color color = Color.blue;     /* overspecified, legal */
   Color color = blue;           /* correct, type implicit */
]]></artwork></figure>

<t>The names assigned to enumerateds do not need to be unique.  The numerical value
can describe a range over which the same name applies.  The value includes the
minimum and maximum inclusive values in that range, separated by two period
characters. This is principally useful for reserving regions of the space.</t>

<figure><artwork><![CDATA[
   enum { sad(0), meh(1..254), happy(255) } Mood;
]]></artwork></figure>

</section>
<section anchor="constructed-types" title="Constructed Types">

<t>Structure types may be constructed from primitive types for convenience. Each
specification declares a new, unique type. The syntax for definition is much
like that of C.</t>

<figure><artwork><![CDATA[
   struct {
       T1 f1;
       T2 f2;
       ...
       Tn fn;
   } T;
]]></artwork></figure>

<t>Fixed- and variable-length vector fields are allowed using the standard vector
syntax. Structures V1 and V2 in the variants example below demonstrate this.</t>

<t>The fields within a structure may be qualified using the type’s name, with a
syntax much like that available for enumerateds. For example, T.f2 refers to
the second field of the previous declaration.</t>

</section>
<section anchor="constants" title="Constants">

<t>Fields and variables may be assigned a fixed value using “=”, as in:</t>

<figure><artwork><![CDATA[
   struct {
       T1 f1 = 8;  /* T.f1 must always be 8 */
       T2 f2;
   } T;
]]></artwork></figure>

</section>
<section anchor="variants" title="Variants">

<t>Defined structures may have variants based on some knowledge that is
available within the environment. The selector must be an enumerated
type that defines the possible variants the structure defines. Each
arm of the select specifies the type of that variant’s field and an
optional field label. The mechanism by which the variant is selected
at runtime is not prescribed by the presentation language.</t>

<figure><artwork><![CDATA[
   struct {
       T1 f1;
       T2 f2;
       ....
       Tn fn;
       select (E) {
           case e1: Te1 [[fe1]];
           case e2: Te2 [[fe2]];
           ....
           case en: Ten [[fen]];
       };
   } Tv;
]]></artwork></figure>

<t>For example:</t>

<figure><artwork><![CDATA[
   enum { apple(0), orange(1) } VariantTag;

   struct {
       uint16 number;
       opaque string<0..10>; /* variable length */
   } V1;

   struct {
       uint32 number;
       opaque string[10];    /* fixed length */
   } V2;

   struct {
       VariantTag type;
       select (VariantRecord.type) {
           case apple:  V1;
           case orange: V2;
       };
   } VariantRecord;
]]></artwork></figure>

</section>
</section>
<section anchor="handshake-protocol" title="Handshake Protocol">

<t>The handshake protocol is used to negotiate the security parameters
of a connection. Handshake messages are supplied to the TLS record layer, where
they are encapsulated within one or more TLSPlaintext or TLSCiphertext structures, which are
processed and transmitted as specified by the current active connection state.</t>

<figure><artwork><![CDATA[
   enum {
       client_hello(1),
       server_hello(2),
       new_session_ticket(4),
       end_of_early_data(5),
       encrypted_extensions(8),
       certificate(11),
       certificate_request(13),
       certificate_verify(15),
       finished(20),
       key_update(24),
       message_hash(254),
       (255)
   } HandshakeType;

   struct {
       HandshakeType msg_type;    /* handshake type */
       uint24 length;             /* bytes in message */
       select (Handshake.msg_type) {
           case client_hello:          ClientHello;
           case server_hello:          ServerHello;
           case end_of_early_data:     EndOfEarlyData;
           case encrypted_extensions:  EncryptedExtensions;
           case certificate_request:   CertificateRequest;
           case certificate:           Certificate;
           case certificate_verify:    CertificateVerify;
           case finished:              Finished;
           case new_session_ticket:    NewSessionTicket;
           case key_update:            KeyUpdate;
       };
   } Handshake;
]]></artwork></figure>

<t>Protocol messages MUST be sent in the order defined in
<xref target="the-transcript-hash"/> and shown in the diagrams in <xref target="protocol-overview"/>.
A peer which receives a handshake message in an unexpected order
MUST abort the handshake with an “unexpected_message” alert.</t>

<t>New handshake message types are assigned by IANA as described in
<xref target="iana-considerations"/>.</t>

<section anchor="key-exchange-messages" title="Key Exchange Messages">

<t>The key exchange messages are used to determine the security capabilities
of the client and the server and to establish shared secrets including
the traffic keys used to protect the rest of the handshake and the data.</t>

<section anchor="cryptographic-negotiation" title="Cryptographic Negotiation">

<t>In TLS, the cryptographic negotiation proceeds by the client offering the
following four sets of options in its ClientHello:</t>

<t><list style="symbols">
  <t>A list of cipher suites which indicates the AEAD algorithm/HKDF hash
pairs which the client supports.</t>
  <t>A “supported_groups” (<xref target="negotiated-groups"/>) extension which indicates the (EC)DHE groups
which the client supports and a “key_share” (<xref target="key-share"/>) extension which contains
(EC)DHE shares for some or all of these groups.</t>
  <t>A “signature_algorithms” (<xref target="signature-algorithms"/>) extension which indicates the signature
algorithms which the client can accept.</t>
  <t>A “pre_shared_key” (<xref target="pre-shared-key-extension"/>) extension which
contains a list of symmetric key identities known to the client and a
“psk_key_exchange_modes” (<xref target="pre-shared-key-exchange-modes"/>)
extension which indicates the key exchange modes that may be used
with PSKs.</t>
</list></t>

<t>If the server does not select a PSK, then the first three of these
options are entirely orthogonal: the server independently selects a
cipher suite, an (EC)DHE group and key share for key establishment,
and a signature algorithm/certificate pair to authenticate itself to
the client. If there is no overlap between the received “supported_groups”
and the groups supported by the server then the server MUST abort the
handshake with a “handshake_failure” or an “insufficient_security” alert.</t>

<t>If the server selects a PSK, then it MUST also select a key
establishment mode from the set indicated by client’s
“psk_key_exchange_modes” extension (at present, PSK alone or with (EC)DHE). Note
that if the PSK can be used without (EC)DHE then non-overlap in the
“supported_groups” parameters need not be fatal, as it is in the
non-PSK case discussed in the previous paragraph.</t>

<t>If the server selects an (EC)DHE group and the client did not offer a
compatible “key_share” extension in the initial ClientHello, the server MUST
respond with a HelloRetryRequest (<xref target="hello-retry-request"/>) message.</t>

<t>If the server successfully selects parameters and does not require a
HelloRetryRequest, it indicates the selected parameters in the ServerHello as
follows:</t>

<t><list style="symbols">
  <t>If PSK is being used, then the server will send a
“pre_shared_key” extension indicating the selected key.</t>
  <t>If PSK is not being used, then (EC)DHE and certificate-based
authentication are always used.</t>
  <t>When (EC)DHE is in use, the server will also provide a
“key_share” extension.</t>
  <t>When authenticating via a certificate, the server will send
the Certificate (<xref target="certificate"/>) and CertificateVerify
(<xref target="certificate-verify"/>) messages. In TLS 1.3
as defined by this document, either a PSK or a certificate
is always used, but not both. Future documents may define how
to use them together.</t>
</list></t>

<t>If the server is unable to negotiate a supported set of parameters
(i.e., there is no overlap between the client and server parameters),
it MUST abort the handshake with either
a “handshake_failure” or “insufficient_security” fatal alert
(see <xref target="alert-protocol"/>).</t>

</section>
<section anchor="client-hello" title="Client Hello">

<t>When a client first connects to a server, it is REQUIRED to send the
ClientHello as its first TLS message. The client will also send a
ClientHello when the server has responded to its ClientHello with a
HelloRetryRequest. In that case, the client MUST send the same
ClientHello without modification, except:</t>

<t><list style="symbols">
  <t>If a “key_share” extension was supplied in the HelloRetryRequest,
replacing the list of shares with a list containing a single
KeyShareEntry from the indicated group.</t>
  <t>Removing the “early_data” extension (<xref target="early-data-indication"/>) if one was
present. Early data is not permitted after HelloRetryRequest.</t>
  <t>Including a “cookie” extension if one was provided in the
HelloRetryRequest.</t>
  <t>Updating the “pre_shared_key” extension if present by
recomputing the “obfuscated_ticket_age” and binder values
and (optionally) removing
any PSKs which are incompatible with the server’s indicated
cipher suite.</t>
  <t>Optionally adding, removing, or changing the length of the “padding”
extension <xref target="RFC7685"/>.</t>
  <t>Other modifications that may be allowed by an extension defined in the
future and present in the HelloRetryRequest.</t>
</list></t>

<t>Because TLS 1.3 forbids renegotiation, if a server has negotiated TLS
1.3 and receives a ClientHello at any other time, it MUST terminate
the connection with an “unexpected_message” alert.</t>

<t>If a server established a TLS connection with a previous version of TLS
and receives a TLS 1.3 ClientHello in a renegotiation, it MUST retain the
previous protocol version. In particular, it MUST NOT negotiate TLS 1.3.</t>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   uint16 ProtocolVersion;
   opaque Random[32];

   uint8 CipherSuite[2];    /* Cryptographic suite selector */

   struct {
       ProtocolVersion legacy_version = 0x0303;    /* TLS v1.2 */
       Random random;
       opaque legacy_session_id<0..32>;
       CipherSuite cipher_suites<2..2^16-2>;
       opaque legacy_compression_methods<1..2^8-1>;
       Extension extensions<8..2^16-1>;
   } ClientHello;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='legacy_version'>
  In previous versions of TLS, this field was used for version negotiation
and represented the highest version number supported by the client.
Experience has shown that many servers do not properly implement
version negotiation, leading to “version intolerance” in which
the server rejects an otherwise acceptable ClientHello with a version
number higher than it supports.
In TLS 1.3, the client indicates its version preferences in the
“supported_versions” extension (<xref target="supported-versions"/>) and the legacy_version field MUST
be set to 0x0303, which is the version number for TLS 1.2.
(See <xref target="backward-compatibility"/> for details about backward compatibility.)</t>
  <t hangText='random'>
  32 bytes generated by a secure random number generator.
See <xref target="implementation-notes"/> for additional information.</t>
  <t hangText='legacy_session_id'>
  Versions of TLS before TLS 1.3 supported a “session resumption”
feature which has been merged with Pre-Shared Keys in this version
(see <xref target="resumption-and-psk"/>). A client which has a cached session ID
set by a pre-TLS 1.3 server SHOULD set this field to that value. In
compatibility mode (see <xref target="middlebox"/>) this field MUST be non-empty,
so a client not offering a pre-TLS 1.3 session MUST generate a
new 32-byte value. This value need not be random but SHOULD be
unpredictable to avoid implementations fixating on a specific value
(also known as ossification).
Otherwise, it MUST be set as a zero length vector (i.e., a single
zero byte length field).</t>
  <t hangText='cipher_suites'>
  This is a list of the symmetric cipher options supported by the
client, specifically the record protection algorithm (including
secret key length) and a hash to be used with HKDF, in descending
order of client preference. If the list contains cipher suites that
the server does not recognize, support or wish to use, the server
MUST ignore those cipher suites and process the remaining ones as
usual. Values are defined in <xref target="cipher-suites"/>. If the client is
attempting a PSK key establishment, it SHOULD advertise at least one
cipher suite indicating a Hash associated with the PSK.</t>
  <t hangText='legacy_compression_methods'>
  Versions of TLS before 1.3 supported compression with the list of
supported compression methods being sent in this field. For every TLS 1.3
ClientHello, this vector MUST contain exactly one byte, set to
zero, which corresponds to the “null” compression method in
prior versions of TLS. If a TLS 1.3 ClientHello is
received with any other value in this field, the server MUST
abort the handshake with an “illegal_parameter” alert. Note that TLS 1.3
servers might receive TLS 1.2 or prior ClientHellos which contain
other compression methods and (if negotiating such a prior version)
MUST follow the procedures for
the appropriate prior version of TLS.  TLS 1.3 ClientHellos are identified
as having a legacy_version of 0x0303 and a supported_versions extension
present with 0x0304 as the highest version indicated therein.</t>
  <t hangText='extensions'>
  Clients request extended functionality from servers by sending
data in the extensions field.  The actual “Extension” format is
defined in <xref target="extensions"/>.  In TLS 1.3, use
of certain extensions is mandatory, as functionality is moved into
extensions to preserve ClientHello compatibility with previous versions of TLS.
Servers MUST ignore unrecognized extensions.</t>
</list></t>

<t>All versions of TLS allow an extensions field to optionally follow the
compression_methods field. TLS 1.3 ClientHello
messages always contain extensions (minimally “supported_versions”, otherwise
they will be interpreted as TLS 1.2 ClientHello messages).
However, TLS 1.3 servers might receive ClientHello messages without an
extensions field from prior versions of TLS.
The presence of extensions can be detected by determining whether there
are bytes following the compression_methods field at the end of the
ClientHello. Note that this method of detecting optional data differs
from the normal TLS method of having a variable-length field, but it
is used for compatibility with TLS before extensions were defined.
TLS 1.3 servers will need to perform this check first and only
attempt to negotiate TLS 1.3 if the “supported_versions” extension
is present.
If negotiating a version of TLS prior to 1.3, a server MUST check that
the message either contains no data after legacy_compression_methods
or that it contains a valid extensions block with no data following.
If not, then it MUST abort the handshake with a “decode_error” alert.</t>

<t>In the event that a client requests additional functionality using
extensions, and this functionality is not supplied by the server, the
client MAY abort the handshake.</t>

<t>After sending the ClientHello message, the client waits for a ServerHello
or HelloRetryRequest message. If early data
is in use, the client may transmit early application data
(<xref target="zero-rtt-data"/>) while waiting for the next handshake message.</t>

</section>
<section anchor="server-hello" title="Server Hello">

<t>The server will send this message in response to a ClientHello message
to proceed with the handshake if it is able to negotiate an acceptable
set of handshake parameters based on the ClientHello.</t>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   struct {
       ProtocolVersion legacy_version = 0x0303;    /* TLS v1.2 */
       Random random;
       opaque legacy_session_id_echo<0..32>;
       CipherSuite cipher_suite;
       uint8 legacy_compression_method = 0;
       Extension extensions<6..2^16-1>;
   } ServerHello;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='legacy_version'>
  In previous versions of TLS, this field was used for version negotiation
and represented the selected version number for the connection. Unfortunately,
some middleboxes fail when presented with new values.
In TLS 1.3, the TLS server indicates its version using the
“supported_versions” extension (<xref target="supported-versions"/>),
and the legacy_version field MUST
be set to 0x0303, which is the version number for TLS 1.2.
(See <xref target="backward-compatibility"/> for details about backward compatibility.)</t>
  <t hangText='random'>
  32 bytes generated by a secure random number generator.
See <xref target="implementation-notes"/> for additional information.
The last eight bytes MUST be overwritten as described
below if negotiating TLS 1.2 or TLS 1.1, but the
remaining bytes MUST be random.
This structure is generated by the server and MUST be
generated independently of the ClientHello.random.</t>
  <t hangText='legacy_session_id_echo'>
  The contents of the client’s legacy_session_id field. Note that
this field is echoed even if the client’s value corresponded to
a cached pre-TLS 1.3 session which the server has chosen not
to resume. A client which receives a legacy_session_id_echo field
that does not match what it sent in the ClientHello
MUST abort the handshake with an “illegal_parameter”
alert.</t>
  <t hangText='cipher_suite'>
  The single cipher suite selected by the server from the list in
ClientHello.cipher_suites. A client which receives a cipher suite
that was not offered MUST abort the handshake with an “illegal_parameter”
alert.</t>
  <t hangText='legacy_compression_method'>
  A single byte which MUST have the value 0.</t>
  <t hangText='extensions'>
  A list of extensions.  The ServerHello MUST only include extensions
which are required to establish the cryptographic context and negotiate
the protocol version. All TLS 1.3 ServerHello messages MUST contain the
“supported_versions” extension.  Current ServerHello messages additionally contain
either the “pre_shared_key” or “key_share” extensions, or both when using
a PSK with (EC)DHE key establishment. Other extensions are sent
separately in the EncryptedExtensions message.</t>
</list></t>

<t>For reasons of backward compatibility with middleboxes
(see <xref target="middlebox"/>) the HelloRetryRequest
message uses the same structure as the ServerHello, but with
Random set to the special value of the SHA-256 of
“HelloRetryRequest”:</t>

<figure><artwork><![CDATA[
  CF 21 AD 74 E5 9A 61 11 BE 1D 8C 02 1E 65 B8 91
  C2 A2 11 16 7A BB 8C 5E 07 9E 09 E2 C8 A8 33 9C
]]></artwork></figure>

<t>Upon receiving a message with type server_hello, implementations
MUST first examine the Random value and if it matches
this value, process it as described in <xref target="hello-retry-request"/>).</t>

<t>TLS 1.3 has a downgrade protection mechanism embedded in the server’s
random value. TLS 1.3 servers which negotiate TLS 1.2 or below in
response to a ClientHello MUST set the last eight bytes of their
Random value specially.</t>

<t>If negotiating TLS 1.2, TLS 1.3 servers MUST set the last eight bytes of their
Random value to the bytes:</t>

<figure><artwork><![CDATA[
  44 4F 57 4E 47 52 44 01
]]></artwork></figure>

<t>If negotiating TLS 1.1 or below, TLS 1.3 servers MUST and TLS 1.2
servers SHOULD set the last eight bytes of their Random value to the
bytes:</t>

<figure><artwork><![CDATA[
  44 4F 57 4E 47 52 44 00
]]></artwork></figure>

<t>TLS 1.3 clients receiving a ServerHello indicating TLS 1.2 or below
MUST check that the last eight bytes are not equal to either of these values.
TLS 1.2 clients SHOULD also check that the last eight bytes are not
equal to the second value if the ServerHello indicates TLS 1.1 or
below.  If a match is found, the client MUST abort the handshake
with an “illegal_parameter” alert.  This mechanism provides limited
protection against downgrade attacks over and above what is provided
by the Finished exchange: because the ServerKeyExchange, a message
present in TLS 1.2 and below, includes a signature over both random
values, it is not possible for an active attacker to modify the
random values without detection as long as ephemeral ciphers are used.
It does not provide downgrade protection when static RSA is used.</t>

<t>Note: This is a change from <xref target="RFC5246"/>, so in practice many TLS 1.2 clients
and servers will not behave as specified above.</t>

<t>A legacy TLS client performing renegotiation with TLS 1.2 or prior
and which receives a TLS 1.3 ServerHello during renegotiation
MUST abort the handshake with a “protocol_version” alert.
Note that renegotiation is not possible when TLS 1.3 has been
negotiated.</t>

</section>
<section anchor="hello-retry-request" title="Hello Retry Request">

<t>The server will send this message in response to a ClientHello message
if it is able to find an acceptable set of parameters but the
ClientHello does not contain sufficient information to proceed with
the handshake. As discussed in <xref target="server-hello"/>, the HelloRetryRequest
has the same format as a ServerHello message, and the
legacy_version, legacy_session_id_echo, cipher_suite, and legacy_compression
methods fields have the same meaning. However, for convenience we
discuss HelloRetryRequest throughout this document as if it were
a distinct message.</t>

<t>The server’s extensions MUST contain “supported_versions” and
otherwise the server SHOULD send only the extensions necessary for the
client to generate a correct ClientHello pair. As with ServerHello, a
HelloRetryRequest MUST NOT contain any extensions that were not first
offered by the client in its ClientHello, with the exception of
optionally the “cookie” (see <xref target="cookie"/>) extension.</t>

<t>Upon receipt of a HelloRetryRequest, the client MUST check
the legacy_version, legacy_session_id_echo, cipher_suite,
and legacy_compression_method as specified in <xref target="server-hello"/> and then process the
extensions, starting with determining the version using
“supported_versions”. Clients MUST abort the handshake with
an “illegal_parameter” alert if the HelloRetryRequest would not result in
any change in the ClientHello. If a client receives a second
HelloRetryRequest in the same connection (i.e., where
the ClientHello was itself in response to a HelloRetryRequest), it
MUST abort the handshake with an “unexpected_message” alert.</t>

<t>Otherwise, the client MUST process all extensions in the
HelloRetryRequest and send a second updated ClientHello. The
HelloRetryRequest extensions defined in this specification are:</t>

<t><list style="symbols">
  <t>supported_versions (see <xref target="supported-versions"/>)</t>
  <t>cookie (see <xref target="cookie"/>)</t>
  <t>key_share (see <xref target="key-share"/>)</t>
</list></t>

<t>In addition, in its updated ClientHello, the client SHOULD NOT offer
any pre-shared keys associated with a hash other than that of the
selected cipher suite. This allows the client to avoid having to
compute partial hash transcripts for multiple hashes in the second
ClientHello.  A client which receives a cipher suite that was not
offered MUST abort the handshake.  Servers MUST ensure that they
negotiate the same cipher suite when receiving a conformant updated
ClientHello (if the server selects the cipher suite as the first step
in the negotiation, then this will happen automatically). Upon
receiving the ServerHello, clients MUST check that the cipher suite
supplied in the ServerHello is the same as that in the
HelloRetryRequest and otherwise abort the handshake with an
“illegal_parameter” alert.</t>

<t>The value of selected_version in the HelloRetryRequest “supported_versions”
extension MUST be retained in the ServerHello, and a client MUST abort the
handshake with an “illegal_parameter” alert if the value changes.</t>

</section>
</section>
<section anchor="extensions" title="Extensions">

<t>A number of TLS messages contain tag-length-value encoded extensions structures.</t>

<figure><artwork><![CDATA[
   struct {
       ExtensionType extension_type;
       opaque extension_data<0..2^16-1>;
   } Extension;

   enum {
       server_name(0),                             /* RFC 6066 */
       max_fragment_length(1),                     /* RFC 6066 */
       status_request(5),                          /* RFC 6066 */
       supported_groups(10),                       /* RFC 4492, 7919 */
       signature_algorithms(13),                   /* [[this document]] */
       use_srtp(14),                               /* RFC 5764 */
       heartbeat(15),                              /* RFC 6520 */
       application_layer_protocol_negotiation(16), /* RFC 7301 */
       signed_certificate_timestamp(18),           /* RFC 6962 */
       client_certificate_type(19),                /* RFC 7250 */
       server_certificate_type(20),                /* RFC 7250 */
       padding(21),                                /* RFC 7685 */
       pre_shared_key(41),                         /* [[this document]] */
       early_data(42),                             /* [[this document]] */
       supported_versions(43),                     /* [[this document]] */
       cookie(44),                                 /* [[this document]] */
       psk_key_exchange_modes(45),                 /* [[this document]] */
       certificate_authorities(47),                /* [[this document]] */
       oid_filters(48),                            /* [[this document]] */
       post_handshake_auth(49),                    /* [[this document]] */
       signature_algorithms_cert(50),              /* [[this document]] */
       key_share(51),                              /* [[this document]] */
       (65535)
   } ExtensionType;
]]></artwork></figure>

<t>Here:</t>

<t><list style="symbols">
  <t>“extension_type” identifies the particular extension type.</t>
  <t>“extension_data” contains information specific to the particular
extension type.</t>
</list></t>

<t>The list of extension types is maintained by IANA as described in
<xref target="iana-considerations"/>.</t>

<t>Extensions are generally structured in a request/response fashion, though
some extensions are just indications with no corresponding response. The client
sends its extension requests in the ClientHello message and the server sends
its extension responses in the ServerHello, EncryptedExtensions,
HelloRetryRequest and Certificate messages. The server sends extension requests
in the CertificateRequest message which a client MAY respond to with
a Certificate message. The server MAY also send unsolicited
extensions in the NewSessionTicket, though the client does not respond
directly to these.</t>

<t>Implementations MUST NOT send extension responses
if the remote endpoint did not send the corresponding extension requests,
with the exception of the “cookie” extension in HelloRetryRequest.
Upon receiving such an extension, an endpoint MUST abort the handshake with an
“unsupported_extension” alert.</t>

<t>The table below indicates the messages where a given extension may
appear, using the following notation: CH (ClientHello), SH
(ServerHello), EE (EncryptedExtensions), CT (Certificate), CR
(CertificateRequest), NST (NewSessionTicket) and HRR
(HelloRetryRequest). If an implementation receives an extension which
it recognizes and which is not specified for the message in which it
appears it MUST abort the handshake with an “illegal_parameter” alert.</t>

<texttable>
      <ttcol align='left'>Extension</ttcol>
      <ttcol align='right'>TLS 1.3</ttcol>
      <c>server_name <xref target="RFC6066"></xref></c>
      <c>CH, EE</c>
      <c>max_fragment_length <xref target="RFC6066"></xref></c>
      <c>CH, EE</c>
      <c>status_request <xref target="RFC6066"></xref></c>
      <c>CH, CR, CT</c>
      <c>supported_groups <xref target="RFC7919"></xref></c>
      <c>CH, EE</c>
      <c>signature_algorithms <xref target="RFC5246"></xref></c>
      <c>CH, CR</c>
      <c>use_srtp <xref target="RFC5764"></xref></c>
      <c>CH, EE</c>
      <c>heartbeat <xref target="RFC6520"></xref></c>
      <c>CH, EE</c>
      <c>application_layer_protocol_negotiation <xref target="RFC7301"></xref></c>
      <c>CH, EE</c>
      <c>signed_certificate_timestamp <xref target="RFC6962"></xref></c>
      <c>CH, CR, CT</c>
      <c>client_certificate_type <xref target="RFC7250"></xref></c>
      <c>CH, EE</c>
      <c>server_certificate_type <xref target="RFC7250"></xref></c>
      <c>CH, EE</c>
      <c>padding <xref target="RFC7685"></xref></c>
      <c>CH</c>
      <c>key_share [[this document]]</c>
      <c>CH, SH, HRR</c>
      <c>pre_shared_key [[this document]]</c>
      <c>CH, SH</c>
      <c>psk_key_exchange_modes [[this document]]</c>
      <c>CH</c>
      <c>early_data [[this document]]</c>
      <c>CH, EE, NST</c>
      <c>cookie [[this document]]</c>
      <c>CH, HRR</c>
      <c>supported_versions [[this document]]</c>
      <c>CH, SH, HRR</c>
      <c>certificate_authorities [[this document]]</c>
      <c>CH, CR</c>
      <c>oid_filters [[this document]]</c>
      <c>CR</c>
      <c>post_handshake_auth [[this document]]</c>
      <c>CH</c>
      <c>signature_algorithms_cert [[this document]]</c>
      <c>CH, CR</c>
</texttable>

<t>When multiple extensions of different types are present, the
extensions MAY appear in any order, with the exception of
“pre_shared_key” <xref target="pre-shared-key-extension"/> which MUST be
the last extension in the ClientHello.
There MUST NOT be more than one extension of the same type in a given
extension block.</t>

<t>In TLS 1.3, unlike TLS 1.2, extensions are negotiated for each
handshake even when in resumption-PSK mode. However, 0-RTT parameters are
those negotiated in the previous handshake; mismatches may require
rejecting 0-RTT (see <xref target="early-data-indication"/>).</t>

<t>There are subtle (and not so subtle) interactions that may occur in this
protocol between new features and existing features which may result in a
significant reduction in overall security. The following considerations should
be taken into account when designing new extensions:</t>

<t><list style="symbols">
  <t>Some cases where a server does not agree to an extension are error
conditions (e.g., the handshake cannot continue), and some are
simply refusals to support particular features. In general, error
alerts should be used for the former and a field in the server
extension response for the latter.</t>
  <t>Extensions should, as far as possible, be designed to prevent any attack that
forces use (or non-use) of a particular feature by manipulation of handshake
messages. This principle should be followed regardless of whether the feature
is believed to cause a security problem.
Often the fact that the extension fields are included in the inputs to the
Finished message hashes will be sufficient, but extreme care is needed when
the extension changes the meaning of messages sent in the handshake phase.
Designers and implementors should be aware of the fact that until the
handshake has been authenticated, active attackers can modify messages and
insert, remove, or replace extensions.</t>
</list></t>

<section anchor="supported-versions" title="Supported Versions">

<figure><artwork><![CDATA[
   struct {
       select (Handshake.msg_type) {
           case client_hello:
                ProtocolVersion versions<2..254>;

           case server_hello: /* and HelloRetryRequest */
                ProtocolVersion selected_version;
       };
   } SupportedVersions;
]]></artwork></figure>

<t>The “supported_versions” extension is used by the client to indicate
which versions of TLS it supports and by the server to indicate
which version it is using. The extension contains a list of
supported versions in preference order, with the most preferred
version first. Implementations of this specification MUST send this
extension in the ClientHello containing all versions of TLS which they are
prepared to negotiate (for this specification, that means minimally
0x0304, but if previous versions of TLS are allowed to be negotiated,
they MUST be present as well).</t>

<t>If this extension is not present, servers which are compliant with
this specification, and which also support TLS 1.2,
MUST negotiate TLS 1.2 or prior as specified in
<xref target="RFC5246"/>, even if ClientHello.legacy_version is 0x0304 or later.
Servers MAY abort the handshake upon receiving a ClientHello with
legacy_version 0x0304 or later.</t>

<t>If this extension is present in the ClientHello, servers MUST NOT use the
ClientHello.legacy_version value for version negotiation and MUST use only the
“supported_versions” extension to determine client
preferences. Servers MUST only select a version of TLS present in that
extension and MUST ignore any unknown versions that are present in that
extension. Note that this
mechanism makes it possible to negotiate a version prior to TLS 1.2 if
one side supports a sparse range. Implementations of TLS 1.3 which choose
to support prior versions of TLS SHOULD support TLS 1.2.
Servers MUST be prepared to receive ClientHellos that include this
extension but do not include 0x0304 in the list of versions.</t>

<t>A server which negotiates a version of TLS prior to TLS 1.3 MUST
set ServerHello.version and MUST NOT send the “supported_versions”
extension.
A server which negotiates TLS 1.3 MUST respond by sending a
“supported_versions” extension containing the selected version value
(0x0304). It MUST set the ServerHello.legacy_version field to 0x0303 (TLS
1.2). Clients MUST check for this extension prior to processing
the rest of the ServerHello (although they will have to parse the
ServerHello in order to read the extension).
If this extension is present, clients MUST ignore the
ServerHello.legacy_version value and MUST use only the
“supported_versions” extension to determine the selected version. If the
“supported_versions” extension in the ServerHello contains a version not offered by the
client or contains a version prior to TLS 1.3, the client MUST abort the handshake with an
“illegal_parameter” alert.</t>

</section>
<section anchor="cookie" title="Cookie">

<figure><artwork><![CDATA[
   struct {
       opaque cookie<1..2^16-1>;
   } Cookie;
]]></artwork></figure>

<t>Cookies serve two primary purposes:</t>

<t><list style="symbols">
  <t>Allowing the server to force the client to demonstrate reachability
at their apparent network address (thus providing a measure of DoS
protection). This is primarily useful for non-connection-oriented
transports (see <xref target="RFC6347"/> for an example of this).</t>
  <t>Allowing the server to offload state to the client, thus allowing it to send
a HelloRetryRequest without storing any state. The server can do this by
storing the hash of the ClientHello in the HelloRetryRequest cookie
(protected with some suitable integrity algorithm).</t>
</list></t>

<t>When sending a HelloRetryRequest, the server MAY provide a “cookie” extension to the
client (this is an exception to the usual rule that the only extensions that
may be sent are those that appear in the ClientHello). When sending the
new ClientHello, the client MUST copy the contents of the extension received in
the HelloRetryRequest into a “cookie” extension in the new ClientHello.
Clients MUST NOT use cookies in their initial ClientHello in subsequent connections.</t>

<t>When a server is operating statelessly it may receive an unprotected record of
type change_cipher_spec between the first and second ClientHello (see
<xref target="record-protocol"/>). Since the server is not storing any state this will appear
as if it were the first message to be received. Servers operating statelessly
MUST ignore these records.</t>

</section>
<section anchor="signature-algorithms" title="Signature Algorithms">

<t>TLS 1.3 provides two extensions for indicating which signature
algorithms may be used in digital signatures. The
“signature_algorithms_cert” extension applies to signatures in
certificates and the “signature_algorithms” extension, which originally
appeared in TLS 1.2, applies to signatures in CertificateVerify
messages. The keys found in certificates MUST also be of
appropriate type for the signature algorithms they are used
with. This is a particular issue for RSA keys and PSS signatures,
as described below. If no “signature_algorithms_cert” extension is present,
then the “signature_algorithms” extension also applies to signatures
appearing in certificates. Clients which desire the server to authenticate
itself via a certificate MUST send “signature_algorithms”. If a server
is authenticating via a certificate and the client has not sent a
“signature_algorithms” extension, then the server MUST abort the
handshake with a “missing_extension” alert (see <xref target="mti-extensions"/>).</t>

<t>The “signature_algorithms_cert” extension was added to allow implementations
which supported different sets of algorithms for certificates and in TLS itself
to clearly signal their capabilities. TLS 1.2 implementations SHOULD also process
this extension. Implementations which have the same policy in both cases
MAY omit the “signature_algorithms_cert” extension.</t>

<t>The “extension_data” field of these extensions contains a
SignatureSchemeList value:</t>

<figure><artwork><![CDATA[
   enum {
       /* RSASSA-PKCS1-v1_5 algorithms */
       rsa_pkcs1_sha256(0x0401),
       rsa_pkcs1_sha384(0x0501),
       rsa_pkcs1_sha512(0x0601),

       /* ECDSA algorithms */
       ecdsa_secp256r1_sha256(0x0403),
       ecdsa_secp384r1_sha384(0x0503),
       ecdsa_secp521r1_sha512(0x0603),

       /* RSASSA-PSS algorithms with public key OID rsaEncryption */
       rsa_pss_rsae_sha256(0x0804),
       rsa_pss_rsae_sha384(0x0805),
       rsa_pss_rsae_sha512(0x0806),

       /* EdDSA algorithms */
       ed25519(0x0807),
       ed448(0x0808),

       /* RSASSA-PSS algorithms with public key OID RSASSA-PSS */
       rsa_pss_pss_sha256(0x0809),
       rsa_pss_pss_sha384(0x080a),
       rsa_pss_pss_sha512(0x080b),

       /* Legacy algorithms */
       rsa_pkcs1_sha1(0x0201),
       ecdsa_sha1(0x0203),

       /* Reserved Code Points */
       private_use(0xFE00..0xFFFF),
       (0xFFFF)
   } SignatureScheme;

   struct {
       SignatureScheme supported_signature_algorithms<2..2^16-2>;
   } SignatureSchemeList;
]]></artwork></figure>

<t>Note: This enum is named “SignatureScheme” because there is already
a “SignatureAlgorithm” type in TLS 1.2, which this replaces.
We use the term “signature algorithm” throughout the text.</t>

<t>Each SignatureScheme value lists a single signature algorithm that the
client is willing to verify. The values are indicated in descending order
of preference. Note that a signature algorithm takes as input an
arbitrary-length message, rather than a digest. Algorithms which
traditionally act on a digest should be defined in TLS to first
hash the input with a specified hash algorithm and then proceed as usual.
The code point groups listed above have the following meanings:</t>

<t><list style="hanging">
  <t hangText='RSASSA-PKCS1-v1_5 algorithms'>
  Indicates a signature algorithm using RSASSA-PKCS1-v1_5 <xref target="RFC8017"/>
with the corresponding hash algorithm as defined in <xref target="SHS"/>. These values
refer solely to signatures which appear in certificates (see
<xref target="server-certificate-selection"/>) and are not defined for use in signed
TLS handshake messages, although they MAY appear in “signature_algorithms”
and “signature_algorithms_cert” for backward compatibility with TLS 1.2,</t>
  <t hangText='ECDSA algorithms'>
  Indicates a signature algorithm using ECDSA <xref target="ECDSA"/>, the corresponding
curve as defined in ANSI X9.62 <xref target="X962"/> and FIPS 186-4 <xref target="DSS"/>, and the
corresponding hash algorithm as defined in <xref target="SHS"/>. The signature is
represented as a DER-encoded <xref target="X690"/> ECDSA-Sig-Value structure.</t>
  <t hangText='RSASSA-PSS RSAE algorithms'>
  Indicates a signature algorithm using RSASSA-PSS <xref target="RFC8017"/> with mask
generation function 1. The
digest used in the mask generation function and the digest being signed are
both the corresponding hash algorithm as defined in <xref target="SHS"/>.
The length of the salt MUST be equal to the length of the output of the
digest algorithm. If the public key is carried
in an X.509 certificate, it MUST use the rsaEncryption OID <xref target="RFC5280"/>.</t>
  <t hangText='EdDSA algorithms'>
  Indicates a signature algorithm using EdDSA as defined in
<xref target="RFC8032"/> or its successors. Note that these correspond to the
“PureEdDSA” algorithms and not the “prehash” variants.</t>
  <t hangText='RSASSA-PSS PSS algorithms'>
  Indicates a signature algorithm using RSASSA-PSS <xref target="RFC8017"/> with mask
generation function 1. The
digest used in the mask generation function and the digest being signed are
both the corresponding hash algorithm as defined in <xref target="SHS"/>.
The length of the salt MUST be equal to the length of the digest
algorithm. If the public key is carried in an X.509 certificate,
it MUST use the RSASSA-PSS OID  <xref target="RFC5756"/>. When used in certificate signatures,
the algorithm parameters MUST be DER encoded. If the corresponding
public key’s parameters are present, then the parameters in the signature
MUST be identical to those in the public key.</t>
  <t hangText='Legacy algorithms'>
  Indicates algorithms which are being deprecated because they use
algorithms with known weaknesses, specifically SHA-1 which is used
in this context with either with RSA using RSASSA-PKCS1-v1_5 or ECDSA.  These values
refer solely to signatures which appear in certificates (see
<xref target="server-certificate-selection"/>) and are not defined for use in
signed TLS handshake messages, although they MAY appear in “signature_algorithms”
and “signature_algorithms_cert” for backward compatibility with TLS 1.2,
Endpoints SHOULD NOT negotiate these algorithms
but are permitted to do so solely for backward compatibility. Clients
offering these values MUST list
them as the lowest priority (listed after all other algorithms in
SignatureSchemeList). TLS 1.3 servers MUST NOT offer a SHA-1 signed
certificate unless no valid certificate chain can be produced
without it (see <xref target="server-certificate-selection"/>).</t>
</list></t>

<t>The signatures on certificates that are self-signed or certificates that are
trust anchors are not validated since they begin a certification path (see
<xref target="RFC5280"/>, Section 3.2).  A certificate that begins a certification
path MAY use a signature algorithm that is not advertised as being supported
in the “signature_algorithms” extension.</t>

<t>Note that TLS 1.2 defines this extension differently. TLS 1.3 implementations
willing to negotiate TLS 1.2 MUST behave in accordance with the requirements of
<xref target="RFC5246"/> when negotiating that version. In particular:</t>

<t><list style="symbols">
  <t>TLS 1.2 ClientHellos MAY omit this extension.</t>
  <t>In TLS 1.2, the extension contained hash/signature pairs. The pairs are
encoded in two octets, so SignatureScheme values have been allocated to
align with TLS 1.2’s encoding. Some legacy pairs are left unallocated. These
algorithms are deprecated as of TLS 1.3. They MUST NOT be offered or
negotiated by any implementation. In particular, MD5 <xref target="SLOTH"/>, SHA-224, and
DSA MUST NOT be used.</t>
  <t>ECDSA signature schemes align with TLS 1.2’s ECDSA hash/signature pairs.
However, the old semantics did not constrain the signing curve.  If TLS 1.2 is
negotiated, implementations MUST be prepared to accept a signature that uses
any curve that they advertised in the “supported_groups” extension.</t>
  <t>Implementations that advertise support for RSASSA-PSS (which is mandatory in
TLS 1.3), MUST be prepared to accept a signature using that scheme even when
TLS 1.2 is negotiated. In TLS 1.2, RSASSA-PSS is used with RSA cipher suites.</t>
</list></t>

</section>
<section anchor="certificate-authorities" title="Certificate Authorities">

<t>The “certificate_authorities” extension is used to indicate the
certificate authorities which an endpoint supports and which SHOULD
be used by the receiving endpoint to guide certificate selection.</t>

<t>The body of the “certificate_authorities” extension consists of a
CertificateAuthoritiesExtension structure.</t>

<figure><artwork><![CDATA[
   opaque DistinguishedName<1..2^16-1>;

   struct {
       DistinguishedName authorities<3..2^16-1>;
   } CertificateAuthoritiesExtension;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='authorities'>
  A list of the distinguished names <xref target="X501"/> of acceptable
certificate authorities, represented in DER-encoded <xref target="X690"/> format.  These
distinguished names specify a desired distinguished name for trust anchor
or subordinate CA; thus, this message can be used to
describe known trust anchors as well as a desired authorization space.</t>
</list></t>

<t>The client MAY send the “certificate_authorities” extension in the ClientHello
message. The server MAY send it in the CertificateRequest message.</t>

<t>The “trusted_ca_keys” extension, which serves a similar
purpose <xref target="RFC6066"/>, but is more complicated, is not used in TLS 1.3
(although it may appear in ClientHello messages from clients which are
offering prior versions of TLS).</t>

</section>
<section anchor="oid-filters" title="OID Filters">

<t>The “oid_filters” extension allows servers to provide a set of OID/value
pairs which it would like the client’s certificate to match. This
extension, if provided by the server, MUST only be sent in the CertificateRequest message.</t>

<figure><artwork><![CDATA[
   struct {
       opaque certificate_extension_oid<1..2^8-1>;
       opaque certificate_extension_values<0..2^16-1>;
   } OIDFilter;

   struct {
       OIDFilter filters<0..2^16-1>;
   } OIDFilterExtension;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='filters'>
  A list of certificate extension OIDs <xref target="RFC5280"/> with their allowed value(s) and
represented in DER-encoded <xref target="X690"/> format. Some certificate extension OIDs
allow multiple values (e.g., Extended Key Usage).  If the server has included
a non-empty filters list, the client certificate included in
the response MUST contain all of the specified extension OIDs that the client
recognizes. For each extension OID recognized by the client, all of the
specified values MUST be present in the client certificate (but the
certificate MAY have other values as well). However, the client MUST ignore
and skip any unrecognized certificate extension OIDs. If the client ignored
some of the required certificate extension OIDs and supplied a certificate
that does not satisfy the request, the server MAY at its discretion either
continue the connection without client authentication, or abort the handshake
with an “unsupported_certificate” alert. Any given OID MUST NOT appear
more than once in the filters list.</t>
</list></t>

<t>PKIX RFCs define a variety of certificate extension OIDs and their corresponding
value types. Depending on the type, matching certificate extension values are
not necessarily bitwise-equal. It is expected that TLS implementations will rely
on their PKI libraries to perform certificate selection using certificate
extension OIDs.</t>

<t>This document defines matching rules for two standard certificate extensions
defined in <xref target="RFC5280"/>:</t>

<t><list style="symbols">
  <t>The Key Usage extension in a certificate matches the request when all key
usage bits asserted in the request are also asserted in the Key Usage
certificate extension.</t>
  <t>The Extended Key Usage extension in a certificate matches the request when all
key purpose OIDs present in the request are also found in the Extended Key
Usage certificate extension. The special anyExtendedKeyUsage OID MUST NOT be
used in the request.</t>
</list></t>

<t>Separate specifications may define matching rules for other certificate
extensions.</t>

</section>
<section anchor="post_handshake_auth" title="Post-Handshake Client Authentication">

<t>The “post_handshake_auth” extension is used to indicate that a client is willing
to perform post-handshake authentication (<xref target="post-handshake-authentication"/>). Servers
MUST NOT send a post-handshake CertificateRequest to clients which do not
offer this extension. Servers MUST NOT send this extension.</t>

<figure><artwork><![CDATA[
   struct {} PostHandshakeAuth;
]]></artwork></figure>

<t>The “extension_data” field of the “post_handshake_auth” extension is zero
length.</t>

</section>
<section anchor="negotiated-groups" title="Negotiated Groups">

<t>When sent by the client, the “supported_groups” extension indicates
the named groups which the client supports for key exchange, ordered
from most preferred to least preferred.</t>

<t>Note: In versions of TLS prior to TLS 1.3, this extension was named
“elliptic_curves” and only contained elliptic curve groups. See <xref target="RFC4492"/> and
<xref target="RFC7919"/>. This extension was also used to negotiate
ECDSA curves. Signature algorithms are now negotiated independently (see
<xref target="signature-algorithms"/>).</t>

<t>The “extension_data” field of this extension contains a
“NamedGroupList” value:</t>

<figure><artwork><![CDATA[
   enum {

       /* Elliptic Curve Groups (ECDHE) */
       secp256r1(0x0017), secp384r1(0x0018), secp521r1(0x0019),
       x25519(0x001D), x448(0x001E),

       /* Finite Field Groups (DHE) */
       ffdhe2048(0x0100), ffdhe3072(0x0101), ffdhe4096(0x0102),
       ffdhe6144(0x0103), ffdhe8192(0x0104),

       /* Reserved Code Points */
       ffdhe_private_use(0x01FC..0x01FF),
       ecdhe_private_use(0xFE00..0xFEFF),
       (0xFFFF)
   } NamedGroup;

   struct {
       NamedGroup named_group_list<2..2^16-1>;
   } NamedGroupList;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='Elliptic Curve Groups (ECDHE)'>
  Indicates support for the corresponding named curve, defined
either in FIPS 186-4 <xref target="DSS"/> or in <xref target="RFC7748"/>.
Values 0xFE00 through 0xFEFF are reserved for private use.</t>
  <t hangText='Finite Field Groups (DHE)'>
  Indicates support of the corresponding finite field
group, defined in <xref target="RFC7919"/>.
Values 0x01FC through 0x01FF are reserved for private use.</t>
</list></t>

<t>Items in named_group_list are ordered according to the client’s
preferences (most preferred choice first).</t>

<t>As of TLS 1.3, servers are permitted to send the “supported_groups”
extension to the client. Clients MUST NOT act upon any information
found in “supported_groups” prior to successful completion of the
handshake but MAY use the information learned from a successfully
completed handshake to change what groups they use in their
“key_share” extension in subsequent connections.
If the server has a group it prefers to the
ones in the “key_share” extension but is still willing to accept the
ClientHello, it SHOULD send “supported_groups” to update the client’s
view of its preferences; this extension SHOULD contain all groups
the server supports, regardless of whether they are currently
supported by the client.</t>

</section>
<section anchor="key-share" title="Key Share">

<t>The “key_share” extension contains the endpoint’s cryptographic parameters.</t>

<t>Clients MAY send an empty client_shares vector in order to request
group selection from the server at the cost of an additional round trip.
(see <xref target="hello-retry-request"/>)</t>

<figure><artwork><![CDATA[
   struct {
       NamedGroup group;
       opaque key_exchange<1..2^16-1>;
   } KeyShareEntry;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='group'>
  The named group for the key being exchanged.</t>
  <t hangText='key_exchange'>
  Key exchange information.  The contents of this field are
determined by the specified group and its corresponding
definition.
Finite Field Diffie-Hellman <xref target="DH"/> parameters are described in
<xref target="ffdhe-param"/>; Elliptic Curve Diffie-Hellman parameters are
described in <xref target="ecdhe-param"/>.</t>
</list></t>

<t>In the ClientHello message, the “extension_data” field of this extension
contains a “KeyShareClientHello” value:</t>

<figure><artwork><![CDATA[
   struct {
       KeyShareEntry client_shares<0..2^16-1>;
   } KeyShareClientHello;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='client_shares'>
  A list of offered KeyShareEntry values in descending order of client preference.</t>
</list></t>

<t>This vector MAY be empty if the client is requesting a HelloRetryRequest.
Each KeyShareEntry value MUST correspond to a group offered in the
“supported_groups” extension and MUST appear in the same order.  However, the
values MAY be a non-contiguous subset of the “supported_groups” extension and
MAY omit the most preferred groups. Such a situation could arise if the most
preferred groups are new and unlikely to be supported in enough places to
make pregenerating key shares for them efficient.</t>

<t>Clients can offer as many KeyShareEntry values as the number of supported
groups it is offering, each
representing a single set of key exchange parameters. For instance, a
client might offer shares for several elliptic curves or multiple
FFDHE groups.  The key_exchange values for each KeyShareEntry MUST be
generated independently.  Clients MUST NOT offer multiple
KeyShareEntry values for the same group.  Clients MUST NOT offer any
KeyShareEntry values for groups not listed in the client’s
“supported_groups” extension.  Servers MAY check for violations of
these rules and abort the handshake with an “illegal_parameter” alert
if one is violated.</t>

<t>In a HelloRetryRequest message, the “extension_data” field of this
extension contains a KeyShareHelloRetryRequest value:</t>

<figure><artwork><![CDATA[
   struct {
       NamedGroup selected_group;
   } KeyShareHelloRetryRequest;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='selected_group'>
  The mutually supported group the server intends to negotiate and
is requesting a retried ClientHello/KeyShare for.</t>
</list></t>

<t>Upon receipt of this extension in a HelloRetryRequest, the client MUST
verify that (1) the selected_group field corresponds to a group which was provided
in the “supported_groups” extension in the original ClientHello; and (2)
the selected_group field does not correspond to a group which was
provided in the “key_share” extension in the original ClientHello. If either of
these checks fails, then the client MUST abort the handshake with an
“illegal_parameter” alert.  Otherwise, when sending the new ClientHello, the
client MUST replace the original “key_share” extension with one
containing only a new KeyShareEntry for the group indicated in the
selected_group field of the triggering HelloRetryRequest.</t>

<t>In a ServerHello message, the “extension_data” field of this
extension contains a KeyShareServerHello value:</t>

<figure><artwork><![CDATA[
   struct {
       KeyShareEntry server_share;
   } KeyShareServerHello;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='server_share'>
  A single KeyShareEntry value that is in the same group as one of the
client’s shares.</t>
</list></t>

<t>If using (EC)DHE key establishment, servers offer exactly one
KeyShareEntry in the ServerHello. This value MUST be in the same group
as the KeyShareEntry value offered
by the client that the server has selected for the negotiated key exchange.
Servers MUST NOT send a KeyShareEntry for any group not
indicated in the “supported_groups” extension and
MUST NOT send a KeyShareEntry when using the “psk_ke” PskKeyExchangeMode.
If using (EC)DHE key establishment, and a HelloRetryRequest containing a
“key_share” extension was received by the client, the client MUST verify that the
selected NamedGroup in the ServerHello is the same as that in the HelloRetryRequest.
If this check fails, the client MUST abort the handshake with an “illegal_parameter”
alert.</t>

<section anchor="ffdhe-param" title="Diffie-Hellman Parameters">

<t>Diffie-Hellman <xref target="DH"/> parameters for both clients and servers are encoded in
the opaque key_exchange field of a KeyShareEntry in a KeyShare structure.
The opaque value contains the
Diffie-Hellman public value (Y = g^X mod p) for the specified group
(see <xref target="RFC7919"/> for group definitions)
encoded as a big-endian integer and padded to the left with zeros to the size of p in
bytes.</t>

<t>Note: For a given Diffie-Hellman group, the padding results in all public keys
having the same length.</t>

<t>Peers MUST validate each other’s public key Y by ensuring that 1 &lt; Y
&lt; p-1. This check ensures that the remote peer is properly behaved and
isn’t forcing the local system into a small subgroup.</t>

</section>
<section anchor="ecdhe-param" title="ECDHE Parameters">

<t>ECDHE parameters for both clients and servers are encoded in the
opaque key_exchange field of a KeyShareEntry in a KeyShare structure.</t>

<t>For secp256r1, secp384r1 and secp521r1, the contents are the serialized
value of the following struct:</t>

<figure><artwork><![CDATA[
   struct {
       uint8 legacy_form = 4;
       opaque X[coordinate_length];
       opaque Y[coordinate_length];
   } UncompressedPointRepresentation;
]]></artwork></figure>

<t>X and Y respectively are the binary representations of the x and y
values in network byte order.  There are no internal length markers,
so each number representation occupies as many octets as implied by
the curve parameters.  For P-256 this means that each of X and Y use
32 octets, padded on the left by zeros if necessary.  For P-384 they
take 48 octets each, and for P-521 they take 66 octets each.</t>

<t>For the curves secp256r1, secp384r1 and secp521r1,
peers MUST validate each other’s public value Q by ensuring
that the point is a valid point on the elliptic curve.
The appropriate validation procedures are defined in Section 4.3.7 of <xref target="X962"/>
and alternatively in Section 5.6.2.3 of <xref target="KEYAGREEMENT"/>.
This process consists of three
steps: (1) verify that Q is not the point at infinity (O), (2) verify
that for Q = (x, y) both integers x and y are in the correct interval, (3)
ensure that (x, y) is a correct solution to the elliptic curve
equation.  For these curves, implementers do not need to verify
membership in the correct subgroup.</t>

<t>For X25519 and X448, the contents of the public value are the byte string inputs and outputs of the
corresponding functions defined in <xref target="RFC7748"/>, 32 bytes for X25519 and 56
bytes for X448.</t>

<t>Note: Versions of TLS prior to 1.3 permitted point format negotiation;
TLS 1.3 removes this feature in favor of a single point format
for each curve.</t>

</section>
</section>
<section anchor="pre-shared-key-exchange-modes" title="Pre-Shared Key Exchange Modes">

<t>In order to use PSKs, clients MUST also send a “psk_key_exchange_modes”
extension. The semantics of this extension are that the client only
supports the use of PSKs with these modes, which restricts both the
use of PSKs offered in this ClientHello and those which the server
might supply via NewSessionTicket.</t>

<t>A client MUST provide a “psk_key_exchange_modes” extension if it offers
a “pre_shared_key” extension. If clients offer “pre_shared_key” without
a “psk_key_exchange_modes” extension, servers MUST abort the handshake.
Servers MUST NOT select a key exchange mode that is not listed by the
client. This extension also restricts the modes for use with PSK resumption;
servers SHOULD NOT send NewSessionTicket with tickets that are not
compatible with the advertised modes; however, if a server does so, the impact
will just be that the client’s attempts at resumption fail.</t>

<t>The server MUST NOT send a “psk_key_exchange_modes” extension.</t>

<figure><artwork><![CDATA[
   enum { psk_ke(0), psk_dhe_ke(1), (255) } PskKeyExchangeMode;

   struct {
       PskKeyExchangeMode ke_modes<1..255>;
   } PskKeyExchangeModes;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='psk_ke'>
  PSK-only key establishment. In this mode, the server MUST NOT
supply a “key_share” value.</t>
  <t hangText='psk_dhe_ke'>
  PSK with (EC)DHE key establishment. In this mode,
the client and server MUST supply “key_share” values as described
in <xref target="key-share"/>.</t>
</list></t>

<t>Any future values that are allocated must ensure that the transmitted
protocol messages unambiguously identify which mode was selected by
the server; at present, this is indicated by the presence of the “key_share”
in the ServerHello.</t>

</section>
<section anchor="early-data-indication" title="Early Data Indication">

<t>When a PSK is used and early data is allowed for that PSK, the client can send application data
in its first flight of messages. If the client opts to do so, it MUST
supply both the “early_data” extension as well as the “pre_shared_key”
extension.</t>

<t>The “extension_data” field of this extension contains an
“EarlyDataIndication” value.</t>

<figure><artwork><![CDATA[
   struct {} Empty;

   struct {
       select (Handshake.msg_type) {
           case new_session_ticket:   uint32 max_early_data_size;
           case client_hello:         Empty;
           case encrypted_extensions: Empty;
       };
   } EarlyDataIndication;
]]></artwork></figure>

<t>See <xref target="NSTMessage"/> for the use of the max_early_data_size field.</t>

<t>The parameters for the 0-RTT data (version, symmetric cipher suite, ALPN
protocol, etc.) are those associated with the PSK in use.
For externally provisioned PSKs, the associated values are those
provisioned along with the key.  For PSKs established via a NewSessionTicket
message, the associated values are those which were negotiated in the connection
which established the PSK. The PSK used to encrypt the early data
MUST be the first PSK listed in the client’s “pre_shared_key” extension.</t>

<t>For PSKs provisioned via NewSessionTicket, a server MUST validate that
the ticket age for the selected PSK identity (computed by subtracting
ticket_age_add from PskIdentity.obfuscated_ticket_age modulo 2^32)
is within a small tolerance of the
time since the ticket was issued (see <xref target="anti-replay"/>).  If it is not,
the server SHOULD proceed with the handshake but reject 0-RTT, and
SHOULD NOT take any other action that assumes that this ClientHello is
fresh.</t>

<t>0-RTT messages sent in the first flight have the same (encrypted) content types
as messages of the same type sent in other flights (handshake and
application_data) but are protected under
different keys.  After receiving the server’s Finished message, if the
server has accepted early data, an EndOfEarlyData message
will be sent to indicate the key change. This message will be encrypted
with the 0-RTT traffic keys.</t>

<t>A server which receives an “early_data” extension
MUST behave in one of three ways:</t>

<t><list style="symbols">
  <t>Ignore the extension and return a regular 1-RTT response.  The server then
skips past early data by attempting to deprotect received records using the handshake traffic
key, discarding records which fail deprotection (up to the configured max_early_data_size).
Once a record is deprotected
successfully, it is treated as the start of the client’s second flight
and the the server proceeds as with an ordinary 1-RTT handshake.</t>
  <t>Request that the client send another ClientHello by responding with a
HelloRetryRequest.  A client MUST NOT include the “early_data” extension in
its followup ClientHello.  The server then ignores early data by skipping
all records with external content type of “application_data” (indicating
that they are encrypted), up to the configured max_early_data_size.</t>
  <t>Return its own “early_data” extension in EncryptedExtensions,
indicating that it intends to
process the early data. It is not possible for the server
to accept only a subset of the early data messages.
Even though the server sends a message accepting early data, the actual early
data itself may already be in flight by the time the server generates this message.</t>
</list></t>

<t>In order to accept early data, the server MUST have accepted a
PSK cipher suite and selected the first key offered in the
client’s “pre_shared_key” extension. In addition, it MUST verify that
the following values are the same as those associated with the selected
PSK:</t>

<t><list style="symbols">
  <t>The TLS version number</t>
  <t>The selected cipher suite</t>
  <t>The selected ALPN <xref target="RFC7301"/> protocol, if any</t>
</list></t>

<t>These requirements are a superset of those needed to perform a 1-RTT
handshake using the PSK in question.  For externally established PSKs, the
associated values are those provisioned along with the key.  For PSKs
established via a NewSessionTicket message, the associated values are those
negotiated in the connection during which the ticket was established.</t>

<t>Future extensions MUST define their interaction with 0-RTT.</t>

<t>If any of these checks fail, the server MUST NOT respond
with the extension and must discard all the first
flight data using one of the first two mechanisms listed above
(thus falling back to 1-RTT or 2-RTT). If the client attempts
a 0-RTT handshake but the server rejects it, the server will generally
not have the 0-RTT record protection keys and must instead
use trial decryption (either with the 1-RTT handshake keys or
by looking for a cleartext ClientHello in the case of HelloRetryRequest) to
find the first non-0-RTT message.</t>

<t>If the server chooses to accept the “early_data” extension,
then it MUST comply with the same error handling requirements
specified for all records when processing early data records.
Specifically, if the server fails to decrypt a 0-RTT record following
an accepted “early_data” extension it MUST terminate the connection
with a “bad_record_mac” alert as per <xref target="record-payload-protection"/>.</t>

<t>If the server rejects the “early_data” extension, the client
application MAY opt to retransmit the application data previously
sent in early data once the handshake has
been completed.  Note that automatic re-transmission of early data
could result in assumptions about the status of the connection being
incorrect. For instance, when the negotiated connection selects a
different ALPN protocol from what was used for the early data, an
application might need to construct different messages.  Similarly, if
early data assumes anything about the connection state, it might be
sent in error after the handshake completes.</t>

<t>A TLS implementation SHOULD NOT automatically re-send early data;
applications are in a better position to decide when re-transmission
is appropriate. A TLS implementation MUST NOT automatically re-send
early data unless the negotiated connection selects the same ALPN
protocol.</t>

</section>
<section anchor="pre-shared-key-extension" title="Pre-Shared Key Extension">

<t>The “pre_shared_key” extension is used to negotiate the identity of the
pre-shared key to be used with a given handshake in association
with PSK key establishment.</t>

<t>The “extension_data” field of this extension contains a
“PreSharedKeyExtension” value:</t>

<figure><artwork><![CDATA[
   struct {
       opaque identity<1..2^16-1>;
       uint32 obfuscated_ticket_age;
   } PskIdentity;

   opaque PskBinderEntry<32..255>;

   struct {
       PskIdentity identities<7..2^16-1>;
       PskBinderEntry binders<33..2^16-1>;
   } OfferedPsks;

   struct {
       select (Handshake.msg_type) {
           case client_hello: OfferedPsks;
           case server_hello: uint16 selected_identity;
       };
   } PreSharedKeyExtension;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='identity'>
  A label for a key. For instance, a ticket defined
in <xref target="ticket-establishment"/> or a label for a pre-shared key
established externally.</t>
  <t hangText='obfuscated_ticket_age'>
  An obfuscated version of the age of the key.
<xref target="ticket-age"/> describes how to form this value
for identities established via the NewSessionTicket message.
For identities established externally an obfuscated_ticket_age of 0
SHOULD be used, and servers MUST ignore the value.</t>
  <t hangText='identities'>
  A list of the identities that the client is willing
to negotiate with the server. If sent alongside the “early_data”
extension (see <xref target="early-data-indication"/>), the first identity is the
one used for 0-RTT data.</t>
  <t hangText='binders'>
  A series of HMAC values, one for
each PSK offered in the “pre_shared_keys” extension and in the same
order, computed as described below.</t>
  <t hangText='selected_identity'>
  The server’s chosen identity expressed as a (0-based) index into
the identities in the client’s list.</t>
</list></t>

<t>Each PSK is associated with a single Hash algorithm. For PSKs established
via the ticket mechanism (<xref target="NSTMessage"/>), this is the KDF Hash algorithm
on the connection where the ticket was established.
For externally established PSKs, the Hash algorithm MUST be set when the
PSK is established, or default to SHA-256 if no such algorithm
is defined. The server MUST ensure that it selects a compatible
PSK (if any) and cipher suite.</t>

<t>In TLS versions prior to TLS 1.3, the Server Name Identification (SNI) value was
intended to be associated with the session (Section 3 of <xref target="RFC6066"/>), with the
server being required to enforce that the SNI value associated with the session
matches the one specified in the resumption handshake.  However, in reality the
implementations were not consistent on which of two supplied SNI values they
would use, leading to the consistency requirement being de-facto enforced by the
clients.  In TLS 1.3, the SNI value is always explicitly specified in the
resumption handshake, and there is no need for the server to associate an SNI value with the
ticket. Clients, however, SHOULD store the SNI with the PSK to fulfill
the requirements of <xref target="NSTMessage"/>.</t>

<t>Implementor’s note: when session resumption is the primary use case of PSKs
the most straightforward way to implement the
PSK/cipher suite matching requirements is to negotiate the cipher
suite first and then exclude any incompatible PSKs. Any unknown PSKs
(e.g., they are not in the PSK database or are encrypted with an
unknown key) SHOULD simply be ignored. If no acceptable PSKs are
found, the server SHOULD perform a non-PSK handshake if possible.
If backwards compatibility is important, client provided, externally
established PSKs SHOULD influence cipher suite selection.</t>

<t>Prior to accepting PSK key establishment, the server MUST validate the
corresponding binder value (see <xref target="psk-binder"/> below). If this value is
not present or does not validate, the server MUST abort the handshake.
Servers SHOULD NOT attempt to validate multiple binders; rather they
SHOULD select a single PSK and validate solely the binder that
corresponds to that PSK.
See [<xref target="client-hello-recording"/>] and [<xref target="psk-identity-exposure"/>] for the
security rationale for this requirement.
In order to accept PSK key establishment, the
server sends a “pre_shared_key” extension indicating the selected
identity.</t>

<t>Clients MUST verify that the server’s selected_identity is within the
range supplied by the client, that the server selected a cipher suite
indicating a Hash associated with the PSK and that a server
“key_share” extension is present if required by the
ClientHello “psk_key_exchange_modes”. If these values are not
consistent the client MUST abort the handshake with an
“illegal_parameter” alert.</t>

<t>If the server supplies an “early_data” extension, the client MUST
verify that the server’s selected_identity is 0. If any
other value is returned, the client MUST abort the handshake
with an “illegal_parameter” alert.</t>

<t>The “pre_shared_key” extension MUST be the last extension in the
ClientHello (this facilitates implementation as described
below). Servers MUST check that it is the last extension and otherwise
fail the handshake with an “illegal_parameter” alert.</t>

<section anchor="ticket-age" title="Ticket Age">

<t>The client’s view of the age of a ticket is the time since the receipt
of the NewSessionTicket message. Clients MUST NOT attempt to use
tickets which have ages greater than the “ticket_lifetime” value which
was provided with the ticket. The “obfuscated_ticket_age” field of
each PskIdentity contains an obfuscated version of the ticket age
formed by taking the age in milliseconds and adding the “ticket_age_add”
value that was included with the ticket (see <xref target="NSTMessage"/>), modulo 2^32.
This addition prevents passive observers from correlating connections
unless tickets are reused. Note that the “ticket_lifetime” field in
the NewSessionTicket message is in seconds but the “obfuscated_ticket_age”
is in milliseconds. Because ticket lifetimes are
restricted to a week, 32 bits is enough to represent any plausible
age, even in milliseconds.</t>

</section>
<section anchor="psk-binder" title="PSK Binder">

<t>The PSK binder value forms a binding between a PSK and the current
handshake, as well as a binding between the handshake in which the PSK was
generated (if via a NewSessionTicket message) and the current handshake.
Each entry in the binders list is computed as an HMAC
over a transcript hash (see <xref target="the-transcript-hash"/>) containing a partial ClientHello
up to and including the PreSharedKeyExtension.identities field. That
is, it includes all of the ClientHello but not the binders list
itself. The length fields for the message (including the overall
length, the length of the extensions block, and the length of the
“pre_shared_key” extension) are all set as if binders of the correct
lengths were present.</t>

<t>The PskBinderEntry is computed in the same way as the Finished
message (<xref target="finished"/>) but with the BaseKey being the binder_key
derived via the key schedule from the corresponding PSK which
is being offered (see <xref target="key-schedule"/>).</t>

<t>If the handshake includes a HelloRetryRequest, the initial ClientHello
and HelloRetryRequest are included in the transcript along with the
new ClientHello.  For instance, if the client sends ClientHello1, its
binder will be computed over:</t>

<figure><artwork><![CDATA[
   Transcript-Hash(Truncate(ClientHello1))
]]></artwork></figure>

<t>Where Truncate() removes the binders list from the ClientHello.</t>

<t>If the server responds with HelloRetryRequest, and the client then sends
ClientHello2, its binder will be computed over:</t>

<figure><artwork><![CDATA[
   Transcript-Hash(ClientHello1,
                   HelloRetryRequest,
                   Truncate(ClientHello2))
]]></artwork></figure>

<t>The full ClientHello1/ClientHello2 is included in all other handshake hash computations.
Note that in the first flight, Truncate(ClientHello1) is hashed directly,
but in the second flight, ClientHello1 is hashed and then reinjected as a
“message_hash” message, as described in <xref target="the-transcript-hash"/>.</t>

</section>
<section anchor="processing-order" title="Processing Order">

<t>Clients are permitted to “stream” 0-RTT data until they
receive the server’s Finished, only then sending the EndOfEarlyData
message, followed by the rest of the handshake.
In order to avoid deadlocks, when accepting “early_data”,
servers MUST process the client’s ClientHello and then immediately
send their flight of messages, rather than waiting for the client’s
EndOfEarlyData message before sending its ServerHello.</t>

</section>
</section>
</section>
<section anchor="server-parameters" title="Server Parameters">

<t>The next two messages from the server, EncryptedExtensions and
CertificateRequest, contain information from the server
that determines the rest of the handshake. These messages
are encrypted with keys derived from the server_handshake_traffic_secret.</t>

<section anchor="encrypted-extensions" title="Encrypted Extensions">

<t>In all handshakes, the server MUST send the
EncryptedExtensions message immediately after the
ServerHello message. This is the first message that is encrypted
under keys derived from the server_handshake_traffic_secret.</t>

<t>The EncryptedExtensions message contains extensions
that can be protected, i.e., any which are not needed to
establish the cryptographic context, but which are not
associated with individual certificates. The client
MUST check EncryptedExtensions for the presence of any forbidden
extensions and if any are found MUST abort the handshake with an
“illegal_parameter” alert.</t>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   struct {
       Extension extensions<0..2^16-1>;
   } EncryptedExtensions;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='extensions'>
  A list of extensions. For more information, see the table in <xref target="extensions"/>.</t>
</list></t>

</section>
<section anchor="certificate-request" title="Certificate Request">

<t>A server which is authenticating with a certificate MAY optionally
request a certificate from the client. This message, if sent, MUST
follow EncryptedExtensions.</t>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   struct {
       opaque certificate_request_context<0..2^8-1>;
       Extension extensions<2..2^16-1>;
   } CertificateRequest;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='certificate_request_context'>
  An opaque string which identifies the certificate request and
which will be echoed in the client’s Certificate message. The
certificate_request_context MUST be unique within the scope
of this connection (thus preventing replay of client
CertificateVerify messages). This field SHALL be zero length
unless used for the post-handshake authentication exchanges
described in <xref target="post-handshake-authentication"/>.
When requesting post-handshake authentication, the server SHOULD
make the context unpredictable to the client (e.g., by
randomly generating it) in order to prevent an attacker who
has temporary access to the client’s private key from
pre-computing valid CertificateVerify messages.</t>
  <t hangText='extensions'>
  A set of extensions describing the parameters of the
certificate being requested. The “signature_algorithms”
extension MUST be specified, and other extensions may optionally be
included if defined for this message.
Clients MUST ignore unrecognized extensions.</t>
</list></t>

<t>In prior versions of TLS, the CertificateRequest message
carried a list of signature algorithms and certificate authorities
which the server would accept. In TLS 1.3 the former is expressed
by sending the “signature_algorithms” and optionally “signature_algorithms_cert”
extensions. The latter is
expressed by sending the “certificate_authorities” extension
(see <xref target="certificate-authorities"/>).</t>

<t>Servers which are authenticating with a PSK MUST NOT send the
CertificateRequest message in the main handshake, though they
MAY send it in post-handshake authentication (see <xref target="post-handshake-authentication"/>)
provided that the client has sent the “post_handshake_auth”
extension (see <xref target="post_handshake_auth"/>).</t>

</section>
</section>
<section anchor="authentication-messages" title="Authentication Messages">

<t>As discussed in <xref target="protocol-overview"/>, TLS generally uses a common
set of messages for authentication, key confirmation, and handshake
integrity: Certificate, CertificateVerify, and Finished.
(The PreSharedKey binders also perform key confirmation, in a
similar fashion.) These three
messages are always sent as the last messages in their handshake
flight. The Certificate and CertificateVerify messages are only
sent under certain circumstances, as defined below. The Finished
message is always sent as part of the Authentication block.
These messages are encrypted under keys derived from
[sender]_handshake_traffic_secret.</t>

<t>The computations for the Authentication messages all uniformly
take the following inputs:</t>

<t><list style="symbols">
  <t>The certificate and signing key to be used.</t>
  <t>A Handshake Context consisting of the set of messages to be
included in the transcript hash.</t>
  <t>A base key to be used to compute a MAC key.</t>
</list></t>

<t>Based on these inputs, the messages then contain:</t>

<t><list style="hanging">
  <t hangText='Certificate'>
  The certificate to be used for authentication, and any
supporting certificates in the chain. Note that certificate-based
client authentication is not available in PSK (including 0-RTT) flows.</t>
  <t hangText='CertificateVerify'>
  A signature over the value Transcript-Hash(Handshake Context, Certificate)</t>
  <t hangText='Finished'>
  A MAC over the value Transcript-Hash(Handshake Context, Certificate, CertificateVerify)
using a MAC key derived from the base key.</t>
</list></t>

<t>The following table defines the Handshake Context and MAC Base Key
for each scenario:</t>

<texttable>
      <ttcol align='left'>Mode</ttcol>
      <ttcol align='left'>Handshake Context</ttcol>
      <ttcol align='left'>Base Key</ttcol>
      <c>Server</c>
      <c>ClientHello … later of EncryptedExtensions/CertificateRequest</c>
      <c>server_handshake_traffic_secret</c>
      <c>Client</c>
      <c>ClientHello … later of server Finished/EndOfEarlyData</c>
      <c>client_handshake_traffic_secret</c>
      <c>Post-Handshake</c>
      <c>ClientHello … client Finished + CertificateRequest</c>
      <c>client_application_traffic_secret_N</c>
</texttable>

<section anchor="the-transcript-hash" title="The Transcript Hash">

<t>Many of the cryptographic computations in TLS make use of a transcript
hash. This value is computed by hashing the concatenation of
each included handshake message, including the handshake
message header carrying the handshake message type and length fields,
but not including record layer headers. I.e.,</t>

<figure><artwork><![CDATA[
 Transcript-Hash(M1, M2, ... Mn) = Hash(M1 || M2 || ... || Mn)
]]></artwork></figure>

<t>As an exception to this general rule, when the server responds to a
ClientHello with a HelloRetryRequest, the value of ClientHello1 is
replaced with a special synthetic handshake message of handshake
type “message_hash” containing Hash(ClientHello1). I.e.,</t>

<figure><artwork><![CDATA[
 Transcript-Hash(ClientHello1, HelloRetryRequest, ... Mn) =
     Hash(message_hash ||        /* Handshake type */
          00 00 Hash.length ||   /* Handshake message length (bytes) */
          Hash(ClientHello1) ||  /* Hash of ClientHello1 */
          HelloRetryRequest || ... || Mn)
]]></artwork></figure>

<t>The reason for this construction is to allow the server to do a
stateless HelloRetryRequest by storing just the hash of ClientHello1
in the cookie, rather than requiring it to export the entire intermediate
hash state (see <xref target="cookie"/>).</t>

<t>For concreteness, the transcript hash is always taken from the
following sequence of handshake messages, starting at the first
ClientHello and including only those messages that were sent:
ClientHello, HelloRetryRequest, ClientHello, ServerHello,
EncryptedExtensions, server CertificateRequest, server Certificate,
server CertificateVerify, server Finished, EndOfEarlyData, client
Certificate, client CertificateVerify, client Finished.</t>

<t>In general, implementations can implement the transcript by keeping a
running transcript hash value based on the negotiated hash. Note,
however, that subsequent post-handshake authentications do not include
each other, just the messages through the end of the main handshake.</t>

</section>
<section anchor="certificate" title="Certificate">

<t>This message conveys the endpoint’s certificate chain to the peer.</t>

<t>The server MUST send a Certificate message whenever the agreed-upon
key exchange method uses certificates for authentication (this
includes all key exchange methods defined in this document except PSK).</t>

<t>The client MUST send a Certificate message if and only if the server has
requested client authentication via a CertificateRequest message
(<xref target="certificate-request"/>). If the server requests client authentication
but no suitable certificate is available, the client
MUST send a Certificate message containing no certificates (i.e., with
the “certificate_list” field having length 0).  A Finished message MUST
be sent regardless of whether the Certificate message is empty.</t>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   /* Managed by IANA */
   enum {
       X509(0),
       RawPublicKey(2),
       (255)
   } CertificateType;

   struct {
       select (certificate_type) {
           case RawPublicKey:
             /* From RFC 7250 ASN.1_subjectPublicKeyInfo */
             opaque ASN1_subjectPublicKeyInfo<1..2^24-1>;

           case X509:
             opaque cert_data<1..2^24-1>;
       };
       Extension extensions<0..2^16-1>;
   } CertificateEntry;

   struct {
       opaque certificate_request_context<0..2^8-1>;
       CertificateEntry certificate_list<0..2^24-1>;
   } Certificate;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='certificate_request_context'>
  If this message is in response to a CertificateRequest, the
value of certificate_request_context in that message. Otherwise
(in the case of server authentication), this field SHALL be zero length.</t>
  <t hangText='certificate_list'>
  This is a sequence (chain) of CertificateEntry structures, each
containing a single certificate and set of extensions.</t>
  <t hangText='extensions:'>
  A set of extension values for the CertificateEntry. The “Extension”
format is defined in <xref target="extensions"/>. Valid extensions for server certificates
at present include OCSP Status extension (<xref target="RFC6066"/>) and
SignedCertificateTimestamps (<xref target="RFC6962"/>); future extensions may
be defined for this message as well. Extensions in the Certificate
message from the server MUST correspond to ones from the ClientHello message.
Extensions in the Certificate from the client MUST correspond with
extensions in the CertificateRequest message from the server.
If an extension applies to the entire chain, it SHOULD be included
in the first CertificateEntry.</t>
</list></t>

<t>If the corresponding certificate type extension
(“server_certificate_type” or “client_certificate_type”) was not negotiated
in Encrypted Extensions, or the X.509 certificate type was negotiated, then each
CertificateEntry contains a DER-encoded X.509 certificate. The sender’s
certificate MUST come in the first CertificateEntry in the list.  Each
following certificate SHOULD directly certify the one immediately preceding it.
Because certificate validation requires that trust anchors be
distributed independently, a certificate that specifies a trust anchor
MAY be omitted from the chain, provided that supported peers are known
to possess any omitted certificates.</t>

<t>Note: Prior to TLS 1.3, “certificate_list” ordering required each certificate
to certify the one immediately preceding it;
however, some implementations allowed some flexibility. Servers sometimes send
both a current and deprecated intermediate for transitional purposes, and others
are simply configured incorrectly, but these cases can nonetheless be validated
properly. For maximum compatibility, all implementations SHOULD be prepared to
handle potentially extraneous certificates and arbitrary orderings from any TLS
version, with the exception of the end-entity certificate which MUST be first.</t>

<t>If the RawPublicKey certificate type was negotiated, then the
certificate_list MUST contain no more than one CertificateEntry, which
contains an ASN1_subjectPublicKeyInfo value as defined in <xref target="RFC7250"/>,
Section 3.</t>

<t>The OpenPGP certificate type <xref target="RFC6091"/> MUST NOT be used with TLS 1.3.</t>

<t>The server’s certificate_list MUST always be non-empty. A client will
send an empty certificate_list if it does not have an appropriate
certificate to send in response to the server’s authentication
request.</t>

<section anchor="ocsp-and-sct" title="OCSP Status and SCT Extensions">

<t><xref target="RFC6066"/> and <xref target="RFC6961"/> provide extensions to negotiate the server
sending OCSP responses to the client. In TLS 1.2 and below, the
server replies with an empty extension to indicate negotiation of this
extension and the OCSP information is carried in a CertificateStatus
message. In TLS 1.3, the server’s OCSP information is carried in
an extension in the CertificateEntry containing the associated
certificate. Specifically:
The body of the “status_request” extension
from the server MUST be a CertificateStatus structure as defined
in <xref target="RFC6066"/>, which is interpreted as defined in <xref target="RFC6960"/>.</t>

<t>Note: status_request_v2 extension (<xref target="RFC6961"/>) is deprecated. TLS 1.3 servers
MUST NOT act upon its presence or information in it when processing Client
Hello, in particular they MUST NOT send the status_request_v2 extension in the
Encrypted Extensions, Certificate Request or the Certificate messages.
TLS 1.3 servers MUST be able to process Client Hello messages that include it,
as it MAY be sent by clients that wish to use it in earlier protocol versions.</t>

<t>A server MAY request that a client present an OCSP response with its
certificate by sending an empty “status_request” extension in its
CertificateRequest message. If the client opts to send an OCSP response, the
body of its “status_request” extension MUST be a CertificateStatus structure as
defined in <xref target="RFC6066"/>.</t>

<t>Similarly, <xref target="RFC6962"/> provides a mechanism for a server to send a
Signed Certificate Timestamp (SCT) as an extension in the ServerHello
in TLS 1.2 and below.
In TLS 1.3, the server’s SCT information is carried in an extension in
CertificateEntry.</t>

</section>
<section anchor="server-certificate-selection" title="Server Certificate Selection">

<t>The following rules apply to the certificates sent by the server:</t>

<t><list style="symbols">
  <t>The certificate type MUST be X.509v3 <xref target="RFC5280"/>, unless explicitly negotiated
otherwise (e.g., <xref target="RFC7250"/>).</t>
  <t>The server’s end-entity certificate’s public key (and associated
restrictions) MUST be compatible with the selected authentication
algorithm from the client’s “signature_algorithms” extension
(currently RSA, ECDSA, or EdDSA).</t>
  <t>The certificate MUST allow the key to be used for signing (i.e., the
digitalSignature bit MUST be set if the Key Usage extension is present) with
a signature scheme indicated in the client’s “signature_algorithms”/”signature_algorithms_cert”
extensions (see <xref target="signature-algorithms"/>).</t>
  <t>The “server_name” <xref target="RFC6066"/> and “certificate_authorities” extensions are used to
guide certificate selection. As servers MAY require the presence of the “server_name”
extension, clients SHOULD send this extension, when applicable.</t>
</list></t>

<t>All certificates provided by the server MUST be signed by a
signature algorithm advertised by the client, if it is able to provide such
a chain (see <xref target="signature-algorithms"/>).
Certificates that are self-signed
or certificates that are expected to be trust anchors are not validated as
part of the chain and therefore MAY be signed with any algorithm.</t>

<t>If the server cannot produce a certificate chain that is signed only via the
indicated supported algorithms, then it SHOULD continue the handshake by sending
the client a certificate chain of its choice that may include algorithms
that are not known to be supported by the client.
This fallback chain SHOULD NOT use the deprecated SHA-1 hash algorithm in general,
but MAY do so if the client’s advertisement permits it,
and MUST NOT do so otherwise.</t>

<t>If the client cannot construct an acceptable chain using the provided
certificates and decides to abort the handshake, then it MUST abort the
handshake with an appropriate certificate-related alert (by default,
“unsupported_certificate”; see <xref target="error-alerts"/> for more).</t>

<t>If the server has multiple certificates, it chooses one of them based on the
above-mentioned criteria (in addition to other criteria, such as transport
layer endpoint, local configuration and preferences).</t>

</section>
<section anchor="client-certificate-selection" title="Client Certificate Selection">

<t>The following rules apply to certificates sent by the client:</t>

<t><list style="symbols">
  <t>The certificate type MUST be X.509v3 <xref target="RFC5280"/>, unless explicitly negotiated
otherwise (e.g., <xref target="RFC7250"/>).</t>
  <t>If the “certificate_authorities” extension in the CertificateRequest
message was present, at least one of the certificates in the certificate
chain SHOULD be issued by one of the listed CAs.</t>
  <t>The certificates MUST be signed using an acceptable signature
algorithm, as described in <xref target="certificate-request"/>.  Note that this
relaxes the constraints on certificate-signing algorithms found in
prior versions of TLS.</t>
  <t>If the CertificateRequest message contained a non-empty “oid_filters”
extension, the end-entity certificate MUST match the extension OIDs
that are recognized by the client, as described in <xref target="oid-filters"/>.</t>
</list></t>

<t>Note that, as with the server certificate, there are certificates that use
algorithm combinations that cannot be currently used with TLS.</t>

</section>
<section anchor="receiving-a-certificate-message" title="Receiving a Certificate Message">

<t>In general, detailed certificate validation procedures are out of scope for
TLS (see <xref target="RFC5280"/>). This section provides TLS-specific requirements.</t>

<t>If the server supplies an empty Certificate message, the client MUST abort
the handshake with a “decode_error” alert.</t>

<t>If the client does not send any certificates (i.e., it sends an empty
Certificate message),
the server MAY at its discretion either continue the handshake without client
authentication, or abort the handshake with a “certificate_required” alert. Also, if some
aspect of the certificate chain was unacceptable (e.g., it was not signed by a
known, trusted CA), the server MAY at its discretion either continue the
handshake (considering the client unauthenticated) or abort the handshake.</t>

<t>Any endpoint receiving any certificate which it would need to validate
using any signature algorithm using an MD5 hash MUST abort the
handshake with a “bad_certificate” alert.  SHA-1 is deprecated and it
is RECOMMENDED that any endpoint receiving any certificate which it
would need to validate using any signature algorithm using a SHA-1
hash abort the handshake with a “bad_certificate” alert. For clarity,
this means that endpoints MAY accept these algorithms for
certificates that are self-signed or are trust anchors.</t>

<t>All endpoints are RECOMMENDED to transition to SHA-256 or better as soon
as possible to maintain interoperability with implementations
currently in the process of phasing out SHA-1 support.</t>

<t>Note that a certificate containing a key for one signature algorithm
MAY be signed using a different signature algorithm (for instance,
an RSA key signed with an ECDSA key).</t>

</section>
</section>
<section anchor="certificate-verify" title="Certificate Verify">

<t>This message is used to provide explicit proof that an endpoint
possesses the private key corresponding to its certificate.
The CertificateVerify message also provides integrity for the handshake up
to this point. Servers MUST send this message when authenticating via a certificate.
Clients MUST send this message whenever authenticating via a certificate (i.e., when
the Certificate message is non-empty). When sent, this message MUST appear immediately
after the Certificate message and immediately prior to the Finished message.</t>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   struct {
       SignatureScheme algorithm;
       opaque signature<0..2^16-1>;
   } CertificateVerify;
]]></artwork></figure>

<t>The algorithm field specifies the signature algorithm used (see
<xref target="signature-algorithms"/> for the definition of this field). The
signature is a digital signature using that algorithm. The
content that is covered under the signature is the hash output as described in
<xref target="the-transcript-hash"/>, namely:</t>

<figure><artwork><![CDATA[
   Transcript-Hash(Handshake Context, Certificate)
]]></artwork></figure>

<t>The digital signature is then computed over the concatenation of:</t>

<t><list style="symbols">
  <t>A string that consists of octet 32 (0x20) repeated 64 times</t>
  <t>The context string</t>
  <t>A single 0 byte which serves as the separator</t>
  <t>The content to be signed</t>
</list></t>

<t>This structure is intended to prevent an attack on previous versions
of TLS in which the ServerKeyExchange format meant that
attackers could obtain a signature of a message with a chosen 32-byte
prefix (ClientHello.random). The initial 64-byte pad clears that prefix
along with the server-controlled ServerHello.random.</t>

<t>The context string for a server signature is:
“TLS 1.3, server CertificateVerify”
The context string for a client signature is:
“TLS 1.3, client CertificateVerify”
It is used to provide separation between signatures made in different
contexts, helping against potential cross-protocol attacks.</t>

<t>For example, if the transcript hash was 32 bytes of
01 (this length would make sense for SHA-256), the content covered by
the digital signature for a server CertificateVerify would be:</t>

<figure><artwork><![CDATA[
   2020202020202020202020202020202020202020202020202020202020202020
   2020202020202020202020202020202020202020202020202020202020202020
   544c5320312e332c207365727665722043657274696669636174655665726966
   79
   00
   0101010101010101010101010101010101010101010101010101010101010101
]]></artwork></figure>

<t>On the sender side the process for computing the signature field of the
CertificateVerify message takes as input:</t>

<t><list style="symbols">
  <t>The content covered by the digital signature</t>
  <t>The private signing key corresponding to the certificate sent in the
previous message</t>
</list></t>

<t>If the CertificateVerify message is sent by a server, the signature
algorithm MUST be one offered in the client’s “signature_algorithms” extension
unless no valid certificate chain can be produced without unsupported
algorithms (see <xref target="signature-algorithms"/>).</t>

<t>If sent by a client, the signature algorithm used in the signature
MUST be one of those present in the supported_signature_algorithms
field of the “signature_algorithms” extension in the CertificateRequest message.</t>

<t>In addition, the signature algorithm MUST be compatible with the key
in the sender’s end-entity certificate. RSA signatures MUST use an
RSASSA-PSS algorithm, regardless of whether RSASSA-PKCS1-v1_5 algorithms
appear in “signature_algorithms”. The SHA-1 algorithm MUST NOT be used
in any signatures of CertificateVerify messages.
All SHA-1 signature algorithms in this specification are defined solely
for use in legacy certificates and are not valid for CertificateVerify
signatures.</t>

<t>The receiver of a CertificateVerify message MUST verify the signature field.
The verification process takes as input:</t>

<t><list style="symbols">
  <t>The content covered by the digital signature</t>
  <t>The public key contained in the end-entity certificate found in the
associated Certificate message.</t>
  <t>The digital signature received in the signature field of the
CertificateVerify message</t>
</list></t>

<t>If the verification fails, the receiver MUST terminate the handshake
with a “decrypt_error” alert.</t>

</section>
<section anchor="finished" title="Finished">

<t>The Finished message is the final message in the authentication
block. It is essential for providing authentication of the handshake
and of the computed keys.</t>

<t>Recipients of Finished messages MUST verify that the contents are
correct and if incorrect MUST terminate the connection
with a “decrypt_error” alert.</t>

<t>Once a side has sent its Finished message and received and
validated the Finished message from its peer, it may begin to send and
receive application data over the connection. There are two
settings in which it is permitted to send data prior to
receiving the peer’s Finished:</t>

<t><list style="numbers">
  <t>Clients sending 0-RTT data as described in <xref target="early-data-indication"/>.</t>
  <t>Servers MAY send data after sending their first flight, but
because the handshake is not yet complete, they have no assurance
of either the peer’s identity or of its liveness (i.e.,
the ClientHello might have been replayed).</t>
</list></t>

<t>The key used to compute the Finished message is computed from the
Base key defined in <xref target="authentication-messages"/> using HKDF (see
<xref target="key-schedule"/>). Specifically:</t>

<figure><artwork><![CDATA[
finished_key =
    HKDF-Expand-Label(BaseKey, "finished", "", Hash.length)
]]></artwork></figure>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   struct {
       opaque verify_data[Hash.length];
   } Finished;
]]></artwork></figure>

<t>The verify_data value is computed as follows:</t>

<figure><artwork><![CDATA[
   verify_data =
       HMAC(finished_key,
            Transcript-Hash(Handshake Context,
                            Certificate*, CertificateVerify*))

   * Only included if present.
]]></artwork></figure>

<t>HMAC <xref target="RFC2104"/> uses the Hash algorithm for the handshake.
As noted above, the HMAC input can generally be implemented by a running
hash, i.e., just the handshake hash at this point.</t>

<t>In previous versions of TLS, the verify_data was always 12 octets long. In
TLS 1.3, it is the size of the HMAC output for the Hash used for the handshake.</t>

<t>Note: Alerts and any other record types are not handshake messages
and are not included in the hash computations.</t>

<t>Any records following a Finished message MUST be encrypted under the
appropriate application traffic key as described in <xref target="updating-traffic-keys"/>.
In particular, this includes any alerts sent by the
server in response to client Certificate and CertificateVerify messages.</t>

</section>
</section>
<section anchor="end-of-early-data" title="End of Early Data">

<figure><artwork><![CDATA[
   struct {} EndOfEarlyData;
]]></artwork></figure>

<t>If the server sent an “early_data” extension, the client MUST send an
EndOfEarlyData message after receiving the server Finished.  If the server does
not send an “early_data” extension, then the client MUST NOT send an
EndOfEarlyData message. This message indicates that all
0-RTT application_data messages, if any, have been transmitted and
that the following records are protected under handshake traffic keys.
Servers MUST NOT send this message and clients receiving it
MUST terminate the connection with an “unexpected_message” alert.
This message is encrypted under keys derived from the client_early_traffic_secret.</t>

</section>
<section anchor="post-handshake-messages" title="Post-Handshake Messages">

<t>TLS also allows other messages to be sent after the main handshake.
These messages use a handshake content type and are encrypted under the
appropriate application traffic key.</t>

<section anchor="NSTMessage" title="New Session Ticket Message">

<t>At any time after the server has received the client Finished message,
it MAY send a NewSessionTicket message. This message creates a unique
association between the ticket value and a secret PSK
derived from the resumption master secret (see <xref target="cryptographic-computations"/>.</t>

<t>The client MAY use this PSK for future handshakes by including the
ticket value in the “pre_shared_key” extension in its ClientHello
(<xref target="pre-shared-key-extension"/>). Servers MAY send multiple tickets on a
single connection, either immediately after each other or
after specific events (see <xref target="client-tracking"/>).
For instance, the server might send a new ticket after post-handshake
authentication in order to encapsulate the additional client
authentication state. Multiple tickets are useful for clients
for a variety of purposes, including:</t>

<t><list style="symbols">
  <t>Opening multiple parallel HTTP connections.</t>
  <t>Performing connection racing across interfaces and address families
via, e.g., Happy Eyeballs <xref target="RFC8305"/> or related techniques.</t>
</list></t>

<t>Any ticket MUST only be resumed with a cipher suite that has the
same KDF hash algorithm as that used to establish the original connection.</t>

<t>Clients MUST only resume if the new SNI value is valid for the server
certificate presented in the original session, and SHOULD only resume if
the SNI value matches the one used in the original session.  The latter
is a performance optimization: normally, there is no reason to expect
that different servers covered by a single certificate would be able to
accept each other’s tickets, hence attempting resumption in that case
would waste a single-use ticket.  If such an indication is provided
(externally or by any other means), clients MAY resume with a different
SNI value.</t>

<t>On resumption, if reporting an SNI value to the calling application,
implementations MUST use the value sent in the resumption ClientHello rather
than the value sent in the previous session. Note that if a server
implementation declines all PSK identities with different SNI values, these two
values are always the same.</t>

<t>Note: Although the resumption master secret depends on the client’s second
flight, servers which do not request client authentication MAY compute
the remainder of the transcript independently and then send a
NewSessionTicket immediately upon sending its Finished rather than
waiting for the client Finished.  This might be appropriate in cases
where the client is expected to open multiple TLS connections in
parallel and would benefit from the reduced overhead of a resumption
handshake, for example.</t>

<figure><artwork><![CDATA[
   struct {
       uint32 ticket_lifetime;
       uint32 ticket_age_add;
       opaque ticket_nonce<0..255>;
       opaque ticket<1..2^16-1>;
       Extension extensions<0..2^16-2>;
   } NewSessionTicket;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='ticket_lifetime'>
  Indicates the lifetime in seconds as a 32-bit unsigned integer in
network byte order from the time of ticket issuance.
Servers MUST NOT use any value greater than 604800 seconds (7 days).
The value of zero indicates that the ticket should be discarded
immediately. Clients MUST NOT cache tickets for longer than
7 days, regardless of the ticket_lifetime, and MAY delete tickets
earlier based on local policy. A server MAY treat a ticket as valid
for a shorter period of time than what is stated in the
ticket_lifetime.</t>
  <t hangText='ticket_age_add'>
  A securely generated, random 32-bit value that is used to obscure the age of
the ticket that the client includes in the “pre_shared_key” extension.
The client-side ticket age is added to this value modulo 2^32 to
obtain the value that is transmitted by the client.
The server MUST generate a fresh value for each ticket it sends.</t>
  <t hangText='ticket_nonce'>
  A per-ticket value that is unique across all tickets issued on this connection.</t>
  <t hangText='ticket'>
  The value of the ticket to be used as the PSK identity.
The ticket itself is an opaque label. It MAY either be a database
lookup key or a self-encrypted and self-authenticated value. Section
4 of <xref target="RFC5077"/> describes a recommended ticket construction mechanism.</t>
  <t hangText='extensions'>
  A set of extension values for the ticket. The “Extension”
format is defined in <xref target="extensions"/>. Clients MUST ignore
unrecognized extensions.</t>
</list></t>

<t>The sole extension currently defined for NewSessionTicket is
“early_data”, indicating that the ticket may be used to send 0-RTT data
(<xref target="early-data-indication"/>)). It contains the following value:</t>

<t><list style="hanging">
  <t hangText='max_early_data_size'>
  The maximum amount of 0-RTT data that the client is allowed to send when using
this ticket, in bytes. Only Application Data payload (i.e., plaintext but
not padding or the inner content type byte) is counted. A server
receiving more than max_early_data_size bytes of 0-RTT data
SHOULD terminate the connection with an “unexpected_message” alert.
Note that servers that reject early data due to lack of cryptographic material
will be unable to differentiate padding from content, so clients SHOULD NOT
depend on being able to send large quantities of padding in early data records.</t>
</list></t>

<t>The PSK associated with the ticket is computed as:</t>

<figure><artwork><![CDATA[
    HKDF-Expand-Label(resumption_master_secret,
                     "resumption", ticket_nonce, Hash.length)
]]></artwork></figure>

<t>Because the ticket_nonce value is distinct for each NewSessionTicket
message, a different PSK will be derived for each ticket.</t>

<t>Note that in principle it is possible to continue issuing new tickets
which indefinitely extend the lifetime of the keying
material originally derived from an initial non-PSK handshake (which
was most likely tied to the peer’s certificate). It is RECOMMENDED
that implementations place limits on the total lifetime of such keying
material; these limits should take into account the lifetime of the
peer’s certificate, the likelihood of intervening revocation,
and the time since the peer’s online CertificateVerify signature.</t>

</section>
<section anchor="post-handshake-authentication" title="Post-Handshake Authentication">

<t>When the client has sent the “post_handshake_auth” extension (see
<xref target="post_handshake_auth"/>), a server MAY request client authentication at any time
after the handshake has completed by sending a CertificateRequest message. The
client MUST respond with the appropriate Authentication messages (see
<xref target="authentication-messages"/>). If the client chooses to authenticate, it MUST
send Certificate, CertificateVerify, and Finished. If it declines, it MUST send
a Certificate message containing no certificates followed by Finished.
All of the client’s messages for a given response
MUST appear consecutively on the wire with no intervening messages of other types.</t>

<t>A client that receives a CertificateRequest message without having sent
the “post_handshake_auth” extension MUST send an “unexpected_message” fatal
alert.</t>

<t>Note: Because client authentication could involve prompting the user, servers
MUST be prepared for some delay, including receiving an arbitrary number of
other messages between sending the CertificateRequest and receiving a
response. In addition, clients which receive multiple CertificateRequests in
close succession MAY respond to them in a different order than they were
received (the certificate_request_context value allows the server to
disambiguate the responses).</t>

</section>
<section anchor="key-update" title="Key and IV Update">

<figure><artwork><![CDATA[
   enum {
       update_not_requested(0), update_requested(1), (255)
   } KeyUpdateRequest;

   struct {
       KeyUpdateRequest request_update;
   } KeyUpdate;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='request_update'>
  Indicates whether the recipient of the KeyUpdate should respond with its
own KeyUpdate. If an implementation receives any other value, it MUST
terminate the connection with an “illegal_parameter” alert.</t>
</list></t>

<t>The KeyUpdate handshake message is used to indicate that the sender is
updating its sending cryptographic keys. This message can be sent by
either peer after it has sent a Finished message.
Implementations that receive a KeyUpdate message prior to receiving a Finished message
MUST terminate the connection with an “unexpected_message” alert.
After sending a KeyUpdate message, the sender SHALL send all its traffic using the
next generation of keys, computed as described in <xref target="updating-traffic-keys"/>.
Upon receiving a KeyUpdate, the receiver MUST update its receiving keys.</t>

<t>If the request_update field is set to “update_requested” then the receiver MUST
send a KeyUpdate of its own with request_update set to “update_not_requested” prior
to sending its next application data record. This mechanism allows either side to force an update to the
entire connection, but causes an implementation which
receives multiple KeyUpdates while it is silent to respond with
a single update. Note that implementations may receive an arbitrary
number of messages between sending a KeyUpdate with request_update set
to update_requested and receiving the
peer’s KeyUpdate, because those messages may already be in flight.
However, because send and receive keys are derived from independent
traffic secrets, retaining the receive traffic secret does not threaten
the forward secrecy of data sent before the sender changed keys.</t>

<t>If implementations independently send their own KeyUpdates with
request_update set to “update_requested”, and they cross in flight, then each side
will also send a response, with the result that each side increments
by two generations.</t>

<t>Both sender and receiver MUST encrypt their KeyUpdate
messages with the old keys. Additionally, both sides MUST enforce that
a KeyUpdate with the old key is received before accepting any messages
encrypted with the new key. Failure to do so may allow message truncation
attacks.</t>

</section>
</section>
</section>
<section anchor="record-protocol" title="Record Protocol">

<t>The TLS record protocol takes messages to be transmitted, fragments
the data into manageable blocks, protects the records, and transmits
the result. Received data is verified, decrypted, reassembled, and
then delivered to higher-level clients.</t>

<t>TLS records are typed, which allows multiple higher-level protocols to
be multiplexed over the same record layer. This document specifies
four content types: handshake, application data, alert, and
change_cipher_spec.
The change_cipher_spec record is used only for compatibility purposes
(see <xref target="middlebox"/>).</t>

<t>An implementation may receive an unencrypted record of type
change_cipher_spec consisting of the single byte value 0x01 at any
time after the first ClientHello message has been sent or received and before
the peer’s Finished message has been received and MUST simply drop it without
further processing.  Note that this record may appear at a point at the
handshake where the implementation is expecting protected records
and so it is necessary to detect this
condition prior to attempting to deprotect the record. An
implementation which receives any other change_cipher_spec value or
which receives a protected change_cipher_spec record MUST abort the
handshake with an “unexpected_message” alert. A change_cipher_spec record
received before the first ClientHello message or after the peer’s Finished
message MUST be treated as an unexpected record type (though stateless
servers may not be able to distinguish these cases from allowed cases).</t>

<t>Implementations MUST NOT send record types not defined in this
document unless negotiated by some extension.  If a TLS implementation
receives an unexpected record type, it MUST terminate the connection
with an “unexpected_message” alert.  New record content type values
are assigned by IANA in the TLS Content Type Registry as described in
<xref target="iana-considerations"/>.</t>

<section anchor="record-layer" title="Record Layer">

<t>The record layer fragments information blocks into TLSPlaintext
records carrying data in chunks of 2^14 bytes or less. Message
boundaries are handled differently depending on the underlying
ContentType. Any future content types MUST specify appropriate
rules.
Note that these rules are stricter than what was enforced in TLS 1.2.</t>

<t>Handshake messages MAY be coalesced into a single TLSPlaintext
record or fragmented across several records, provided that:</t>

<t><list style="symbols">
  <t>Handshake messages MUST NOT be interleaved with other record
types. That is, if a handshake message is split over two or more
records, there MUST NOT be any other records between them.</t>
  <t>Handshake messages MUST NOT span key changes. Implementations MUST verify that
all messages immediately preceding a key change align with a record boundary;
if not, then they MUST terminate the connection with an “unexpected_message”
alert. Because the ClientHello, EndOfEarlyData, ServerHello, Finished, and
KeyUpdate messages can immediately precede a key change, implementations MUST
send these messages in alignment with a record boundary.</t>
</list></t>

<t>Implementations MUST NOT send zero-length fragments of Handshake
types, even if those fragments contain padding.</t>

<t>Alert messages (<xref target="alert-protocol"/>) MUST NOT be fragmented across
records and multiple Alert messages MUST NOT be coalesced into a
single TLSPlaintext record. In other words, a record with an Alert
type MUST contain exactly one message.</t>

<t>Application Data messages contain data that is opaque to
TLS. Application Data messages are always protected. Zero-length
fragments of Application Data MAY be sent as they are potentially
useful as a traffic analysis countermeasure.  Application Data fragments
MAY be split across multiple records or coalesced into a single record.</t>

<figure><artwork><![CDATA[
   enum {
       invalid(0),
       change_cipher_spec(20),
       alert(21),
       handshake(22),
       application_data(23),
       (255)
   } ContentType;

   struct {
       ContentType type;
       ProtocolVersion legacy_record_version;
       uint16 length;
       opaque fragment[TLSPlaintext.length];
   } TLSPlaintext;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='type'>
  The higher-level protocol used to process the enclosed fragment.</t>
  <t hangText='legacy_record_version'>
  This value MUST be set to 0x0303 for all records generated by a
TLS 1.3 implementation other than an initial ClientHello (i.e., one
not generated after a HelloRetryRequest), where it
MAY also be 0x0301 for compatibility purposes.
This field is deprecated and MUST be ignored for all purposes.
Previous versions of TLS would use other values in this field
under some circumstances.</t>
  <t hangText='length'>
  The length (in bytes) of the following TLSPlaintext.fragment. The
length MUST NOT exceed 2^14 bytes. An endpoint that receives a record
that exceeds this length MUST terminate the connection with a
“record_overflow” alert.</t>
  <t hangText='fragment'>
  The data being transmitted. This value is transparent and is treated as an
independent block to be dealt with by the higher-level protocol
specified by the type field.</t>
</list></t>

<t>This document describes TLS 1.3, which uses the version 0x0304.
This version value is historical, deriving from the use of 0x0301
for TLS 1.0 and 0x0300 for SSL 3.0. In order to maximize backwards
compatibility, records containing an initial ClientHello SHOULD have version
0x0301 and a record containing a second ClientHello or
a ServerHello MUST have version
0x0303, reflecting TLS 1.0 and TLS 1.2 respectively.
When negotiating prior versions of TLS, endpoints
follow the procedure and requirements in <xref target="backward-compatibility"/>.</t>

<t>When record protection has not yet been engaged, TLSPlaintext
structures are written directly onto the wire. Once record protection
has started, TLSPlaintext records are protected and sent as
described in the following section. Note that application data
records MUST NOT be written to the wire unprotected (see
<xref target="protocol-overview"/> for details).</t>

</section>
<section anchor="record-payload-protection" title="Record Payload Protection">

<t>The record protection functions translate a TLSPlaintext structure into a
TLSCiphertext. The deprotection functions reverse the process. In TLS 1.3,
as opposed to previous versions of TLS, all ciphers are modeled as
“Authenticated Encryption with Additional Data” (AEAD) <xref target="RFC5116"/>.
AEAD functions provide an unified encryption and authentication
operation which turns plaintext into authenticated ciphertext and
back again. Each encrypted record consists of a plaintext header followed
by an encrypted body, which itself contains a type and optional padding.</t>

<figure><artwork><![CDATA[
   struct {
       opaque content[TLSPlaintext.length];
       ContentType type;
       uint8 zeros[length_of_padding];
   } TLSInnerPlaintext;

   struct {
       ContentType opaque_type = application_data; /* 23 */
       ProtocolVersion legacy_record_version = 0x0303; /* TLS v1.2 */
       uint16 length;
       opaque encrypted_record[TLSCiphertext.length];
   } TLSCiphertext;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='content'>
  The TLSPLaintext.fragment value, containing the byte encoding of a
handshake or an alert message, or the raw bytes of the application’s
data to send.</t>
  <t hangText='type'>
  The TLSPlaintext.type value containing the content type of the record.</t>
  <t hangText='zeros'>
  An arbitrary-length run of zero-valued bytes may
appear in the cleartext after the type field.  This provides an
opportunity for senders to pad any TLS record by a chosen amount as
long as the total stays within record size limits.  See
<xref target="record-padding"/> for more details.</t>
  <t hangText='opaque_type'>
  The outer opaque_type field of a TLSCiphertext record is always set to the
value 23 (application_data) for outward compatibility with
middleboxes accustomed to parsing previous versions of TLS.  The
actual content type of the record is found in TLSInnerPlaintext.type after
decryption.</t>
  <t hangText='legacy_record_version'>
  The legacy_record_version field is always 0x0303.  TLS 1.3 TLSCiphertexts
are not generated until after TLS 1.3 has been negotiated, so there are
no historical compatibility concerns where other values might be received.
Note that the handshake protocol including the ClientHello and ServerHello
messages authenticates the protocol version, so this value is redundant.</t>
  <t hangText='length'>
  The length (in bytes) of the following TLSCiphertext.encrypted_record, which
is the sum of the lengths of the content and the padding, plus one
for the inner content type, plus any expansion added by the AEAD algorithm.
The length MUST NOT exceed 2^14 + 256 bytes.
An endpoint that receives a record that exceeds this length MUST
terminate the connection with a “record_overflow” alert.</t>
  <t hangText='encrypted_record'>
  The AEAD-encrypted form of the serialized TLSInnerPlaintext structure.</t>
</list></t>

<t>AEAD algorithms take as input a single key, a nonce, a plaintext, and “additional
data” to be included in the authentication check, as described in Section 2.1
of <xref target="RFC5116"/>. The key is either the client_write_key or the server_write_key,
the nonce is derived from the sequence number and the
client_write_iv or server_write_iv (see <xref target="nonce"/>), and the additional data input is the
record header. I.e.,</t>

<figure><artwork><![CDATA[
   additional_data = TLSCiphertext.opaque_type ||
                     TLSCiphertext.legacy_record_version ||
                     TLSCiphertext.length
]]></artwork></figure>

<t>The plaintext input to the AEAD algorithm is the encoded TLSInnerPlaintext structure.
Derivation of traffic keys is defined in <xref target="traffic-key-calculation"/>.</t>

<t>The AEAD output consists of the ciphertext output from the AEAD
encryption operation. The length of the plaintext is greater than the
corresponding TLSPlaintext.length due to the inclusion of TLSInnerPlaintext.type and
any padding supplied by the sender. The length of the
AEAD output will generally be larger than the plaintext, but by an
amount that varies with the AEAD algorithm. Since the ciphers might
incorporate padding, the amount of overhead could vary with different
lengths of plaintext. Symbolically,</t>

<figure><artwork><![CDATA[
   AEADEncrypted =
       AEAD-Encrypt(write_key, nonce, additional_data, plaintext)
]]></artwork></figure>

<t>Then the encrypted_record field of TLSCiphertext is set to AEADEncrypted.</t>

<t>In order to decrypt and verify, the cipher takes as input the key, nonce,
additional data, and the AEADEncrypted value. The output is either the plaintext
or an error indicating that the decryption failed. There is no separate
integrity check. That is:</t>

<figure><artwork><![CDATA[
   plaintext of encrypted_record =
       AEAD-Decrypt(peer_write_key, nonce, additional_data, AEADEncrypted)
]]></artwork></figure>

<t>If the decryption fails, the receiver MUST terminate the connection
with a “bad_record_mac” alert.</t>

<t>An AEAD algorithm used in TLS 1.3 MUST NOT produce an expansion greater than
255 octets. An endpoint that receives a record from its peer with
TLSCiphertext.length larger than 2^14 + 256 octets MUST terminate
the connection with a “record_overflow” alert.
This limit is derived from the maximum TLSInnerPlaintext length of
2^14 octets + 1 octet for ContentType + the maximum AEAD expansion of 255 octets.</t>

</section>
<section anchor="nonce" title="Per-Record Nonce">

<t>A 64-bit sequence number is maintained separately for reading and writing
records. The appropriate sequence number is incremented by one after
reading or writing each record.  Each sequence number is set to zero
at the beginning of a connection and whenever the key is changed; the
first record transmitted under a particular traffic key MUST use
sequence number 0.</t>

<t>Because the size of sequence numbers is 64-bit, they should not
wrap. If a TLS implementation would need to
wrap a sequence number, it MUST either re-key (<xref target="key-update"/>) or
terminate the connection.</t>

<t>Each AEAD algorithm will specify a range of possible lengths for the
per-record nonce, from N_MIN bytes to N_MAX bytes of input (<xref target="RFC5116"/>).
The length of the TLS per-record nonce (iv_length) is set to the larger of
8 bytes and N_MIN for the AEAD algorithm (see <xref target="RFC5116"/> Section 4).
An AEAD algorithm where N_MAX is less than 8 bytes MUST NOT be used with TLS.
The per-record nonce for the AEAD construction is formed as follows:</t>

<t><list style="numbers">
  <t>The 64-bit record sequence number is encoded in network byte order
and padded to the left with zeros to iv_length.</t>
  <t>The padded sequence number is XORed with the static client_write_iv
or server_write_iv, depending on the role.</t>
</list></t>

<t>The resulting quantity (of length iv_length) is used as the per-record nonce.</t>

<t>Note: This is a different construction from that in TLS 1.2, which
specified a partially explicit nonce.</t>

</section>
<section anchor="record-padding" title="Record Padding">

<t>All encrypted TLS records can be padded to inflate the size of the
TLSCiphertext.  This allows the sender to hide the size of the
traffic from an observer.</t>

<t>When generating a TLSCiphertext record, implementations MAY choose to pad.
An unpadded record is just a record with a padding length of zero.
Padding is a string of zero-valued bytes appended to the ContentType
field before encryption.  Implementations MUST set the padding octets
to all zeros before encrypting.</t>

<t>Application Data records may contain a zero-length TLSInnerPlaintext.content if
the sender desires.  This permits generation of plausibly-sized cover
traffic in contexts where the presence or absence of activity may be
sensitive.  Implementations MUST NOT send Handshake or Alert records
that have a zero-length TLSInnerPlaintext.content; if such a message
is received, the receiving implementation MUST terminate the connection
with an “unexpected_message” alert.</t>

<t>The padding sent is automatically verified by the record protection
mechanism; upon successful decryption of a TLSCiphertext.encrypted_record,
the receiving implementation scans the field from the end toward the
beginning until it finds a non-zero octet. This non-zero octet is the
content type of the message.
This padding scheme was selected because it allows padding of any encrypted
TLS record by an arbitrary size (from zero up to TLS record size
limits) without introducing new content types.  The design also
enforces all-zero padding octets, which allows for quick detection of
padding errors.</t>

<t>Implementations MUST limit their scanning to the cleartext returned
from the AEAD decryption.  If a receiving implementation does not find
a non-zero octet in the cleartext, it MUST terminate the
connection with an “unexpected_message” alert.</t>

<t>The presence of padding does not change the overall record size limitations
- the full encoded TLSInnerPlaintext MUST NOT exceed 2^14 + 1 octets. If the
maximum fragment length is reduced, as for example by the max_fragment_length
extension from <xref target="RFC6066"></xref>, then the reduced limit applies to the full plaintext,
including the content type and padding.</t>

<t>Selecting a padding policy that suggests when and how much to pad is a
complex topic and is beyond the scope of this specification. If the
application layer protocol on top of TLS has its own padding, it may be
preferable to pad application_data TLS records within the application
layer.  Padding for encrypted handshake and alert TLS records must
still be handled at the TLS layer, though.  Later documents may define
padding selection algorithms or define a padding policy request
mechanism through TLS extensions or some other means.</t>

</section>
<section anchor="limits-on-key-usage" title="Limits on Key Usage">

<t>There are cryptographic limits on the amount of plaintext which can be
safely encrypted under a given set of keys.  <xref target="AEAD-LIMITS"/> provides
an analysis of these limits under the assumption that the underlying
primitive (AES or ChaCha20) has no weaknesses. Implementations SHOULD
do a key update as described in <xref target="key-update"/> prior to reaching these limits.</t>

<t>For AES-GCM, up to 2^24.5 full-size records (about 24 million)
may be encrypted on a given connection while keeping a safety
margin of approximately 2^-57 for Authenticated Encryption (AE) security.
For ChaCha20/Poly1305, the record sequence number would wrap before the
safety limit is reached.</t>

</section>
</section>
<section anchor="alert-protocol" title="Alert Protocol">

<t>One of the content types supported by the TLS record layer is the
alert type.  Like other messages, alert messages are encrypted as
specified by the current connection state.</t>

<t>Alert messages convey a description of the alert and a legacy field
that conveyed the severity of the message in previous versions of
TLS. Alerts are divided into
two classes: closure alerts and error alerts.  In TLS 1.3, the
severity is implicit in the type of alert
being sent, and the ‘level’ field can safely be ignored. The “close_notify” alert
is used to indicate orderly closure of one direction of the connection.
Upon receiving such an alert, the TLS implementation SHOULD
indicate end-of-data to the application.</t>

<t>Error alerts indicate abortive closure of the
connection (see <xref target="error-alerts"/>). Upon receiving an error alert,
the TLS implementation SHOULD indicate an error to the application and
MUST NOT allow any further data to be sent or received on the
connection.  Servers and clients MUST forget the secret values and
keys established in failed connections, with the exception of
the PSKs associated with session tickets, which SHOULD be discarded if
possible.</t>

<t>All the alerts listed in <xref target="error-alerts"/> MUST be sent with
AlertLevel=fatal and MUST be treated as error alerts
regardless of the AlertLevel in the
message. Unknown alert types MUST be treated as error alerts.</t>

<t>Note: TLS defines two generic alerts (see <xref target="alert-protocol"/>) to use
upon failure to parse a message. Peers which receive a message which
cannot be parsed according to the syntax (e.g., have a length
extending beyond the message boundary or contain an out-of-range
length) MUST terminate the connection with a “decode_error”
alert. Peers which receive a message which is syntactically correct
but semantically invalid (e.g., a DHE share of p - 1, or an invalid
enum) MUST terminate the connection with an “illegal_parameter” alert.</t>

<figure><artwork><![CDATA[
   enum { warning(1), fatal(2), (255) } AlertLevel;

   enum {
       close_notify(0),
       unexpected_message(10),
       bad_record_mac(20),
       record_overflow(22),
       handshake_failure(40),
       bad_certificate(42),
       unsupported_certificate(43),
       certificate_revoked(44),
       certificate_expired(45),
       certificate_unknown(46),
       illegal_parameter(47),
       unknown_ca(48),
       access_denied(49),
       decode_error(50),
       decrypt_error(51),
       protocol_version(70),
       insufficient_security(71),
       internal_error(80),
       inappropriate_fallback(86),
       user_canceled(90),
       missing_extension(109),
       unsupported_extension(110),
       unrecognized_name(112),
       bad_certificate_status_response(113),
       unknown_psk_identity(115),
       certificate_required(116),
       no_application_protocol(120),
       (255)
   } AlertDescription;

   struct {
       AlertLevel level;
       AlertDescription description;
   } Alert;
]]></artwork></figure>

<section anchor="closure-alerts" title="Closure Alerts">

<t>The client and the server must share knowledge that the connection is ending in
order to avoid a truncation attack.</t>

<t><list style="hanging">
  <t hangText='close_notify'>
  This alert notifies the recipient that the sender will not send
any more messages on this connection. Any data received after a
closure alert has been received MUST be ignored.</t>
  <t hangText='user_canceled'>
  This alert notifies the recipient that the sender is canceling the
handshake for some reason unrelated to a protocol failure. If a user
cancels an operation after the handshake is complete, just closing the
connection by sending a “close_notify” is more appropriate. This alert
SHOULD be followed by a “close_notify”. This alert generally
has AlertLevel=warning.</t>
</list></t>

<t>Either party MAY initiate a close of its write side of the connection by
sending a “close_notify” alert. Any data received after a closure alert has
been received MUST be ignored. If a transport-level close is received prior
to a “close_notify”, the receiver cannot know that all the data that was sent
has been received.</t>

<t>Each party MUST send a “close_notify” alert before closing its write side
of the connection, unless it has already sent some error alert. This
does not have any effect on its read side of the connection. Note that this is
a change from versions of TLS prior to TLS 1.3 in which implementations were
required to react to a “close_notify” by discarding pending writes and
sending an immediate “close_notify” alert of their own. That previous
requirement could cause truncation in the read side. Both parties need not
wait to receive a “close_notify” alert before closing their read side of the
connection, though doing so would introduce the possibility of truncation.</t>

<t>If the application protocol using TLS provides that any data may be carried
over the underlying transport after the TLS connection is closed, the TLS
implementation MUST receive a “close_notify” alert before indicating
end-of-data to the application-layer. No part of this
standard should be taken to dictate the manner in which a usage profile for TLS
manages its data transport, including when connections are opened or closed.</t>

<t>Note: It is assumed that closing the write side of a connection reliably
delivers pending data before destroying the transport.</t>

</section>
<section anchor="error-alerts" title="Error Alerts">

<t>Error handling in the TLS Handshake Protocol is very simple. When an
error is detected, the detecting party sends a message to its
peer. Upon transmission or receipt of a fatal alert message, both
parties MUST immediately close the connection.</t>

<t>Whenever an implementation encounters a fatal error condition, it
SHOULD send an appropriate fatal alert and MUST close the connection
without sending or receiving any additional data. In the rest of this
specification, when the phrases “terminate the connection” and “abort the
handshake” are used without a specific alert it means that the
implementation SHOULD send the alert indicated by the descriptions
below. The phrases “terminate the connection with a X alert” and
“abort the handshake with a X alert” mean that the implementation
MUST send alert X if it sends any alert. All
alerts defined in this section below, as well as all unknown alerts,
are universally considered fatal as of TLS 1.3 (see <xref target="alert-protocol"/>).
The implementation SHOULD provide a way to facilitate logging
the sending and receiving of alerts.</t>

<t>The following error alerts are defined:</t>

<t><list style="hanging">
  <t hangText='unexpected_message'>
  An inappropriate message (e.g., the wrong handshake message, premature
application data, etc.) was received. This alert should never be
observed in communication between proper implementations.</t>
  <t hangText='bad_record_mac'>
  This alert is returned if a record is received which cannot be
deprotected. Because AEAD algorithms combine decryption and
verification, and also to avoid side channel attacks,
this alert is used for all deprotection failures.
This alert should never be observed in communication between
proper implementations, except when messages were corrupted
in the network.</t>
  <t hangText='record_overflow'>
  A TLSCiphertext record was received that had a length more than
2^14 + 256 bytes, or a record decrypted to a TLSPlaintext record
with more than 2^14 bytes (or some other negotiated limit).
This alert should never be observed in communication between
proper implementations, except when messages were corrupted
in the network.</t>
  <t hangText='handshake_failure'>
  Receipt of a “handshake_failure” alert message indicates that the
sender was unable to negotiate an acceptable set of security
parameters given the options available.</t>
  <t hangText='bad_certificate'>
  A certificate was corrupt, contained signatures that did not
verify correctly, etc.</t>
  <t hangText='unsupported_certificate'>
  A certificate was of an unsupported type.</t>
  <t hangText='certificate_revoked'>
  A certificate was revoked by its signer.</t>
  <t hangText='certificate_expired'>
  A certificate has expired or is not currently valid.</t>
  <t hangText='certificate_unknown'>
  Some other (unspecified) issue arose in processing the
certificate, rendering it unacceptable.</t>
  <t hangText='illegal_parameter'>
  A field in the handshake was incorrect or inconsistent with
other fields. This alert is used for errors which conform to
the formal protocol syntax but are otherwise incorrect.</t>
  <t hangText='unknown_ca'>
  A valid certificate chain or partial chain was received, but the
certificate was not accepted because the CA certificate could not
be located or could not be matched with a known trust anchor.</t>
  <t hangText='access_denied'>
  A valid certificate or PSK was received, but when access control was
applied, the sender decided not to proceed with negotiation.</t>
  <t hangText='decode_error'>
  A message could not be decoded because some field was out of the
specified range or the length of the message was incorrect.
This alert is used for errors where the message does not conform
to the formal protocol syntax.
This alert should never be observed in communication between
proper implementations, except when messages were corrupted
in the network.</t>
  <t hangText='decrypt_error'>
  A handshake (not record-layer) cryptographic operation failed, including being unable
to correctly verify a signature or validate a Finished message
or a PSK binder.</t>
  <t hangText='protocol_version'>
  The protocol version the peer has attempted to negotiate is
recognized but not supported. (see <xref target="backward-compatibility"/>)</t>
  <t hangText='insufficient_security'>
  Returned instead of “handshake_failure” when a negotiation has
failed specifically because the server requires parameters more
secure than those supported by the client.</t>
  <t hangText='internal_error'>
  An internal error unrelated to the peer or the correctness of the
protocol (such as a memory allocation failure) makes it impossible
to continue.</t>
  <t hangText='inappropriate_fallback'>
  Sent by a server in response to an invalid connection retry attempt
from a client (see <xref target="RFC7507"/>).</t>
  <t hangText='missing_extension'>
  Sent by endpoints that receive a handshake message not containing an
extension that is mandatory to send for the offered TLS version
or other negotiated parameters.</t>
  <t hangText='unsupported_extension'>
  Sent by endpoints receiving any handshake message containing an extension
known to be prohibited for inclusion in the given handshake message, or including
any extensions in a ServerHello or Certificate not first offered in the
corresponding ClientHello.</t>
  <t hangText='unrecognized_name'>
  Sent by servers when no server exists identified by the name
provided by the client via the “server_name” extension
(see <xref target="RFC6066"/>).</t>
  <t hangText='bad_certificate_status_response'>
  Sent by clients when an invalid or unacceptable OCSP response is
provided by the server via the “status_request” extension
(see <xref target="RFC6066"/>).</t>
  <t hangText='unknown_psk_identity'>
  Sent by servers when PSK key establishment is desired but no
 acceptable PSK identity is provided by the client. Sending this alert
 is OPTIONAL; servers MAY instead choose to send a “decrypt_error”
 alert to merely indicate an invalid PSK identity.</t>
  <t hangText='certificate_required'>
  Sent by servers when a client certificate is desired but none was provided by
the client.</t>
  <t hangText='no_application_protocol'>
  Sent by servers when a client
“application_layer_protocol_negotiation” extension advertises
only protocols that the server does not support
(see <xref target="RFC7301"/>).</t>
</list></t>

<t>New Alert values are assigned by IANA as described in <xref target="iana-considerations"/>.</t>

</section>
</section>
<section anchor="cryptographic-computations" title="Cryptographic Computations">

<t>The TLS handshake establishes one or more input secrets which
are combined to create the actual working keying material, as detailed
below. The key derivation process incorporates both the input secrets
and the handshake transcript. Note that because the handshake
transcript includes the random values from the Hello messages,
any given handshake will have different traffic secrets, even
if the same input secrets are used, as is the case when
the same PSK is used for multiple connections.</t>

<section anchor="key-schedule" title="Key Schedule">

<t>The key derivation process makes use of the HKDF-Extract and HKDF-Expand
functions as defined for HKDF <xref target="RFC5869"/>, as well as the functions
defined below:</t>

<figure><artwork><![CDATA[
    HKDF-Expand-Label(Secret, Label, Context, Length) =
         HKDF-Expand(Secret, HkdfLabel, Length)

    Where HkdfLabel is specified as:

    struct {
        uint16 length = Length;
        opaque label<7..255> = "tls13 " + Label;
        opaque context<0..255> = Context;
    } HkdfLabel;

    Derive-Secret(Secret, Label, Messages) =
         HKDF-Expand-Label(Secret, Label,
                           Transcript-Hash(Messages), Hash.length)
]]></artwork></figure>

<t>The Hash function used by Transcript-Hash and HKDF is the cipher suite hash
algorithm.
Hash.length is its output length in bytes. Messages is the concatenation of the
indicated handshake messages, including the handshake message type
and length fields, but not including record layer headers. Note that
in some cases a zero-length Context (indicated by “”) is passed to
HKDF-Expand-Label.  The Labels specified in this document are all
ASCII strings, and do not include a trailing NUL byte.</t>

<t>Note: with common hash functions, any label longer than 12 characters
requires an additional iteration of the hash function to compute.
The labels in this specification have all been chosen to fit within
this limit.</t>

<t>Keys are derived from two input secrets using
the HKDF-Extract and Derive-Secret functions. The general pattern
for adding a new secret is to use HKDF-Extract with the salt
being the current secret state and the IKM being the new
secret to be added. In this version of TLS 1.3, the two
input secrets are:</t>

<t><list style="symbols">
  <t>PSK (a pre-shared key established externally or derived from
the resumption_master_secret value from a previous connection)</t>
  <t>(EC)DHE shared secret (<xref target="ecdhe-shared-secret-calculation"/>)</t>
</list></t>

<t>This produces a full key derivation schedule shown in the diagram below.
In this diagram, the following formatting conventions apply:</t>

<t><list style="symbols">
  <t>HKDF-Extract is drawn as taking the Salt argument from the top and
the IKM argument from the left, with its output to the bottom and
the name of the output on the right.</t>
  <t>Derive-Secret’s Secret argument is indicated by the incoming
arrow. For instance, the Early Secret is the Secret for
generating the client_early_traffic_secret.</t>
  <t>“0” indicates a string of Hash-lengths bytes set to 0.</t>
</list></t>

<figure><artwork><![CDATA[
                 0
                 |
                 v
   PSK ->  HKDF-Extract = Early Secret
                 |
                 +-----> Derive-Secret(.,
                 |                     "ext binder" |
                 |                     "res binder",
                 |                     "")
                 |                     = binder_key
                 |
                 +-----> Derive-Secret(., "c e traffic",
                 |                     ClientHello)
                 |                     = client_early_traffic_secret
                 |
                 +-----> Derive-Secret(., "e exp master",
                 |                     ClientHello)
                 |                     = early_exporter_master_secret
                 v
           Derive-Secret(., "derived", "")
                 |
                 v
(EC)DHE -> HKDF-Extract = Handshake Secret
                 |
                 +-----> Derive-Secret(., "c hs traffic",
                 |                     ClientHello...ServerHello)
                 |                     = client_handshake_traffic_secret
                 |
                 +-----> Derive-Secret(., "s hs traffic",
                 |                     ClientHello...ServerHello)
                 |                     = server_handshake_traffic_secret
                 v
           Derive-Secret(., "derived", "")
                 |
                 v
      0 -> HKDF-Extract = Master Secret
                 |
                 +-----> Derive-Secret(., "c ap traffic",
                 |                     ClientHello...server Finished)
                 |                     = client_application_traffic_secret_0
                 |
                 +-----> Derive-Secret(., "s ap traffic",
                 |                     ClientHello...server Finished)
                 |                     = server_application_traffic_secret_0
                 |
                 +-----> Derive-Secret(., "exp master",
                 |                     ClientHello...server Finished)
                 |                     = exporter_master_secret
                 |
                 +-----> Derive-Secret(., "res master",
                                       ClientHello...client Finished)
                                       = resumption_master_secret
]]></artwork></figure>

<t>The general pattern here is that the secrets shown down the left side
of the diagram are just raw entropy without context, whereas the
secrets down the right side include handshake context and therefore
can be used to derive working keys without additional context.
Note that the different
calls to Derive-Secret may take different Messages arguments,
even with the same secret. In a 0-RTT exchange, Derive-Secret is
called with four distinct transcripts; in a 1-RTT-only exchange
with three distinct transcripts.</t>

<t>If a given secret is not available, then the 0-value consisting of
a string of Hash.length bytes set to zeros is used.  Note that this does not mean skipping
rounds, so if PSK is not in use Early Secret will still be
HKDF-Extract(0, 0). For the computation of the binder_secret, the label is
“ext binder” for external PSKs (those provisioned outside of TLS)
and “res binder” for resumption PSKs (those provisioned as the resumption
master secret of a previous handshake). The different labels prevent
the substitution of one type of PSK for the other.</t>

<t>There are multiple potential Early Secret values depending on
which PSK the server ultimately selects. The client will need to compute
one for each potential PSK; if no PSK is selected, it will then need to
compute the early secret corresponding to the zero PSK.</t>

<t>Once all the values which are to be derived from a given secret have
been computed, that secret SHOULD be erased.</t>

</section>
<section anchor="updating-traffic-keys" title="Updating Traffic Secrets">

<t>Once the handshake is complete, it is possible for either side to
update its sending traffic keys using the KeyUpdate handshake message
defined in <xref target="key-update"/>.  The next generation of traffic keys is computed by
generating client_/server_application_traffic_secret_N+1 from
client_/server_application_traffic_secret_N as described in
this section then re-deriving the traffic keys as described in
<xref target="traffic-key-calculation"/>.</t>

<t>The next-generation application_traffic_secret is computed as:</t>

<figure><artwork><![CDATA[
    application_traffic_secret_N+1 =
        HKDF-Expand-Label(application_traffic_secret_N,
                          "traffic upd", "", Hash.length)
]]></artwork></figure>

<t>Once client/server_application_traffic_secret_N+1 and its associated
traffic keys have been computed, implementations SHOULD delete
client_/server_application_traffic_secret_N and its associated traffic keys.</t>

</section>
<section anchor="traffic-key-calculation" title="Traffic Key Calculation">

<t>The traffic keying material is generated from the following input values:</t>

<t><list style="symbols">
  <t>A secret value</t>
  <t>A purpose value indicating the specific value being generated</t>
  <t>The length of the key being generated</t>
</list></t>

<t>The traffic keying material is generated from an input traffic secret value using:</t>

<figure><artwork><![CDATA[
    [sender]_write_key = HKDF-Expand-Label(Secret, "key", "", key_length)
    [sender]_write_iv  = HKDF-Expand-Label(Secret, "iv" , "", iv_length)
]]></artwork></figure>

<t>[sender] denotes the sending side. The Secret value for each record type
is shown in the table below.</t>

<texttable>
      <ttcol align='left'>Record Type</ttcol>
      <ttcol align='left'>Secret</ttcol>
      <c>0-RTT Application</c>
      <c>client_early_traffic_secret</c>
      <c>Handshake</c>
      <c>[sender]_handshake_traffic_secret</c>
      <c>Application Data</c>
      <c>[sender]_application_traffic_secret_N</c>
</texttable>

<t>All the traffic keying material is recomputed whenever the
underlying Secret changes (e.g., when changing from the handshake to
application data keys or upon a key update).</t>

</section>
<section anchor="ecdhe-shared-secret-calculation" title="(EC)DHE Shared Secret Calculation">

<section anchor="finite-field-diffie-hellman" title="Finite Field Diffie-Hellman">

<t>For finite field groups, a conventional Diffie-Hellman
<xref target="DH76"/> computation is performed.
The negotiated key (Z) is converted to a byte string by encoding in big-endian and
left padded with zeros up to the size of the prime. This byte string is used as the
shared secret in the key schedule as specified above.</t>

<t>Note that this construction differs from previous versions of TLS which remove
leading zeros.</t>

</section>
<section anchor="elliptic-curve-diffie-hellman" title="Elliptic Curve Diffie-Hellman">

<t>For secp256r1, secp384r1 and secp521r1, ECDH calculations (including parameter
and key generation as well as the shared secret calculation) are
performed according to <xref target="IEEE1363"/> using the ECKAS-DH1 scheme with the identity
map as key derivation function (KDF), so that the shared secret is the
x-coordinate of the ECDH shared secret elliptic curve point represented
as an octet string.  Note that this octet string (Z in IEEE 1363 terminology)
as output by FE2OSP, the Field Element to Octet String Conversion
Primitive, has constant length for any given field; leading zeros
found in this octet string MUST NOT be truncated.</t>

<t>(Note that this use of the identity KDF is a technicality.  The
complete picture is that ECDH is employed with a non-trivial KDF
because TLS does not directly use this secret for anything
other than for computing other secrets.)</t>

<t>ECDH functions are used as follows:</t>

<t><list style="symbols">
  <t>The public key to put into the KeyShareEntry.key_exchange structure is the
result of applying the ECDH scalar multiplication function to the secret key
of appropriate length (into scalar input) and the standard public basepoint
(into u-coordinate point input).</t>
  <t>The ECDH shared secret is the result of applying the ECDH scalar multiplication
function to the secret key (into scalar input) and the peer’s public key
(into u-coordinate point input). The output is used raw, with no processing.</t>
</list></t>

<t>For X25519 and X448, implementations SHOULD use the approach specified
in <xref target="RFC7748"/> to calculate the Diffie-Hellman shared secret.
Implementations MUST check whether the computed Diffie-Hellman
shared secret is the all-zero value and abort if so, as described in
Section 6 of <xref target="RFC7748"/>. If implementors use an alternative
implementation of these elliptic curves, they SHOULD perform the
additional checks specified in Section 7 of <xref target="RFC7748"/>.</t>

</section>
</section>
<section anchor="exporters" title="Exporters">

<t><xref target="RFC5705"/> defines keying material exporters for TLS in terms of the TLS
pseudorandom function (PRF). This document replaces the PRF with HKDF, thus
requiring a new construction. The exporter interface remains the same.</t>

<t>The exporter value is computed as:</t>

<figure><artwork><![CDATA[
TLS-Exporter(label, context_value, key_length) =
    HKDF-Expand-Label(Derive-Secret(Secret, label, ""),
                      "exporter", Hash(context_value), key_length)
]]></artwork></figure>

<t>Where Secret is either the early_exporter_master_secret or the
exporter_master_secret.  Implementations MUST use the exporter_master_secret unless
explicitly specified by the application. The early_exporter_master_secret is
defined for use in settings where an exporter is needed for 0-RTT data.
A separate interface for the early exporter is RECOMMENDED; this avoids
the exporter user accidentally using an early exporter when a regular
one is desired or vice versa.</t>

<t>If no context is provided, the context_value is zero-length. Consequently,
providing no context computes the same value as providing an empty context.
This is a change from previous versions of TLS where an empty context produced a
different output to an absent context. As of this document’s publication, no
allocated exporter label is used both with and without a context. Future
specifications MUST NOT define a use of exporters that permit both an empty
context and no context with the same label. New uses of exporters SHOULD provide
a context in all exporter computations, though the value could be empty.</t>

<t>Requirements for the format of exporter labels are defined in section 4
of <xref target="RFC5705"/>.</t>

</section>
</section>
<section anchor="anti-replay" title="0-RTT and Anti-Replay">

<t>As noted in <xref target="zero-rtt-data"/> and <xref target="replay-0rtt"/>, TLS does not provide inherent replay
protections for 0-RTT data. There are two potential threats to be
concerned with:</t>

<t><list style="symbols">
  <t>Network attackers who mount a replay attack by simply duplicating a
flight of 0-RTT data.</t>
  <t>Network attackers who take advantage of client retry behavior
to arrange for the server to receive multiple copies of an application
message. This threat already exists
to some extent because clients that value robustness respond to network errors by
attempting to retry requests. However, 0-RTT adds an additional
dimension for any server system which does not maintain globally
consistent server state. Specifically, if a server system has
multiple zones where tickets from zone A will not be accepted in
zone B, then an attacker can duplicate a ClientHello and early
data intended for A to both A and B. At A, the data will
be accepted in 0-RTT, but at B the server will reject 0-RTT
data and instead force a full handshake. If the attacker blocks
the ServerHello from A, then the client will complete the
handshake with B and probably retry the request, leading to duplication on
the server system as a whole.</t>
</list></t>

<t>The first class of attack can be prevented by sharing state to guarantee that
the 0-RTT data is accepted at most once.  Servers SHOULD provide that level of
replay safety, by implementing one of the methods described in this section or
by equivalent means.  It is understood, however, that due to operational
concerns not all deployments will maintain state at that level.  Therefore, in
normal operation, clients will not know which, if any, of these mechanisms
servers actually implement and hence MUST only send early data which they deem
safe to be replayed.</t>

<t>In addition to the direct effects of replays, there is a class of attacks where
even operations normally considered idempotent could be exploited by a large
number of replays (timing attacks, resource limit exhaustion and others
described in <xref target="replay-0rtt"/>).  Those can be mitigated by ensuring that every
0-RTT payload can be replayed only a limited number of times.  The server MUST
ensure that any instance of it (be it a machine, a thread or any other entity
within the relevant serving infrastructure) would accept 0-RTT for the same
0-RTT handshake at most once; this limits the number of replays to the number of
server instances in the deployment.  Such a guarantee can be accomplished by
locally recording data from recently-received ClientHellos and rejecting
repeats, or by any other method that provides the same or a stronger guarantee.
The “at most once per server instance” guarantee is a minimum requirement;
servers SHOULD limit 0-RTT replays further when feasible.</t>

<t>The second class of attack cannot be prevented at the TLS layer and
MUST be dealt with by any application. Note that any application whose
clients implement any kind of retry behavior already needs to
implement some sort of anti-replay defense.</t>

<section anchor="single-use-tickets" title="Single-Use Tickets">

<t>The simplest form of anti-replay defense is for the server to only
allow each session ticket to be used once. For instance, the server
can maintain a database of all outstanding valid tickets; deleting each
ticket from the database as it is used. If an unknown ticket is
provided, the server would then fall back to a full handshake.</t>

<t>If the tickets are not self-contained but rather are database keys,
and the corresponding PSKs are deleted upon use, then connections established
using PSKs enjoy forward secrecy. This improves security for
all 0-RTT data and PSK usage when PSK is used without (EC)DHE.</t>

<t>Because this mechanism requires sharing the session database between
server nodes in environments with multiple distributed servers,
it may be hard to achieve high rates of successful PSK 0-RTT
connections when compared to self-encrypted tickets. Unlike
session databases, session tickets can successfully do PSK-based
session establishment even without consistent storage, though when
0-RTT is allowed they still require consistent storage for anti-replay
of 0-RTT data, as detailed in the following
section.</t>

</section>
<section anchor="client-hello-recording" title="Client Hello Recording">

<t>An alternative form of anti-replay is to record a unique value derived
from the ClientHello (generally either the random value or the PSK
binder) and reject duplicates. Recording all ClientHellos causes state
to grow without bound, but a server can instead record ClientHellos within
a given time window and use the “obfuscated_ticket_age” to ensure that
tickets aren’t reused outside that window.</t>

<t>In order to implement this, when a ClientHello is received, the server
first verifies the PSK binder as described
<xref target="pre-shared-key-extension"/>. It then computes the
expected_arrival_time as described in the next section and rejects
0-RTT if it is outside the recording window, falling back to the
1-RTT handshake.</t>

<t>If the expected arrival time is in the window, then the server
checks to see if it has recorded a matching ClientHello. If one
is found, it either aborts the handshake with an “illegal_parameter” alert
or accepts the PSK but reject 0-RTT. If no matching ClientHello
is found, then it accepts 0-RTT and then stores the ClientHello for
as long as the expected_arrival_time is inside the window.
Servers MAY also implement data stores with false positives, such as
Bloom filters, in which case they MUST respond to apparent replay by
rejecting 0-RTT but MUST NOT abort the handshake.</t>

<t>The server MUST derive the storage key only from validated sections
of the ClientHello. If the ClientHello contains multiple
PSK identities, then an attacker can create multiple ClientHellos
with different binder values for the less-preferred identity on the
assumption that the server will not verify it, as recommended
by <xref target="pre-shared-key-extension"/>.
I.e., if the
client sends PSKs A and B but the server prefers A, then the
attacker can change the binder for B without affecting the binder
for A. If the binder for B is part of the storage key,
then this ClientHello will not appear as a duplicate,
which will cause the ClientHello to be accepted, and may
cause side effects such as replay cache pollution, although any
0-RTT data will not be decryptable because it will use different
keys. If the validated binder or the ClientHello.random
are used as the storage key, then this attack is not possible.</t>

<t>Because this mechanism does not require storing all outstanding
tickets, it may be easier to implement in distributed systems with
high rates of resumption and 0-RTT, at the cost of potentially
weaker anti-replay defense because of the difficulty of reliably
storing and retrieving the received ClientHello messages.
In many such systems, it is impractical to have globally
consistent storage of all the received ClientHellos.
In this case, the best anti-replay protection is provided by
having a single storage zone be
authoritative for a given ticket and refusing 0-RTT for that
ticket in any other zone. This approach prevents simple
replay by the attacker because only one zone will accept
0-RTT data. A weaker design is to implement separate storage for
each zone but allow 0-RTT in any zone. This approach limits
the number of replays to once per zone. Application message
duplication of course remains possible with either design.</t>

<t>When implementations are freshly started, they SHOULD
reject 0-RTT as long as any portion of their recording window overlaps
the startup time. Otherwise, they run the risk of accepting
replays which were originally sent during that period.</t>

<t>Note: If the client’s clock is running much faster than the server’s
then a ClientHello may be received that is outside the window in the
future, in which case it might be accepted for 1-RTT, causing a client retry,
and then acceptable later for 0-RTT. This is another variant of
the second form of attack described above.</t>

</section>
<section anchor="freshness-checks" title="Freshness Checks">

<t>Because the ClientHello indicates the time at which the client sent
it, it is possible to efficiently determine whether a ClientHello was
likely sent reasonably recently and only accept 0-RTT for such a
ClientHello, otherwise falling back to a 1-RTT handshake.
This is necessary for the ClientHello storage mechanism
described in <xref target="client-hello-recording"/> because otherwise the server
needs to store an unlimited number of ClientHellos and is a useful optimization for
self-contained single-use tickets because it allows efficient rejection of ClientHellos
which cannot be used for 0-RTT.</t>

<t>In order to implement this mechanism, a server needs to store the time
that the server generated the session ticket, offset by an estimate of
the round trip time between client and server. I.e.,</t>

<figure><artwork><![CDATA[
    adjusted_creation_time = creation_time + estimated_RTT
]]></artwork></figure>

<t>This value can be encoded in the ticket, thus avoiding the need to
keep state for each outstanding ticket. The server can determine the
client’s view of the age of the ticket by subtracting the ticket’s
“ticket_age_add value” from the “obfuscated_ticket_age” parameter in
the client’s “pre_shared_key” extension. The server can determine the
“expected arrival time” of the ClientHello as:</t>

<figure><artwork><![CDATA[
    expected_arrival_time = adjusted_creation_time + clients_ticket_age
]]></artwork></figure>

<t>When a new ClientHello is received, the expected_arrival_time is then
compared against the current server wall clock time and if they differ
by more than a certain amount, 0-RTT is rejected, though the 1-RTT
handshake can be allowed to complete.</t>

<t>There are several potential sources of error that might cause
mismatches between the expected arrival time and the measured
time. Variations in client and server clock
rates are likely to be minimal, though potentially the absolute
times may be off by large values.
Network propagation delays are the most likely causes of
a mismatch in legitimate values for elapsed time.  Both the
NewSessionTicket and ClientHello messages might be retransmitted and
therefore delayed, which might be hidden by TCP. For clients
on the Internet, this implies windows
on the order of ten seconds to account for errors in clocks and
variations in measurements; other deployment scenarios
may have different needs. Clock skew distributions are not
symmetric, so the optimal tradeoff may involve an asymmetric range
of permissible mismatch values.</t>

<t>Note that freshness checking alone is not sufficient to prevent
replays because it does not detect them during the error window,
which, depending on bandwidth and system capacity could include
billions of replays in real-world settings.  In addition, this
freshness checking is only done at the time the ClientHello is
received, and not when later early application data records are
received. After early data is accepted, records may continue to be
streamed to the server over a longer time period.</t>

</section>
</section>
<section anchor="compliance-requirements" title="Compliance Requirements">

<section anchor="mandatory-to-implement-cipher-suites" title="Mandatory-to-Implement Cipher Suites">

<t>In the absence of an application profile standard specifying otherwise, a
TLS-compliant application MUST implement the TLS_AES_128_GCM_SHA256 <xref target="GCM"></xref>
cipher suite and SHOULD implement the TLS_AES_256_GCM_SHA384 <xref target="GCM"></xref> and
TLS_CHACHA20_POLY1305_SHA256 <xref target="RFC7539"></xref> cipher suites.  (see
<xref target="cipher-suites"/>)</t>

<t>A TLS-compliant application MUST support digital signatures with
rsa_pkcs1_sha256 (for certificates), rsa_pss_rsae_sha256 (for
CertificateVerify and certificates), and ecdsa_secp256r1_sha256. A
TLS-compliant application MUST support key exchange with secp256r1
(NIST P-256) and SHOULD support key exchange with X25519 <xref target="RFC7748"/>.</t>

</section>
<section anchor="mti-extensions" title="Mandatory-to-Implement Extensions">

<t>In the absence of an application profile standard specifying otherwise, a
TLS-compliant application MUST implement the following TLS extensions:</t>

<t><list style="symbols">
  <t>Supported Versions     (“supported_versions”; <xref target="supported-versions"/>)</t>
  <t>Cookie                 (“cookie”; <xref target="cookie"/>)</t>
  <t>Signature Algorithms   (“signature_algorithms”; <xref target="signature-algorithms"/>)</t>
  <t>Signature Algorithms Certificate  (“signature_algorithms_cert”; <xref target="signature-algorithms"/>)</t>
  <t>Negotiated Groups      (“supported_groups”; <xref target="negotiated-groups"/>)</t>
  <t>Key Share              (“key_share”; <xref target="key-share"/>)</t>
  <t>Server Name Indication (“server_name”; Section 3 of <xref target="RFC6066"/>)</t>
</list></t>

<t>All implementations MUST send and use these extensions when offering
applicable features:</t>

<t><list style="symbols">
  <t>“supported_versions”   is REQUIRED for all ClientHello, ServerHello and HelloRetryRequest messages.</t>
  <t>“signature_algorithms” is REQUIRED for certificate authentication.</t>
  <t>“supported_groups”     is REQUIRED for ClientHello messages using
                        DHE or ECDHE key exchange.</t>
  <t>“key_share”            is REQUIRED for DHE or ECDHE key exchange.</t>
  <t>“pre_shared_key”       is REQUIRED for PSK key agreement.</t>
  <t>“psk_key_exchange_modes” is REQUIRED for PSK key agreement.</t>
</list></t>

<t>A client is considered to be attempting to negotiate using this
specification if the ClientHello contains a “supported_versions”
extension with 0x0304 contained in its body.
Such a ClientHello message MUST meet the following requirements:</t>

<t><list style="symbols">
  <t>If not containing a “pre_shared_key” extension, it MUST contain both
a “signature_algorithms” extension and a “supported_groups” extension.</t>
  <t>If containing a “supported_groups” extension, it MUST also contain a
“key_share” extension, and vice versa. An empty KeyShare.client_shares
vector is permitted.</t>
</list></t>

<t>Servers receiving a ClientHello which does not conform to these
requirements MUST abort the handshake with a “missing_extension”
alert.</t>

<t>Additionally, all implementations MUST support use of the “server_name”
extension with applications capable of using it.
Servers MAY require clients to send a valid “server_name” extension.
Servers requiring this extension SHOULD respond to a ClientHello
lacking a “server_name” extension by terminating the connection with a
“missing_extension” alert.</t>

</section>
<section anchor="protocol-invariants" title="Protocol Invariants">

<t>This section describes invariants that TLS endpoints and middleboxes MUST
follow. It also applies to earlier versions of TLS.</t>

<t>TLS is designed to be securely and compatibly extensible. Newer clients or
servers, when communicating with newer peers, should negotiate the
most preferred common parameters. The TLS handshake provides downgrade
protection: Middleboxes passing traffic between a newer client and
newer server without terminating TLS should be unable to influence the
handshake (see <xref target="security-handshake"/>). At the same time, deployments
update at different rates, so a newer client or server MAY continue to
support older parameters, which would allow it to interoperate with
older endpoints.</t>

<t>For this to work, implementations MUST correctly handle extensible fields:</t>

<t><list style="symbols">
  <t>A client sending a ClientHello MUST support all parameters advertised in it.
Otherwise, the server may fail to interoperate by selecting one of those
parameters.</t>
  <t>A server receiving a ClientHello MUST correctly ignore all unrecognized
cipher suites, extensions, and other parameters. Otherwise, it may fail to
interoperate with newer clients. In TLS 1.3, a client receiving a
CertificateRequest or NewSessionTicket MUST also ignore all unrecognized
extensions.</t>
  <t>A middlebox which terminates a TLS connection MUST behave as a compliant
TLS server (to the original client), including having a certificate
which the client is willing to accept, and as a compliant TLS client (to the
original server), including verifying the original server’s certificate.
In particular, it MUST generate its own ClientHello
containing only parameters it understands, and it MUST generate a fresh
ServerHello random value, rather than forwarding the endpoint’s value.  <vspace blankLines='1'/>
Note that TLS’s protocol requirements and security analysis only apply to the
two connections separately. Safely deploying a TLS terminator requires
additional security considerations which are beyond the scope of this document.</t>
  <t>An middlebox which forwards ClientHello parameters it does not understand MUST
NOT process any messages beyond that ClientHello. It MUST forward all
subsequent traffic unmodified. Otherwise, it may fail to interoperate with
newer clients and servers.  <vspace blankLines='1'/>
Forwarded ClientHellos may contain advertisements for features not supported
by the middlebox, so the response may include future TLS additions the
middlebox does not recognize. These additions MAY change any message beyond
the ClientHello arbitrarily. In particular, the values sent in the ServerHello
might change, the ServerHello format might change, and the TLSCiphertext format
might change.</t>
</list></t>

<t>The design of TLS 1.3 was constrained by widely-deployed non-compliant TLS
middleboxes (see <xref target="middlebox"/>), however it does not relax the invariants.
Those middleboxes continue to be non-compliant.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Security issues are discussed throughout this memo, especially in
<xref target="implementation-notes"/>, <xref target="backward-compatibility"/>, and <xref target="security-analysis"/>.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document uses several registries that were originally created in
<xref target="RFC4346"/>. IANA [SHALL update/has updated] these to reference this document.
The registries and their allocation policies are below:</t>

<t><list style="symbols">
  <t>TLS Cipher Suite Registry: values with the first byte in the range
0-254 (decimal) are assigned via Specification Required <xref target="RFC8126"/>.
Values with the first byte 255 (decimal) are reserved for Private
Use <xref target="RFC8126"/>.  <vspace blankLines='1'/>
IANA [SHALL add/has added] the cipher suites listed in <xref target="cipher-suites"/> to
the registry. The “Value” and “Description” columns are taken from the table.
The “DTLS-OK” and “Recommended” columns are both marked as “Yes” for each new
cipher suite. [[This assumes <xref target="I-D.ietf-tls-iana-registry-updates"/> has been
applied.]]</t>
  <t>TLS ContentType Registry: Future values are allocated via
Standards Action <xref target="RFC8126"/>.</t>
  <t>TLS Alert Registry: Future values are allocated via Standards
Action <xref target="RFC8126"/>. IANA [SHALL update/has updated] this registry
to include values for “missing_extension” and “certificate_required”.  The
“DTLS-OK” column is marked as “Yes” for each new alert.</t>
  <t>TLS HandshakeType Registry: Future values are allocated via
Standards Action <xref target="RFC8126"/>. IANA [SHALL update/has updated] this registry
to rename item 4 from “NewSessionTicket” to “new_session_ticket”
and to add the “hello_retry_request_RESERVED”, “encrypted_extensions”,
“end_of_early_data”, “key_update”, and “message_hash” values.  The “DTLS-OK”
are marked as “Yes” for each of these additions.</t>
</list></t>

<t>This document also uses the TLS ExtensionType Registry originally created in
<xref target="RFC4366"/>. IANA has updated it to reference this document.  Changes to the
registry follow:</t>

<t><list style="symbols">
  <t>IANA [SHALL update/has updated] the registration policy as follows:  <vspace blankLines='1'/>
Values with the first byte in the range 0-254 (decimal) are assigned
via Specification Required <xref target="RFC8126"></xref>.  Values with the first byte
255 (decimal) are reserved for Private Use <xref target="RFC8126"></xref>.</t>
  <t>IANA [SHALL update/has updated] this registry to include the
“key_share”, “pre_shared_key”, “psk_key_exchange_modes”,
“early_data”, “cookie”, “supported_versions”,
“certificate_authorities”, “oid_filters”, “post_handshake_auth”, and “signature_algorithms_cert”,
extensions with the values defined in this document and the Recommended value of “Yes”.</t>
  <t>IANA [SHALL update/has updated] this registry to include a “TLS
1.3” column which lists the messages in which the extension may
appear. This column [SHALL be/has been]
initially populated from the table in <xref target="extensions"/>
with any extension not listed there marked as “-“ to indicate that
it is not used by TLS 1.3.</t>
</list></t>

<t>In addition, this document defines two new registries to be maintained
by IANA:</t>

<t><list style="symbols">
  <t>TLS SignatureScheme Registry: Values with the first byte in the range
0-253 (decimal) are assigned via Specification Required <xref target="RFC8126"/>.
Values with the first byte 254 or 255 (decimal) are reserved for Private
Use <xref target="RFC8126"/>. Values with the first byte in the range 0-6 or with the
second byte in the range 0-3 that are not currently allocated are reserved for
backwards compatibility.
This registry SHALL have a “Recommended” column.
The registry [shall be/ has been] initially populated with the values described in
<xref target="signature-algorithms"/>. The following values SHALL be marked as
“Recommended”: ecdsa_secp256r1_sha256, ecdsa_secp384r1_sha384,
rsa_pss_rsae_sha256, rsa_pss_rsae_sha384, rsa_pss_rsae_sha512,
rsa_pss_pss_sha256, rsa_pss_pss_sha384, rsa_pss_pss_sha512, and ed25519.</t>
  <t>TLS PskKeyExchangeMode Registry: Values in the
range 0-253 (decimal) are assigned via Specification Required
<xref target="RFC8126"></xref>.  Values with the first byte 254 or 255 (decimal) are
reserved for Private Use <xref target="RFC8126"></xref>.  This registry SHALL have a
“Recommended” column.  The registry [shall be/ has been] initially
populated psk_ke (0) and psk_dhe_ke (1).  Both SHALL be marked as
“Recommended”.</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2104" target='https://www.rfc-editor.org/info/rfc2104'>
<front>
<title>HMAC: Keyed-Hashing for Message Authentication</title>
<author initials='H.' surname='Krawczyk' fullname='H. Krawczyk'><organization /></author>
<author initials='M.' surname='Bellare' fullname='M. Bellare'><organization /></author>
<author initials='R.' surname='Canetti' fullname='R. Canetti'><organization /></author>
<date year='1997' month='February' />
<abstract><t>This document describes HMAC, a mechanism for message authentication using cryptographic hash functions. HMAC can be used with any iterative cryptographic hash function, e.g., MD5, SHA-1, in combination with a secret shared key.  The cryptographic strength of HMAC depends on the properties of the underlying hash function.  This memo provides information for the Internet community.  This memo does not specify an Internet standard of any kind</t></abstract>
</front>
<seriesInfo name='RFC' value='2104'/>
<seriesInfo name='DOI' value='10.17487/RFC2104'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC5280" target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials='D.' surname='Cooper' fullname='D. Cooper'><organization /></author>
<author initials='S.' surname='Santesson' fullname='S. Santesson'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<author initials='S.' surname='Boeyen' fullname='S. Boeyen'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='W.' surname='Polk' fullname='W. Polk'><organization /></author>
<date year='2008' month='May' />
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference  anchor="RFC5869" target='https://www.rfc-editor.org/info/rfc5869'>
<front>
<title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
<author initials='H.' surname='Krawczyk' fullname='H. Krawczyk'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<date year='2010' month='May' />
<abstract><t>This document specifies a simple Hashed Message Authentication Code (HMAC)-based key derivation function (HKDF), which can be used as a building block in various protocols and applications.  The key derivation function (KDF) is intended to support a wide range of applications and requirements, and is conservative in its use of cryptographic hash functions.  This document is not an Internet  Standards Track specification; it is published for informational  purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='5869'/>
<seriesInfo name='DOI' value='10.17487/RFC5869'/>
</reference>



<reference  anchor="RFC6066" target='https://www.rfc-editor.org/info/rfc6066'>
<front>
<title>Transport Layer Security (TLS) Extensions: Extension Definitions</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<date year='2011' month='January' />
<abstract><t>This document provides specifications for existing TLS extensions.  It is a companion document for RFC 5246, &quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;.  The extensions specified are server_name, max_fragment_length, client_certificate_url, trusted_ca_keys, truncated_hmac, and status_request.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6066'/>
<seriesInfo name='DOI' value='10.17487/RFC6066'/>
</reference>



<reference  anchor="RFC6655" target='https://www.rfc-editor.org/info/rfc6655'>
<front>
<title>AES-CCM Cipher Suites for Transport Layer Security (TLS)</title>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<author initials='D.' surname='Bailey' fullname='D. Bailey'><organization /></author>
<date year='2012' month='July' />
<abstract><t>This memo describes the use of the Advanced Encryption Standard (AES) in the Counter with Cipher Block Chaining - Message Authentication Code (CBC-MAC) Mode (CCM) of operation within Transport Layer Security (TLS) and Datagram TLS (DTLS) to provide confidentiality and data origin authentication.  The AES-CCM algorithm is amenable to compact implementations, making it suitable for constrained environments.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6655'/>
<seriesInfo name='DOI' value='10.17487/RFC6655'/>
</reference>



<reference  anchor="RFC7539" target='https://www.rfc-editor.org/info/rfc7539'>
<front>
<title>ChaCha20 and Poly1305 for IETF Protocols</title>
<author initials='Y.' surname='Nir' fullname='Y. Nir'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This document defines the ChaCha20 stream cipher as well as the use of the Poly1305 authenticator, both as stand-alone algorithms and as a &quot;combined mode&quot;, or Authenticated Encryption with Associated Data (AEAD) algorithm.</t><t>This document does not introduce any new crypto, but is meant to serve as a stable reference and an implementation guide.  It is a product of the Crypto Forum Research Group (CFRG).</t></abstract>
</front>
<seriesInfo name='RFC' value='7539'/>
<seriesInfo name='DOI' value='10.17487/RFC7539'/>
</reference>



<reference  anchor="RFC7748" target='https://www.rfc-editor.org/info/rfc7748'>
<front>
<title>Elliptic Curves for Security</title>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='M.' surname='Hamburg' fullname='M. Hamburg'><organization /></author>
<author initials='S.' surname='Turner' fullname='S. Turner'><organization /></author>
<date year='2016' month='January' />
<abstract><t>This memo specifies two elliptic curves over prime fields that offer a high level of practical security in cryptographic applications, including Transport Layer Security (TLS).  These curves are intended to operate at the ~128-bit and ~224-bit security level, respectively, and are generated deterministically based on a list of required properties.</t></abstract>
</front>
<seriesInfo name='RFC' value='7748'/>
<seriesInfo name='DOI' value='10.17487/RFC7748'/>
</reference>



<reference  anchor="RFC7919" target='https://www.rfc-editor.org/info/rfc7919'>
<front>
<title>Negotiated Finite Field Diffie-Hellman Ephemeral Parameters for Transport Layer Security (TLS)</title>
<author initials='D.' surname='Gillmor' fullname='D. Gillmor'><organization /></author>
<date year='2016' month='August' />
<abstract><t>Traditional finite-field-based Diffie-Hellman (DH) key exchange during the Transport Layer Security (TLS) handshake suffers from a number of security, interoperability, and efficiency shortcomings. These shortcomings arise from lack of clarity about which DH group parameters TLS servers should offer and clients should accept.  This document offers a solution to these shortcomings for compatible peers by using a section of the TLS &quot;Supported Groups Registry&quot; (renamed from &quot;EC Named Curve Registry&quot; by this document) to establish common finite field DH parameters with known structure and a mechanism for peers to negotiate support for these groups.</t><t>This document updates TLS versions 1.0 (RFC 2246), 1.1 (RFC 4346), and 1.2 (RFC 5246), as well as the TLS Elliptic Curve Cryptography (ECC) extensions (RFC 4492).</t></abstract>
</front>
<seriesInfo name='RFC' value='7919'/>
<seriesInfo name='DOI' value='10.17487/RFC7919'/>
</reference>



<reference  anchor="RFC8032" target='https://www.rfc-editor.org/info/rfc8032'>
<front>
<title>Edwards-Curve Digital Signature Algorithm (EdDSA)</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<author initials='I.' surname='Liusvaara' fullname='I. Liusvaara'><organization /></author>
<date year='2017' month='January' />
<abstract><t>This document describes elliptic curve signature scheme Edwards-curve Digital Signature Algorithm (EdDSA).  The algorithm is instantiated with recommended parameters for the edwards25519 and edwards448 curves.  An example implementation and test vectors are provided.</t></abstract>
</front>
<seriesInfo name='RFC' value='8032'/>
<seriesInfo name='DOI' value='10.17487/RFC8032'/>
</reference>



<reference  anchor="RFC8017" target='https://www.rfc-editor.org/info/rfc8017'>
<front>
<title>PKCS #1: RSA Cryptography Specifications Version 2.2</title>
<author initials='K.' surname='Moriarty' fullname='K. Moriarty' role='editor'><organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'><organization /></author>
<author initials='J.' surname='Jonsson' fullname='J. Jonsson'><organization /></author>
<author initials='A.' surname='Rusch' fullname='A. Rusch'><organization /></author>
<date year='2016' month='November' />
<abstract><t>This document provides recommendations for the implementation of public-key cryptography based on the RSA algorithm, covering cryptographic primitives, encryption schemes, signature schemes with appendix, and ASN.1 syntax for representing keys and for identifying the schemes.</t><t>This document represents a republication of PKCS #1 v2.2 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series.  By publishing this RFC, change control is transferred to the IETF.</t><t>This document also obsoletes RFC 3447.</t></abstract>
</front>
<seriesInfo name='RFC' value='8017'/>
<seriesInfo name='DOI' value='10.17487/RFC8017'/>
</reference>



<reference  anchor="RFC8126" target='https://www.rfc-editor.org/info/rfc8126'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='M.' surname='Cotton' fullname='M. Cotton'><organization /></author>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<date year='2017' month='June' />
<abstract><t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t><t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t><t>This is the third edition of this document; it obsoletes RFC 5226.</t></abstract>
</front>
<seriesInfo name='BCP' value='26'/>
<seriesInfo name='RFC' value='8126'/>
<seriesInfo name='DOI' value='10.17487/RFC8126'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC5116" target='https://www.rfc-editor.org/info/rfc5116'>
<front>
<title>An Interface and Algorithms for Authenticated Encryption</title>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<date year='2008' month='January' />
<abstract><t>This document defines algorithms for Authenticated Encryption with Associated Data (AEAD), and defines a uniform interface and a registry for such algorithms.  The interface and registry can be used as an application-independent set of cryptoalgorithm suites.  This approach provides advantages in efficiency and security, and promotes the reuse of crypto implementations.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5116'/>
<seriesInfo name='DOI' value='10.17487/RFC5116'/>
</reference>


<reference anchor="X690" >
  <front>
    <title>Information technology - ASN.1 encoding Rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)</title>
    <author >
      <organization>ITU-T</organization>
    </author>
    <date year="2002"/>
  </front>
  <seriesInfo name="ISO/IEC" value="8825-1:2002"/>
</reference>
<reference anchor="X962" >
  <front>
    <title>Public Key Cryptography For The Financial Services Industry: The Elliptic Curve Digital Signature Algorithm (ECDSA)</title>
    <author >
      <organization>ANSI</organization>
    </author>
    <date year="1998"/>
  </front>
  <seriesInfo name="ANSI" value="X9.62"/>
</reference>
<reference anchor="DH" >
  <front>
    <title>New Directions in Cryptography</title>
    <author initials="W." surname="Diffie">
      <organization></organization>
    </author>
    <author initials="M." surname="Hellman">
      <organization></organization>
    </author>
    <date year="1977" month="June"/>
  </front>
  <seriesInfo name="IEEE Transactions on Information Theory, V.IT-22 n.6" value=""/>
</reference>
<reference anchor="GCM" >
  <front>
    <title>Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC</title>
    <author initials="M." surname="Dworkin">
      <organization></organization>
    </author>
    <date year="2007" month="November"/>
  </front>
  <seriesInfo name="NIST" value="Special Publication 800-38D"/>
</reference>




<reference  anchor="RFC7301" target='https://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>

<reference anchor="SHS" >
  <front>
    <title>Secure Hash Standard</title>
    <author initials="Q." surname="Dang" fullname="Quynh H. Dang">
      <organization></organization>
    </author>
    <date year="2015" month="July"/>
  </front>
  <seriesInfo name="National Institute of Standards and Technology" value="report"/>
  <seriesInfo name="DOI" value="10.6028/nist.fips.180-4"/>
</reference>



<reference  anchor="RFC5756" target='https://www.rfc-editor.org/info/rfc5756'>
<front>
<title>Updates for RSAES-OAEP and RSASSA-PSS Algorithm Parameters</title>
<author initials='S.' surname='Turner' fullname='S. Turner'><organization /></author>
<author initials='D.' surname='Brown' fullname='D. Brown'><organization /></author>
<author initials='K.' surname='Yiu' fullname='K. Yiu'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='T.' surname='Polk' fullname='T. Polk'><organization /></author>
<date year='2010' month='January' />
<abstract><t>This document updates RFC 4055.  It updates the conventions for using the RSA Encryption Scheme - Optimal Asymmetric Encryption Padding (RSAES-OAEP) key transport algorithm in the Internet X.509 Public Key Infrastructure (PKI).  Specifically, it updates the conventions for algorithm parameters in an X.509 certificate's subjectPublicKeyInfo field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5756'/>
<seriesInfo name='DOI' value='10.17487/RFC5756'/>
</reference>



<reference  anchor="RFC6962" target='https://www.rfc-editor.org/info/rfc6962'>
<front>
<title>Certificate Transparency</title>
<author initials='B.' surname='Laurie' fullname='B. Laurie'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Kasper' fullname='E. Kasper'><organization /></author>
<date year='2013' month='June' />
<abstract><t>This document describes an experimental protocol for publicly logging the existence of Transport Layer Security (TLS) certificates as they are issued or observed, in a manner that allows anyone to audit certificate authority (CA) activity and notice the issuance of suspect certificates as well as to audit the certificate logs themselves.  The intent is that eventually clients would refuse to honor certificates that do not appear in a log, effectively forcing CAs to add all issued certificates to the logs.</t><t>Logs are network services that implement the protocol operations for submissions and queries that are defined in this document.</t></abstract>
</front>
<seriesInfo name='RFC' value='6962'/>
<seriesInfo name='DOI' value='10.17487/RFC6962'/>
</reference>



<reference  anchor="RFC6961" target='https://www.rfc-editor.org/info/rfc6961'>
<front>
<title>The Transport Layer Security (TLS) Multiple Certificate Status Request Extension</title>
<author initials='Y.' surname='Pettersen' fullname='Y. Pettersen'><organization /></author>
<date year='2013' month='June' />
<abstract><t>This document defines the Transport Layer Security (TLS) Certificate Status Version 2 Extension to allow clients to specify and support several certificate status methods.  (The use of the Certificate Status extension is commonly referred to as &quot;OCSP stapling&quot;.)  Also defined is a new method based on the Online Certificate Status Protocol (OCSP) that servers can use to provide status information about not only the server's own certificate but also the status of intermediate certificates in the chain.</t></abstract>
</front>
<seriesInfo name='RFC' value='6961'/>
<seriesInfo name='DOI' value='10.17487/RFC6961'/>
</reference>



<reference  anchor="RFC6960" target='https://www.rfc-editor.org/info/rfc6960'>
<front>
<title>X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP</title>
<author initials='S.' surname='Santesson' fullname='S. Santesson'><organization /></author>
<author initials='M.' surname='Myers' fullname='M. Myers'><organization /></author>
<author initials='R.' surname='Ankney' fullname='R. Ankney'><organization /></author>
<author initials='A.' surname='Malpani' fullname='A. Malpani'><organization /></author>
<author initials='S.' surname='Galperin' fullname='S. Galperin'><organization /></author>
<author initials='C.' surname='Adams' fullname='C. Adams'><organization /></author>
<date year='2013' month='June' />
<abstract><t>This document specifies a protocol useful in determining the current status of a digital certificate without requiring Certificate Revocation Lists (CRLs). Additional mechanisms addressing PKIX operational requirements are specified in separate documents.  This document obsoletes RFCs 2560 and 6277.  It also updates RFC 5912.</t></abstract>
</front>
<seriesInfo name='RFC' value='6960'/>
<seriesInfo name='DOI' value='10.17487/RFC6960'/>
</reference>



<reference  anchor="RFC7507" target='https://www.rfc-editor.org/info/rfc7507'>
<front>
<title>TLS Fallback Signaling Cipher Suite Value (SCSV) for Preventing Protocol Downgrade Attacks</title>
<author initials='B.' surname='Moeller' fullname='B. Moeller'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<date year='2015' month='April' />
<abstract><t>This document defines a Signaling Cipher Suite Value (SCSV) that prevents protocol downgrade attacks on the Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) protocols.  It updates RFCs 2246, 4346, 4347, 5246, and 6347.  Server update considerations are included.</t></abstract>
</front>
<seriesInfo name='RFC' value='7507'/>
<seriesInfo name='DOI' value='10.17487/RFC7507'/>
</reference>

<reference anchor="DH76" >
  <front>
    <title>New directions in cryptography</title>
    <author initials="W." surname="Diffie" fullname="W. Diffie">
      <organization></organization>
    </author>
    <author initials="M." surname="Hellman" fullname="M. Hellman">
      <organization></organization>
    </author>
    <date year="1976" month="November"/>
  </front>
  <seriesInfo name="IEEE Transactions on Information Theory" value="Vol. 22, pp. 644-654"/>
  <seriesInfo name="DOI" value="10.1109/tit.1976.1055638"/>
</reference>



<reference  anchor="RFC5705" target='https://www.rfc-editor.org/info/rfc5705'>
<front>
<title>Keying Material Exporters for Transport Layer Security (TLS)</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2010' month='March' />
<abstract><t>A number of protocols wish to leverage Transport Layer Security (TLS) to perform key establishment but then use some of the keying material for their own purposes.  This document describes a general mechanism for allowing that.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5705'/>
<seriesInfo name='DOI' value='10.17487/RFC5705'/>
</reference>



<reference  anchor="RFC6979" target='https://www.rfc-editor.org/info/rfc6979'>
<front>
<title>Deterministic Usage of the Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA)</title>
<author initials='T.' surname='Pornin' fullname='T. Pornin'><organization /></author>
<date year='2013' month='August' />
<abstract><t>This document defines a deterministic digital signature generation procedure.  Such signatures are compatible with standard Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA) digital signatures and can be processed with unmodified verifiers, which need not be aware of the procedure described therein.  Deterministic signatures retain the cryptographic security features associated with digital signatures but can be more easily implemented in various environments, since they do not need access to a source of high-quality randomness.</t></abstract>
</front>
<seriesInfo name='RFC' value='6979'/>
<seriesInfo name='DOI' value='10.17487/RFC6979'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC4086" target='https://www.rfc-editor.org/info/rfc4086'>
<front>
<title>Randomness Requirements for Security</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<author initials='J.' surname='Schiller' fullname='J. Schiller'><organization /></author>
<author initials='S.' surname='Crocker' fullname='S. Crocker'><organization /></author>
<date year='2005' month='June' />
<abstract><t>Security systems are built on strong cryptographic algorithms that foil pattern analysis attempts.  However, the security of these systems is dependent on generating secret quantities for passwords, cryptographic keys, and similar quantities.  The use of pseudo-random processes to generate secret quantities can result in pseudo-security. A sophisticated attacker may find it easier to reproduce the environment that produced the secret quantities and to search the resulting small set of possibilities than to locate the quantities in the whole of the potential number space.</t><t>Choosing random quantities to foil a resourceful and motivated adversary is surprisingly difficult.  This document points out many pitfalls in using poor entropy sources or traditional pseudo-random number generation techniques for generating such quantities.  It recommends the use of truly random hardware techniques and shows that the existing hardware on many systems can be used for this purpose. It provides suggestions to ameliorate the problem when a hardware solution is not available, and it gives examples of how large such quantities need to be for some applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='106'/>
<seriesInfo name='RFC' value='4086'/>
<seriesInfo name='DOI' value='10.17487/RFC4086'/>
</reference>



<reference  anchor="RFC4346" target='https://www.rfc-editor.org/info/rfc4346'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.1</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2006' month='April' />
<abstract><t>This document specifies Version 1.1 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4346'/>
<seriesInfo name='DOI' value='10.17487/RFC4346'/>
</reference>



<reference  anchor="RFC4366" target='https://www.rfc-editor.org/info/rfc4366'>
<front>
<title>Transport Layer Security (TLS) Extensions</title>
<author initials='S.' surname='Blake-Wilson' fullname='S. Blake-Wilson'><organization /></author>
<author initials='M.' surname='Nystrom' fullname='M. Nystrom'><organization /></author>
<author initials='D.' surname='Hopwood' fullname='D. Hopwood'><organization /></author>
<author initials='J.' surname='Mikkelsen' fullname='J. Mikkelsen'><organization /></author>
<author initials='T.' surname='Wright' fullname='T. Wright'><organization /></author>
<date year='2006' month='April' />
<abstract><t>This document describes extensions that may be used to add functionality to Transport Layer Security (TLS).  It provides both generic extension mechanisms for the TLS handshake client and server hellos, and specific extensions using these generic mechanisms.</t><t>The extensions may be used by TLS clients and servers.  The extensions are backwards compatible: communication is possible between TLS clients that support the extensions and TLS servers that do not support the extensions, and vice versa.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4366'/>
<seriesInfo name='DOI' value='10.17487/RFC4366'/>
</reference>



<reference  anchor="RFC4492" target='https://www.rfc-editor.org/info/rfc4492'>
<front>
<title>Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS)</title>
<author initials='S.' surname='Blake-Wilson' fullname='S. Blake-Wilson'><organization /></author>
<author initials='N.' surname='Bolyard' fullname='N. Bolyard'><organization /></author>
<author initials='V.' surname='Gupta' fullname='V. Gupta'><organization /></author>
<author initials='C.' surname='Hawk' fullname='C. Hawk'><organization /></author>
<author initials='B.' surname='Moeller' fullname='B. Moeller'><organization /></author>
<date year='2006' month='May' />
<abstract><t>This document describes new key exchange algorithms based on Elliptic Curve Cryptography (ECC) for the Transport Layer Security (TLS) protocol.  In particular, it specifies the use of Elliptic Curve Diffie-Hellman (ECDH) key agreement in a TLS handshake and the use of Elliptic Curve Digital Signature Algorithm (ECDSA) as a new authentication mechanism.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='4492'/>
<seriesInfo name='DOI' value='10.17487/RFC4492'/>
</reference>



<reference  anchor="RFC5077" target='https://www.rfc-editor.org/info/rfc5077'>
<front>
<title>Transport Layer Security (TLS) Session Resumption without Server-Side State</title>
<author initials='J.' surname='Salowey' fullname='J. Salowey'><organization /></author>
<author initials='H.' surname='Zhou' fullname='H. Zhou'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2008' month='January' />
<abstract><t>This document describes a mechanism that enables the Transport Layer Security (TLS) server to resume sessions and avoid keeping per-client session state.  The TLS server encapsulates the session state into a ticket and forwards it to the client.  The client can subsequently resume a session using the obtained ticket.  This document obsoletes RFC 4507.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5077'/>
<seriesInfo name='DOI' value='10.17487/RFC5077'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC5764" target='https://www.rfc-editor.org/info/rfc5764'>
<front>
<title>Datagram Transport Layer Security (DTLS) Extension to Establish Keys for the Secure Real-time Transport Protocol (SRTP)</title>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2010' month='May' />
<abstract><t>This document describes a Datagram Transport Layer Security (DTLS) extension to establish keys for Secure RTP (SRTP) and Secure RTP Control Protocol (SRTCP) flows.  DTLS keying happens on the media path, independent of any out-of-band signalling channel present. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5764'/>
<seriesInfo name='DOI' value='10.17487/RFC5764'/>
</reference>



<reference  anchor="RFC5929" target='https://www.rfc-editor.org/info/rfc5929'>
<front>
<title>Channel Bindings for TLS</title>
<author initials='J.' surname='Altman' fullname='J. Altman'><organization /></author>
<author initials='N.' surname='Williams' fullname='N. Williams'><organization /></author>
<author initials='L.' surname='Zhu' fullname='L. Zhu'><organization /></author>
<date year='2010' month='July' />
<abstract><t>This document defines three channel binding types for Transport Layer Security (TLS), tls-unique, tls-server-end-point, and tls-unique-for-telnet, in accordance with RFC 5056 (On Channel Binding).</t><t>Note that based on implementation experience, this document changes the original definition of 'tls-unique' channel binding type in the channel binding type IANA registry.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5929'/>
<seriesInfo name='DOI' value='10.17487/RFC5929'/>
</reference>



<reference  anchor="RFC6176" target='https://www.rfc-editor.org/info/rfc6176'>
<front>
<title>Prohibiting Secure Sockets Layer (SSL) Version 2.0</title>
<author initials='S.' surname='Turner' fullname='S. Turner'><organization /></author>
<author initials='T.' surname='Polk' fullname='T. Polk'><organization /></author>
<date year='2011' month='March' />
<abstract><t>This document requires that when Transport Layer Security (TLS) clients and servers establish connections, they never negotiate the use of  Secure Sockets Layer (SSL) version 2.0.  This document updates the  backward compatibility sections found in the Transport Layer Security (TLS). [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6176'/>
<seriesInfo name='DOI' value='10.17487/RFC6176'/>
</reference>



<reference  anchor="RFC6091" target='https://www.rfc-editor.org/info/rfc6091'>
<front>
<title>Using OpenPGP Keys for Transport Layer Security (TLS) Authentication</title>
<author initials='N.' surname='Mavrogiannopoulos' fullname='N. Mavrogiannopoulos'><organization /></author>
<author initials='D.' surname='Gillmor' fullname='D. Gillmor'><organization /></author>
<date year='2011' month='February' />
<abstract><t>This memo defines Transport Layer Security (TLS) extensions and associated semantics that allow clients and servers to negotiate the use of OpenPGP certificates for a TLS session, and specifies how to transport OpenPGP certificates via TLS.  It also defines the registry for non-X.509 certificate types.  This document is not an Internet  Standards Track specification; it is published for informational purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='6091'/>
<seriesInfo name='DOI' value='10.17487/RFC6091'/>
</reference>



<reference  anchor="RFC6520" target='https://www.rfc-editor.org/info/rfc6520'>
<front>
<title>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) Heartbeat Extension</title>
<author initials='R.' surname='Seggelmann' fullname='R. Seggelmann'><organization /></author>
<author initials='M.' surname='Tuexen' fullname='M. Tuexen'><organization /></author>
<author initials='M.' surname='Williams' fullname='M. Williams'><organization /></author>
<date year='2012' month='February' />
<abstract><t>This document describes the Heartbeat Extension for the Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) protocols.</t><t>The Heartbeat Extension provides a new protocol for TLS/DTLS allowing the usage of keep-alive functionality without performing a renegotiation and a basis for path MTU (PMTU) discovery for DTLS.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6520'/>
<seriesInfo name='DOI' value='10.17487/RFC6520'/>
</reference>



<reference  anchor="RFC8305" target='https://www.rfc-editor.org/info/rfc8305'>
<front>
<title>Happy Eyeballs Version 2: Better Connectivity Using Concurrency</title>
<author initials='D.' surname='Schinazi' fullname='D. Schinazi'><organization /></author>
<author initials='T.' surname='Pauly' fullname='T. Pauly'><organization /></author>
<date year='2017' month='December' />
<abstract><t>Many communication protocols operating over the modern Internet use hostnames.  These often resolve to multiple IP addresses, each of which may have different performance and connectivity characteristics.  Since specific addresses or address families (IPv4 or IPv6) may be blocked, broken, or sub-optimal on a network, clients that attempt multiple connections in parallel have a chance of establishing a connection more quickly.  This document specifies requirements for algorithms that reduce this user-visible delay and provides an example algorithm, referred to as &quot;Happy Eyeballs&quot;.  This document obsoletes the original algorithm description in RFC 6555.</t></abstract>
</front>
<seriesInfo name='RFC' value='8305'/>
<seriesInfo name='DOI' value='10.17487/RFC8305'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC7250" target='https://www.rfc-editor.org/info/rfc7250'>
<front>
<title>Using Raw Public Keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='P.' surname='Wouters' fullname='P. Wouters' role='editor'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig' role='editor'><organization /></author>
<author initials='J.' surname='Gilmore' fullname='J. Gilmore'><organization /></author>
<author initials='S.' surname='Weiler' fullname='S. Weiler'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='June' />
<abstract><t>This document specifies a new certificate type and two TLS extensions for exchanging raw public keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS).  The new certificate type allows raw public keys to be used for authentication.</t></abstract>
</front>
<seriesInfo name='RFC' value='7250'/>
<seriesInfo name='DOI' value='10.17487/RFC7250'/>
</reference>



<reference  anchor="RFC7465" target='https://www.rfc-editor.org/info/rfc7465'>
<front>
<title>Prohibiting RC4 Cipher Suites</title>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<date year='2015' month='February' />
<abstract><t>This document requires that Transport Layer Security (TLS) clients and servers never negotiate the use of RC4 cipher suites when they establish connections.  This applies to all TLS versions.  This document updates RFCs 5246, 4346, and 2246.</t></abstract>
</front>
<seriesInfo name='RFC' value='7465'/>
<seriesInfo name='DOI' value='10.17487/RFC7465'/>
</reference>



<reference  anchor="RFC7568" target='https://www.rfc-editor.org/info/rfc7568'>
<front>
<title>Deprecating Secure Sockets Layer Version 3.0</title>
<author initials='R.' surname='Barnes' fullname='R. Barnes'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson'><organization /></author>
<author initials='A.' surname='Pironti' fullname='A. Pironti'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<date year='2015' month='June' />
<abstract><t>The Secure Sockets Layer version 3.0 (SSLv3), as specified in RFC 6101, is not sufficiently secure.  This document requires that SSLv3 not be used.  The replacement versions, in particular, Transport Layer Security (TLS) 1.2 (RFC 5246), are considerably more secure and capable protocols.</t><t>This document updates the backward compatibility section of RFC 5246 and its predecessors to prohibit fallback to SSLv3.</t></abstract>
</front>
<seriesInfo name='RFC' value='7568'/>
<seriesInfo name='DOI' value='10.17487/RFC7568'/>
</reference>



<reference  anchor="RFC7627" target='https://www.rfc-editor.org/info/rfc7627'>
<front>
<title>Transport Layer Security (TLS) Session Hash and Extended Master Secret Extension</title>
<author initials='K.' surname='Bhargavan' fullname='K. Bhargavan' role='editor'><organization /></author>
<author initials='A.' surname='Delignat-Lavaud' fullname='A. Delignat-Lavaud'><organization /></author>
<author initials='A.' surname='Pironti' fullname='A. Pironti'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='M.' surname='Ray' fullname='M. Ray'><organization /></author>
<date year='2015' month='September' />
<abstract><t>The Transport Layer Security (TLS) master secret is not cryptographically bound to important session parameters such as the server certificate.  Consequently, it is possible for an active attacker to set up two sessions, one with a client and another with a server, such that the master secrets on the two sessions are the same.  Thereafter, any mechanism that relies on the master secret for authentication, including session resumption, becomes vulnerable to a man-in-the-middle attack, where the attacker can simply forward messages back and forth between the client and server.  This specification defines a TLS extension that contextually binds the master secret to a log of the full handshake that computes it, thus preventing such attacks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7627'/>
<seriesInfo name='DOI' value='10.17487/RFC7627'/>
</reference>



<reference  anchor="RFC7685" target='https://www.rfc-editor.org/info/rfc7685'>
<front>
<title>A Transport Layer Security (TLS) ClientHello Padding Extension</title>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<date year='2015' month='October' />
<abstract><t>This memo describes a Transport Layer Security (TLS) extension that can be used to pad ClientHello messages to a desired size.</t></abstract>
</front>
<seriesInfo name='RFC' value='7685'/>
<seriesInfo name='DOI' value='10.17487/RFC7685'/>
</reference>


<reference anchor="DSS" >
  <front>
    <title>Digital Signature Standard, version 4</title>
    <author >
      <organization>National Institute of Standards and Technology, U.S. Department of Commerce</organization>
    </author>
    <date year="2013"/>
  </front>
  <seriesInfo name="NIST" value="FIPS PUB 186-4"/>
</reference>
<reference anchor="ECDSA" >
  <front>
    <title>Public Key Cryptography for the Financial Services Industry: The Elliptic Curve Digital Signature Algorithm (ECDSA)</title>
    <author >
      <organization>American National Standards Institute</organization>
    </author>
    <date year="2005" month="November"/>
  </front>
  <seriesInfo name="ANSI" value="ANS X9.62-2005"/>
</reference>
<reference anchor="RSA" >
  <front>
    <title>A Method for Obtaining Digital Signatures and Public-Key Cryptosystems</title>
    <author initials="R." surname="Rivest">
      <organization></organization>
    </author>
    <author initials="A." surname="Shamir">
      <organization></organization>
    </author>
    <author initials="L.M." surname="Adleman">
      <organization></organization>
    </author>
    <date year="1978" month="February"/>
  </front>
  <seriesInfo name="Communications of the ACM" value="v. 21, n. 2, pp. 120-126."/>
</reference>
<reference anchor="SSL2" >
  <front>
    <title>The SSL Protocol</title>
    <author initials="K." surname="Hickman" fullname="Kipp Hickman">
      <organization>Netscape Communications Corp.</organization>
    </author>
    <date year="1995" month="February" day="09"/>
  </front>
</reference>
<reference anchor="SSL3" >
  <front>
    <title>The SSL 3.0 Protocol</title>
    <author initials="A." surname="Freier">
      <organization>Netscape Communications Corp.</organization>
    </author>
    <author initials="P." surname="Karlton">
      <organization>Netscape Communications Corp.</organization>
    </author>
    <author initials="P." surname="Kocher">
      <organization>Netscape Communications Corp.</organization>
    </author>
    <date year="1996" month="November" day="18"/>
  </front>
</reference>
<reference anchor="TIMING" >
  <front>
    <title>Remote timing attacks are practical</title>
    <author initials="D." surname="Boneh">
      <organization></organization>
    </author>
    <author initials="D." surname="Brumley">
      <organization></organization>
    </author>
    <date year="2003"/>
  </front>
  <seriesInfo name="USENIX" value="Security Symposium"/>
</reference>
<reference anchor="X501" >
  <front>
    <title>Information Technology - Open Systems Interconnection - The Directory: Models</title>
    <author >
      <organization></organization>
    </author>
    <date year="1993"/>
  </front>
  <seriesInfo name="ITU-T" value="X.501"/>
</reference>
<reference anchor="IEEE1363" >
  <front>
    <title>Standard Specifications for Public Key Cryptography</title>
    <author >
      <organization>IEEE</organization>
    </author>
    <date year="2000"/>
  </front>
  <seriesInfo name="IEEE 1363" value=""/>
</reference>
<reference anchor="PSK-FINISHED" target="https://www.ietf.org/mail-archive/web/tls/current/msg18215.html">
  <front>
    <title>Revision 10: possible attack if client authentication is allowed during PSK</title>
    <author initials="C." surname="Cremers">
      <organization></organization>
    </author>
    <author initials="M." surname="Horvat">
      <organization></organization>
    </author>
    <author initials="T." surname="van der Merwe">
      <organization></organization>
    </author>
    <author initials="S." surname="Scott">
      <organization></organization>
    </author>
    <date year="2015"/>
  </front>
</reference>
<reference anchor="CHHSV17" target="https://www.ietf.org/mail-archive/web/tls/current/msg22382.html">
  <front>
    <title>Awkward Handshake: Possible mismatch of client/server view on client authentication in post-handshake mode in Revision 18</title>
    <author initials="C." surname="Cremers">
      <organization></organization>
    </author>
    <author initials="M." surname="Horvat">
      <organization></organization>
    </author>
    <author initials="J." surname="Hoyland">
      <organization></organization>
    </author>
    <author initials="T." surname="van der Merwe">
      <organization></organization>
    </author>
    <author initials="S." surname="Scott">
      <organization></organization>
    </author>
    <date year="2017"/>
  </front>
</reference>
<reference anchor="SLOTH" >
  <front>
    <title>Transcript Collision Attacks: Breaking Authentication in TLS, IKE, and SSH</title>
    <author initials="K." surname="Bhargavan">
      <organization></organization>
    </author>
    <author initials="G." surname="Leurent">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="Network and Distributed System Security Symposium (NDSS 2016)" value=""/>
</reference>
<reference anchor="AEAD-LIMITS" target="http://www.isg.rhul.ac.uk/~kp/TLS-AEbounds.pdf">
  <front>
    <title>Limits on Authenticated Encryption Use in TLS</title>
    <author initials="A." surname="Luykx">
      <organization></organization>
    </author>
    <author initials="K." surname="Paterson">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
</reference>
<reference anchor="CK01" >
  <front>
    <title>Analysis of Key-Exchange Protocols and Their Use for Building Secure Channels</title>
    <author initials="R." surname="Canetti">
      <organization></organization>
    </author>
    <author initials="H." surname="Krawczyk">
      <organization></organization>
    </author>
    <date year="2001"/>
  </front>
  <seriesInfo name="Proceedings of Eurocrypt 2001" value=""/>
</reference>
<reference anchor="CCG16" >
  <front>
    <title>On Post-Compromise Security</title>
    <author initials="K." surname="Cohn-Gordon">
      <organization></organization>
    </author>
    <author initials="C." surname="Cremers">
      <organization></organization>
    </author>
    <author initials="L." surname="Garratt">
      <organization></organization>
    </author>
    <date year="2015"/>
  </front>
  <seriesInfo name="IEEE Computer Security Foundations Symposium" value=""/>
</reference>
<reference anchor="BBFKZG16" >
  <front>
    <title>Downgrade Resilience in Key-Exchange Protocols</title>
    <author initials="K." surname="Bhargavan">
      <organization></organization>
    </author>
    <author initials="C." surname="Brzuska">
      <organization></organization>
    </author>
    <author initials="C." surname="Fournet">
      <organization></organization>
    </author>
    <author initials="M." surname="Kohlweiss">
      <organization></organization>
    </author>
    <author initials="S." surname="Zanella-Beguelin">
      <organization></organization>
    </author>
    <author initials="M." surname="Green">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="Proceedings of IEEE Symposium on Security and Privacy (Oakland) 2016" value=""/>
</reference>
<reference anchor="DOW92" >
  <front>
    <title>Authentication and authenticated key exchanges</title>
    <author initials="W." surname="Diffie">
      <organization></organization>
    </author>
    <author initials="P." surname="van Oorschot">
      <organization></organization>
    </author>
    <author initials="M." surname="Wiener">
      <organization></organization>
    </author>
    <date year="1992"/>
  </front>
  <seriesInfo name="Designs, Codes and Cryptography" value=""/>
</reference>
<reference anchor="HGFS15" >
  <front>
    <title>Prying Open Pandora's Box: KCI Attacks against TLS</title>
    <author initials="C." surname="Hlauschek">
      <organization></organization>
    </author>
    <author initials="M." surname="Gruber">
      <organization></organization>
    </author>
    <author initials="F." surname="Fankhauser">
      <organization></organization>
    </author>
    <author initials="C." surname="Schanes">
      <organization></organization>
    </author>
    <date year="2015"/>
  </front>
  <seriesInfo name="Proceedings of USENIX Workshop on Offensive Technologies" value=""/>
</reference>
<reference anchor="SIGMA" >
  <front>
    <title>SIGMA: the 'SIGn-and-MAc' approach to authenticated Diffie-Hellman and its use in the IKE protocols</title>
    <author initials="H." surname="Krawczyk">
      <organization></organization>
    </author>
    <date year="2003"/>
  </front>
  <seriesInfo name="Proceedings of CRYPTO 2003" value=""/>
</reference>
<reference anchor="CHSV16" target="http://ieeexplore.ieee.org/document/7546518/">
  <front>
    <title>Automated Analysis and Verification of TLS 1.3: 0-RTT, Resumption and Delayed Authentication</title>
    <author initials="C." surname="Cremers">
      <organization></organization>
    </author>
    <author initials="M." surname="Horvat">
      <organization></organization>
    </author>
    <author initials="S." surname="Scott">
      <organization></organization>
    </author>
    <author initials="T." surname="van der Merwe">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="Proceedings of IEEE Symposium on Security and Privacy (Oakland) 2016" value=""/>
</reference>
<reference anchor="FGSW16" target="http://ieeexplore.ieee.org/document/7546517/">
  <front>
    <title>Key Confirmation in Key Exchange: A Formal Treatment and Implications for TLS 1.3</title>
    <author initials="M." surname="Fischlin">
      <organization></organization>
    </author>
    <author initials="F." surname="Guenther">
      <organization></organization>
    </author>
    <author initials="B." surname="Schmidt">
      <organization></organization>
    </author>
    <author initials="B." surname="Warinschi">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="Proceedings of IEEE Symposium on Security and Privacy (Oakland) 2016" value=""/>
</reference>
<reference anchor="LXZFH16" target="http://ieeexplore.ieee.org/document/7546519/">
  <front>
    <title>Multiple Handshakes Security of TLS 1.3 Candidates</title>
    <author initials="X." surname="Li">
      <organization></organization>
    </author>
    <author initials="J." surname="Xu">
      <organization></organization>
    </author>
    <author initials="D." surname="Feng">
      <organization></organization>
    </author>
    <author initials="Z." surname="Zhang">
      <organization></organization>
    </author>
    <author initials="H." surname="Hu">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="Proceedings of IEEE Symposium on Security and Privacy (Oakland) 2016" value=""/>
</reference>
<reference anchor="FW15" >
  <front>
    <title>Factoring RSA Keys With TLS Perfect Forward Secrecy</title>
    <author initials="." surname="Florian Weimer">
      <organization>Red Hat Product Security</organization>
    </author>
    <date year="2015" month="September"/>
  </front>
</reference>
<reference anchor="REKEY" >
  <front>
    <title>Increasing the Lifetime of a Key: A Comparative Analysis of the Security of Re-keying Techniques</title>
    <author initials="M." surname="Abdalla">
      <organization></organization>
    </author>
    <author initials="M." surname="Bellare">
      <organization></organization>
    </author>
    <date year="2000" month="October"/>
  </front>
  <seriesInfo name="ASIACRYPT2000" value=""/>
</reference>
<reference anchor="BDFKPPRSZZ16" target="https://eprint.iacr.org/2016/1178">
  <front>
    <title>Implementing and Proving the TLS 1.3 Record Layer</title>
    <author initials="K." surname="Bhargavan">
      <organization></organization>
    </author>
    <author initials="A." surname="Delignat-Lavaud">
      <organization></organization>
    </author>
    <author initials="C." surname="Fournet">
      <organization></organization>
    </author>
    <author initials="M." surname="Kohlweiss">
      <organization></organization>
    </author>
    <author initials="J." surname="Pan">
      <organization></organization>
    </author>
    <author initials="J." surname="Protzenko">
      <organization></organization>
    </author>
    <author initials="A." surname="Rastogi">
      <organization></organization>
    </author>
    <author initials="N." surname="Swamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Zanella-Beguelin">
      <organization></organization>
    </author>
    <author initials="J.K." surname="Zinzindohoue">
      <organization></organization>
    </author>
    <date year="2016" month="December"/>
  </front>
  <seriesInfo name="Proceedings of IEEE Symposium on Security and Privacy (Oakland) 2017" value=""/>
</reference>
<reference anchor="BMMT15" target="https://eprint.iacr.org/2015/394">
  <front>
    <title>Augmented Secure Channels and the Goal of the TLS 1.3 Record Layer</title>
    <author initials="C." surname="Badertscher">
      <organization></organization>
    </author>
    <author initials="C." surname="Matt">
      <organization></organization>
    </author>
    <author initials="U." surname="Maurer">
      <organization></organization>
    </author>
    <author initials="B." surname="Tackmann">
      <organization></organization>
    </author>
    <date year="2015" month="September"/>
  </front>
  <seriesInfo name="ProvSec 2015" value=""/>
</reference>
<reference anchor="BT16" target="https://eprint.iacr.org/2016/564">
  <front>
    <title>The Multi-User Security of Authenticated Encryption: AES-GCM in TLS 1.3</title>
    <author initials="M." surname="Bellare">
      <organization></organization>
    </author>
    <author initials="B." surname="Tackmann">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="Proceedings of CRYPTO 2016" value=""/>
</reference>
<reference anchor="Kraw16" target="https://eprint.iacr.org/2016/711">
  <front>
    <title>A Unilateral-to-Mutual Authentication Compiler for Key Exchange (with Applications to Client Authentication in TLS 1.3</title>
    <author initials="H." surname="Krawczyk">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="Proceedings of ACM CCS 2016" value=""/>
</reference>
<reference anchor="KW16" target="https://eprint.iacr.org/2015/978">
  <front>
    <title>The OPTLS Protocol and TLS 1.3</title>
    <author initials="H." surname="Krawczyk">
      <organization></organization>
    </author>
    <author initials="H." surname="Wee">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="Proceedings of Euro S&quot;P 2016" value=""/>
</reference>
<reference anchor="DFGS15" target="https://eprint.iacr.org/2015/914">
  <front>
    <title>A Cryptographic Analysis of the TLS 1.3 draft-10 Full and Pre-shared Key Handshake Protocol</title>
    <author initials="B." surname="Dowling">
      <organization></organization>
    </author>
    <author initials="M." surname="Fischlin">
      <organization></organization>
    </author>
    <author initials="F." surname="Guenther">
      <organization></organization>
    </author>
    <author initials="D." surname="Stebila">
      <organization></organization>
    </author>
    <date year="2015"/>
  </front>
  <seriesInfo name="Proceedings of ACM CCS 2015" value=""/>
</reference>
<reference anchor="DFGS16" target="https://eprint.iacr.org/2016/081">
  <front>
    <title>A Cryptographic Analysis of the TLS 1.3 draft-10 Full and Pre-shared Key Handshake Protocol</title>
    <author initials="B." surname="Dowling">
      <organization></organization>
    </author>
    <author initials="M." surname="Fischlin">
      <organization></organization>
    </author>
    <author initials="F." surname="Guenther">
      <organization></organization>
    </author>
    <author initials="D." surname="Stebila">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="TRON 2016" value=""/>
</reference>
<reference anchor="FG17" target="https://eprint.iacr.org/2017/082">
  <front>
    <title>Replay Attacks on Zero Round-Trip Time: The Case of the TLS 1.3 Handshake Candidates</title>
    <author initials="M." surname="Fischlin">
      <organization></organization>
    </author>
    <author initials="F." surname="Guenther">
      <organization></organization>
    </author>
    <date year="2017"/>
  </front>
  <seriesInfo name="Proceedings of Euro S&quot;P 2017" value=""/>
</reference>
<reference anchor="BBK17" >
  <front>
    <title>Verified Models and Reference Implementations for the TLS 1.3 Standard Candidate</title>
    <author initials="K." surname="Bhargavan">
      <organization></organization>
    </author>
    <author initials="B." surname="Blanchet">
      <organization></organization>
    </author>
    <author initials="N." surname="Kobeissi">
      <organization></organization>
    </author>
    <date year="2017"/>
  </front>
  <seriesInfo name="Proceedings of IEEE Symposium on Security and Privacy (Oakland) 2017" value=""/>
</reference>
<reference anchor="Kraw10" target="https://eprint.iacr.org/2010/264">
  <front>
    <title>Cryptographic Extraction and Key Derivation: The HKDF Scheme</title>
    <author initials="H." surname="Krawczyk">
      <organization></organization>
    </author>
    <date year="2010"/>
  </front>
  <seriesInfo name="Proceedings of CRYPTO 2010" value=""/>
</reference>
<reference anchor="Mac17" target="https://github.com/tlswg/tls13-spec/issues/1001">
  <front>
    <title>Security Review of TLS1.3 0-RTT</title>
    <author initials="C." surname="MacCarthaigh">
      <organization></organization>
    </author>
    <date year="2017"/>
  </front>
</reference>
<reference anchor="Res17a" target="https://www.ietf.org/mail-archive/web/tls/current/msg25091.html">
  <front>
    <title>Preliminary data on Firefox TLS 1.3 Middlebox experiment</title>
    <author initials="E." surname="Rescorla">
      <organization></organization>
    </author>
    <date year="2017"/>
  </front>
</reference>
<reference anchor="Res17b" target="https://www.ietf.org/mail-archive/web/tls/current/msg25179.html">
  <front>
    <title>More compatibility measurement results</title>
    <author initials="E." surname="Rescorla">
      <organization></organization>
    </author>
    <date year="2017"/>
  </front>
</reference>
<reference anchor="Ben17a" target="https://datatracker.ietf.org/meeting/100/materials/slides-100-tls-sessa-tls13/">
  <front>
    <title>Presentation before the TLS WG at IETF 100</title>
    <author initials="D." surname="Benjamin">
      <organization></organization>
    </author>
    <date year="2017"/>
  </front>
</reference>
<reference anchor="Ben17b" target="https://www.ietf.org/mail-archive/web/tls/current/msg25168.html">
  <front>
    <title>Additional TLS 1.3 results from Chrome</title>
    <author initials="D." surname="Benjamin">
      <organization></organization>
    </author>
    <date year="2017"/>
  </front>
</reference>
<reference anchor="JSS15" target="https://www.nds.rub.de/media/nds/veroeffentlichungen/2015/08/21/Tls13QuicAttacks.pdf">
  <front>
    <title>On the Security of TLS 1.3 and QUIC Against Weaknesses in PKCS#1 v1.5 Encryption</title>
    <author initials="T." surname="Jager">
      <organization></organization>
    </author>
    <author initials="J." surname="Schwenk">
      <organization></organization>
    </author>
    <author initials="J." surname="Somorovsky">
      <organization></organization>
    </author>
    <date year="2015"/>
  </front>
  <seriesInfo name="Proceedings of ACM CCS 2015" value=""/>
</reference>
<reference anchor="Anon18" >
  <front>
    <title>Secure Channels for Multiplexed Data Streams: Analyzing the TLS 1.3 Record Layer Without Elision</title>
    <author initials="A." surname="Anonymous">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
  <seriesInfo name="In submission to CRYPTO 2018. RFC EDITOR: PLEASE UPDATE THIS REFERENCE AFTER FINAL NOTIFICATION (2018-4-29)." value=""/>
</reference>




<reference  anchor="RFC3552" target='https://www.rfc-editor.org/info/rfc3552'>
<front>
<title>Guidelines for Writing RFC Text on Security Considerations</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='B.' surname='Korver' fullname='B. Korver'><organization /></author>
<date year='2003' month='July' />
<abstract><t>All RFCs are required to have a Security Considerations section. Historically, such sections have been relatively weak.  This document provides guidelines to RFC authors on how to write a good Security Considerations section.   This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='72'/>
<seriesInfo name='RFC' value='3552'/>
<seriesInfo name='DOI' value='10.17487/RFC3552'/>
</reference>



<reference  anchor="RFC7924" target='https://www.rfc-editor.org/info/rfc7924'>
<front>
<title>Transport Layer Security (TLS) Cached Information Extension</title>
<author initials='S.' surname='Santesson' fullname='S. Santesson'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2016' month='July' />
<abstract><t>Transport Layer Security (TLS) handshakes often include fairly static information, such as the server certificate and a list of trusted certification authorities (CAs).  This information can be of considerable size, particularly if the server certificate is bundled with a complete certificate chain (i.e., the certificates of intermediate CAs up to the root CA).</t><t>This document defines an extension that allows a TLS client to inform a server of cached information, thereby enabling the server to omit already available information.</t></abstract>
</front>
<seriesInfo name='RFC' value='7924'/>
<seriesInfo name='DOI' value='10.17487/RFC7924'/>
</reference>



<reference  anchor="RFC6347" target='https://www.rfc-editor.org/info/rfc6347'>
<front>
<title>Datagram Transport Layer Security Version 1.2</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='N.' surname='Modadugu' fullname='N. Modadugu'><organization /></author>
<date year='2012' month='January' />
<abstract><t>This document specifies version 1.2 of the Datagram Transport Layer Security (DTLS) protocol.  The DTLS protocol provides communications privacy for datagram protocols.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  The DTLS protocol is based on the Transport Layer Security (TLS) protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol.  This document updates DTLS 1.0 to work with TLS version 1.2.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6347'/>
<seriesInfo name='DOI' value='10.17487/RFC6347'/>
</reference>

<reference anchor="KEYAGREEMENT" >
  <front>
    <title>Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography</title>
    <author initials="E." surname="Barker" fullname="Elaine Barker">
      <organization></organization>
    </author>
    <author initials="L." surname="Chen" fullname="Lily Chen">
      <organization></organization>
    </author>
    <author initials="A." surname="Roginsky" fullname="Allen Roginsky">
      <organization></organization>
    </author>
    <author initials="M." surname="Smid" fullname="Miles Smid">
      <organization></organization>
    </author>
    <date year="2013" month="May"/>
  </front>
  <seriesInfo name="National Institute of Standards and Technology" value="report"/>
  <seriesInfo name="DOI" value="10.6028/nist.sp.800-56ar2"/>
</reference>



<reference anchor="I-D.ietf-tls-iana-registry-updates">
<front>
<title>IANA Registry Updates for TLS and DTLS</title>

<author initials='J' surname='Salowey' fullname='Joseph Salowey'>
    <organization />
</author>

<author initials='S' surname='Turner' fullname='Sean Turner'>
    <organization />
</author>

<date month='February' day='15' year='2018' />

<abstract><t>This document describes a number of changes to (D)TLS IANA registries that range from adding notes to the registry all the way to changing the registration policy.  These changes were mostly motivated by WG review of the (D)TLS-related registries undertaken as part of the TLS1.3 development process.  This document updates many (D)TLS RFCs (see updates header).</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tls-iana-registry-updates-04' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tls-iana-registry-updates-04.txt' />
</reference>



<reference anchor="I-D.ietf-tls-tls13-vectors">
<front>
<title>Example Handshake Traces for TLS 1.3</title>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<date month='December' day='4' year='2017' />

<abstract><t>Examples of TLS 1.3 handshakes are shown.  Private keys and inputs are provided so that these handshakes might be reproduced. Intermediate values, including secrets, traffic keys and ivs are shown so that implementations might be checked incrementally against these values.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tls-tls13-vectors-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tls-tls13-vectors-03.txt' />
</reference>

<reference anchor="CHECKOWAY" >
  <front>
    <title>A Systematic Analysis of the Juniper Dual EC Incident</title>
    <author initials="S." surname="Checkoway" fullname="Stephen Checkoway">
      <organization></organization>
    </author>
    <author initials="H." surname="Shacham" fullname="Hovav Shacham">
      <organization></organization>
    </author>
    <author initials="J." surname="Maskiewicz" fullname="Jacob Maskiewicz">
      <organization></organization>
    </author>
    <author initials="C." surname="Garman" fullname="Christina Garman">
      <organization></organization>
    </author>
    <author initials="J." surname="Fried" fullname="Joshua Fried">
      <organization></organization>
    </author>
    <author initials="S." surname="Cohney" fullname="Shaanan Cohney">
      <organization></organization>
    </author>
    <author initials="M." surname="Green" fullname="Matthew Green">
      <organization></organization>
    </author>
    <author initials="N." surname="Heninger" fullname="Nadia Heninger">
      <organization></organization>
    </author>
    <author initials="R." surname="Weinmann" fullname="Ralf-Philipp Weinmann">
      <organization></organization>
    </author>
    <author initials="E." surname="Rescorla" fullname="Eric Rescorla">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security -" value="CCS'16"/>
  <seriesInfo name="DOI" value="10.1145/2976749.2978395"/>
</reference>

<reference anchor="CLINIC" >
  <front>
    <title>I Know Why You Went to the Clinic: Risks and Realization of HTTPS Traffic Analysis</title>
    <author initials="B." surname="Miller" fullname="Brad Miller">
      <organization></organization>
    </author>
    <author initials="L." surname="Huang" fullname="Ling Huang">
      <organization></organization>
    </author>
    <author initials="A." surname="Joseph" fullname="A. D. Joseph">
      <organization></organization>
    </author>
    <author initials="J." surname="Tygar" fullname="J. D. Tygar">
      <organization></organization>
    </author>
    <date year="2014"/>
  </front>
  <seriesInfo name="Privacy Enhancing Technologies" value="pp. 143-163"/>
  <seriesInfo name="DOI" value="10.1007/978-3-319-08506-7_8"/>
</reference>

<reference anchor="HCJ16" >
  <front>
    <title>HTTPS traffic analysis and client identification using passive SSL/TLS fingerprinting</title>
    <author initials="M." surname="Husák" fullname="Martin Husák">
      <organization></organization>
    </author>
    <author initials="M." surname="Čermák" fullname="Milan Čermák">
      <organization></organization>
    </author>
    <author initials="T." surname="Jirsík" fullname="Tomáš Jirsík">
      <organization></organization>
    </author>
    <author initials="P." surname="Čeleda" fullname="Pavel Čeleda">
      <organization></organization>
    </author>
    <date year="2016" month="February"/>
  </front>
  <seriesInfo name="EURASIP Journal on Information Security" value="Vol. 2016"/>
  <seriesInfo name="DOI" value="10.1186/s13635-016-0030-7"/>
</reference>




    </references>


<section anchor="state-machine" title="State Machine">

<t>This section provides a summary of the legal state transitions for the
client and server handshakes.  State names (in all capitals, e.g.,
START) have no formal meaning but are provided for ease of
comprehension.  Actions which are taken only in certain circumstances are
indicated in []. The notation “K_{send,recv} = foo” means “set the send/recv
key to the given key”.</t>

<section anchor="client" title="Client">

<figure><artwork><![CDATA[
                           START <----+
            Send ClientHello |        | Recv HelloRetryRequest
       [K_send = early data] |        |
                             v        |
        /                 WAIT_SH ----+
        |                    | Recv ServerHello
        |                    | K_recv = handshake
    Can |                    V
   send |                 WAIT_EE
  early |                    | Recv EncryptedExtensions
   data |           +--------+--------+
        |     Using |                 | Using certificate
        |       PSK |                 v
        |           |            WAIT_CERT_CR
        |           |        Recv |       | Recv CertificateRequest
        |           | Certificate |       v
        |           |             |    WAIT_CERT
        |           |             |       | Recv Certificate
        |           |             v       v
        |           |              WAIT_CV
        |           |                 | Recv CertificateVerify
        |           +> WAIT_FINISHED <+
        |                  | Recv Finished
        \                  | [Send EndOfEarlyData]
                           | K_send = handshake
                           | [Send Certificate [+ CertificateVerify]]
 Can send                  | Send Finished
 app data   -->            | K_send = K_recv = application
 after here                v
                       CONNECTED
]]></artwork></figure>

<t>Note that with the transitions as shown above, clients may send alerts
that derive from post-ServerHello messages in the clear or with the
early data keys. If clients need to send such alerts, they SHOULD
first rekey to the handshake keys if possible.</t>

</section>
<section anchor="server" title="Server">

<figure><artwork><![CDATA[
                             START <-----+
              Recv ClientHello |         | Send HelloRetryRequest
                               v         |
                            RECVD_CH ----+
                               | Select parameters
                               v
                            NEGOTIATED
                               | Send ServerHello
                               | K_send = handshake
                               | Send EncryptedExtensions
                               | [Send CertificateRequest]
Can send                       | [Send Certificate + CertificateVerify]
app data                       | Send Finished
after   -->                    | K_send = application
here                  +--------+--------+
             No 0-RTT |                 | 0-RTT
                      |                 |
  K_recv = handshake  |                 | K_recv = early data
[Skip decrypt errors] |    +------> WAIT_EOED -+
                      |    |       Recv |      | Recv EndOfEarlyData
                      |    | early data |      | K_recv = handshake
                      |    +------------+      |
                      |                        |
                      +> WAIT_FLIGHT2 <--------+
                               |
                      +--------+--------+
              No auth |                 | Client auth
                      |                 |
                      |                 v
                      |             WAIT_CERT
                      |        Recv |       | Recv Certificate
                      |       empty |       v
                      | Certificate |    WAIT_CV
                      |             |       | Recv
                      |             v       | CertificateVerify
                      +-> WAIT_FINISHED <---+
                               | Recv Finished
                               | K_recv = application
                               v
                           CONNECTED
]]></artwork></figure>

</section>
</section>
<section anchor="protocol-data-structures-and-constant-values" title="Protocol Data Structures and Constant Values">

<t>This section provides the normative protocol types and constants definitions.  Values listed as
_RESERVED were used in previous versions of TLS and are listed here
for completeness. TLS 1.3 implementations MUST NOT send them but
might receive them from older TLS implementations.</t>

<section anchor="record-layer-1" title="Record Layer">

<figure><artwork><![CDATA[
   enum {
       invalid(0),
       change_cipher_spec(20),
       alert(21),
       handshake(22),
       application_data(23),
       (255)
   } ContentType;

   struct {
       ContentType type;
       ProtocolVersion legacy_record_version;
       uint16 length;
       opaque fragment[TLSPlaintext.length];
   } TLSPlaintext;

   struct {
       opaque content[TLSPlaintext.length];
       ContentType type;
       uint8 zeros[length_of_padding];
   } TLSInnerPlaintext;

   struct {
       ContentType opaque_type = application_data; /* 23 */
       ProtocolVersion legacy_record_version = 0x0303; /* TLS v1.2 */
       uint16 length;
       opaque encrypted_record[TLSCiphertext.length];
   } TLSCiphertext;
]]></artwork></figure>

</section>
<section anchor="alert-messages" title="Alert Messages">

<figure><artwork><![CDATA[
   enum { warning(1), fatal(2), (255) } AlertLevel;

   enum {
       close_notify(0),
       unexpected_message(10),
       bad_record_mac(20),
       decryption_failed_RESERVED(21),
       record_overflow(22),
       decompression_failure_RESERVED(30),
       handshake_failure(40),
       no_certificate_RESERVED(41),
       bad_certificate(42),
       unsupported_certificate(43),
       certificate_revoked(44),
       certificate_expired(45),
       certificate_unknown(46),
       illegal_parameter(47),
       unknown_ca(48),
       access_denied(49),
       decode_error(50),
       decrypt_error(51),
       export_restriction_RESERVED(60),
       protocol_version(70),
       insufficient_security(71),
       internal_error(80),
       inappropriate_fallback(86),
       user_canceled(90),
       no_renegotiation_RESERVED(100),
       missing_extension(109),
       unsupported_extension(110),
       certificate_unobtainable_RESERVED(111),
       unrecognized_name(112),
       bad_certificate_status_response(113),
       bad_certificate_hash_value_RESERVED(114),
       unknown_psk_identity(115),
       certificate_required(116),
       no_application_protocol(120),
       (255)
   } AlertDescription;

   struct {
       AlertLevel level;
       AlertDescription description;
   } Alert;
]]></artwork></figure>

</section>
<section anchor="handshake-protocol-1" title="Handshake Protocol">

<figure><artwork><![CDATA[
   enum {
       hello_request_RESERVED(0),
       client_hello(1),
       server_hello(2),
       hello_verify_request_RESERVED(3),
       new_session_ticket(4),
       end_of_early_data(5),
       hello_retry_request_RESERVED(6),
       encrypted_extensions(8),
       certificate(11),
       server_key_exchange_RESERVED(12),
       certificate_request(13),
       server_hello_done_RESERVED(14),
       certificate_verify(15),
       client_key_exchange_RESERVED(16),
       finished(20),
       key_update(24),
       message_hash(254),
       (255)
   } HandshakeType;

   struct {
       HandshakeType msg_type;    /* handshake type */
       uint24 length;             /* bytes in message */
       select (Handshake.msg_type) {
           case client_hello:          ClientHello;
           case server_hello:          ServerHello;
           case end_of_early_data:     EndOfEarlyData;
           case encrypted_extensions:  EncryptedExtensions;
           case certificate_request:   CertificateRequest;
           case certificate:           Certificate;
           case certificate_verify:    CertificateVerify;
           case finished:              Finished;
           case new_session_ticket:    NewSessionTicket;
           case key_update:            KeyUpdate;
       };
   } Handshake;
]]></artwork></figure>

<section anchor="key-exchange-messages-1" title="Key Exchange Messages">

<figure><artwork><![CDATA[
   uint16 ProtocolVersion;
   opaque Random[32];

   uint8 CipherSuite[2];    /* Cryptographic suite selector */

   struct {
       ProtocolVersion legacy_version = 0x0303;    /* TLS v1.2 */
       Random random;
       opaque legacy_session_id<0..32>;
       CipherSuite cipher_suites<2..2^16-2>;
       opaque legacy_compression_methods<1..2^8-1>;
       Extension extensions<8..2^16-1>;
   } ClientHello;

   struct {
       ProtocolVersion legacy_version = 0x0303;    /* TLS v1.2 */
       Random random;
       opaque legacy_session_id_echo<0..32>;
       CipherSuite cipher_suite;
       uint8 legacy_compression_method = 0;
       Extension extensions<6..2^16-1>;
   } ServerHello;

   struct {
       ExtensionType extension_type;
       opaque extension_data<0..2^16-1>;
   } Extension;

   enum {
       server_name(0),                             /* RFC 6066 */
       max_fragment_length(1),                     /* RFC 6066 */
       status_request(5),                          /* RFC 6066 */
       supported_groups(10),                       /* RFC 4492, 7919 */
       signature_algorithms(13),                   /* [[this document]] */
       use_srtp(14),                               /* RFC 5764 */
       heartbeat(15),                              /* RFC 6520 */
       application_layer_protocol_negotiation(16), /* RFC 7301 */
       signed_certificate_timestamp(18),           /* RFC 6962 */
       client_certificate_type(19),                /* RFC 7250 */
       server_certificate_type(20),                /* RFC 7250 */
       padding(21),                                /* RFC 7685 */
       RESERVED(40),                               /* Used but never assigned */
       pre_shared_key(41),                         /* [[this document]] */
       early_data(42),                             /* [[this document]] */
       supported_versions(43),                     /* [[this document]] */
       cookie(44),                                 /* [[this document]] */
       psk_key_exchange_modes(45),                 /* [[this document]] */
       RESERVED(46),                               /* Used but never assigned */
       certificate_authorities(47),                /* [[this document]] */
       oid_filters(48),                            /* [[this document]] */
       post_handshake_auth(49),                    /* [[this document]] */
       signature_algorithms_cert(50),              /* [[this document]] */
       key_share(51),                              /* [[this document]] */
       (65535)
   } ExtensionType;

   struct {
       NamedGroup group;
       opaque key_exchange<1..2^16-1>;
   } KeyShareEntry;

   struct {
       KeyShareEntry client_shares<0..2^16-1>;
   } KeyShareClientHello;

   struct {
       NamedGroup selected_group;
   } KeyShareHelloRetryRequest;

   struct {
       KeyShareEntry server_share;
   } KeyShareServerHello;

   struct {
       uint8 legacy_form = 4;
       opaque X[coordinate_length];
       opaque Y[coordinate_length];
   } UncompressedPointRepresentation;

   enum { psk_ke(0), psk_dhe_ke(1), (255) } PskKeyExchangeMode;

   struct {
       PskKeyExchangeMode ke_modes<1..255>;
   } PskKeyExchangeModes;

   struct {} Empty;

   struct {
       select (Handshake.msg_type) {
           case new_session_ticket:   uint32 max_early_data_size;
           case client_hello:         Empty;
           case encrypted_extensions: Empty;
       };
   } EarlyDataIndication;

   struct {
       opaque identity<1..2^16-1>;
       uint32 obfuscated_ticket_age;
   } PskIdentity;

   opaque PskBinderEntry<32..255>;

   struct {
       PskIdentity identities<7..2^16-1>;
       PskBinderEntry binders<33..2^16-1>;
   } OfferedPsks;

   struct {
       select (Handshake.msg_type) {
           case client_hello: OfferedPsks;
           case server_hello: uint16 selected_identity;
       };
   } PreSharedKeyExtension;
]]></artwork></figure>

<section anchor="version-extension" title="Version Extension">

<figure><artwork><![CDATA[
   struct {
       select (Handshake.msg_type) {
           case client_hello:
                ProtocolVersion versions<2..254>;

           case server_hello: /* and HelloRetryRequest */
                ProtocolVersion selected_version;
       };
   } SupportedVersions;
]]></artwork></figure>

</section>
<section anchor="cookie-extension" title="Cookie Extension">

<figure><artwork><![CDATA[
   struct {
       opaque cookie<1..2^16-1>;
   } Cookie;
]]></artwork></figure>

</section>
<section anchor="signature-algorithm-extension" title="Signature Algorithm Extension">

<figure><artwork><![CDATA[
   enum {
       /* RSASSA-PKCS1-v1_5 algorithms */
       rsa_pkcs1_sha256(0x0401),
       rsa_pkcs1_sha384(0x0501),
       rsa_pkcs1_sha512(0x0601),

       /* ECDSA algorithms */
       ecdsa_secp256r1_sha256(0x0403),
       ecdsa_secp384r1_sha384(0x0503),
       ecdsa_secp521r1_sha512(0x0603),

       /* RSASSA-PSS algorithms with public key OID rsaEncryption */
       rsa_pss_rsae_sha256(0x0804),
       rsa_pss_rsae_sha384(0x0805),
       rsa_pss_rsae_sha512(0x0806),

       /* EdDSA algorithms */
       ed25519(0x0807),
       ed448(0x0808),

       /* RSASSA-PSS algorithms with public key OID RSASSA-PSS */
       rsa_pss_pss_sha256(0x0809),
       rsa_pss_pss_sha384(0x080a),
       rsa_pss_pss_sha512(0x080b),

       /* Legacy algorithms */
       rsa_pkcs1_sha1(0x0201),
       ecdsa_sha1(0x0203),

       /* Reserved Code Points */
       obsolete_RESERVED(0x0000..0x0200),
       dsa_sha1_RESERVED(0x0202),
       obsolete_RESERVED(0x0204..0x0400),
       dsa_sha256_RESERVED(0x0402),
       obsolete_RESERVED(0x0404..0x0500),
       dsa_sha384_RESERVED(0x0502),
       obsolete_RESERVED(0x0504..0x0600),
       dsa_sha512_RESERVED(0x0602),
       obsolete_RESERVED(0x0604..0x06FF),
       private_use(0xFE00..0xFFFF),
       (0xFFFF)
   } SignatureScheme;

   struct {
       SignatureScheme supported_signature_algorithms<2..2^16-2>;
   } SignatureSchemeList;
]]></artwork></figure>

</section>
<section anchor="supported-groups-extension" title="Supported Groups Extension">

<figure><artwork><![CDATA[
   enum {
       unallocated_RESERVED(0x0000),

       /* Elliptic Curve Groups (ECDHE) */
       obsolete_RESERVED(0x0001..0x0016),
       secp256r1(0x0017), secp384r1(0x0018), secp521r1(0x0019),
       obsolete_RESERVED(0x001A..0x001C),
       x25519(0x001D), x448(0x001E),

       /* Finite Field Groups (DHE) */
       ffdhe2048(0x0100), ffdhe3072(0x0101), ffdhe4096(0x0102),
       ffdhe6144(0x0103), ffdhe8192(0x0104),

       /* Reserved Code Points */
       ffdhe_private_use(0x01FC..0x01FF),
       ecdhe_private_use(0xFE00..0xFEFF),
       obsolete_RESERVED(0xFF01..0xFF02),
       (0xFFFF)
   } NamedGroup;

   struct {
       NamedGroup named_group_list<2..2^16-1>;
   } NamedGroupList;
]]></artwork></figure>

<t>Values within “obsolete_RESERVED” ranges are used in previous versions
of TLS and MUST NOT be offered or negotiated by TLS 1.3 implementations.
The obsolete curves have various known/theoretical weaknesses or have
had very little usage, in some cases only due to unintentional
server configuration issues. They are no longer considered appropriate
for general use and should be assumed to be potentially unsafe. The set
of curves specified here is sufficient for interoperability with all
currently deployed and properly configured TLS implementations.</t>

</section>
</section>
<section anchor="server-parameters-messages" title="Server Parameters Messages">

<figure><artwork><![CDATA[
   opaque DistinguishedName<1..2^16-1>;

   struct {
       DistinguishedName authorities<3..2^16-1>;
   } CertificateAuthoritiesExtension;

   struct {
       opaque certificate_extension_oid<1..2^8-1>;
       opaque certificate_extension_values<0..2^16-1>;
   } OIDFilter;

   struct {
       OIDFilter filters<0..2^16-1>;
   } OIDFilterExtension;

   struct {} PostHandshakeAuth;

   struct {
       Extension extensions<0..2^16-1>;
   } EncryptedExtensions;

   struct {
       opaque certificate_request_context<0..2^8-1>;
       Extension extensions<2..2^16-1>;
   } CertificateRequest;
]]></artwork></figure>

</section>
<section anchor="authentication-messages-1" title="Authentication Messages">

<figure><artwork><![CDATA[
   /* Managed by IANA */
   enum {
       X509(0),
       OpenPGP_RESERVED(1),
       RawPublicKey(2),
       (255)
   } CertificateType;

   struct {
       select (certificate_type) {
           case RawPublicKey:
             /* From RFC 7250 ASN.1_subjectPublicKeyInfo */
             opaque ASN1_subjectPublicKeyInfo<1..2^24-1>;

           case X509:
             opaque cert_data<1..2^24-1>;
       };
       Extension extensions<0..2^16-1>;
   } CertificateEntry;

   struct {
       opaque certificate_request_context<0..2^8-1>;
       CertificateEntry certificate_list<0..2^24-1>;
   } Certificate;

   struct {
       SignatureScheme algorithm;
       opaque signature<0..2^16-1>;
   } CertificateVerify;

   struct {
       opaque verify_data[Hash.length];
   } Finished;
]]></artwork></figure>

</section>
<section anchor="ticket-establishment" title="Ticket Establishment">

<figure><artwork><![CDATA[
   struct {
       uint32 ticket_lifetime;
       uint32 ticket_age_add;
       opaque ticket_nonce<0..255>;
       opaque ticket<1..2^16-1>;
       Extension extensions<0..2^16-2>;
   } NewSessionTicket;
]]></artwork></figure>

</section>
<section anchor="updating-keys" title="Updating Keys">

<figure><artwork><![CDATA[
   struct {} EndOfEarlyData;

   enum {
       update_not_requested(0), update_requested(1), (255)
   } KeyUpdateRequest;

   struct {
       KeyUpdateRequest request_update;
   } KeyUpdate;
]]></artwork></figure>

</section>
</section>
<section anchor="cipher-suites" title="Cipher Suites">

<t>A symmetric cipher suite defines the pair of the AEAD algorithm and hash
algorithm to be used with HKDF.
Cipher suite names follow the naming convention:</t>

<figure><artwork><![CDATA[
   CipherSuite TLS_AEAD_HASH = VALUE;
]]></artwork></figure>

<texttable>
      <ttcol align='left'>Component</ttcol>
      <ttcol align='left'>Contents</ttcol>
      <c>TLS</c>
      <c>The string “TLS”</c>
      <c>AEAD</c>
      <c>The AEAD algorithm used for record protection</c>
      <c>HASH</c>
      <c>The hash algorithm used with HKDF</c>
      <c>VALUE</c>
      <c>The two byte ID assigned for this cipher suite</c>
</texttable>

<t>This specification defines the following cipher suites for use with TLS 1.3.</t>

<texttable>
      <ttcol align='left'>Description</ttcol>
      <ttcol align='left'>Value</ttcol>
      <c>TLS_AES_128_GCM_SHA256</c>
      <c>{0x13,0x01}</c>
      <c>TLS_AES_256_GCM_SHA384</c>
      <c>{0x13,0x02}</c>
      <c>TLS_CHACHA20_POLY1305_SHA256</c>
      <c>{0x13,0x03}</c>
      <c>TLS_AES_128_CCM_SHA256</c>
      <c>{0x13,0x04}</c>
      <c>TLS_AES_128_CCM_8_SHA256</c>
      <c>{0x13,0x05}</c>
</texttable>

<t>The corresponding AEAD algorithms AEAD_AES_128_GCM, AEAD_AES_256_GCM, and
AEAD_AES_128_CCM are defined in <xref target="RFC5116"/>. AEAD_CHACHA20_POLY1305 is defined
in <xref target="RFC7539"/>. AEAD_AES_128_CCM_8 is defined in <xref target="RFC6655"/>. The corresponding
hash algorithms are defined in <xref target="SHS"/>.</t>

<t>Although TLS 1.3 uses the same cipher suite space as previous versions
of TLS, TLS 1.3 cipher suites are defined differently, only specifying
the symmetric ciphers, and cannot be used for TLS 1.2. Similarly,
TLS 1.2 and lower cipher suites cannot be used with TLS 1.3.</t>

<t>New cipher suite values are assigned by IANA as described in
<xref target="iana-considerations"/>.</t>

</section>
</section>
<section anchor="implementation-notes" title="Implementation Notes">

<t>The TLS protocol cannot prevent many common security mistakes. This section
provides several recommendations to assist implementors.
<xref target="I-D.ietf-tls-tls13-vectors"/> provides test vectors for TLS 1.3 handshakes.</t>

<section anchor="random-number-generation-and-seeding" title="Random Number Generation and Seeding">

<t>TLS requires a cryptographically secure pseudorandom number generator (CSPRNG).
In most cases, the operating system provides an appropriate facility such
as /dev/urandom, which should be used absent other (performance) concerns.
It is RECOMMENDED to use an existing CSPRNG implementation in
preference to crafting a new one. Many adequate cryptographic libraries
are already available under favorable license terms.  Should those prove
unsatisfactory, <xref target="RFC4086"/> provides guidance on the generation of random values.</t>

<t>TLS uses random values both in public protocol fields such as the
public Random values in the ClientHello and ServerHello and to
generate keying material. With a properly functioning CSPRNG, this
does not present a security problem as it is not feasible to determine
the CSPRNG state from its output. However, with a broken CSPRNG, it
may be possible for an attacker to use the public output to determine
the CSPRNG internal state and thereby predict the keying material, as
documented in <xref target="CHECKOWAY"/>.
Implementations can provide extra security against
this form of attack by using separate CSPRNGs to generate public and
private values.</t>

</section>
<section anchor="certificates-and-authentication" title="Certificates and Authentication">

<t>Implementations are responsible for verifying the integrity of certificates and
should generally support certificate revocation messages. Absent a specific
indication from an application profile, Certificates should
always be verified to ensure proper signing by a trusted Certificate Authority
(CA). The selection and addition of trust anchors should be done very carefully.
Users should be able to view information about the certificate and trust anchor.
Applications SHOULD also enforce minimum and maximum key sizes. For example,
certification paths containing keys or signatures weaker than 2048-bit RSA or
224-bit ECDSA are not appropriate for secure applications.</t>

</section>
<section anchor="implementation-pitfalls" title="Implementation Pitfalls">

<t>Implementation experience has shown that certain parts of earlier TLS
specifications are not easy to understand and have been a source of
interoperability and security problems. Many of these areas have been clarified
in this document but this appendix contains a short list of the most important
things that require special attention from implementors.</t>

<t>TLS protocol issues:</t>

<t><list style="symbols">
  <t>Do you correctly handle handshake messages that are fragmented to
multiple TLS records (see <xref target="record-layer"/>)? Including corner cases
like a ClientHello that is split to several small fragments? Do
you fragment handshake messages that exceed the maximum fragment
size? In particular, the Certificate and CertificateRequest
handshake messages can be large enough to require fragmentation.</t>
  <t>Do you ignore the TLS record layer version number in all unencrypted TLS
records? (see <xref target="backward-compatibility"/>)</t>
  <t>Have you ensured that all support for SSL, RC4, EXPORT ciphers, and
MD5 (via the “signature_algorithms” extension) is completely removed from
all possible configurations that support TLS 1.3 or later, and that
attempts to use these obsolete capabilities fail correctly?
(see <xref target="backward-compatibility"/>)</t>
  <t>Do you handle TLS extensions in ClientHello correctly, including
unknown extensions?</t>
  <t>When the server has requested a client certificate, but no
suitable certificate is available, do you correctly send an empty
Certificate message, instead of omitting the whole message (see
<xref target="client-certificate-selection"/>)?</t>
  <t>When processing the plaintext fragment produced by AEAD-Decrypt and
scanning from the end for the ContentType, do you avoid scanning
past the start of the cleartext in the event that the peer has sent
a malformed plaintext of all-zeros?</t>
  <t>Do you properly ignore unrecognized cipher suites
(<xref target="client-hello"/>), hello extensions (<xref target="extensions"/>), named groups
(<xref target="negotiated-groups"/>), key shares (<xref target="key-share"/>),
supported versions (<xref target="supported-versions"/>),
and signature algorithms (<xref target="signature-algorithms"/>) in the
ClientHello?</t>
  <t>As a server, do you send a HelloRetryRequest to clients which
support a compatible (EC)DHE group but do not predict it in the
“key_share” extension? As a client, do you correctly handle a
HelloRetryRequest from the server?</t>
</list></t>

<t>Cryptographic details:</t>

<t><list style="symbols">
  <t>What countermeasures do you use to prevent timing attacks <xref target="TIMING"/>?</t>
  <t>When using Diffie-Hellman key exchange, do you correctly preserve
leading zero bytes in the negotiated key (see <xref target="finite-field-diffie-hellman"/>)?</t>
  <t>Does your TLS client check that the Diffie-Hellman parameters sent
by the server are acceptable, (see <xref target="ffdhe-param"/>)?</t>
  <t>Do you use a strong and, most importantly, properly seeded random number
generator (see <xref target="random-number-generation-and-seeding"/>) when generating Diffie-Hellman
private values, the ECDSA “k” parameter, and other security-critical values?
It is RECOMMENDED that implementations implement “deterministic ECDSA”
as specified in <xref target="RFC6979"/>.</t>
  <t>Do you zero-pad Diffie-Hellman public key values to the group size (see
<xref target="ffdhe-param"/>)?</t>
  <t>Do you verify signatures after making them to protect against RSA-CRT
key leaks? <xref target="FW15"/></t>
</list></t>

</section>
<section anchor="client-tracking" title="Client Tracking Prevention">

<t>Clients SHOULD NOT reuse a ticket for multiple connections. Reuse
of a ticket allows passive observers to correlate different connections.
Servers that issue tickets SHOULD offer at least as many tickets
as the number of connections that a client might use; for example, a web browser
using HTTP/1.1 <xref target="RFC7230"/> might open six connections to a server. Servers SHOULD
issue new tickets with every connection. This ensures that clients are
always able to use a new ticket when creating a new connection.</t>

</section>
<section anchor="unauthenticated-operation" title="Unauthenticated Operation">

<t>Previous versions of TLS offered explicitly unauthenticated cipher suites based
on anonymous Diffie-Hellman. These modes have been deprecated in TLS 1.3.
However, it is still possible to negotiate parameters that do not provide
verifiable server authentication by several methods, including:</t>

<t><list style="symbols">
  <t>Raw public keys <xref target="RFC7250"/>.</t>
  <t>Using a public key contained in a certificate but without
validation of the certificate chain or any of its contents.</t>
</list></t>

<t>Either technique used alone is vulnerable to man-in-the-middle attacks
and therefore unsafe for general use. However, it is also possible to
bind such connections to an external authentication mechanism via
out-of-band validation of the server’s public key, trust on first
use, or a mechanism such as channel bindings (though the
channel bindings described in <xref target="RFC5929"/> are not defined for
TLS 1.3). If no such mechanism is used, then the connection has no protection
against active man-in-the-middle attack; applications MUST NOT use TLS
in such a way absent explicit configuration or a specific application
profile.</t>

</section>
</section>
<section anchor="backward-compatibility" title="Backward Compatibility">

<t>The TLS protocol provides a built-in mechanism for version negotiation between
endpoints potentially supporting different versions of TLS.</t>

<t>TLS 1.x and SSL 3.0 use compatible ClientHello messages. Servers can also handle
clients trying to use future versions of TLS as long as the ClientHello format
remains compatible and there is at least one protocol version supported by
both the client and the server.</t>

<t>Prior versions of TLS used the record layer version number
(TLSPlaintext.legacy_record_version and
TLSCiphertext.legacy_record_version) for various purposes.
As of TLS 1.3, this field is deprecated. The value of
TLSPlaintext.legacy_record_version MUST be ignored by all implementations.
The value of TLSCiphertext.legacy_record_version is included in the
additional data for deprotection but MAY otherwise be ignored
or MAY be validated to match the fixed constant value.
Version negotiation is performed using only the handshake versions
(ClientHello.legacy_version, ServerHello.legacy_version, as well as the
ClientHello, HelloRetryRequest and ServerHello “supported_versions” extensions).
In order to maximize interoperability with older endpoints, implementations
that negotiate the use of TLS 1.0-1.2 SHOULD set the record layer
version number to the negotiated version for the ServerHello and all
records thereafter.</t>

<t>For maximum compatibility with previously non-standard behavior and misconfigured
deployments, all implementations SHOULD support validation of certification paths
based on the expectations in this document, even when handling prior TLS versions’
handshakes. (see <xref target="server-certificate-selection"/>)</t>

<t>TLS 1.2 and prior supported an “Extended Master Secret” <xref target="RFC7627"/> extension
which digested large parts of the handshake transcript into the master secret.
Because TLS 1.3 always hashes in the transcript up to the server CertificateVerify,
implementations which support both TLS 1.3 and earlier versions SHOULD
indicate the use of the Extended Master Secret extension in their APIs
whenever TLS 1.3 is used.</t>

<section anchor="negotiating-with-an-older-server" title="Negotiating with an older server">

<t>A TLS 1.3 client who wishes to negotiate with servers that do not
support TLS 1.3 will send a
normal TLS 1.3 ClientHello containing 0x0303 (TLS 1.2) in
ClientHello.legacy_version but with the correct version(s) in the
“supported_versions” extension. If the server does not support TLS 1.3 it
will respond with a ServerHello containing an older version number. If the
client agrees to use this version, the negotiation will proceed as appropriate
for the negotiated protocol. A client using a ticket for resumption SHOULD initiate the
connection using the version that was previously negotiated.</t>

<t>Note that 0-RTT data is not compatible with older servers and SHOULD NOT
be sent absent knowledge that the server supports TLS 1.3.
See <xref target="zero-rtt-backwards-compatibility"/>.</t>

<t>If the version chosen by the server is not supported by the client (or not
acceptable), the client MUST abort the handshake with a “protocol_version” alert.</t>

<t>Some legacy server implementations are known to not implement the TLS
specification properly and might abort connections upon encountering
TLS extensions or versions which they are not aware of. Interoperability
with buggy servers is a complex topic beyond the scope of this document.
Multiple connection attempts may be required in order to negotiate
a backwards compatible connection; however, this practice is vulnerable
to downgrade attacks and is NOT RECOMMENDED.</t>

</section>
<section anchor="negotiating-with-an-older-client" title="Negotiating with an older client">

<t>A TLS server can also receive a ClientHello indicating a version number smaller
than its highest supported version. If the “supported_versions” extension
is present, the server MUST negotiate using that extension as described in
<xref target="supported-versions"/>. If the “supported_versions” extension is not
present, the server MUST negotiate the minimum of ClientHello.legacy_version
and TLS 1.2. For example, if the server supports TLS 1.0, 1.1, and 1.2,
and legacy_version is TLS 1.0, the server will proceed with a TLS 1.0 ServerHello.
If the “supported_versions” extension is absent and the server only supports
versions greater than ClientHello.legacy_version, the server MUST abort the handshake
with a “protocol_version” alert.</t>

<t>Note that earlier versions of TLS did not clearly specify the record layer
version number value in all cases (TLSPlaintext.legacy_record_version). Servers
will receive various TLS 1.x versions in this field, but its value
MUST always be ignored.</t>

</section>
<section anchor="zero-rtt-backwards-compatibility" title="0-RTT backwards compatibility">

<t>0-RTT data is not compatible with older servers. An older server will respond
to the ClientHello with an older ServerHello, but it will not correctly skip
the 0-RTT data and will fail to complete the handshake. This can cause issues when
a client attempts to use 0-RTT, particularly against multi-server deployments. For
example, a deployment could deploy TLS 1.3 gradually with some servers
implementing TLS 1.3 and some implementing TLS 1.2, or a TLS 1.3 deployment
could be downgraded to TLS 1.2.</t>

<t>A client that attempts to send 0-RTT data MUST fail a connection if it receives
a ServerHello with TLS 1.2 or older.  A client that attempts to repair this
error SHOULD NOT send a TLS 1.2 ClientHello, but instead send a TLS 1.3
ClientHello without 0-RTT data.</t>

<t>To avoid this error condition, multi-server deployments SHOULD ensure a uniform
and stable deployment of TLS 1.3 without 0-RTT prior to enabling 0-RTT.</t>

</section>
<section anchor="middlebox" title="Middlebox Compatibility Mode">

<t>Field measurements
<xref target="Ben17a"/>, <xref target="Ben17b"/>, <xref target="Res17a"/>, <xref target="Res17b"/> have found that a significant number of middleboxes
misbehave when a TLS client/server pair negotiates TLS 1.3. Implementations
can increase the chance of making connections through those middleboxes
by making the TLS 1.3 handshake look more like a TLS 1.2 handshake:</t>

<t><list style="symbols">
  <t>The client always provides a non-empty session ID in the ClientHello,
as described in the legacy_session_id section of <xref target="client-hello"/>.</t>
  <t>If not offering early data, the client sends a dummy
change_cipher_spec record (see the third paragraph of <xref target="record-layer"/>)
immediately before its second flight. This
may either be before its second ClientHello or before its encrypted
handshake flight. If offering early data, the record is placed
immediately after the first ClientHello.</t>
  <t>The server sends a dummy change_cipher_spec record immediately
after its first handshake message. This may either be after a
ServerHello or a HelloRetryRequest.</t>
</list></t>

<t>When put together, these changes make the TLS 1.3 handshake resemble
TLS 1.2 session resumption, which improves the chance of successfully
connecting through middleboxes. This “compatibility mode” is partially
negotiated: The client can opt to provide a session ID or not
and the server has to echo it. Either side can send change_cipher_spec
at any time during the handshake, as they must be ignored by the peer,
but if the client sends a non-empty session ID, the server MUST send
the change_cipher_spec as described in this section.</t>

</section>
<section anchor="backwards-compatibility-security-restrictions" title="Backwards Compatibility Security Restrictions">

<t>Implementations negotiating use of older versions of TLS SHOULD prefer
forward secret and AEAD cipher suites, when available.</t>

<t>The security of RC4 cipher suites is considered insufficient for the reasons
cited in <xref target="RFC7465"/>. Implementations MUST NOT offer or negotiate RC4 cipher suites
for any version of TLS for any reason.</t>

<t>Old versions of TLS permitted the use of very low strength ciphers.
Ciphers with a strength less than 112 bits MUST NOT be offered or
negotiated for any version of TLS for any reason.</t>

<t>The security of SSL 3.0 <xref target="SSL3"/> is considered insufficient for the reasons enumerated
in <xref target="RFC7568"/>, and it MUST NOT be negotiated for any reason.</t>

<t>The security of SSL 2.0 <xref target="SSL2"/> is considered insufficient for the reasons enumerated
in <xref target="RFC6176"/>, and it MUST NOT be negotiated for any reason.</t>

<t>Implementations MUST NOT send an SSL version 2.0 compatible CLIENT-HELLO.
Implementations MUST NOT negotiate TLS 1.3 or later using an SSL version 2.0 compatible
CLIENT-HELLO. Implementations are NOT RECOMMENDED to accept an SSL version 2.0 compatible
CLIENT-HELLO in order to negotiate older versions of TLS.</t>

<t>Implementations MUST NOT send a ClientHello.legacy_version or ServerHello.legacy_version
set to 0x0300 or less. Any endpoint receiving a Hello message with
ClientHello.legacy_version or ServerHello.legacy_version set to 0x0300 MUST
abort the handshake with a “protocol_version” alert.</t>

<t>Implementations MUST NOT send any records with a version less than 0x0300.
Implementations SHOULD NOT accept any records with a version less than 0x0300
(but may inadvertently do so if the record version number is ignored completely).</t>

<t>Implementations MUST NOT use the Truncated HMAC extension, defined in
Section 7 of <xref target="RFC6066"></xref>, as it is not applicable to AEAD algorithms and has
been shown to be insecure in some scenarios.</t>

</section>
</section>
<section anchor="security-analysis" title="Overview of Security Properties">

<t>A complete security analysis of TLS is outside the scope of this document.
In this section, we provide an informal description the desired properties
as well as references to more detailed work in the research literature
which provides more formal definitions.</t>

<t>We cover properties of the handshake separately from those of the record layer.</t>

<section anchor="security-handshake" title="Handshake">

<t>The TLS handshake is an Authenticated Key Exchange (AKE) protocol which
is intended to provide both one-way authenticated (server-only) and
mutually authenticated (client and server) functionality. At the completion
of the handshake, each side outputs its view of the following values:</t>

<t><list style="symbols">
  <t>A set of “session keys” (the various secrets derived from the master secret)
from which can be derived a set of working keys.</t>
  <t>A set of cryptographic parameters (algorithms, etc.)</t>
  <t>The identities of the communicating parties.</t>
</list></t>

<t>We assume the attacker to be an active network attacker, which means it
has complete control over the network used to communicate between the parties <xref target="RFC3552"/>.
Even under these conditions, the handshake should provide the properties listed below.
Note that these properties are not necessarily independent, but reflect
the protocol consumers’ needs.</t>

<t><list style="hanging">
  <t hangText='Establishing the same session keys.'>
  The handshake needs to output the same set of session keys on both sides of
the handshake, provided that it completes successfully on each endpoint
(See <xref target="CK01"/>; defn 1, part 1).</t>
  <t hangText='Secrecy of the session keys.'>
  The shared session keys should be known only to the communicating
parties and not to the attacker (See <xref target="CK01"/>; defn 1, part 2).
Note that in a unilaterally authenticated connection, the attacker can establish
its own session keys with the server, but those session keys are distinct from
those established by the client.</t>
  <t hangText='Peer Authentication.'>
  The client’s view of the peer identity should reflect the server’s
identity. If the client is authenticated, the server’s view of the
peer identity should match the client’s identity.</t>
  <t hangText='Uniqueness of the session keys:'>
  Any two distinct handshakes should produce distinct, unrelated session
keys. Individual session keys produced by a handshake should also be distinct
and independent.</t>
  <t hangText='Downgrade protection.'>
  The cryptographic parameters should be the same on both sides and
should be the same as if the peers had been communicating in the
absence of an attack (See <xref target="BBFKZG16"/>; defns 8 and 9}).</t>
  <t hangText='Forward secret with respect to long-term keys'>
  If the long-term keying material (in this case the signature keys in certificate-based
authentication modes or the external/resumption PSK in PSK with (EC)DHE modes) is compromised after
the handshake is complete, this does not compromise the security of the
session key (See <xref target="DOW92"/>), as long as the session key itself has
been erased. The forward secrecy property is not satisfied
when PSK is used in the “psk_ke” PskKeyExchangeMode.</t>
  <t hangText='Key Compromise Impersonation (KCI) resistance'>
  In a mutually-authenticated connection with certificates, compromising the long-term
secret of one actor should not break that actor’s authentication of their peer in
the given connection (see <xref target="HGFS15"/>). For example, if a client’s signature key is
compromised, it should not be possible to impersonate arbitrary servers to that client
in subsequent handshakes.</t>
  <t hangText='Protection of endpoint identities.'>
  The server’s identity (certificate) should be protected against passive
attackers. The client’s identity should be protected against both passive
and active attackers.</t>
</list></t>

<t>Informally, the signature-based modes of TLS 1.3 provide for the
establishment of a unique, secret, shared key established by an
(EC)DHE key exchange and authenticated by the server’s signature over
the handshake transcript, as well as tied to the server’s identity by
a MAC. If the client is authenticated by a certificate, it also signs
over the handshake transcript and provides a MAC tied to both
identities. <xref target="SIGMA"/> describes the design and analysis of this type of key
exchange protocol. If fresh (EC)DHE keys are used for each connection,
then the output keys are forward secret.</t>

<t>The external PSK and resumption PSK bootstrap from a long-term shared
secret into a unique per-connection set of short-term session keys. This
secret may have been established in a previous handshake. If
PSK with (EC)DHE key establishment is used, these session keys will also be forward
secret. The resumption PSK has been designed so that the
resumption master secret computed by connection N and needed to form
connection N+1 is separate from the traffic keys used by connection N,
thus providing forward secrecy between the connections.
In addition, if multiple tickets are established on the same
connection, they are associated with different keys, so compromise of
the PSK associated with one ticket does not lead to the compromise of
connections established with PSKs associated with other tickets.
This property is most interesting if tickets are stored in a database
(and so can be deleted) rather than if they are self-encrypted.</t>

<t>The PSK binder value forms a binding between a PSK
and the current handshake, as well as between the session where the
PSK was established and the current session. This binding
transitively includes the original handshake transcript, because that
transcript is digested into the values which produce the Resumption
Master Secret. This requires that both the KDF used to produce the
resumption master secret and the MAC used to compute the binder be collision
resistant. See <xref target="key-derivation-and-hkdf"/> for more on this.
Note: The binder does not cover the binder values from other
PSKs, though they are included in the Finished MAC.</t>

<t>Note: TLS does not currently permit the server to send a certificate_request
message in non-certificate-based handshakes (e.g., PSK).
If this restriction were to be relaxed in future, the
client’s signature would not cover the server’s certificate directly.
However, if the PSK was established through a NewSessionTicket, the client’s
signature would transitively cover the server’s certificate through
the PSK binder. <xref target="PSK-FINISHED"/>
describes a concrete attack on constructions that do not bind to
the server’s certificate (see also <xref target="Kraw16"/>). It is unsafe to use certificate-based client
authentication when the client might potentially share the same
PSK/key-id pair with two different endpoints.  Implementations MUST NOT combine
external PSKs with certificate-based authentication of either the
client or the server unless negotiated by some extension.</t>

<t>If an exporter is used, then it produces values which are unique
and secret (because they are generated from a unique session key).
Exporters computed with different labels and contexts are computationally
independent, so it is not feasible to compute one from another or
the session secret from the exported value. Note: exporters can
produce arbitrary-length values. If exporters are to be
used as channel bindings, the exported value MUST be large
enough to provide collision resistance. The exporters provided in
TLS 1.3 are derived from the same handshake contexts as the
early traffic keys and the application traffic keys respectively,
and thus have similar security properties. Note that they do
not include the client’s certificate; future applications
which wish to bind to the client’s certificate may need
to define a new exporter that includes the full handshake
transcript.</t>

<t>For all handshake modes, the Finished MAC (and where present, the
signature), prevents downgrade attacks. In addition, the use of
certain bytes in the random nonces as described in <xref target="server-hello"/>
allows the detection of downgrade to previous TLS versions.
See <xref target="BBFKZG16"/> for more detail on TLS 1.3 and downgrade.</t>

<t>As soon as the client and the server have exchanged enough information
to establish shared keys, the remainder of the handshake is encrypted,
thus providing protection against passive attackers, even if the
computed shared key is not authenticated. Because the server
authenticates before the client, the client can ensure that if it
authenticates to the server, it only
reveals its identity to an authenticated server. Note that implementations
must use the provided record padding mechanism during the handshake
to avoid leaking information about the identities due to length.
The client’s proposed PSK identities are not encrypted, nor is the
one that the server selects.</t>

<section anchor="key-derivation-and-hkdf" title="Key Derivation and HKDF">

<t>Key derivation in TLS 1.3 uses the HKDF function defined in <xref target="RFC5869"/> and
its two components, HKDF-Extract and HKDF-Expand. The full rationale for the HKDF
construction can be found in <xref target="Kraw10"></xref> and the rationale for the way it is used
in TLS 1.3 in <xref target="KW16"></xref>.  Throughout this document, each
application of HKDF-Extract is followed by one or more invocations of
HKDF-Expand. This ordering should always be followed (including in future
revisions of this document), in particular, one SHOULD NOT use an output of
HKDF-Extract as an input to another application of HKDF-Extract without an
HKDF-Expand in between. Consecutive applications of HKDF-Expand are allowed as
long as these are differentiated via the key and/or the labels.</t>

<t>Note that HKDF-Expand implements a pseudorandom function (PRF) with both inputs and
outputs of variable length. In some of the uses of HKDF in this document
(e.g., for generating exporters and the resumption_master_secret), it is necessary
that the application of HKDF-Expand be collision-resistant, namely, it should
be infeasible to find two different inputs to HKDF-Expand that output the same
value. This requires the underlying hash function to be collision resistant
and the output length from HKDF-Expand to be of size at least 256 bits (or as
much as needed for the hash function to prevent finding collisions).</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>A client that has sent authentication data to a server, either during
the handshake or in post-handshake authentication, cannot be sure if
the server afterwards considers the client to be authenticated or not.
If the client needs to determine if the server considers the
connection to be unilaterally or mutually authenticated, this has to
be provisioned by the application layer. See <xref target="CHHSV17"/> for details.
In addition, the analysis of post-handshake authentication from
<xref target="Kraw16"></xref> shows that the client identified by the certificate sent in
the post-handshake phase possesses the traffic key. This party is
therefore the client that participated in the original handshake or
one to whom the original client delegated the traffic key (assuming
that the traffic key has not been compromised).</t>

</section>
<section anchor="rtt" title="0-RTT">

<t>The 0-RTT mode of operation generally provides similar security
properties as 1-RTT data, with the two exceptions that the 0-RTT
encryption keys do not provide full forward secrecy and that the
server is not able to guarantee uniqueness of the handshake
(non-replayability) without keeping potentially undue amounts of
state. See <xref target="anti-replay"/> for mechanisms to limit
the exposure to replay.</t>

</section>
<section anchor="exporter-independence" title="Exporter Independence">

<t>The exporter_master_secret and early_exporter_master_secret are
derived to be independent of the traffic keys and therefore do
not represent a threat to the security of traffic encrypted with
those keys. However, because these secrets can be used to
compute any exporter value, they SHOULD be erased as soon as
possible. If the total set of exporter labels is known, then
implementations SHOULD pre-compute the inner Derive-Secret
stage of the exporter computation for all those labels,
then erase the [early_]exporter_master_secret, followed by
each inner values as soon as it is known that it will not be
needed again.</t>

</section>
<section anchor="post-compromise-security" title="Post-Compromise Security">

<t>TLS does not provide security for handshakes which take place after the peer’s
long-term secret (signature key or external PSK) is compromised. It therefore
does not provide post-compromise security <xref target="CCG16"/>, sometimes also referred to
as backwards or future secrecy. This is in contrast to KCI resistance, which
describes the security guarantees that a party has after its own long-term
secret has been compromised.</t>

</section>
<section anchor="external-references" title="External References">

<t>The reader should refer to the following references for analysis of the
TLS handshake: <xref target="DFGS15"/> <xref target="CHSV16"/> <xref target="DFGS16"/> <xref target="KW16"/> <xref target="Kraw16"/> <xref target="FGSW16"/>
<xref target="LXZFH16"/> <xref target="FG17"/> <xref target="BBK17"/>.</t>

</section>
</section>
<section anchor="security-record-layer" title="Record Layer">

<t>The record layer depends on the handshake producing strong traffic secrets
which can be used to derive bidirectional encryption keys and nonces.
Assuming that is true, and the keys are used for no more data than
indicated in <xref target="limits-on-key-usage"/> then the record layer should provide the following
guarantees:</t>

<t><list style="hanging">
  <t hangText='Confidentiality.'>
  An attacker should not be able to determine the plaintext contents
of a given record.
  </t>
  <t hangText='Integrity.'>
  An attacker should not be able to craft a new record which is
different from an existing record which will be accepted by the receiver.
  </t>
  <t hangText='Order protection/non-replayability'>
  An attacker should not be able to cause the receiver to accept a
record which it has already accepted or cause the receiver to accept
record N+1 without having first processed record N.</t>
  <t hangText='Length concealment.'>
  Given a record with a given external length, the attacker should not be able
to determine the amount of the record that is content versus padding.</t>
  <t hangText='Forward secrecy after key change.'>
  If the traffic key update mechanism described in <xref target="key-update"/> has been
used and the previous generation key is deleted, an attacker who compromises
the endpoint should not be able to decrypt traffic encrypted with the old key.</t>
</list></t>

<t>Informally, TLS 1.3 provides these properties by AEAD-protecting the
plaintext with a strong key. AEAD encryption <xref target="RFC5116"/> provides confidentiality
and integrity for the data. Non-replayability is provided by using
a separate nonce for each record, with the nonce being derived from
the record sequence number (<xref target="nonce"/>), with the sequence
number being maintained independently at both sides thus records which
are delivered out of order result in AEAD deprotection failures.
In order to prevent mass cryptanalysis when the same plaintext is
repeatedly encrypted by different users under the same key
(as is commonly the case for HTTP), the nonce is formed by mixing
the sequence number with a secret per-connection initialization
vector derived along with the traffic keys.
See <xref target="BT16"/> for analysis of this construction.</t>

<t>The re-keying technique in TLS 1.3 (see <xref target="updating-traffic-keys"/>) follows the
construction of the serial generator in <xref target="REKEY"></xref>, which shows that re-keying can
allow keys to be used for a larger number of encryptions than without
re-keying. This relies on the security of the HKDF-Expand-Label function as a
pseudorandom function (PRF).  In addition, as long as this function is truly
one way, it is not possible to compute traffic keys from prior to a key change
(forward secrecy).</t>

<t>TLS does not provide security for data which is communicated on a connection
after a traffic secret of that connection is compromised. That is, TLS does not
provide post-compromise security/future secrecy/backward secrecy with respect
to the traffic secret. Indeed, an attacker who learns a traffic secret can
compute all future traffic secrets on that connection.  Systems which want such
guarantees need to do a fresh handshake and establish a new connection with an
(EC)DHE exchange.</t>

<section anchor="external-references-1" title="External References">

<t>The reader should refer to the following references for analysis of the TLS record layer:
<xref target="BMMT15"/> <xref target="BT16"/> <xref target="BDFKPPRSZZ16"/> <xref target="BBK17"/> <xref target="Anon18"/>.</t>

</section>
</section>
<section anchor="traffic-analysis" title="Traffic Analysis">

<t>TLS is susceptible to a variety of traffic analysis attacks based on
observing the length and timing of encrypted packets
<xref target="CLINIC"/>
<xref target="HCJ16"/>.
This is particularly easy when there is a small
set of possible messages to be distinguished, such as for a video
server hosting a fixed corpus of content, but still provides usable
information even in more complicated scenarios.</t>

<t>TLS does not provide any specific defenses against this form of attack
but does include a padding mechanism for use by applications: The
plaintext protected by the AEAD function consists of content plus
variable-length padding, which allows the application to produce
arbitrary length encrypted records as well as padding-only cover traffic to
conceal the difference between periods of transmission and periods
of silence. Because the
padding is encrypted alongside the actual content, an attacker cannot
directly determine the length of the padding, but may be able to
measure it indirectly by the use of timing channels exposed during
record processing (i.e., seeing how long it takes to process a
record or trickling in records to see which ones elicit a response
from the server). In general, it is not known how to remove all of
these channels because even a constant time padding removal function will
likely feed the content into data-dependent functions.
At minimum, a fully constant time server or client would require close
cooperation with the application layer protocol implementation, including
making that higher level protocol constant time.</t>

<t>Note: Robust
traffic analysis defences will likely lead to inferior performance
due to delay in transmitting packets and increased traffic volume.</t>

</section>
<section anchor="side-channel-attacks" title="Side Channel Attacks">

<t>In general, TLS does not have specific defenses against side-channel
attacks (i.e., those which attack the communications via secondary
channels such as timing) leaving those to the implementation of the relevant
cryptographic primitives. However, certain features of TLS are
designed to make it easier to write side-channel resistant code:</t>

<t><list style="symbols">
  <t>Unlike previous versions of TLS which used a composite
MAC-then-encrypt structure, TLS 1.3 only uses AEAD algorithms,
allowing implementations to use self-contained constant-time
implementations of those primitives.</t>
  <t>TLS uses a uniform “bad_record_mac” alert for all decryption
errors, which is intended to prevent an attacker from gaining
piecewise insight into portions of the message.  Additional resistance
is provided by terminating the connection on such errors; a new
connection will have different cryptographic material, preventing
attacks against the cryptographic primitives that require multiple
trials.</t>
</list></t>

<t>Information leakage through side channels can occur at layers above
TLS, in application protocols and the applications that use
them. Resistance to side-channel attacks depends on applications and
application protocols separately ensuring that confidential
information is not inadvertently leaked.</t>

</section>
<section anchor="replay-0rtt" title="Replay Attacks on 0-RTT">

<t>Replayable 0-RTT data presents a number of security threats to
TLS-using applications, unless those applications are specifically
engineered to be safe under replay
(minimally, this means idempotent, but in many cases may
also require other stronger conditions, such as constant-time
response). Potential attacks include:</t>

<t><list style="symbols">
  <t>Duplication of actions which cause side effects (e.g., purchasing an
item or transferring money) to be duplicated, thus harming the site or
the user.</t>
  <t>Attackers can store and replay 0-RTT messages in order to
re-order them with respect to other messages (e.g., moving
a delete to after a create).</t>
  <t>Exploiting cache timing behavior to discover the content of 0-RTT
messages by replaying a 0-RTT message to a different cache node
and then using a separate connection to measure request latency,
to see if the two requests address the same resource.</t>
</list></t>

<t>If data can be replayed a large number of times, additional attacks
become possible, such as making repeated measurements of the
speed of cryptographic operations. In addition, they may
be able to overload rate-limiting systems. For further description of
these attacks, see <xref target="Mac17"/>.</t>

<t>Ultimately, servers have the responsibility to protect themselves
against attacks employing 0-RTT data replication. The mechanisms
described in <xref target="anti-replay"/> are intended to
prevent replay at the TLS layer but do not provide complete protection
against receiving multiple copies of client data.
TLS 1.3 falls back to the 1-RTT
handshake when the server does not have any information about the
client, e.g., because it is in a different cluster which does not
share state or because the ticket has been deleted as described in
<xref target="single-use-tickets"/>. If the application layer protocol retransmits
data in this setting, then it is possible for an attacker to induce
message duplication by sending the ClientHello to both the original cluster
(which processes the data immediately) and another cluster which will
fall back to 1-RTT and process the data upon application layer
replay. The scale of this attack is limited by the client’s
willingness to retry transactions and therefore only allows a limited amount
of duplication, with each copy appearing as a new connection at
the server.</t>

<t>If implemented correctly, the mechanisms described in
<xref target="single-use-tickets"/> and <xref target="client-hello-recording"/> prevent a
replayed ClientHello and its associated 0-RTT data from being accepted
multiple times by any cluster with consistent state; for servers
which limit the use of 0-RTT to one cluster for a single ticket, then a given
ClientHello and its associated 0-RTT data will only be accepted once.
However, if state is not completely consistent,
then an attacker might be able to have multiple copies of the data be
accepted during the replication window.
Because clients do not know the exact details of server behavior, they
MUST NOT send messages in early data which are not safe to have
replayed and which they would not be willing to retry across multiple
1-RTT connections.</t>

<t>Application protocols MUST NOT use 0-RTT data without a profile that
defines its use. That profile needs to identify which messages or
interactions are safe to use with 0-RTT and how to handle the
situation when the server rejects 0-RTT and falls back to 1-RTT.</t>

<t>In addition, to avoid accidental misuse, TLS implementations MUST NOT
enable 0-RTT (either sending or accepting) unless specifically
requested by the application and MUST NOT automatically resend 0-RTT
data if it is rejected by the server unless instructed by the
application. Server-side applications may wish to implement special
processing for 0-RTT data for some kinds of application traffic (e.g.,
abort the connection, request that data be resent at the application
layer, or delay processing until the handshake completes). In order to
allow applications to implement this kind of processing, TLS
implementations MUST provide a way for the application to determine if
the handshake has completed.</t>

<section anchor="replay-and-exporters" title="Replay and Exporters">

<t>Replays of the ClientHello produce the same early exporter, thus
requiring additional care by applications which use these exporters.
In particular, if these exporters are used as an authentication
channel binding (e.g., by signing the output of the exporter)
an attacker who compromises the PSK can transplant authenticators
between connections without compromising the authentication key.</t>

<t>In addition, the early exporter SHOULD NOT be used to generate
server-to-client encryption keys because that would entail
the reuse of those keys. This parallels the use of the early
application traffic keys only in the client-to-server direction.</t>

</section>
</section>
<section anchor="psk-identity-exposure" title="PSK Identity Exposure">

<t>Because implementations respond to an invalid PSK binder by aborting
the handshake, it may be possible for an attacker to verify whether
a given PSK identity is valid. Specifically, if a server accepts
both external PSK and certificate-based handshakes, a valid PSK identity
will result in a failed handshake, whereas an invalid identity will
just be skipped and result in a successful certificate handshake.
Servers which solely support PSK handshakes may be able to resist
this form of attack by treating the cases where there is no
valid PSK identity and where there is an identity but it has an
invalid binder identically.</t>

</section>
<section anchor="attacks-on-static-rsa" title="Attacks on Static RSA">

<t>Although TLS 1.3 does not use RSA key transport and so is not
directly susceptible to Bleichenbacher-type attacks, if TLS 1.3
servers also support static RSA in the context of previous
versions of TLS, then it may be possible to impersonate the server
for TLS 1.3 connections <xref target="JSS15"/>. TLS
1.3 implementations can prevent this attack by disabling support
for static RSA across all versions of TLS. In principle, implementations
might also be able to separate certificates with different keyUsage
bits for static RSA decryption and RSA signature, but this technique
relies on clients refusing to accept signatures using keys
in certificates that do not have the digitalSignature bit set,
and many clients do not enforce this restriction.</t>

</section>
</section>
<section anchor="working-group-information" title="Working Group Information">

<t>The discussion list for the IETF TLS working group is located at the e-mail
address <eref target="mailto:tls@ietf.org">tls@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www.ietf.org/mailman/listinfo/tls">https://www.ietf.org/mailman/listinfo/tls</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/tls/current/index.html">https://www.ietf.org/mail-archive/web/tls/current/index.html</eref></t>

</section>
<section anchor="contributors" title="Contributors" numbered="no">

<t><list style="symbols">
  <t>Martin Abadi <vspace />
University of California, Santa Cruz <vspace />
abadi@cs.ucsc.edu</t>
  <t>Christopher Allen (co-editor of TLS 1.0) <vspace />
Alacrity Ventures <vspace />
ChristopherA@AlacrityManagement.com</t>
  <t>Richard Barnes <vspace />
Cisco <vspace />
rlb@ipv.sx</t>
  <t>Steven M. Bellovin <vspace />
Columbia University <vspace />
smb@cs.columbia.edu</t>
  <t>David Benjamin <vspace />
Google <vspace />
davidben@google.com</t>
  <t>Benjamin Beurdouche <vspace />
INRIA &amp; Microsoft Research <vspace />
benjamin.beurdouche@ens.fr</t>
  <t>Karthikeyan Bhargavan (co-author of <xref target="RFC7627"></xref>) <vspace />
INRIA <vspace />
karthikeyan.bhargavan@inria.fr</t>
  <t>Simon Blake-Wilson (co-author of <xref target="RFC4492"></xref>) <vspace />
BCI <vspace />
sblakewilson@bcisse.com</t>
  <t>Nelson Bolyard (co-author of <xref target="RFC4492"></xref>) <vspace />
Sun Microsystems, Inc. <vspace />
nelson@bolyard.com</t>
  <t>Ran Canetti <vspace />
IBM <vspace />
canetti@watson.ibm.com</t>
  <t>Matt Caswell <vspace />
OpenSSL <vspace />
matt@openssl.org</t>
  <t>Stephen Checkoway <vspace />
University of Illinois at Chicago <vspace />
sfc@uic.edu</t>
  <t>Pete Chown <vspace />
Skygate Technology Ltd <vspace />
pc@skygate.co.uk</t>
  <t>Katriel Cohn-Gordon <vspace />
University of Oxford <vspace />
me@katriel.co.uk</t>
  <t>Cas Cremers <vspace />
University of Oxford <vspace />
cas.cremers@cs.ox.ac.uk</t>
  <t>Antoine Delignat-Lavaud (co-author of <xref target="RFC7627"></xref>) <vspace />
INRIA <vspace />
antdl@microsoft.com</t>
  <t>Tim Dierks (co-editor of TLS 1.0, 1.1, and 1.2) <vspace />
Independent <vspace />
tim@dierks.org</t>
  <t>Roelof DuToit <vspace />
Symantec Corporation <vspace />
roelof_dutoit@symantec.com</t>
  <t>Taher Elgamal <vspace />
Securify <vspace />
taher@securify.com</t>
  <t>Pasi Eronen <vspace />
Nokia <vspace />
pasi.eronen@nokia.com</t>
  <t>Cedric Fournet <vspace />
Microsoft <vspace />
fournet@microsoft.com</t>
  <t>Anil Gangolli <vspace />
anil@busybuddha.org</t>
  <t>David M. Garrett <vspace />
dave@nulldereference.com</t>
  <t>Illya Gerasymchuk <vspace />
Independent <vspace />
illya@iluxonchik.me</t>
  <t>Alessandro Ghedini <vspace />
Cloudflare Inc. <vspace />
alessandro@cloudflare.com</t>
  <t>Daniel Kahn Gillmor <vspace />
ACLU <vspace />
dkg@fifthhorseman.net</t>
  <t>Matthew Green <vspace />
Johns Hopkins University <vspace />
mgreen@cs.jhu.edu</t>
  <t>Jens Guballa <vspace />
ETAS <vspace />
jens.guballa@etas.com</t>
  <t>Felix Guenther <vspace />
TU Darmstadt <vspace />
mail@felixguenther.info</t>
  <t>Vipul Gupta (co-author of <xref target="RFC4492"></xref>) <vspace />
Sun Microsystems Laboratories <vspace />
vipul.gupta@sun.com</t>
  <t>Chris Hawk (co-author of <xref target="RFC4492"></xref>) <vspace />
Corriente Networks LLC <vspace />
chris@corriente.net</t>
  <t>Kipp Hickman</t>
  <t>Alfred Hoenes</t>
  <t>David Hopwood <vspace />
Independent Consultant <vspace />
david.hopwood@blueyonder.co.uk</t>
  <t>Marko Horvat <vspace />
MPI-SWS <vspace />
mhorvat@mpi-sws.org</t>
  <t>Jonathan Hoyland <vspace />
Royal Holloway, University of London
jonathan.hoyland@gmail.com</t>
  <t>Subodh Iyengar <vspace />
Facebook <vspace />
subodh@fb.com</t>
  <t>Benjamin Kaduk <vspace />
Akamai <vspace />
kaduk@mit.edu</t>
  <t>Hubert Kario <vspace />
Red Hat Inc. <vspace />
hkario@redhat.com</t>
  <t>Phil Karlton (co-author of SSL 3.0)</t>
  <t>Leon Klingele <vspace />
Independent <vspace />
mail@leonklingele.de</t>
  <t>Paul Kocher (co-author of SSL 3.0) <vspace />
Cryptography Research <vspace />
paul@cryptography.com</t>
  <t>Hugo Krawczyk <vspace />
IBM <vspace />
hugokraw@us.ibm.com</t>
  <t>Adam Langley (co-author of <xref target="RFC7627"></xref>) <vspace />
Google <vspace />
agl@google.com</t>
  <t>Olivier Levillain <vspace />
ANSSI <vspace />
olivier.levillain@ssi.gouv.fr</t>
  <t>Xiaoyin Liu <vspace />
University of North Carolina at Chapel Hill <vspace />
xiaoyin.l@outlook.com</t>
  <t>Ilari Liusvaara <vspace />
Independent <vspace />
ilariliusvaara@welho.com</t>
  <t>Atul Luykx <vspace />
K.U. Leuven <vspace />
atul.luykx@kuleuven.be</t>
  <t>Colm MacCarthaigh <vspace />
Amazon Web Services <vspace />
colm@allcosts.net</t>
  <t>Carl Mehner <vspace />
USAA <vspace />
carl.mehner@usaa.com</t>
  <t>Jan Mikkelsen <vspace />
Transactionware <vspace />
janm@transactionware.com</t>
  <t>Bodo Moeller (co-author of <xref target="RFC4492"></xref>) <vspace />
Google <vspace />
bodo@acm.org</t>
  <t>Kyle Nekritz <vspace />
Facebook <vspace />
knekritz@fb.com</t>
  <t>Erik Nygren <vspace />
Akamai Technologies <vspace />
erik+ietf@nygren.org</t>
  <t>Magnus Nystrom <vspace />
Microsoft <vspace />
mnystrom@microsoft.com</t>
  <t>Kazuho Oku <vspace />
DeNA Co., Ltd. <vspace />
kazuhooku@gmail.com</t>
  <t>Kenny Paterson <vspace />
Royal Holloway, University of London <vspace />
kenny.paterson@rhul.ac.uk</t>
  <t>Alfredo Pironti (co-author of <xref target="RFC7627"></xref>) <vspace />
INRIA <vspace />
alfredo.pironti@inria.fr</t>
  <t>Andrei Popov <vspace />
Microsoft <vspace />
andrei.popov@microsoft.com</t>
  <t>Marsh Ray (co-author of <xref target="RFC7627"></xref>) <vspace />
Microsoft <vspace />
maray@microsoft.com</t>
  <t>Robert Relyea <vspace />
Netscape Communications <vspace />
relyea@netscape.com</t>
  <t>Kyle Rose <vspace />
Akamai Technologies <vspace />
krose@krose.org</t>
  <t>Jim Roskind <vspace />
Amazon <vspace />
jroskind@amazon.com</t>
  <t>Michael Sabin</t>
  <t>Joe Salowey <vspace />
Tableau Software <vspace />
joe@salowey.net</t>
  <t>Rich Salz <vspace />
Akamai <vspace />
rsalz@akamai.com</t>
  <t>David Schinazi <vspace />
Apple Inc. <vspace />
dschinazi@apple.com</t>
  <t>Sam Scott <vspace />
Royal Holloway, University of London <vspace />
me@samjs.co.uk</t>
  <t>Dan Simon <vspace />
Microsoft, Inc. <vspace />
dansimon@microsoft.com</t>
  <t>Brian Smith <vspace />
Independent <vspace />
brian@briansmith.org</t>
  <t>Brian Sniffen <vspace />
Akamai Technologies <vspace />
ietf@bts.evenmere.org</t>
  <t>Nick Sullivan <vspace />
Cloudflare Inc. <vspace />
nick@cloudflare.com</t>
  <t>Bjoern Tackmann <vspace />
University of California, San Diego <vspace />
btackmann@eng.ucsd.edu</t>
  <t>Tim Taubert <vspace />
Mozilla <vspace />
ttaubert@mozilla.com</t>
  <t>Martin Thomson <vspace />
Mozilla <vspace />
mt@mozilla.com</t>
  <t>Sean Turner <vspace />
sn3rd <vspace />
sean@sn3rd.com</t>
  <t>Steven Valdez <vspace />
Google <vspace />
svaldez@google.com</t>
  <t>Filippo Valsorda <vspace />
Cloudflare Inc. <vspace />
filippo@cloudflare.com</t>
  <t>Thyla van der Merwe <vspace />
Royal Holloway, University of London <vspace />
tjvdmerwe@gmail.com</t>
  <t>Victor Vasiliev <vspace />
Google <vspace />
vasilvv@google.com</t>
  <t>Tom Weinstein</t>
  <t>Hoeteck Wee <vspace />
Ecole Normale Superieure, Paris <vspace />
hoeteck@alum.mit.edu</t>
  <t>David Wong <vspace />
NCC Group <vspace />
david.wong@nccgroup.trust</t>
  <t>Christopher A. Wood <vspace />
Apple Inc. <vspace />
cawood@apple.com</t>
  <t>Tim Wright <vspace />
Vodafone <vspace />
timothy.wright@vodafone.com</t>
  <t>Peter Wu <vspace />
Independent <vspace />
peter@lekensteyn.nl</t>
  <t>Kazu Yamamoto <vspace />
Internet Initiative Japan Inc. <vspace />
kazu@iij.ad.jp</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
vOLA/DuggRvcLUx1B46MfBE4mwwKRr9UtzxugLQNRKDEjZeEF/7M/vvmngH7
u75JywGcFOAXLnQMuUQ0I5GTJOuF3sZ8SSYlDYVnix9XLjHypriDpvCuFAYb
sTh2j9+YDpLp1J3L+E7CIZ7RQ0CTWZ4xAWHjujfqf+dncAnTEm6SmrYjTFSI
JnjMr+T0aUTmlPj1LAUJjK+F+G/L6bVlGXIuSjp1kZMQi5I4hB89EVe5zMPV
aYm60/QKJLyKZmGk+2H8000287pQxjfRlDKF4JJWWws8QiuDcncGioS2gUwA
xD/9y0lKORAQCDC4bkkk3xJHSHH+WTUXkgr0BGYwLGtUbl2RT8IpuY/8WU6I
5GEGOhM4tcAjcfTVcoGCEx+oywKHnOpNEug6S2gWxEDhak7Ab89Q5gSEMJkt
Kazdr98mSxSoCcAtAXK6yP2+ORUxgRw+pHXk588bIleNpCPDdYKDKdEZgImt
cOnTqmMj7s0oeLN0UYkUtrmoPuBAPn1yizUdEOoFXlWi7kTUH6o78BmsEl29
96oVu7MJjI5zKCiscxpw0yhMsgVmEz9PJxjm6ihJ5XVsE7U45AZE9FM0IKdw
PrNaET9kBUD1whVoXcTpR9rSsgrWWNUSPIPvjsbvVdvjXiZJWaI4IbEMJRvW
gv5Qwfv8OQq3n78Bfa5jJJXcCJ8+FZNqQetdTWoUD0BJ+x3mquaolLJKQ7nT
5TzjBD1WKj7QRYMS2dqbH8bna33+F3V8/P3s5N9+OD07Ocbfx68OX792v+gT
41fvfngN30fym3/z6N2bNydvj/ll+DRufPTm8N/X+MJee/cebQmHr9dYbsqq
yCutJV2ll6lnaazkBevw/Oh9PNrmpUKMD1gqFqxHe9uwoHfA/bgrEn/5T7pk
UZpPStLsgWlMkgWmL1cke8GdfgfyPmyUKGBeP4GBzHlTkQ5BCmJuwZqJCsCx
8Glr3PGXOLTp/8A4MadhDfhqMfe9UeOMpB5F+vtBfJIhRVn1BmRAUZGKpvwA
b7obHS1QMtCZO0y2T011c2yQ2buRsZoiBPeXlaT1ohJOS4GRFqJbIwPhmAgY
CfJCGoROBvk/9CtaMV1rLA9OljPYKX0MCAhfXQPWdCW8ubaLryYavDtqoz3D
oP6GUguMUrugFYHbJQUmEI7FtcLf4mBEEIE3KpQSVjyvilHdfKWkLgIy4Wtn
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
7uhd0Bd0zbDaxKtz1VIJBLiCDp5kad9CJ2hCNgU3oAgeVIdPnj95NpJE8ONj
MMzRn1y3FSYTDh2WdE1qFgc4T2wDvrbzGMbZ4jzAhRLdF9lZcxkNfiUzDGQ8
ANWcgiC66vmaPXps7dqmYiVyvUiSVUAxoHudWPqMgZJT8B31tZXHt9cyS8k4
ugMojfhK9ittt6qTpBx+Bvuu+wu/fNZenElHCuXvBSVTew3wjjosdxiM49WX
PbX5cfXpb6uTe9VvP/3Fam5sjUUw2qCd/Zbkbd7SreqvrZe0/pf8kA3qwen3
OA2yEqIt0Hp8W+o+mgJT0KciIAH6cwlWkF6SvDek5K2Ey8iyLySzfV2/S1no
kuGo8/obytVhe5KDoNNMW892TPJilp3L/JytJkuIBYYdQzUYLhSvHoL1dqX1
XBO0PJeeXtU3oaoS9CEnIDa1nEXzfjulRvTiRDdJelQL9MkoHwSMnUOyiCUS
yrCQU5uX4yahF0vNQt2htoWu/s7lCMer6YbDtAu7KpHuz0nBRMfQkAb74QP/
OJFz4tii9FKIU+S2vUx8u6UR+uNgkH11vqtcXE2se7F8NlCheb3ioTksT9OI
4f63G8T0c2tDyAct+EbTOZtto1p3JZdAve5YIxm+DLhCnJYwXkpcB79jh1DH
De+wJzp402G9UVCg8n2vLdjskAFmMslEsUSYJuMvm1haeIVBSjZd3BOLpWxA
fc1idZ5qvGvFS1qv2TJ0anEx24RK3tBdxEZhZnpZ0a2GiPK6jzwl2uzpDJIj
01UBB+C4UivnIHJXn1Ik5By5Mipvy1BF7mpei3X+i20/Jz1L4aoc65UBY22v
jAgLjZtA092l+fFy2KjuZ9uJaX6xs85HHgMhCtWFML323LE8QvNwvIWVH+Gg
dfq7ighA2EaNj99upe63UW9PhNxjo5YTKwtEg3IFehQJsiA46hxQtdY7kUnT
TGZkyCeIkVMNODV55QiRjkm6ZqhlMf2IEzEOEqxJYHwpNnpLELIyu/qymb3p
825JTWF1Mj0OVlPIqiTGL8kwDkxRsJJI12/OpJAxZQynvzNRE1fxLAYwlzry
8tCPknAm2zJk7S/eVriPXNPxT5L1gLa5YEK2tEN8kfgbzSyfDA0ssZIZdXcA
PqoWkt4UxMDi3PlL5uefd6P/lbrOkIT9Je9DVsDg8So4jUqMrHxTqRSADnTb
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
B1A+hTZBk82lZ/0M/Rjz6kwxtvDC1vIXEBbDxdv8QLbbzx66ajSvKbRacs4V
AwWtdhuL72m/HpvVjTopqrF2oo4OWLec8QRaygVbnjUeuq7E+Sndxl9Uwh6q
qStPWkKjFdQUw5ka8hJHG1Lj1drWSzwbP6vtOffOcQnNj9T2u4nCWq1tbgNH
tbrT9r12iNbqbr2zJlxr9cnCc7JaP/Iy7wg5E87l5vIDBwNbrZ93v5BnmIHE
dbeElvPqrjaOOG/ZguHV1uJctKQGkw0gtdXN2hg8Wg0uwPbSKxHhApffhxhC
OK4uSA57ho9AZgp2G5LOmpLT5rZKTqn/D15FB7Qk8GGkffwyh2Wlq/b9nn57
LR4grW5mZdt4w74Pz5zF9Vnre36j3XvOBtn+XuP488uxwWjRq83D/n3aZpBs
f7/l/OLHm1bJe193E/av3/9ZPuff195j00H723qqv4+fqUmg/aUmFaLX68DR
9pfDdYm++Tq/+4l+jd769qzlfggR/wslq1D0RlNKFx2hpnRYh6IonFBU1aet
zc/PojefCIieMPSf4Ck+gBtygIehvJhm15fFQDLp8LUALR9uy7Jru0D/aSo+
/KkFug+PWMLB2nQf6VZ3qBj+sN7rbW3+PVYgw+xS1fEJFP/DZq+3+X9t7HZr
L8Sde2VASr39sIEvPuluxO/ZtXGoxB+eyDdc228xUfj/4zqe5YPL8o8sZotW
vnD9cNj3L9xu28JFVHHZwsUgZuv2rGFBUC3aWiApxZk3P259LlNzXUA/yk3p
sv9gx05eHKSYGKa2Y+Psy5maXqRONSnff6wXE6pZxNhZNpwlvdSSWZBqvryX
7e2nm5308dONp/W+WsC8JPq09/XpU4QX/fy5zuIr0Byms2sSiRbPzQ9t5/Hu
dq2XS+Chs36ezUhselAvuzub67VevHJAJclMRThzKhsJW9rL4631jZYFitV7
SsoJOzmGWT6Jhqdjebpbv/Aii0S9wMFf3XjanJ+OZXOnPiM5yo1eNlv2f3Ev
YowjM8zytQ297D7ZqZMwM5rcd6mol58qqec1obBAgy3Whhah38kes6zT+06j
00TQdHPfGO/rromqJ0vPn+2O4fpkCFo6sgd21x4nQDakP9Nd2N/d/779XRB/
QCaqPzFGF7NApqz/6go2Yx7IBvYnu1sYJ0G2sz/cnYWJkHFt2VQf1N3q7s7O
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
gnMJlGY42hvrldBN+liM08MinyK0pY2qxGW5tVsXDkw/zIrx3pB60Z08KfMR
9HI4/1gW0uj0bozA3AEs6BTEA6b8TFao8dkQaGgx26uknQ0xQ8p3NLrIsN4O
d0W+53M5HjNssFfJb/rah6wq0qMpZrfhZu/KK6BJvN3wrJfTs70J/qwvHeRD
4J/pi3IO9E/GHcgI/fOcnzWXcn9SjNKX2eQC003oohejvf68uuvPh8PLTBeH
CR7QzZcZ8JTZzMhcvjeZj7DGmAKEtW8483dZ+hIjfe/Gg8v51YKNKLDdXjGa
fyknwL6ueuOchoYWINjDaZm+vIQ9nsj4DkblfHg+Qm08UIDMGu8N7LkO5BCm
BHfidXY5SV/C18ZwWpjvHLz5SeZxdbF3XpzPLuFQVjnsZQ+WSwnCZX4L0kiu
e/IPuFtV+qq8BjGjavCL8QW2xKvw6+Vcr/U/gGKkL+d9ECNlN48+7p/yX78i
Gb/gZ3v5DK8TD/sFXJsv8BYsFB4mavzxJ5jNdAzi4HCmJAm26xybXkjLHkoU
2MHPxTVoUC/n18Cv/xhxTd+g9oqGhUI56g12BuOEzvaq+cQOH/Lo9FV2e3XP
J+ACTVEIzIHsUy0e+MibA6Eh2MneQFvo2r8G7TB9VQyuYD/4RJwjxOJViXkO
wpmEnbgty2HzdGFqINAps0k4rKAsX3Lzvf5ont+VlNrT6B7IQVcldDi9yfQi
fTjunv4iWzW+pCd74+uiW90a3fgHKisYU/KqvBsh1aHGJ+UdXP1XBKDHII6Y
hL6BLxPi6ld5GcZFL+9d4I7q8p7O++XwMj2+yycXmZyBF9kg72OhZGYg1GLv
vN8QMV5nQ71z+1dAhwpl9vAzUIKZHs5X8z7iwV4jXluGjqsMKxDu1+UVPt2D
5QcNwKjVZYG3ajqaNcQBqVe5hs3e5PD4NSpZuUpHDRpAp3gEDa+kXW+YM0GE
E/y6RMV0wRfkdAUwwF1NcrqGLvYcWMCI7as5MGGM0x78dqe0SSWES3h2BY/2
5pUXD/aH2RjuBrqc7u5hY14YzC5GNTnw/ai4QeDiG1CQRwhLl316d3oqclPJ
LXojbbEHSk/vopzfiEj2zyJDXED6ppi38eh3oMxeAiOfQkeTjOWO7BrI4KtC
RZsv3ENvtFfOZ1h6O1Bu2G3suLrJQFtdSLexMJU22gOR6bK0hZrBvr2Z3119
4bavez/1YLLzGyWioCmOeiNssHc1H9EDEG2JopSjMVzEwQEKpRko0bI04+w3
OEe/5H0y+xcDJUwgmY/3gHgOympWKemAl0fp2/xyooTzp9P9fRVYpiNgMfgI
djczNvqPDGng1RXIkjrIj8EjfIv8hul1NhnvzeIndvdK0HDfgmQwapzXOj30
5wNucLmXDcZKUF7fjZBMXoG+81vbnb+a8DN364+mxVX67g6YzyS68iY4GiHP
oeVfUW3cm1Bz/ejb7GIyr6APhJeNW8WI8YQfNuWI19lv88syfX8lZ/Ewf7cP
O9nroLjaU8KDbcqreUziXueTyR1c9BlZfR5OO6VTfLt3LW/vTS/hWAUBlBhG
mX4oQGwCLeDhgie/2LvmFyNVaB+kjLxIP5TX5U3rKmXUoHeNDZorBSymugTd
5D76UV96uGJ3zd5OSqLdJ/noLpd7Cuy1GsBNxxI6HtjNUis13JtIG9sDPHAn
aHdffnau4OugLuD/NeYHwji8Sb4lf1H5rkz5yV5GP9oaoMYOpOg06xcT5qA5
/AOzvIgU9RHtZdk8PYW5uqtX5nsVN9OLjso/vvpbk9FNoelvexn9EkRBlBhO
QcycZL9JO/Qwe1lyWMnjPXQt2BqdAuk/HZQq+T78iI5x0ONfqyBmHGJRX9Ko
4632Ou0QE5ZDk+aeP4ezCO+P0WbYTpn72GKP/i8CiC51r+TNCRoa7yMTRCH6
QFHRXgLanW34OxDIQC4BfQFtDItFcjh5Vy3C+HPYxOkENpjEulbttGZtQl1P
1eX+TN7bA4EILU5DlWJQKfyYsSjDq1r+Vpi4PZvxo70x/+puIxq+Pl6WYyM+
0YvjxiunOQzpI+pTwlqqyZYqwyB3AJ/Gf1trtjf9nIGG9FuT8gPvxAc16eAF
sNXr6xLfqkDRzpas8jk3bVnoj5cgT6a4R+hjeJtPb/M/enJnv94Mx/hiTLF/
Lijo/GdQSEdFftOc1Q0+ubmpzeojcJVfcnTp53zrQZAHlfkKfpT3joCX5yi5
jBHOdTrHMLWczNofMlQzWDTjt4Dlz8c9J8by1f4FY7mYDh4ciA3ZCf+38Hhv
MhiQSbc3m2IwUN1c2YNOVJ2o04ZBRrpDRBjw5P0yJWs/tfm5HGbniFRSM0M5
A6Hzllrs3chDk6HRg57+Ml9wk6/xMQjGwOZg2e5ALR0pu03/BTcX+i71VfTt
5Si0Y4YAyof6j+watj+MHjnwXlH82suGvV+vk/8FrKQMLVNkBAA=

-->

</rfc>

