{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-02-25T00:50:11.575643+00:00",
  "repo": "tlswg/tls13-spec",
  "labels": [
    {
      "name": "bug",
      "description": null,
      "color": "fc2929"
    },
    {
      "name": "duplicate",
      "description": null,
      "color": "cccccc"
    },
    {
      "name": "enhancement",
      "description": null,
      "color": "84b6eb"
    },
    {
      "name": "help wanted",
      "description": null,
      "color": "159818"
    },
    {
      "name": "invalid",
      "description": null,
      "color": "e6e6e6"
    },
    {
      "name": "question",
      "description": null,
      "color": "cc317c"
    },
    {
      "name": "wontfix",
      "description": null,
      "color": "ffffff"
    },
    {
      "name": "editorial",
      "description": null,
      "color": "c7def8"
    },
    {
      "name": "Editor Ready",
      "description": null,
      "color": "0052cc"
    },
    {
      "name": "PR Pending",
      "description": null,
      "color": "009800"
    },
    {
      "name": "discuss-seattle",
      "description": null,
      "color": "fbca04"
    },
    {
      "name": "New PR needed",
      "description": null,
      "color": "5319e7"
    },
    {
      "name": "parked",
      "description": null,
      "color": "f7c6c7"
    },
    {
      "name": "chair action needed",
      "description": null,
      "color": "eb6420"
    },
    {
      "name": "in progress",
      "description": null,
      "color": "0052cc"
    },
    {
      "name": "b-a",
      "description": null,
      "color": "bfdadc"
    },
    {
      "name": "discuss:berlin",
      "description": null,
      "color": "0052cc"
    },
    {
      "name": "finished_stuffing",
      "description": null,
      "color": "5319e7"
    },
    {
      "name": "discuss-vienna",
      "description": "",
      "color": "c5def5"
    },
    {
      "name": "propose-close",
      "description": "",
      "color": "bfdadc"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "MDU6SXNzdWUzMTc1MTIxMg==",
      "title": "SNI encryption",
      "url": "https://github.com/tlswg/tls13-spec/issues/1",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "Server Name Indication could be encrypted to protect it from being inspected by passive attackers.  There are some virtual-hosting type situations where hiding this information is considered desirable.  If we can encrypt SNI, then it is probably trivial to encrypt other extensions.\n\nHowever, this complicates the handshake.  A lot.  It also complicates virtual-hosting scenarios.  Rich summarizes the issues pretty well here: http://www.ietf.org/mail-archive/web/tls/current/msg11823.html\n",
      "createdAt": "2014-04-17T18:38:34Z",
      "updatedAt": "2017-04-17T00:48:53Z",
      "closedAt": "2017-04-16T17:21:21Z",
      "comments": [
        {
          "author": "leonklingele",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is this already ruled-out? How could the SNI be encrypted without an addition RTT?\r\n\r\nOne could hash the SNI in the Client Hello which would at least help if the served host name is not publicly known (e.g. using a self-signed certificate).",
          "createdAt": "2017-03-03T03:14:13Z",
          "updatedAt": "2017-03-03T03:14:13Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It seems likely that there will eventually be an (optional?) extension that permits an encrypted \"real\" SNI, with some fake public SNI.  But maybe that is not what you are asking.",
          "createdAt": "2017-03-03T17:25:50Z",
          "updatedAt": "2017-03-03T17:25:50Z"
        },
        {
          "author": "leonklingele",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr why was this closed?",
          "createdAt": "2017-04-17T00:03:01Z",
          "updatedAt": "2017-04-17T00:03:01Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Because we are not going to do anything about it in the base specification.",
          "createdAt": "2017-04-17T00:48:53Z",
          "updatedAt": "2017-04-17T00:48:53Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "MDU6SXNzdWUzMTc1MTM0OQ==",
      "title": "AEAD only for the record layer",
      "url": "https://github.com/tlswg/tls13-spec/issues/2",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We seem to have reached consensus that the record layer will use the AEAD form only.  The stream and CBC forms will be removed.\n",
      "createdAt": "2014-04-17T18:40:20Z",
      "updatedAt": "2014-06-20T18:19:21Z",
      "closedAt": "2014-06-20T18:19:21Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed.\n",
          "createdAt": "2014-06-20T18:19:21Z",
          "updatedAt": "2014-06-20T18:19:21Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "MDU6SXNzdWUzMTc1MTUxMA==",
      "title": "Renegotiation",
      "url": "https://github.com/tlswg/tls13-spec/issues/3",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We need to decide whether renegotiation is a part of the protocol.\n\nIf not, then suitable replacements for the following features may be needed (thanks Nico for the list):\n- rekeying\n- authenticate the client when needed rather than always at handshake time\n- privacy protection for the client's identity\n- privacy protection for the server's identity\n- privacy protection for the server identity desired by the client\n\nI'll raise separate issues for tracking these.\n",
      "createdAt": "2014-04-17T18:42:22Z",
      "updatedAt": "2015-05-16T21:46:01Z",
      "closedAt": "2015-05-16T21:46:01Z",
      "comments": []
    },
    {
      "number": 4,
      "id": "MDU6SXNzdWUzMTc1MjUyOA==",
      "title": "Rekeying",
      "url": "https://github.com/tlswg/tls13-spec/issues/4",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "If we ditch renegotiation (#3), then we will need a way to rekey sessions to extend their lifetime.\n\nNico suggests that sending ChangeCipherSpec and then using an increasing counter to extract new keys (i.e., add a counter to the key expansion PRF input), which would seem to be sufficient.\n",
      "createdAt": "2014-04-17T18:54:54Z",
      "updatedAt": "2015-12-15T21:02:33Z",
      "closedAt": "2015-12-15T21:02:33Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We have asked David McGrew about the theoretical limits on AES-GCM, we can find the same info for ChaCha+Poly1305.  When we have that info, we will make an assessment as to how urgent this is.  That will determine how soon we define this mechanism.\n\n@ekr noted that you don't even have to negotiate to enable rekeying: if you send the rekey message and rekey, your connection will either be rekeyed, or killed by the peer.\n",
          "createdAt": "2015-09-22T22:04:33Z",
          "updatedAt": "2015-09-22T22:04:33Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "MDU6SXNzdWUzMTc1MjgyMQ==",
      "title": "Make the PRF hardware module friendly",
      "url": "https://github.com/tlswg/tls13-spec/issues/5",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Mike StJohns points out several ways in which the current PRF is inimical to clean hardware module design [in an email](http://www.ietf.org/mail-archive/web/tls/current/msg12094.html) and [in a draft](http://tools.ietf.org/html/draft-stjohns-tls-tls13-crypto-infra-00).\n",
      "createdAt": "2014-04-17T18:58:46Z",
      "updatedAt": "2015-09-22T21:11:36Z",
      "closedAt": "2015-09-22T21:11:36Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mike's proposal:\n\n> My PRF proposal is to change the PRF to a counter based PRF\n> \n> ```\n> prf_step (i, secret, label, context, total_length) =\n>      MAC (secret, i + label + 0x00 + context + total_length); // i and total_length are uint32 big endian\n> prf_data (secret, label, context, total_length) =\n>      CONCAT (i = 1 to CEIL(total_length/blocksize), prf_step (i, secret, label, context, total_length))[0..total_length-1];\n> ```\n> \n>  For deriving keys, you use the above construct and a master secret. For using this for the production of random public data (e.g. IVs), you use a '0' key of the appropriate length.  The externalized functions are the KDF function (which passes in a key) and the DRBG (deterministic random bit generator) (which doesn't pass in a key), but the underlying implementation is common.  The PRF function is never externalized.\n",
          "createdAt": "2014-04-18T16:52:52Z",
          "updatedAt": "2014-04-18T16:52:52Z"
        },
        {
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mike's suggestion is to base the KDF on SP800-108. However, I thought IETF decided to try to move new protocols to HKDF [1]. Selection of an SP800-108-based mechanism would require a clear justification for why it is used instead of HKDF.\n\n[1] https://tools.ietf.org/html/rfc5869\n",
          "createdAt": "2015-02-12T20:17:40Z",
          "updatedAt": "2015-02-12T20:17:40Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Consensus at interim.\n1. Label + length is enough.\n2. Add:\n   - length + label\n   - all labels will now have \"TLS 1.3, \" in front of them.\n",
          "createdAt": "2015-09-22T16:11:34Z",
          "updatedAt": "2015-09-22T16:11:34Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done\n",
          "createdAt": "2015-09-22T21:11:36Z",
          "updatedAt": "2015-09-22T21:11:36Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "MDU6SXNzdWUzMTc1NzE1Ng==",
      "title": "Drop static RSA",
      "url": "https://github.com/tlswg/tls13-spec/issues/6",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Tracking issue for the removal of static modes.\n",
      "createdAt": "2014-04-17T19:57:50Z",
      "updatedAt": "2014-06-07T15:02:49Z",
      "closedAt": "2014-06-07T15:02:49Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done\n",
          "createdAt": "2014-06-07T15:02:48Z",
          "updatedAt": "2014-06-07T15:02:48Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "MDU6SXNzdWUzMTc1NzIyNw==",
      "title": "Remove compression",
      "url": "https://github.com/tlswg/tls13-spec/issues/7",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Tracking issue for the removal of generic record layer compression.\n",
      "createdAt": "2014-04-17T19:58:50Z",
      "updatedAt": "2014-06-20T18:20:03Z",
      "closedAt": "2014-06-20T18:20:03Z",
      "comments": []
    },
    {
      "number": 8,
      "id": "MDU6SXNzdWUzMTc1NzU0OQ==",
      "title": "Separation of crypto components",
      "url": "https://github.com/tlswg/tls13-spec/issues/8",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A couple of people have noted that having separate parameters and negotiation for handshake and record layer crypto would simplify aspects of the protocol.\n",
      "createdAt": "2014-04-17T20:03:18Z",
      "updatedAt": "2015-09-12T19:38:55Z",
      "closedAt": "2015-09-12T19:38:55Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this has been mostly decided against.\n",
          "createdAt": "2015-09-12T19:38:55Z",
          "updatedAt": "2015-09-12T19:38:55Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "MDU6SXNzdWUzMTc1NzkyMQ==",
      "title": "Proof of work for DoS mitigation",
      "url": "https://github.com/tlswg/tls13-spec/issues/9",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "Providing proof of ownership at a server is a non-trivial computational burden.  If a server was able to request that a client submit proof of work, then a loaded server could use this to help separate DoS attackers from genuine clients.\n",
      "createdAt": "2014-04-17T20:08:31Z",
      "updatedAt": "2017-04-16T17:21:22Z",
      "closedAt": "2017-04-16T17:21:22Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "NONE",
          "body": "Some discussion is here:\n   http://www.ietf.org/mail-archive/web/tls/current/msg11763.html\nas well as a related discussion on SAAG:\n   http://www.ietf.org/mail-archive/web/saag/current/msg04579.html\nand a paper that proposed an SSL extension along these lines in 2001:\n   https://www.usenix.org/legacy/events/sec2001/full_papers/dean/dean.pdf\n",
          "createdAt": "2014-04-18T01:19:24Z",
          "updatedAt": "2014-04-18T01:19:24Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems like a good idea, but I don't think it needs to be in 1.3. We've talked about an extension and we could do that for 1.x\n",
          "createdAt": "2015-11-10T00:21:40Z",
          "updatedAt": "2015-11-10T00:21:40Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "NONE",
          "body": "Sample proposal for how this could be handled as an extension utilizing HelloRetryRequest:\nhttps://tools.ietf.org/html/draft-nygren-tls-client-puzzles-00\n\n(although updates are needed to that based on feedback received, as well as to update to incorporate HelloRetryRequest hash continuation changes)\n",
          "createdAt": "2015-11-10T02:17:47Z",
          "updatedAt": "2015-11-10T02:17:47Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that we would need to have `HelloRetryRequest` support extension.  I don't think that we discussed that option at all.  It adds to the potential modifications that might be made to the `ClientHello`, which is hazardous.  Something for us to keep in mind in the stateless reject work.\n",
          "createdAt": "2015-11-10T02:45:00Z",
          "updatedAt": "2015-11-10T02:45:00Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "NONE",
          "body": "In draft-ietf-tls-tls13-10, HelloRetryRequest does have an extensions field:\n\n```\n struct {\n      ProtocolVersion server_version;\n      CipherSuite cipher_suite;\n      NamedGroup selected_group;\n      Extension extensions<0..2^16-1>;\n  } HelloRetryRequest;\n```\n\nIt may be that only extensions sent back in a HelloRetryRequest can be ones that can be modified by the client when they resend ClientHello (and must be registered as such) and any implementation of stateless reject must be able to handle this?  Proof-of-work / ClientPuzzles end up being a generalization of cookie state but where a puzzle response is sent in addition to echoing the cookie.\n",
          "createdAt": "2015-11-10T03:00:45Z",
          "updatedAt": "2015-11-10T03:00:45Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "MDU6SXNzdWUzMTc1OTk0NA==",
      "title": "PRF fixes",
      "url": "https://github.com/tlswg/tls13-spec/issues/10",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In [this email](http://www.ietf.org/mail-archive/web/tls/current/msg11337.html) (and [this draft](https://www.secure-resumption.com/draft-bhargavan-tls-session-hash-00.txt)) Karthik et. al. outline issues with renegotiation that can be exploited to create multiple sessions with the same master secret.\n\nFor a new protocol version, it seems like the best solution is to change the master secret calculation to include more of the handshake as input.  This can probably be addressed along with #5.\n",
      "createdAt": "2014-04-17T20:35:16Z",
      "updatedAt": "2015-07-24T18:07:55Z",
      "closedAt": "2015-07-24T18:07:55Z",
      "comments": []
    },
    {
      "number": 11,
      "id": "MDU6SXNzdWUzMTc2MDYzOA==",
      "title": "Anti-replay mechanism",
      "url": "https://github.com/tlswg/tls13-spec/issues/11",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A 0-RTT mode needs some sort of replay protection for both application data and any client credentials that might appear in the first flight from a client.\n\nAll mechanisms rely on some amount of server state, but differ in how they allow a server to limit the total state commitment.  There are plenty of options, each with their own trade-offs, we just need to pick one.\n",
      "createdAt": "2014-04-17T20:45:23Z",
      "updatedAt": "2015-09-12T19:55:46Z",
      "closedAt": "2015-09-12T19:55:46Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Decided at the Seattle Interim and Dallas IETF that it was impractical to fix this in the general case. Fixed to the extent we plan to fix it in -08\n",
          "createdAt": "2015-09-12T19:55:46Z",
          "updatedAt": "2015-09-12T19:55:46Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "MDU6SXNzdWUzMTc2NDA1NQ==",
      "title": "Erratum: supported_signature_algorithms in CertificateRequest",
      "url": "https://github.com/tlswg/tls13-spec/issues/12",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "See http://www.rfc-editor.org/errata_search.php?rfc=5246&eid=1585\nAnd http://www.rfc-editor.org/errata_search.php?rfc=5246&eid=2864\n\nSection A.4.2 says:\n\n```\nstruct {\n    ClientCertificateType certificate_types<1..2^8-1>;\n    DistinguishedName certificate_authorities<0..2^16-1>;\n} CertificateRequest;\n```\n\nIt should say:\n\n```\nstruct {\n    ClientCertificateType certificate_types<1..2^8-1>;\n    SignatureAndHashAlgorithm\n      supported_signature_algorithms<2..2^16-2>;\n    DistinguishedName certificate_authorities<0..2^16-1>;\n} CertificateRequest;\n```\n\nThe definition in Section 7.4.4 (which includes the \"supported_signature_algorithms\" field) is the correct one (confirmed by Eric Rescorla on 2009-02-27) \n\nThe supported_signature_algorithms field is a variable length array. As such ceiling and floor should be specified, and they should be multiple of the base type (which is two bytes long in this case). \n",
      "createdAt": "2014-04-17T21:27:30Z",
      "updatedAt": "2015-05-17T03:25:01Z",
      "closedAt": "2015-05-17T03:25:01Z",
      "comments": []
    },
    {
      "number": 13,
      "id": "MDU6SXNzdWUzMTc2NDE5Ng==",
      "title": "Erratum: logic inversion on ENCRYPTED-KEY-DATA padding check",
      "url": "https://github.com/tlswg/tls13-spec/issues/13",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "http://www.rfc-editor.org/errata_search.php?rfc=5246&eid=2643\n\nSection E.3 says:\n\n> When a TLS-capable server negotiates SSL 2.0 it SHOULD, after\n> decrypting the ENCRYPTED-KEY-DATA field, check that these 8 padding\n> bytes are 0x03.  If they are not, the server SHOULD generate a random\n> value for SECRET-KEY-DATA, and continue the handshake (which will\n> eventually fail since the keys will not match).\n\nIt should say:\n\n> When a TLS-capable server negotiates SSL 2.0 it SHOULD, after\n> decrypting the ENCRYPTED-KEY-DATA field, check that these 8 padding\n> bytes are not all 0x03.  If they are, the server SHOULD generate a random\n> value for SECRET-KEY-DATA, and continue the handshake (which will\n> eventually fail since the keys will not match).\n\nThe condition is the wrong way around. When the bytes _are_ all 0x03, that means the client supports TLS, so there must have been a version rollback attack in order for SSL 2.0 to be negotiated.\n",
      "createdAt": "2014-04-17T21:29:17Z",
      "updatedAt": "2015-07-24T18:07:55Z",
      "closedAt": "2015-07-24T18:07:55Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This section was dropped as SSL2 is now prohibited entirely, so this issue is no longer applicable and can be closed.\n",
          "createdAt": "2015-05-20T03:02:50Z",
          "updatedAt": "2015-05-20T03:02:50Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "MDU6SXNzdWUzMTc2NDM4Nw==",
      "title": "Erratum: missing comma",
      "url": "https://github.com/tlswg/tls13-spec/issues/14",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "http://www.rfc-editor.org/errata_search.php?rfc=5246&eid=3122\n\nSection A.4. says:\n\n```\n   enum {\n       hello_request(0), client_hello(1), server_hello(2),\n       certificate(11), server_key_exchange (12),\n       certificate_request(13), server_hello_done(14),\n       certificate_verify(15), client_key_exchange(16),\n       finished(20)\n       (255)\n   } HandshakeType;\n```\n\nIt should say:\n\n```\n   enum {\n       hello_request(0), client_hello(1), server_hello(2),\n       certificate(11), server_key_exchange (12),\n       certificate_request(13), server_hello_done(14),\n       certificate_verify(15), client_key_exchange(16),\n       finished(20),\n       (255)\n   } HandshakeType;\n```\n\nThe comma after finished(20) is missing in the original text. \n",
      "createdAt": "2014-04-17T21:31:50Z",
      "updatedAt": "2014-06-18T20:23:23Z",
      "closedAt": "2014-06-18T20:23:23Z",
      "comments": []
    },
    {
      "number": 15,
      "id": "MDU6SXNzdWUzMTc2NDU0MA==",
      "title": "Erratum: missing };",
      "url": "https://github.com/tlswg/tls13-spec/issues/15",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "http://www.rfc-editor.org/errata_search.php?rfc=5246&eid=3123\n\nSection A.4.2. says:\n\n```\n   struct {\n       select (KeyExchangeAlgorithm) {\n           case dh_anon:\n               ServerDHParams params;\n           case dhe_dss:\n           case dhe_rsa:\n               ServerDHParams params;\n               digitally-signed struct {\n                   opaque client_random[32];\n                   opaque server_random[32];\n                   ServerDHParams params;\n               } signed_params;\n           case rsa:\n           case dh_dss:\n           case dh_rsa:\n               struct {} ;\n              /* message is omitted for rsa, dh_dss, and dh_rsa */\n           /* may be extended, e.g., for ECDH -- see [TLSECC] */\n   } ServerKeyExchange;\n```\n\nIt should say:\n\n```\n   struct {\n       select (KeyExchangeAlgorithm) {\n           case dh_anon:\n               ServerDHParams params;\n           case dhe_dss:\n           case dhe_rsa:\n               ServerDHParams params;\n               digitally-signed struct {\n                   opaque client_random[32];\n                   opaque server_random[32];\n                   ServerDHParams params;\n               } signed_params;\n           case rsa:\n           case dh_dss:\n           case dh_rsa:\n               struct {} ;\n              /* message is omitted for rsa, dh_dss, and dh_rsa */\n           /* may be extended, e.g., for ECDH -- see [TLSECC] */\n       };\n   } ServerKeyExchange;\n```\n\nThe '};' which belongs to 'select (KeyExchangeAlgorithm) {' is missing in the original text. \n",
      "createdAt": "2014-04-17T21:33:44Z",
      "updatedAt": "2015-05-16T21:46:10Z",
      "closedAt": "2015-05-16T21:46:10Z",
      "comments": []
    },
    {
      "number": 16,
      "id": "MDU6SXNzdWUzMTc2NDgwNQ==",
      "title": "Erratum: padding",
      "url": "https://github.com/tlswg/tls13-spec/issues/16",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "We might just close this one out based on #7.\n\nSee http://www.rfc-editor.org/errata_search.php?rfc=5246&eid=2390\n\nSection 6.2.3.3 should have marked text on padding removed:\n\n>   The additional authenticated data, which we denote as\n>    additional_data, is defined as follows:\n> \n> ```\n>  additional_data = seq_num + TLSCompressed.type +\n>                     TLSCompressed.version + TLSCompressed.length;\n> ```\n> \n>   where \"+\" denotes concatenation.\n> \n>   The aead_output consists of the ciphertext output by the AEAD\n>    encryption operation.  The length will generally be larger than\n>    TLSCompressed.length, but by an amount that varies with the AEAD\n>    cipher.  ~~Since the ciphers might incorporate padding, the amount of\n>    overhead could vary with different TLSCompressed.length values.~~  Each\n>    AEAD cipher MUST NOT produce an expansion of greater than 1024 bytes.\n>    Symbolically,\n\n I suggest leaving the sentence about padding out. The value for TLSCompressed.length is required by additional_data for both encryption and decryption. Therefore, it must be possible to determine the TLSCompressed.length from the ciphertext before decryption.\n\nIn practice this is done by subtracting the integrity check value length from the ciphertext length, where the integrity check value length is defined by each AEAD cipher separately. If the cipher incorporates variable padding, it is impossible to calculate the TLSCompressed.length without an explicit value sent for each ciphertext separately. Therefore to avoid confusion, it would be better not to mention anything about padding at all.\n\n(issue discussed on tls@ietf.org and with Eric Rescorla, result of both discussions was that padding in AEAD ciphers doesn't seem to be possible with the current specification) \n",
      "createdAt": "2014-04-17T21:37:22Z",
      "updatedAt": "2015-09-12T19:40:01Z",
      "closedAt": "2015-09-12T19:40:01Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We removed length form the additional data, so I believe this is no longer relevant.\n",
          "createdAt": "2015-09-12T19:40:01Z",
          "updatedAt": "2015-09-12T19:40:01Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "MDU6SXNzdWUzMTc2NTA5Nw==",
      "title": "Erratum: missing )",
      "url": "https://github.com/tlswg/tls13-spec/issues/17",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "See http://www.rfc-editor.org/errata_search.php?rfc=5246&eid=2165\n\nSection 6.2.3.2 says: \n\n>   Example: If the block length is 8 bytes, the content length\n>    (TLSCompressed.length) is 61 bytes, and the MAC length is 20 bytes,\n>    then the length before padding is 82 bytes (this does not include the\n>    IV**)**.  Thus, the padding length modulo 8 must be equal to 6 in order to\n>    make the total length an even multiple of 8 bytes (the block length).\n>    The padding length can be 6, 14, 22, and so on, through 254.  If the\n>    padding length were the minimum necessary, 6, the padding would be 6\n>    bytes, each containing the value 6.  Thus, the last 8 octets of the\n>    GenericBlockCipher before block encryption would be xx 06 06 06 06 06\n>    06 06, where xx is the last octet of the MAC.\n",
      "createdAt": "2014-04-17T21:41:02Z",
      "updatedAt": "2015-05-16T21:46:17Z",
      "closedAt": "2015-05-16T21:46:17Z",
      "comments": []
    },
    {
      "number": 24,
      "id": "MDU6SXNzdWUzMTc3NjYzMw==",
      "title": "ASN.1Cert isn't \"legal\"",
      "url": "https://github.com/tlswg/tls13-spec/issues/24",
      "state": "CLOSED",
      "author": "richsalz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "The data definition language says ASN.1Cert is an ASN item with a field having the illegal name 1Cert. We should make all of those be ASN1Cert probvably.\n",
      "createdAt": "2014-04-18T01:52:14Z",
      "updatedAt": "2015-09-12T19:40:32Z",
      "closedAt": "2015-09-12T19:40:32Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This has been fixed.\n",
          "createdAt": "2015-09-12T19:40:31Z",
          "updatedAt": "2015-09-12T19:40:31Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "MDU6SXNzdWUzMTgwOTcwOQ==",
      "title": "PRF negotiation",
      "url": "https://github.com/tlswg/tls13-spec/issues/26",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Mike StJohns notes that the hash function used in the PRF isn't known until the ServerHello is received by a client.  This means that the client needs to either calculate and store multiple hashes of the ClientHello OR remember the contents of the ClientHello.\n\nAlternatively, negotiation of the hash function can be removed.  SHA-256 might be good enough until we get to the next version of the protocol.\n",
      "createdAt": "2014-04-18T16:45:56Z",
      "updatedAt": "2015-09-22T21:18:18Z",
      "closedAt": "2015-09-22T21:18:18Z",
      "comments": [
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Alternatively, negotiation of the hash function can be removed. SHA-256 might be good enough until we get to the next version of the protocol.\n\n+1\n\n## \n\nPrincipal Security Engineer\nAkamai Technology\nCambridge, MA\n",
          "createdAt": "2014-04-18T18:02:13Z",
          "updatedAt": "2014-04-18T18:02:13Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If PRF negotiation is no longer desired, I'd like to suggest future proofing a bit by going back to the dual hash strategy and using SHA2-256+SHA3-256.\n",
          "createdAt": "2014-07-28T19:17:07Z",
          "updatedAt": "2014-07-28T19:17:07Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please take comments like that to the list; that's the right place to continue the discussion.\n",
          "createdAt": "2014-07-28T19:21:12Z",
          "updatedAt": "2014-07-28T19:21:12Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing. Please bring up on list if you want to continue\n",
          "createdAt": "2015-09-22T21:18:18Z",
          "updatedAt": "2015-09-22T21:18:18Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "MDU6SXNzdWUzMTgzNzY3MQ==",
      "title": "Fix Insecure Resumption",
      "url": "https://github.com/tlswg/tls13-spec/issues/27",
      "state": "CLOSED",
      "author": "wbl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The issues in https://secure-resumption.com/ need to be fixed. There are many options for doing this.\n",
      "createdAt": "2014-04-19T04:45:20Z",
      "updatedAt": "2015-07-24T18:07:55Z",
      "closedAt": "2015-07-24T18:07:55Z",
      "comments": []
    },
    {
      "number": 28,
      "id": "MDU6SXNzdWUzMTgzNzg2NQ==",
      "title": "Depreciation of various kinds ",
      "url": "https://github.com/tlswg/tls13-spec/issues/28",
      "state": "CLOSED",
      "author": "wbl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "TLS 1.2 currently supports a number of ciphersuites and mechanisms that are little-used or outdated. In particular SHA-1, MD5, RC4, DSA with any modulus size, RSA with small moduli. Some of these will get chopped out as a result of other issues, but others will not.\n",
      "createdAt": "2014-04-19T05:00:41Z",
      "updatedAt": "2015-09-22T21:17:46Z",
      "closedAt": "2015-09-22T21:17:46Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dependencies:\nSHA1: PR #231\nMD5: PR #188\nRC4: PR #107\nDSA: PR #235\nweak RSA: PR #167\n\nStatuses:\nthe pending PR #231 drops SHA1 to SHOULD NOT\nMD5 is currently MUST NOT & PR #231 also adds a MUST always error if seeing it\nRC4 is currently a MUST NOT\nDSA is pending decision & discussion on-list (issue #222; PR #235)\nweak RSA is currently considered \"not appropriate\" with the following text:\n\n> \"certificate chains containing keys or signatures weaker than 2048-bit RSA or 224-bit ECDSA are not appropriate for secure applications\"\n\nMerging the pending PRs listed as dependencies above should be sufficient to close this issue.\n",
          "createdAt": "2015-08-30T22:41:03Z",
          "updatedAt": "2015-08-30T22:41:03Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is done\n",
          "createdAt": "2015-09-22T21:17:46Z",
          "updatedAt": "2015-09-22T21:17:46Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "MDU6SXNzdWUzMjc1NTkxNg==",
      "title": "Determine replacement MTI cipher suite",
      "url": "https://github.com/tlswg/tls13-spec/issues/32",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "Now that we are removing static RSA cipher suites, we need a new MTI cipher suite. \n",
      "createdAt": "2014-05-03T21:54:33Z",
      "updatedAt": "2018-05-13T05:56:13Z",
      "closedAt": "2015-09-26T00:46:56Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From Sean's mail\n\no Symmetric:\n        MUST AES-GCM 128\n        [SHOULD ChaCha20-Poly1305]\n\no Hash:\n        MUST SHA-256\n\no Key Agreement: ECDH\n        MUST P-256\n        [SHOULD 25519]\n\no Signature:\n        MUST ECDSA P-256\n        MUST RSA\n",
          "createdAt": "2015-09-22T20:41:11Z",
          "updatedAt": "2015-09-22T20:41:11Z"
        },
        {
          "author": "dawud-tan",
          "authorAssociation": "NONE",
          "body": "Dear Mr. @ekr, currently I'm very interested in studying non-repudiation, then I found S-HTTP (RFC 2660) that offer non-repudiation security service. I also found that AS2 (RFC 4130) also offers this kind of service, but then I wonder why non-repudiation service is not becoming ubiquotus? Why AEAD replace HMAC, does hash function is too heavy, or hash is more appropriate for digital signature world? Thanks",
          "createdAt": "2018-05-13T05:56:13Z",
          "updatedAt": "2018-05-13T05:56:13Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "MDU6SXNzdWUzMjc1NjIyOA==",
      "title": "ServerKeyExchange has ServerDHParams twice?",
      "url": "https://github.com/tlswg/tls13-spec/issues/33",
      "state": "CLOSED",
      "author": "richsalz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "The ServerKeyExchange message, for dhe_dss and dhe_rsa has the\n   ServerDHParams params;\nand also as a part of the signed_params digitally-signed sub-struct.  Shoudl the first one be removed?\n",
      "createdAt": "2014-05-03T22:13:26Z",
      "updatedAt": "2014-10-27T16:16:26Z",
      "closedAt": "2014-10-27T16:16:26Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The way I read the specification language, the digitally-signed only contains the signature and not the data that is being signed. Otherwise one wouldn't be able to do CertificateVerify which does not repeat the handshake hashes.\n\nSee Section 4.7, which says:\n\n   In the following example\n\n```\n  stream-ciphered struct {\n      uint8 field1;\n      uint8 field2;\n      digitally-signed opaque {\n        uint8 field3<0..255>;\n        uint8 field4;\n      };\n  } UserType;\n```\n\n   The contents of the inner struct (field3 and field4) are used as\n   input for the signature/hash algorithm, and then the entire structure\n   is encrypted with a stream cipher.  The length of this structure, in\n   bytes, would be equal to two bytes for field1 and field2, plus two\n   bytes for the signature and hash algorithm, plus two bytes for the\n   length of the signature, plus the length of the output of the signing\n   algorithm.  The length of the signature is known because the\n   algorithm and key used for the signing are known prior to encoding or\n   decoding this structure.\n\nWith that said, this may be confusing enough that it's worth changing the spec language\nsomehow to make it clearer. E.g,, \"digital-signature-of\" instead of \"digitally-signed\"\n",
          "createdAt": "2014-05-03T22:21:27Z",
          "updatedAt": "2014-05-03T22:21:27Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I vote for digitial-signature-of\n",
          "createdAt": "2014-05-03T22:22:07Z",
          "updatedAt": "2014-05-03T22:22:07Z"
        },
        {
          "author": "mpg",
          "authorAssociation": "NONE",
          "body": "+1 for digital-signature-of.\n",
          "createdAt": "2014-05-04T10:45:32Z",
          "updatedAt": "2014-05-04T10:45:32Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "and also remove the word \"struct\" so it looks like\n   digital-signature-of { opaque rand1[32]; opaque rand232]; } SignedDHParams;\nthe struct word is noise, and now it also looks like a 'struct' declaration. :)\n",
          "createdAt": "2014-05-05T19:49:01Z",
          "updatedAt": "2014-05-05T19:49:01Z"
        }
      ]
    },
    {
      "number": 36,
      "id": "MDU6SXNzdWUzMjc1NzI3OA==",
      "title": "Remove DH_* Cipher suites",
      "url": "https://github.com/tlswg/tls13-spec/issues/36",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We just removed static RSA. Should we remove static DH as well?\n",
      "createdAt": "2014-05-03T23:22:58Z",
      "updatedAt": "2014-08-04T03:16:04Z",
      "closedAt": "2014-08-04T03:16:04Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Nobody objected so I made this change.\n",
          "createdAt": "2014-07-19T18:44:06Z",
          "updatedAt": "2014-07-19T18:44:06Z"
        },
        {
          "author": "Jesse-V",
          "authorAssociation": "NONE",
          "body": "Shall we close this then?\n",
          "createdAt": "2014-08-04T01:41:19Z",
          "updatedAt": "2014-08-04T01:41:19Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done\n",
          "createdAt": "2014-08-04T03:16:04Z",
          "updatedAt": "2014-08-04T03:16:04Z"
        }
      ]
    },
    {
      "number": 38,
      "id": "MDU6SXNzdWUzMzcwMzg0OQ==",
      "title": "Remove renegotiation",
      "url": "https://github.com/tlswg/tls13-spec/issues/38",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "At the interim we agreed to remove renegotiation\n",
      "createdAt": "2014-05-16T19:43:45Z",
      "updatedAt": "2014-12-01T15:52:48Z",
      "closedAt": "2014-12-01T15:52:48Z",
      "comments": []
    },
    {
      "number": 42,
      "id": "MDU6SXNzdWUzNTIxMDMxNA==",
      "title": "Remove gmt_unix_time field from the Random values?",
      "url": "https://github.com/tlswg/tls13-spec/issues/42",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A number of people have suggested this to reduce fingerprinting surface.\n",
      "createdAt": "2014-06-07T15:05:15Z",
      "updatedAt": "2014-07-18T20:39:26Z",
      "closedAt": "2014-07-18T20:39:26Z",
      "comments": [
        {
          "author": "danwing",
          "authorAssociation": "NONE",
          "body": "Needs to be removed from server and client, as mentioned in draft-mathewson-no-gmtunixtime, because DTLS (and TLS) are used with WebRTC/SIP/XMPP peer-to-peer communication.\n",
          "createdAt": "2014-06-27T02:40:06Z",
          "updatedAt": "2014-06-27T02:40:06Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I will be removing this shortly per the chair's declaration of conesnsus at:\n\nhttp://www.ietf.org/mail-archive/web/tls/current/msg12884.html\n",
          "createdAt": "2014-06-27T04:06:56Z",
          "updatedAt": "2014-06-27T04:06:56Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "MDU6SXNzdWUzNTI0NTE2Mw==",
      "title": "Make EC cipher suites standards track and add them to TLS 1.3 main RFC",
      "url": "https://github.com/tlswg/tls13-spec/issues/43",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Now that RFC 6090 has been published does this make sense?\n",
      "createdAt": "2014-06-08T19:49:59Z",
      "updatedAt": "2014-10-27T16:16:53Z",
      "closedAt": "2014-10-27T16:16:53Z",
      "comments": []
    },
    {
      "number": 47,
      "id": "MDU6SXNzdWUzNjE5MDgzNg==",
      "title": "Padding for AEAD cipher suites",
      "url": "https://github.com/tlswg/tls13-spec/issues/47",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "It's been observed a number of times that the AEAD cipher suite definitions don't actually accommodate ciphers which pad. See:\n\nhttp://www.ietf.org/mail-archive/web/tls/current/msg09776.html\nhttp://www.ietf.org/mail-archive/web/tls/current/msg09783.html\nhttp://www.ietf.org/mail-archive/web/tls/current/msg12871.html\n\nWe should either fix this or remove padding.\n",
      "createdAt": "2014-06-20T18:25:17Z",
      "updatedAt": "2014-09-06T21:23:26Z",
      "closedAt": "2014-09-06T21:23:26Z",
      "comments": []
    },
    {
      "number": 50,
      "id": "MDU6SXNzdWUzNjU0NTQxOQ==",
      "title": "Add AECDH AEAD cipher suites?",
      "url": "https://github.com/tlswg/tls13-spec/issues/50",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Suggested by Viktor Dukhovni.\n",
      "createdAt": "2014-06-26T04:45:20Z",
      "updatedAt": "2015-09-21T22:49:36Z",
      "closedAt": "2015-09-21T22:49:36Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We aren't doing anonymous DH so closing\n",
          "createdAt": "2015-09-21T22:49:36Z",
          "updatedAt": "2015-09-21T22:49:36Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "MDU6SXNzdWUzNzI5NTA2NQ==",
      "title": "Add non-GCM AEAD ciphers",
      "url": "https://github.com/tlswg/tls13-spec/issues/53",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "I only added the GCM AEAD ciphers. We should add all the standards track AEAD ciphers.\n",
      "createdAt": "2014-07-07T18:16:06Z",
      "updatedAt": "2015-09-15T11:58:37Z",
      "closedAt": "2015-09-15T11:58:37Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: This was dealt with in PR #180 and can be closed.\n",
          "createdAt": "2015-09-15T05:48:14Z",
          "updatedAt": "2015-09-15T05:48:14Z"
        }
      ]
    },
    {
      "number": 54,
      "id": "MDU6SXNzdWUzNzI5NTI0NQ==",
      "title": "Rewrite backward compatibility section to deal with TLS 1.3",
      "url": "https://github.com/tlswg/tls13-spec/issues/54",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "",
      "createdAt": "2014-07-07T18:17:47Z",
      "updatedAt": "2015-05-16T21:45:50Z",
      "closedAt": "2015-05-16T21:45:50Z",
      "comments": []
    },
    {
      "number": 55,
      "id": "MDU6SXNzdWUzNzI5NTQyNg==",
      "title": "Reduce the \"overhead\" values in TLSCiphertext, etc.",
      "url": "https://github.com/tlswg/tls13-spec/issues/55",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is currently 2^{14} + 2048 (in TLSCiphertexT) and then 2^{14} + 1024 later.\n\nThis is introduced by leaving room for compression. Should we just reduce this entirely across the board. Certainly we don't need to leave room for compression.\n",
      "createdAt": "2014-07-07T18:19:45Z",
      "updatedAt": "2015-08-20T14:24:20Z",
      "closedAt": "2015-08-20T14:24:20Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Proposal at interim: 256 octets total.\n",
          "createdAt": "2015-03-10T22:49:32Z",
          "updatedAt": "2015-03-10T22:49:32Z"
        }
      ]
    },
    {
      "number": 56,
      "id": "MDU6SXNzdWUzNzI5NzIzMA==",
      "title": "Reduce the \"overhead\" values in TLSCiphertext, etc.",
      "url": "https://github.com/tlswg/tls13-spec/issues/56",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is currently 2^{14} + 2048 (in TLSCiphertexT) and then 2^{14} + 1024 later.\n\nThis is introduced by leaving room for compression. Should we just reduce this entirely across the board. Certainly we don't need to leave room for compression.\n",
      "createdAt": "2014-07-07T18:39:36Z",
      "updatedAt": "2014-07-19T18:56:38Z",
      "closedAt": "2014-07-19T18:56:27Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "DUPLICATE\n",
          "createdAt": "2014-07-19T18:56:38Z",
          "updatedAt": "2014-07-19T18:56:38Z"
        }
      ]
    },
    {
      "number": 57,
      "id": "MDU6SXNzdWUzNzI5NzM0MA==",
      "title": "Should we have explicit rejection in ServerHello",
      "url": "https://github.com/tlswg/tls13-spec/issues/57",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently the way you detect that ServerHello is a \"try-again\" is to check the DL/ECC extensions and see if it matches the CKE. This seems inelegant. Options include:\n- Leave as-is\n- Have some explicit rejection indicator\n- Add a new message type, though it is pretty much going to have the same contents.\n",
      "createdAt": "2014-07-07T18:40:51Z",
      "updatedAt": "2014-10-09T19:53:46Z",
      "closedAt": "2014-10-09T19:53:46Z",
      "comments": []
    },
    {
      "number": 58,
      "id": "MDU6SXNzdWUzNzI5NzgxOQ==",
      "title": "Rename ClientKeyExchange",
      "url": "https://github.com/tlswg/tls13-spec/issues/58",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Wan-Teh points out that the new CKE is very different from the old CKE. should we rename?\n",
      "createdAt": "2014-07-07T18:46:05Z",
      "updatedAt": "2014-10-27T16:16:13Z",
      "closedAt": "2014-10-27T16:16:13Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We will make a new message. Something like ClientShare or ClientKeyAgreement\n",
          "createdAt": "2014-07-20T14:50:02Z",
          "updatedAt": "2014-07-20T14:50:02Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We'll also rename ServerKeyExchange to match.\n",
          "createdAt": "2014-07-20T15:01:02Z",
          "updatedAt": "2014-07-20T15:01:02Z"
        },
        {
          "author": "mhp",
          "authorAssociation": "NONE",
          "body": "Rather than making a new message which then needs to be wrapped in an extension for backwards compatibility, can't we simply define a new extension with the share info in it directly?  Or have I missed something?\n",
          "createdAt": "2014-07-23T10:52:26Z",
          "updatedAt": "2014-07-23T10:52:26Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "MDU6SXNzdWUzNzI5ODQzMQ==",
      "title": "Update text to deal with being able to use DSA with SHA > SHA-1",
      "url": "https://github.com/tlswg/tls13-spec/issues/59",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "",
      "createdAt": "2014-07-07T18:52:55Z",
      "updatedAt": "2015-09-22T04:15:44Z",
      "closedAt": "2015-09-22T04:15:44Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This should be closable now that DSA has been dropped from the spec.\n",
          "createdAt": "2015-09-22T03:46:24Z",
          "updatedAt": "2015-09-22T03:46:24Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "MDU6SXNzdWUzNzI5ODQ3Ng==",
      "title": "Update references",
      "url": "https://github.com/tlswg/tls13-spec/issues/60",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "A number of the references, e.g. RFC 3280, are out of date. Update.\n",
      "createdAt": "2014-07-07T18:53:22Z",
      "updatedAt": "2015-10-21T22:46:49Z",
      "closedAt": "2015-10-21T22:46:49Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "IDnits seems happy now for all RFCs. Drafts fix themselves.\n\nWe do need to decide whether to reference all the external\nciphersuite docs. @seanturner?\n",
          "createdAt": "2015-10-19T16:23:17Z",
          "updatedAt": "2015-10-19T16:23:17Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually looks like this is there. Closing\n",
          "createdAt": "2015-10-21T22:46:49Z",
          "updatedAt": "2015-10-21T22:46:49Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "MDU6SXNzdWUzNzI5ODcxOA==",
      "title": "Triple Handshake fix",
      "url": "https://github.com/tlswg/tls13-spec/issues/61",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This needs to be done for TLS 1.3\n",
      "createdAt": "2014-07-07T18:55:44Z",
      "updatedAt": "2015-09-12T19:32:11Z",
      "closedAt": "2015-09-12T19:32:11Z",
      "comments": [
        {
          "author": "Jesse-V",
          "authorAssociation": "NONE",
          "body": "Sorry, what is this?\n",
          "createdAt": "2014-08-04T01:40:13Z",
          "updatedAt": "2014-08-04T01:40:13Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This should be fully dealt with via the integration of session hash. Unless there's something else that needs to be done beyond that, I think this is closable now.\n",
          "createdAt": "2015-05-20T03:18:41Z",
          "updatedAt": "2015-05-20T03:18:41Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "MDU6SXNzdWUzNzI5ODg2MA==",
      "title": "Update IANA considerations for TLS 1.3",
      "url": "https://github.com/tlswg/tls13-spec/issues/62",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "",
      "createdAt": "2014-07-07T18:57:21Z",
      "updatedAt": "2015-11-30T21:47:15Z",
      "closedAt": "2015-11-30T21:47:15Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This needs to include a registry for ServerConfiguration extensions.\n",
          "createdAt": "2015-09-11T17:25:21Z",
          "updatedAt": "2015-09-11T17:25:21Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "MDU6SXNzdWUzNzk5MTU2NQ==",
      "title": "Allow GMT time in ServerRandom",
      "url": "https://github.com/tlswg/tls13-spec/issues/64",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per WG consensus we are removing GMT time in the random values.\n\nThis issue tracks whether we are mandating its removal from ServerRandom\n",
      "createdAt": "2014-07-16T15:04:38Z",
      "updatedAt": "2015-09-12T19:32:45Z",
      "closedAt": "2015-09-12T19:32:45Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Decided a while ago.\n",
          "createdAt": "2015-09-12T19:32:45Z",
          "updatedAt": "2015-09-12T19:32:45Z"
        }
      ]
    },
    {
      "number": 66,
      "id": "MDU6SXNzdWUzODI0MjA1MA==",
      "title": "Require extensions to be either encrypted or not encrypted",
      "url": "https://github.com/tlswg/tls13-spec/issues/66",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "\"      The EncryptedExtensions message simply contains any extensions\n      which should be protected, i.e., any which are not needed to\n      establish the cryptographic context.  The same extension types\n      MUST NOT appear in both the ServerHello and EncryptedExtensions.\n      If the same extension appears in both locations, the client MUST\n      rely only on the value in the EncryptedExtensions block.  [[OPEN\n      ISSUE: Should we just produce a canonical list of what goes where\n      and have it be an error to have it in the wrong place?  That seems\n      simpler.  Perhaps have a whitelist of which extensions can be\n      unencrypted and everything else MUST be encrypted.]]\n\"\n",
      "createdAt": "2014-07-19T18:45:46Z",
      "updatedAt": "2015-10-19T16:23:55Z",
      "closedAt": "2015-10-19T16:23:55Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looking through the IANA list, it seems to me that the only extension which\nhas a case for being in ServerHello is \nsupported_groups (really only needed for HelloRetryRequest, but probably\nsafest to put in both places) and ServerKeyShare if we extensionify it.\nAm I missing any? @martinthomson, thoughts?\n",
          "createdAt": "2015-10-03T21:51:17Z",
          "updatedAt": "2015-10-03T21:51:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You might want to make a statement about encrypted extensions in general, noting that other than the following, extensions MUST be encrypted unless this is the client's first flight (and 0RTT is enabled):\n\nkey_share\nsupported_groups*\nserver_name (we discussed having an encrypted_server_name extension if this needed to be encrypted)\n\nOther than that, you basically only need the parameters that determine a) routing, or b) key exchange.  And routing is only a server requirement, so you can encrypt anything that the server sends there.\n\nI agree that you could encrypt supported_groups, but it doesn't seem like it is even needed in a ServerHello, you could even remove it.\n\nI've heard people suggest that they might route on ALPN.  That would suggest a rule much like server_name.  And maybe an encrypted_alpn extension to match.\n",
          "createdAt": "2015-10-04T20:49:25Z",
          "updatedAt": "2015-10-04T20:50:27Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Sun, Oct 4, 2015 at 1:49 PM, Martin Thomson notifications@github.com\nwrote:\n\n> You might want to make a statement about encrypted extensions in general,\n> noting that other than the following, extensions MUST be encrypted unless\n> this is the client's first flight (and 0RTT is enabled):\n\nNote: we haven't added client type B extensions, so all client extensions\nare unencrypted presently.\n\nkey_share\n\n> supported_groups*\n> \n> You need supported groups unencrypted in the ClientHello so the server can\n> process it.\n> It doesn't need to be encrypted in the ServerHello but it does need to be\n> sent by the\n> server so that the client can choose a key for client auth.\n- In the Server\n\n> server_name (we discussed having an encrypted_server_name extension if\n> this needed to be encrypted)\n> \n> Other than that, you basically only need the parameters that determine a)\n> routing, or b) key exchange.\n> I agree that you could encrypt supported_groups, but it doesn't seem like\n> it is even needed in a ServerHello, you could even remove it.\n> \n> I've heard people suggest that they might route on ALPN. That would\n> suggest a rule much like server_name. And maybe an encrypted_alpn extension\n> to match.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/tlswg/tls13-spec/issues/66#issuecomment-145386573.\n",
          "createdAt": "2015-10-04T21:25:17Z",
          "updatedAt": "2015-10-04T21:25:17Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Duplicated by #72 \n",
          "createdAt": "2015-10-19T16:23:55Z",
          "updatedAt": "2015-10-19T16:23:55Z"
        }
      ]
    },
    {
      "number": 67,
      "id": "MDU6SXNzdWUzODI1ODQ0NQ==",
      "title": "Remove length from aead input",
      "url": "https://github.com/tlswg/tls13-spec/issues/67",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "In order to support aead suites that pad or otherwise modify length, we need to stop using the plaintext length in the aead input. An implied requirement on the cipher is to validate length.\n",
      "createdAt": "2014-07-20T14:16:23Z",
      "updatedAt": "2014-09-06T21:23:26Z",
      "closedAt": "2014-09-06T21:23:26Z",
      "comments": [
        {
          "author": "juhovh",
          "authorAssociation": "NONE",
          "body": ":+1:\n\nAlso note that I have also opened a documentation errata for TLS 1.2 related to this. (Errata ID: 2390, http://www.rfc-editor.org/errata_search.php?rfc=5246)\n",
          "createdAt": "2014-07-20T15:22:47Z",
          "updatedAt": "2014-07-20T15:22:47Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "MDU6SXNzdWUzODI1OTExOA==",
      "title": "Do we retain CCS and Finish messages?",
      "url": "https://github.com/tlswg/tls13-spec/issues/68",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@ the interim the WG briefly discussed the possibility of removing the CCS and Finish messages.\n",
      "createdAt": "2014-07-20T14:41:22Z",
      "updatedAt": "2015-09-12T19:36:59Z",
      "closedAt": "2015-09-12T19:36:59Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "CCS no, Finish yes.\n",
          "createdAt": "2015-09-12T19:36:59Z",
          "updatedAt": "2015-09-12T19:36:59Z"
        }
      ]
    },
    {
      "number": 69,
      "id": "MDU6SXNzdWUzODI1OTE0OA==",
      "title": "Don't forget to import padding draft.",
      "url": "https://github.com/tlswg/tls13-spec/issues/69",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-07-20T14:42:23Z",
      "updatedAt": "2015-09-22T21:09:02Z",
      "closedAt": "2015-09-22T21:09:02Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we don't bring in padding, we should stop claiming you can use zero-length records for\nanti-traffic-analysis\n\n\"Implementations MUST NOT send zero-length fragments of Handshake, Alert, or\nChangeCipherSpec content types. Zero-length fragments of Application data MAY\nbe sent as they are potentially useful as a traffic analysis countermeasure.\n\"\n",
          "createdAt": "2014-12-30T19:54:52Z",
          "updatedAt": "2014-12-30T19:54:52Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done\n",
          "createdAt": "2015-09-22T21:09:02Z",
          "updatedAt": "2015-09-22T21:09:02Z"
        }
      ]
    },
    {
      "number": 70,
      "id": "MDU6SXNzdWUzODI1OTE1Mw==",
      "title": "Rewrite strict order for (ec)dhe groups",
      "url": "https://github.com/tlswg/tls13-spec/issues/70",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This makes it easier to enforce uniqueness constraints.\n",
      "createdAt": "2014-07-20T14:42:38Z",
      "updatedAt": "2015-09-12T20:40:16Z",
      "closedAt": "2015-09-12T20:40:16Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There didn't seem to be much support for this. Please feel free to reraise on-list.\n",
          "createdAt": "2015-09-12T20:40:16Z",
          "updatedAt": "2015-09-12T20:40:16Z"
        }
      ]
    },
    {
      "number": 71,
      "id": "MDU6SXNzdWUzODI1OTI0Mg==",
      "title": "Save bytes in (ec)dhe shares",
      "url": "https://github.com/tlswg/tls13-spec/issues/71",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "By using the same numbering space for ecdhe and dhe groups.\n\nProbably a comment for draft-dkg\n",
      "createdAt": "2014-07-20T14:46:16Z",
      "updatedAt": "2014-10-09T19:53:46Z",
      "closedAt": "2014-10-09T19:53:46Z",
      "comments": []
    },
    {
      "number": 72,
      "id": "MDU6SXNzdWUzODI1OTQ0Ng==",
      "title": "Enumerate where the extensions can go.",
      "url": "https://github.com/tlswg/tls13-spec/issues/72",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "",
      "createdAt": "2014-07-20T14:59:17Z",
      "updatedAt": "2015-10-24T19:38:07Z",
      "closedAt": "2015-10-24T19:38:07Z",
      "comments": [
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"go\" as in whether they are plaintext or go into the EncryptedExtensions block.\n",
          "createdAt": "2014-07-20T16:09:10Z",
          "updatedAt": "2014-07-20T16:09:10Z"
        }
      ]
    },
    {
      "number": 73,
      "id": "MDU6SXNzdWUzODI1OTc1Nw==",
      "title": "Retry on ClientHello",
      "url": "https://github.com/tlswg/tls13-spec/issues/73",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "MUST include all the original shares, plus the one the server selected. Otherwise we create a downgrade opportunity.\n",
      "createdAt": "2014-07-20T15:18:44Z",
      "updatedAt": "2014-10-09T19:53:46Z",
      "closedAt": "2014-10-09T19:53:46Z",
      "comments": []
    },
    {
      "number": 74,
      "id": "MDU6SXNzdWUzODI2MDkwOA==",
      "title": "forking resumption keys",
      "url": "https://github.com/tlswg/tls13-spec/issues/74",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Does forking the resumption keys affect dropping the CCS message?\n",
      "createdAt": "2014-07-20T16:22:12Z",
      "updatedAt": "2015-08-27T00:12:52Z",
      "closedAt": "2015-08-27T00:12:52Z",
      "comments": []
    },
    {
      "number": 75,
      "id": "MDU6SXNzdWUzOTM1MjI4Ng==",
      "title": "enumerate all \"_RESERVED\" values in an appendix table",
      "url": "https://github.com/tlswg/tls13-spec/issues/75",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "The list of obsoleted values in enums is ever increasing. Minor suggestion for the backwards compatibility appendix E: add a table of all \"_RESERVED\" values from all enums that are now MUST NOT sends/accepts.\n",
      "createdAt": "2014-08-02T16:41:01Z",
      "updatedAt": "2015-10-21T18:59:41Z",
      "closedAt": "2015-10-21T18:59:41Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We added text about this, and now that we auto-generate these tables, we can just add as many reserved values as we want, so closing. Feel free to produce PRs for missing reserved values\n",
          "createdAt": "2015-10-21T18:59:41Z",
          "updatedAt": "2015-10-21T18:59:41Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "MDU6SXNzdWUzOTg2MzA3Mg==",
      "title": "What can change on resumption",
      "url": "https://github.com/tlswg/tls13-spec/issues/76",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Rich asked about SNI, but there are other values for extensions that might be included in a resumption handshake to cover the possibility that the session cannot be resumed.  We should probably talk about that a little in the draft, maybe even throw a few \"MUST\" or \"SHOULD\" statements at it.\n",
      "createdAt": "2014-08-08T21:08:00Z",
      "updatedAt": "2015-09-12T19:33:26Z",
      "closedAt": "2015-09-12T19:33:26Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Resumption replaced by PSK so this is generally OBE.\n",
          "createdAt": "2015-09-12T19:33:26Z",
          "updatedAt": "2015-09-12T19:33:26Z"
        }
      ]
    },
    {
      "number": 78,
      "id": "MDU6SXNzdWU0MTU3MDgxNw==",
      "title": "Add length to ClientKeyExchangeOffer so that you can skip unknown types",
      "url": "https://github.com/tlswg/tls13-spec/issues/78",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-08-30T20:11:53Z",
      "updatedAt": "2014-10-09T19:53:46Z",
      "closedAt": "2014-10-09T19:53:46Z",
      "comments": []
    },
    {
      "number": 79,
      "id": "MDU6SXNzdWU0MjEyNzIwMA==",
      "title": "Import dhe-dl draft",
      "url": "https://github.com/tlswg/tls13-spec/issues/79",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "",
      "createdAt": "2014-09-06T21:25:14Z",
      "updatedAt": "2014-10-09T19:53:46Z",
      "closedAt": "2014-10-09T19:53:46Z",
      "comments": []
    },
    {
      "number": 80,
      "id": "MDU6SXNzdWU0MjEyNzU3Ng==",
      "title": "Require support for compressed point format",
      "url": "https://github.com/tlswg/tls13-spec/issues/80",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "RFC 4492 has both compressed and uncompressed point formats. Can we just require compressed and get rid of point format negotiation?\n",
      "createdAt": "2014-09-06T21:43:02Z",
      "updatedAt": "2015-08-27T00:13:25Z",
      "closedAt": "2015-08-27T00:13:25Z",
      "comments": [
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "AFAIK the compressed format has issues with patents (eg US patent 6141420 and US patent 6252960) and is not supported by some ECC-libraries.\n\nNote though that according to djb those patents are likely to be invalid (http://cr.yp.to/ecdh/patents.html).\n\nNote also that it is the uncompressed format that is the required format in RFC 4492.\n",
          "createdAt": "2014-09-10T15:50:54Z",
          "updatedAt": "2014-09-10T15:50:54Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We resolved this.\n",
          "createdAt": "2015-08-27T00:13:25Z",
          "updatedAt": "2015-08-27T00:13:25Z"
        }
      ]
    },
    {
      "number": 83,
      "id": "MDU6SXNzdWU0NTE3MzU1Mw==",
      "title": "Address new point formats for new CFRG Curves",
      "url": "https://github.com/tlswg/tls13-spec/issues/83",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The new CFRG curves will probably have different point formats.\n",
      "createdAt": "2014-10-07T21:43:34Z",
      "updatedAt": "2015-09-12T19:33:47Z",
      "closedAt": "2015-09-12T19:33:47Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This was decided and will be handled as part of import\n",
          "createdAt": "2015-09-12T19:33:47Z",
          "updatedAt": "2015-09-12T19:33:47Z"
        }
      ]
    },
    {
      "number": 87,
      "id": "MDU6SXNzdWU0NzkyNDcxMg==",
      "title": "The Pseudorandom Function",
      "url": "https://github.com/tlswg/tls13-spec/issues/87",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This section says \"This PRF with the SHA-256 hash function is used for all cipher suites defined in this document \". This was valid in RFC 5246 because it defines TLS_XXX_SHA256 (or weaker) only. However, this draft also defines TLS_XXX_SHA384 resulting in a contradiction. I think this sentence should be rephrased.\n",
      "createdAt": "2014-11-06T05:21:56Z",
      "updatedAt": "2015-07-31T07:25:53Z",
      "closedAt": "2015-07-31T07:25:53Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: This can be closed now.\n\nThis was dealt with at some point, probably in the HKDF merge.\n",
          "createdAt": "2015-07-21T22:54:43Z",
          "updatedAt": "2015-07-21T22:54:43Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Right. Let's close.\n",
          "createdAt": "2015-07-31T07:25:53Z",
          "updatedAt": "2015-07-31T07:25:53Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "MDU6SXNzdWU0ODU4ODE5OQ==",
      "title": "Describe Update Mechanism",
      "url": "https://github.com/tlswg/tls13-spec/issues/91",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per discussion at the Interim, describe an Update mechanism.\n",
      "createdAt": "2014-11-13T01:51:00Z",
      "updatedAt": "2015-09-22T21:08:55Z",
      "closedAt": "2015-09-22T21:08:55Z",
      "comments": []
    },
    {
      "number": 92,
      "id": "MDU6SXNzdWU0ODU4ODQ4MQ==",
      "title": "Describe mechanism for moving client auth into update",
      "url": "https://github.com/tlswg/tls13-spec/issues/92",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "At the Interim it was suggested we move client auth into an update. Draft this up\n",
      "createdAt": "2014-11-13T01:56:03Z",
      "updatedAt": "2015-09-22T21:08:55Z",
      "closedAt": "2015-09-22T21:08:55Z",
      "comments": []
    },
    {
      "number": 93,
      "id": "MDU6SXNzdWU0ODU5ODExMg==",
      "title": "Implement session tickets in terms of update",
      "url": "https://github.com/tlswg/tls13-spec/issues/93",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Draft something up as discussed in interim\n",
      "createdAt": "2014-11-13T04:58:23Z",
      "updatedAt": "2015-09-12T19:56:20Z",
      "closedAt": "2015-09-12T19:56:20Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Overtaken by events.\n",
          "createdAt": "2015-09-12T19:56:20Z",
          "updatedAt": "2015-09-12T19:56:20Z"
        }
      ]
    },
    {
      "number": 97,
      "id": "MDU6SXNzdWU1MDE4MTczNA==",
      "title": "Change signature format to include more context",
      "url": "https://github.com/tlswg/tls13-spec/issues/97",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See https://www.ietf.org/mail-archive/web/tls/current/msg14764.html and previous.\n",
      "createdAt": "2014-11-26T14:08:33Z",
      "updatedAt": "2015-08-27T00:13:34Z",
      "closedAt": "2015-08-27T00:13:34Z",
      "comments": []
    },
    {
      "number": 98,
      "id": "MDU6SXNzdWU1MDI4MDE0MQ==",
      "title": "combine DSS,RSA,ECDSA part of ciphersuites to CERT?",
      "url": "https://github.com/tlswg/tls13-spec/issues/98",
      "state": "CLOSED",
      "author": "nmav",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Currently in TLS 1.2 there are ciphersuites which specify in addition to their key exchange the algorithm in the certificate. This provides a strict control on the algorithm possibilities, but no flexibility when a new signature scheme comes up, since a new bunch of ciphersuites must be defined. For example, one cannot use AES-CCM with ECDHE and RSA certificates, while it can use it with ECDHE and ECDSA certificates (RFC7251), or DHE and RSA certificates, even though there is no security reason for prohibiting the former. In fact so far there hasn't been a reason to allow a signature algorithm with a specific key exchange, but forbid it with an other one.\n\nWouldn't it be simpler and more flexible instead of having:\nTLS_DHE_(DSS)_WITH_AES_128_CBC_SHA1\nTLS_ECDHE_(RSA)_WITH_AES_128_CBC_SHA1\nTLS_ECDHE_(ECDSA)_WITH_AES_128_CBC_SHA1\n\nto have:\nTLS_DHE_(CERT)_WITH_AES_128_CBC_SHA1\nTLS_ECDHE_(CERT)_WITH_AES_128_CBC_SHA1\n\nwhere the allowed algorithms in the PKIX part will defined but not restricted if the security parameters of the certificate algorithm match the ones of the session? That would simplify implementations, and would also fit the signatureAlgorithms extension design, as one despite the generality of CERT, a server could select a certificate that matches the client allowed algorithms.\n",
      "createdAt": "2014-11-27T11:12:58Z",
      "updatedAt": "2015-09-23T13:44:32Z",
      "closedAt": "2015-09-22T21:08:34Z",
      "comments": [
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "Agreed. This would be a step in line with the ECDH_ECDSA/ECDH_RSA and DH_DSS/DH_RSA changes in TLS 1.2 (7.4.2).\n",
          "createdAt": "2014-12-03T13:58:17Z",
          "updatedAt": "2014-12-03T13:58:17Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Per meeting in Dallas, I don't think we're going to do this absent a more compelling proposal. Closing for now. Please feel free to reraise with a complete proposal\n",
          "createdAt": "2015-09-22T21:08:34Z",
          "updatedAt": "2015-09-22T21:08:34Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "@ekr what does complete proposal mean? I don't see any information on the minutes on what is missing.\n",
          "createdAt": "2015-09-23T09:18:26Z",
          "updatedAt": "2015-09-23T09:18:26Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This doesn't reflect any decision taken in Redmond, I'm just cleaning up the queue.\n\nIt's been a while since Dallas but IIRC people weren't that happy with all the\na la carte mechanisms and the guidance was to go back and try to accommodate\nthe concerns people had raised on-list and in-meeting. You'd have to consult\nthe video and/or the text minutes. \n",
          "createdAt": "2015-09-23T13:44:32Z",
          "updatedAt": "2015-09-23T13:44:32Z"
        }
      ]
    },
    {
      "number": 99,
      "id": "MDU6SXNzdWU1MDQ1MDI1NA==",
      "title": "Supported signature algorithms for the certificate chain",
      "url": "https://github.com/tlswg/tls13-spec/issues/99",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "see http://www.ietf.org/mail-archive/web/tls/current/msg14788.html and http://www.ietf.org/mail-archive/web/tls/current/msg14789.html\n",
      "createdAt": "2014-11-30T07:30:05Z",
      "updatedAt": "2015-10-17T22:58:47Z",
      "closedAt": "2015-10-17T22:58:47Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this has been addressed by the recent rewrites.\n",
          "createdAt": "2015-10-17T22:58:47Z",
          "updatedAt": "2015-10-17T22:58:47Z"
        }
      ]
    },
    {
      "number": 101,
      "id": "MDU6SXNzdWU1MDU4OTg1OA==",
      "title": "context string management",
      "url": "https://github.com/tlswg/tls13-spec/issues/101",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "We're hitting the PRF pretty hard now for the various key derivation steps.  Now #100 adds context strings to the signature input on CertificateVerify.\n\nIt might not be necessary to go for a full-blown registry, but having a table for each of these might help ensure that we don't use the same string twice unintentionally.\n",
      "createdAt": "2014-12-01T22:53:05Z",
      "updatedAt": "2015-10-23T21:49:23Z",
      "closedAt": "2015-10-23T21:49:23Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we can live without a table here, and things are starting to get long... If you have a PR that actually shows this can be done briefly, I'll re-open.\n",
          "createdAt": "2015-10-23T21:49:23Z",
          "updatedAt": "2015-10-23T21:49:23Z"
        }
      ]
    },
    {
      "number": 103,
      "id": "MDU6SXNzdWU1MjY4OTg3NA==",
      "title": "Additional clarity about which messages are in session_hash",
      "url": "https://github.com/tlswg/tls13-spec/issues/103",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "WRT Pull Request #89, Martin Thomson writes.\n\n\"As I commented in the meeting, I think that we need to be somewhat more prescriptive about what is \ncovered by the session_hash at each point. That is, enumerate precisely what messages form handshake_messages (and probably also what parts of those messages). This is useful since session_hash is used in two ways. It will be more relevant when we talk about 0 RTT handshakes, where the order of messages that appear in the handshake could change significantly.\"\n",
      "createdAt": "2014-12-22T21:20:34Z",
      "updatedAt": "2015-12-01T17:19:49Z",
      "closedAt": "2015-12-01T17:19:49Z",
      "comments": [
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "Agreed. Section 8.1 of draft 4 is less than clear about at what point the session_hash is when the resumption_premaster_secret is generated. The second to last paragraph seems to imply that it is generated after both Finished messages, as it says that it differs from both the other hashes, but it should be made explicit.\n",
          "createdAt": "2015-01-04T21:44:31Z",
          "updatedAt": "2015-01-04T21:44:31Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The intention here is that the resumption and master secrets are generated using the same session hash and that hs _master_secret is generated with a different session hash. I'll see if I can rephrase, but if someone wants to send a PR that wouldn't be unappreciated.\n",
          "createdAt": "2015-01-04T21:51:59Z",
          "updatedAt": "2015-01-04T21:51:59Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The intention here is that the resumption and master secrets are generated using the same session hash and that hs _master_secret is generated with a different session hash. I'll see if I can rephrase, but if someone wants to send a PR that wouldn't be unappreciated.\n\nYou might consider rephrasing that statement too.  My understanding is that session hash is a hash over the concatenated transcript of the handshake.  However, it is important to note that as we move to 0RTT modes, the order of message changes, though the actual messages are largely the same.  I consider it important to describe precisely what messages and in what order.\n\nI imagine a formulation of the form:\n\n```\nsession_hash = hash(transcript)\ntranscript = client_flight_1 || server_flight_1 || ... client_flight_2\nclient_flight_1 = client_hello (without the early data extension, maybe) || client_key_share\nserver_flight_1 = server_hello || server_key_share\n```\n\netc...   will be helpful.\n",
          "createdAt": "2015-01-05T04:16:09Z",
          "updatedAt": "2015-01-05T04:16:09Z"
        },
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "One possible way to add clarity with a minimum of ambiguity, would to add indications of where the master keys are generated to figures 1 through 3 in section 7.2, but the figures aren't normative, are they?\n",
          "createdAt": "2015-01-05T11:35:38Z",
          "updatedAt": "2015-01-05T11:35:38Z"
        },
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "I just submitted a pull request along the above comment.\n\nWhen preparing the change, I noticed some further strangeness. The draft says:\n\n```\nOnce the last non-Finished message has been sent, the client and\nserver then compute the master secret which will be used for the\nremainder of the session:\n```\n\nThis seems to indicate that the master secret should be computed before the server-side Finished message if no CertificateRequest was sent (as the client won't send any Certificate or CertificateVerify then), and after it if a CertificateRequest was sent. As far as I can see, this behavior would only make the code on both client and server more complicated for no benefit.\n",
          "createdAt": "2015-01-08T14:21:03Z",
          "updatedAt": "2015-01-08T14:21:03Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The advantage is that if there is no client auth then the server can start sending data immediately.\n\nNote that there is no requirement that servers or clients do so, since the computation is the same if they do it at the end of the handshake.\n",
          "createdAt": "2015-01-08T15:08:25Z",
          "updatedAt": "2015-01-08T15:08:25Z"
        },
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "Yes, but the server can do so anyway, since it knows what it will send in the Final message.\n",
          "createdAt": "2015-01-08T15:19:55Z",
          "updatedAt": "2015-01-08T15:19:55Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Correct. The problem is the client's Certificate, and following messages. So it's easiest to just not include any Finished messages at all.\n",
          "createdAt": "2015-01-08T15:27:09Z",
          "updatedAt": "2015-01-08T15:27:09Z"
        },
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "Ie I don't see any inherent benefit in the server-side sequence\n\n  ...\n  Certificate\n  CertificateVerify\n  [Compute master_sequence]\n  Finished\n  [Switch to master_sequence derived keys]\n  Application Data\n\nover\n\n  ...\n  Certificate\n  CertificateVerify\n  Finished\n  [Compute master_sequence]\n  [Switch to master_sequence derived keys]\n  Application Data\n\nAnd the latter allows for common code for all cases if the server doesn't do early data.\n",
          "createdAt": "2015-01-08T15:32:57Z",
          "updatedAt": "2015-01-08T15:32:57Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh, I had misunderstood you. I don't disagree with this.\n",
          "createdAt": "2015-01-08T15:35:22Z",
          "updatedAt": "2015-01-08T15:35:22Z"
        },
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "One more issue that needs clarification: If the server fails to validate the client Finished packet, should it send the alert complaining about it encrypted with the handshake key or the main key?\n\nI suspect that the alert should be sent encrypted with the main key, as the client likely has switched to using the main key after sending its Finished packet.\n",
          "createdAt": "2015-01-08T21:10:08Z",
          "updatedAt": "2015-01-08T21:10:08Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems like it should be clearer now. Please file individual issued if needed.\n",
          "createdAt": "2015-12-01T17:19:49Z",
          "updatedAt": "2015-12-01T17:19:49Z"
        }
      ]
    },
    {
      "number": 104,
      "id": "MDU6SXNzdWU1MjY5MDE0MQ==",
      "title": "Re-start session hash and Finished hash in mismatched case",
      "url": "https://github.com/tlswg/tls13-spec/issues/104",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending",
        "discuss-seattle"
      ],
      "body": "See Figure 2,\n\n\"[[OPEN ISSUE: Do we restart the handshake hash?]]\n[[OPEN ISSUE: We need to make sure that this flow doesn't introduce\ndowngrade issues. Potential options include continuing the handshake\nhashes (as long as clients don't change their opinion of the server's\ncapabilities with aborted handshakes) and requiring the client to send\nthe same ClientHello (as is currently done) and then checking you get\nthe same negotiated parameters.]]\"\n\nRe-starting the hashes is conceptually cleaner, but needs security\nanalysis.\n",
      "createdAt": "2014-12-22T21:23:55Z",
      "updatedAt": "2016-05-21T16:32:05Z",
      "closedAt": "2016-05-21T16:32:05Z",
      "comments": [
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "As the HelloRetryRequest affects the clients handling of the later ServerHello (last paragraph of 7.4.2.4), it would probably be prudent to have at least it in the handshake hash.\n",
          "createdAt": "2014-12-30T17:45:23Z",
          "updatedAt": "2014-12-30T17:45:23Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@grubba, I think that this is a topic you should take up on the mailing list: tls@ietf.org\n",
          "createdAt": "2014-12-30T18:54:37Z",
          "updatedAt": "2014-12-30T18:54:37Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "NONE",
          "body": "For the repeated ClientHello case (in the face of HelloRetryRequest), what about having HelloRetryRequest always contain a cookie (similar to in HelloVerifyRequest) and require repeated ClientHellos to replay that cookie.  If that cookie is an HMAC by the server across an key held by the server, any server extra data (client ip?), and the invariant part of the ClientHello, then the server can revalidate the ClientHello without needing to keep any state about it.  The handshake hash would contain the cookie (which includes an HMAC of the initial ClientHello that the server should revalidate against the new ClientHello).  This aligns well with DTLS HelloVerifyRequest and also allows the first ClientHello to be excluded from the handshake hash, and then makes things like DTLS and any future client-puzzles extension work fit in fairly cleanly.\n",
          "createdAt": "2015-06-22T22:48:48Z",
          "updatedAt": "2015-06-22T22:48:48Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I certainly think we want a cookie here because I want to merge HelloVerifyRequest and HelloRetryRequest. I'm less sure that the \"verify that it was sent without changes\" plan is practical, but it's certainly something we can explore.\n",
          "createdAt": "2015-06-22T23:31:41Z",
          "updatedAt": "2015-06-22T23:31:41Z"
        }
      ]
    },
    {
      "number": 106,
      "id": "MDU6SXNzdWU1Mjc2MjAxMw==",
      "title": "Consider renumbering server_key_share and client_key_share to keep the handshake packet ordering property.",
      "url": "https://github.com/tlswg/tls13-spec/issues/106",
      "state": "CLOSED",
      "author": "grubba",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The handshake packets in TLS 1.2 and earlier are numbered so that the HandshakeType for each of client and server is strictly increasing when packets arrive in correct order, and HandshakeType/10 indicates the flight number. This allows for using a simpler state-machine.\n\nThe new handshake packets {server,client}_key_share break this convention by using numbers in the flight 2 range (17 & 18), while belonging in flight 1.\n\nThis suggestion is to renumber them to eg\n\n  client_key_share(5)\n\nand\n\n  server_key_share(6)\n",
      "createdAt": "2014-12-23T18:09:14Z",
      "updatedAt": "2014-12-30T19:21:48Z",
      "closedAt": "2014-12-30T19:21:48Z",
      "comments": []
    },
    {
      "number": 108,
      "id": "MDU6SXNzdWU1Mjg2NDc4Ng==",
      "title": "The definition of hello_retry_request(4) is missing from HandshakeType in section 7.4.",
      "url": "https://github.com/tlswg/tls13-spec/issues/108",
      "state": "CLOSED",
      "author": "grubba",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "It has a proper definition in appendix A.4.\n\nNote though that RFC 4507 section 7 has allocated this value for the session_ticket/NewSessionTicket handshake type. This point may be moot if RFC 4507 has been integrated with TLS 1.3, in which case RFC 4507 should be added to the list of obsoleted RFCs.\n",
      "createdAt": "2014-12-25T14:34:49Z",
      "updatedAt": "2014-12-30T19:21:48Z",
      "closedAt": "2014-12-30T19:21:48Z",
      "comments": []
    },
    {
      "number": 109,
      "id": "MDU6SXNzdWU1MzA0Mjk3Mw==",
      "title": "Editorial: 7.4.3.2 - 'random' explanation is unclear",
      "url": "https://github.com/tlswg/tls13-spec/issues/109",
      "state": "CLOSED",
      "author": "davidillsley",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "7.4.2.3. Server Hello\n\n```\nrandom\n  This structure is generated by the server and MUST be independently generated from the ClientHello.random.\n```\n\nis slightly confusing english. Must this be generated from the ClientHello.random? I'm pretty sure the opposite is the intent.\n\nA clearer form of words might be:\n\n```\nrandom\n  This structure is generated by the server and MUST be generated indepdendently of the ClientHello.random.\n```\n\nor\n\n```\nrandom\n  This structure is generated by the server and MUST be generated without reference to the ClientHello.random.\n```\n",
      "createdAt": "2014-12-29T14:04:03Z",
      "updatedAt": "2014-12-29T23:10:54Z",
      "closedAt": "2014-12-29T23:10:54Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged.\n",
          "createdAt": "2014-12-29T23:10:54Z",
          "updatedAt": "2014-12-29T23:10:54Z"
        }
      ]
    },
    {
      "number": 113,
      "id": "MDU6SXNzdWU1MzEwMjg4NA==",
      "title": "Prohibit SSL v2 CLIENT-HELLO entirely",
      "url": "https://github.com/tlswg/tls13-spec/issues/113",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per Brian's suggestion, splitting this off of PR #105.\n\nSSL v2 CLIENT-HELLO support requires additional implementation complexity that is an unnecessary risk to maintain support with a 20 year old deprecated negotiation format. Implementations have had notable bugs in handling this in the past. The current status quo expects them to be acceptable for negotiating TLS 1.0-1.2, even though _ALL_ TLS clients are capable of using the SSL v3 version ClientHello if properly configured. Support for this has been optional and deprecated for many years, with the SSL 3 spec noting in 1996 that \"The ability to send version 2.0 client hello messages will be phased out with all due haste. Implementers should make every effort to move forward as quickly as possible.\"\n\nSome implementers would be quite happy to have this prohibited entirely so that their code can finally be scrubbed clean of obsolete SSL 2 junk. Others want to perpetuate backwards compatibility support for EOL clients forever. I argue the former. A decision needs to be made on which path to chose. It will be depressing if it is to be the latter. :/\n",
      "createdAt": "2014-12-30T09:19:34Z",
      "updatedAt": "2015-09-12T19:37:54Z",
      "closedAt": "2015-09-12T19:37:54Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It is now no longer possible to use SSLv2 hellos with TLS 1.3 (because some extensions are mandatory) so we shouldn't need anythign here.\n",
          "createdAt": "2015-09-12T19:37:54Z",
          "updatedAt": "2015-09-12T19:37:54Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "MDU6SXNzdWU1MzE0MTIxMw==",
      "title": "Be more clear about \"cryptographic security\" goal",
      "url": "https://github.com/tlswg/tls13-spec/issues/114",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "Editor Ready"
      ],
      "body": "The doc says:\n\n\"The goals of the TLS protocol, in order of priority, are as follows:\n1. Cryptographic security: TLS should be used to establish a secure connection\n   between two parties.\"\n\nThis is pretty handwavy. We should be a little more clear about the target and\nthen point to a security considerations section which has more detail about the\ndesired properties.\n",
      "createdAt": "2014-12-30T19:43:36Z",
      "updatedAt": "2016-08-28T22:10:38Z",
      "closedAt": "2016-08-28T22:10:38Z",
      "comments": [
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should we draft something here ?\n",
          "createdAt": "2016-03-24T10:21:15Z",
          "updatedAt": "2016-03-24T10:21:15Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This has been updated in a recent versio\n",
          "createdAt": "2016-08-28T22:10:38Z",
          "updatedAt": "2016-08-28T22:10:38Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "MDU6SXNzdWU1MzE0MTMxMw==",
      "title": "Rewrite Section 3",
      "url": "https://github.com/tlswg/tls13-spec/issues/115",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "There have been a lot of changes from SSLv3, so Section 3 needs a rewrite.\n",
      "createdAt": "2014-12-30T19:44:55Z",
      "updatedAt": "2016-07-08T00:54:53Z",
      "closedAt": "2016-07-08T00:54:53Z",
      "comments": []
    },
    {
      "number": 116,
      "id": "MDU6SXNzdWU1MzE0MzAxMw==",
      "title": "Require signature_algorithms extension.",
      "url": "https://github.com/tlswg/tls13-spec/issues/116",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We should just require it.\n",
      "createdAt": "2014-12-30T20:07:58Z",
      "updatedAt": "2015-08-27T12:30:12Z",
      "closedAt": "2015-08-27T12:30:12Z",
      "comments": [
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with that, it might go also with potentially deleting the SignatureAlgorithm from the new ciphersuites.\nBy the way, shouldn't we consider also removing MD5 from HashAlgorithms even if it is used a lot \n(I don't know the numbers on that ...) ?\n",
          "createdAt": "2015-01-23T18:32:41Z",
          "updatedAt": "2015-01-23T18:35:00Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PR #201 mandates usage of this extension and also adds an explicit error expectation for MD5 (it's already listed as deprecated in the current draft).\n",
          "createdAt": "2015-07-17T21:50:29Z",
          "updatedAt": "2015-07-17T21:50:29Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: This should be closable now.\n",
          "createdAt": "2015-08-27T12:23:38Z",
          "updatedAt": "2015-08-27T12:23:38Z"
        }
      ]
    },
    {
      "number": 117,
      "id": "MDU6SXNzdWU1MzE0MzYyMQ==",
      "title": "Remove the glossary?",
      "url": "https://github.com/tlswg/tls13-spec/issues/117",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Is this helping?\n",
      "createdAt": "2014-12-30T20:17:05Z",
      "updatedAt": "2015-05-16T22:12:36Z",
      "closedAt": "2015-05-16T22:12:36Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Glossaries are usually a good thing, but pretty much everything in there is either in need of pruning out or is better explained in its relevant section. The HTTP/2 spec just includes a really short glossary of basic terms up top:\nhttps://http2.github.io/http2-spec/index.html#rfc.section.2.2\n\nThis seems like a better way to do this.\n",
          "createdAt": "2014-12-30T21:50:47Z",
          "updatedAt": "2014-12-30T21:50:47Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not sure if this is the best route, but creating a PR for it was quick to do.\n",
          "createdAt": "2014-12-30T22:10:20Z",
          "updatedAt": "2014-12-30T22:10:20Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm in favor of removing the glossary.  I don't think there's any need to explain what AES, DSA, etc. is in this document.  Maybe it was needed when it first came out but it's not needed now.  The only definition I thought might be needed is application layer/application layer protocol, but if you read s1 (right before where these terms will go) the concepts of layering on top of TLS is explained well enough in my mind.  I could see adding a definition for \"resumption\" though. \n",
          "createdAt": "2015-01-22T17:55:36Z",
          "updatedAt": "2015-01-22T17:55:36Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Define resumption in-line with the text when it is first used, maybe.  But I like Dave's change.\n",
          "createdAt": "2015-01-22T18:00:38Z",
          "updatedAt": "2015-01-22T18:00:38Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can live with that too.  Having it defined will hopefully stop these kind of things:\nhttps://datatracker.ietf.org/liaison/1363/\n",
          "createdAt": "2015-01-22T18:42:08Z",
          "updatedAt": "2015-01-22T18:42:08Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged.\n",
          "createdAt": "2015-05-16T22:12:36Z",
          "updatedAt": "2015-05-16T22:12:36Z"
        }
      ]
    },
    {
      "number": 120,
      "id": "MDU6SXNzdWU1MzE4OTExMQ==",
      "title": "7.4.2.4 does not mention which (if any) extensions are expected in the resent ClientHello.",
      "url": "https://github.com/tlswg/tls13-spec/issues/120",
      "state": "CLOSED",
      "author": "grubba",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I was just bit by my TLS 1.3 server complaining about duplicate extensions, as I had implemented the client side by just resending the original ClientHello followed by the amended ClientKeyShare.\n\nI see a couple of possible approaches (of which the second is what I'll implement for now):\n- The second ClientHello MUST resend the same extensions with the same values as the original ClientHello.\n  What about the early data extension?\n- The second ClientHello MUST NOT contain any extensions.\n  Note that this would affect the security of issue #104 if the session hash is restarted.\n- The latter of course leads to the question of why resending the ClientHello at all, as all required new information will be in the ClientKeyShare.\n\nAllowing adding of new extensions in the second ClientHello would only lead to increased complexity.\n",
      "createdAt": "2014-12-31T15:42:27Z",
      "updatedAt": "2015-09-12T20:00:08Z",
      "closedAt": "2015-09-12T20:00:08Z",
      "comments": [
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "Another thing that interacts here is RFC 5746. Is renegotiation_info one of the extensions that it supposed to be sent in the HelloRetryRequest?\n",
          "createdAt": "2014-12-31T16:00:54Z",
          "updatedAt": "2014-12-31T16:00:54Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The intention is that i should contain exactly the same extensions except an updated EarlyData\nif necessary. See:\n\nhttps://github.com/tlswg/tls13-spec/commit/9d9ba286e411d137984c2b3004eee745a744f1ed\n\nThis seems to have gotten lost, so I'll take this issue to update.\n",
          "createdAt": "2014-12-31T16:08:03Z",
          "updatedAt": "2014-12-31T16:08:03Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The specification should now be clear on this:\n\n```\n  When a client first connects to a server, it is required to send\n  the ClientHello as its first message.  The client will also send a\n  ClientHello when the server has responded to its ClientHello with\n  a ServerHello that selects cryptographic parameters that don't\n  match the client's ClientKeyShare.  In that case, the client MUST\n  send the same ClientHello (without modification) except including\n  a new ClientKeyShare.  [[OPEN ISSUE: New random values?  See:\n  https://github.com/tlswg/tls13-spec/issues/185]] If a server\n  receives a ClientHello at any other time, it MUST send a fatal\n  \"unexpected_message\" alert and close the connection.\n```\n",
          "createdAt": "2015-09-12T20:00:08Z",
          "updatedAt": "2015-09-12T20:00:08Z"
        }
      ]
    },
    {
      "number": 121,
      "id": "MDU6SXNzdWU1MzM1MDY2NA==",
      "title": "Diffie-Hellman updates.",
      "url": "https://github.com/tlswg/tls13-spec/issues/121",
      "state": "CLOSED",
      "author": "grubba",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This applies to TLS 1.3 draft 4.\n\nThe ffdhe groups in Section 7.3.2.5.2 aren't up-to-date with draft-ietf-tls-negotiated-ff-dhe-04:\n- ffdhe2432(256) has been replaced with ffdhe2048(256).\n- ffdhe6144(259) is no more.\n- ffdhe8192(260) has been renumbered to ffdhe8192(259).\n\nThe note in Section 8.1.3 has text that refers to the old TLS 1.2 and earlier key exchange method, where the server could select any DH-parameters it liked.\n\nNamedGroup and NamedGroupList should be added to somewhere in appendix A.\n",
      "createdAt": "2015-01-04T22:13:27Z",
      "updatedAt": "2015-03-01T14:06:32Z",
      "closedAt": "2015-01-07T14:13:30Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks. WRT to the appendix, I am going to let it get out of date for a draft or two and then do a mass update.\n",
          "createdAt": "2015-01-04T22:18:40Z",
          "updatedAt": "2015-01-04T22:18:40Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am now auto-generating the appendix, so it will hopefully get less out of sync\n",
          "createdAt": "2015-01-06T20:23:59Z",
          "updatedAt": "2015-01-06T20:23:59Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Grubba, PTAL at the Pull Request above.\n",
          "createdAt": "2015-01-07T00:15:00Z",
          "updatedAt": "2015-01-07T00:15:00Z"
        },
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "Looks good to me.\n",
          "createdAt": "2015-01-07T13:18:24Z",
          "updatedAt": "2015-01-07T13:18:24Z"
        },
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "The latest FFDHE-draft (06) has reintroduced FFDHE-6144, and replaced FFDHE-2048 with FFDHE-2432, so this issue should probably be reopened.\n",
          "createdAt": "2015-03-01T14:06:32Z",
          "updatedAt": "2015-03-01T14:06:32Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "MDU6SXNzdWU1MzkxNTIwNA==",
      "title": "Data transfer limitation per connection",
      "url": "https://github.com/tlswg/tls13-spec/issues/125",
      "state": "CLOSED",
      "author": "okoeroo",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "The counter has a size of (2^64-1).The records are max (2^14 + 2048). \nSo, my bold calculation would come to (2^64-1) / (2^14 + 2048) / 2^40 = 910.22 TiB of data.\n\nIn Big Data, video streaming and other mass data cases 910TB data can be a limitation.\n\nI would like to propose the counter to go to 2^128-1, which would result in a connection that can reach (2^128-1) / (2^14 + 2048) / 2^80 = 1.52 \\* 10^10 YiB.\n\nIf byte preservation is an issue, I'm willing to accept 2^96-1 as the counter max, resulting in (2^96-1) / (2^14 + 2048) / 2^80 = 3.55 YiB as maximum connection.\n",
      "createdAt": "2015-01-09T21:10:04Z",
      "updatedAt": "2015-12-15T21:02:33Z",
      "closedAt": "2015-12-15T21:02:33Z",
      "comments": [
        {
          "author": "uforia",
          "authorAssociation": "NONE",
          "body": "On a 40Gibit line this will take less time than one might expect: http://www.wolframalpha.com/input/?i=910.22TiB+at+40Gibit%2Fs (let's say 2.5-3 days with overhead).\n",
          "createdAt": "2015-01-09T21:23:23Z",
          "updatedAt": "2015-01-09T21:33:48Z"
        },
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "Why do you divide by (2^14 + 2048)? Shouldn't it be a multiplication with the minimum record size?\n",
          "createdAt": "2015-01-18T12:50:30Z",
          "updatedAt": "2015-01-18T12:50:30Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't see much support for this. Please take it to the list if you want to pursue it.\n",
          "createdAt": "2015-09-12T19:38:30Z",
          "updatedAt": "2015-09-12T19:38:30Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Consensus at interim:\nNo protocol action needed. Add calculations to security considerations.\n",
          "createdAt": "2015-09-22T18:03:37Z",
          "updatedAt": "2015-09-22T18:03:37Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also, consensus is that the math above is wrong.\n",
          "createdAt": "2015-09-22T18:10:03Z",
          "updatedAt": "2015-09-22T18:10:03Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@wbl would you be willing to contribute a PR with a paragraph or two of guidance on the limits for AES-GCM and ChaCha20\n",
          "createdAt": "2015-12-01T21:34:14Z",
          "updatedAt": "2015-12-01T21:34:14Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes. What happened to the Key Update message? I can't find it in the text, and that would be a logical place to mention the limitations as well as in the security considerations section.\n",
          "createdAt": "2015-12-01T23:45:25Z",
          "updatedAt": "2015-12-01T23:45:25Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/tlswg/tls13-spec/pull/354\n\nIf you want to just send a PR against that branch that would be fine. Or really, whatever form you want and I can manually merge.\n",
          "createdAt": "2015-12-01T23:54:43Z",
          "updatedAt": "2015-12-01T23:54:43Z"
        }
      ]
    },
    {
      "number": 136,
      "id": "MDU6SXNzdWU1NTcxMTIyMQ==",
      "title": "Clarify interaction of session resumption and version negotiation",
      "url": "https://github.com/tlswg/tls13-spec/issues/136",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(Apologies if this is the wrong medium. I wasn't sure if issues here or emails to the list were preferred since these aren't huge changes.)\n\nHow version negotiation interacts with session resumption isn't said explicitly. Two little things that probably should be fixed:\n\nOn the server, clarify that you MUST NOT resume a session at a version other than the original one. Instead, ignore the offered session and do a full handshake. This is easy to justify: every client (I tested NSS, OpenSSL, SecureTransport, and SChannel) will fail the handshake if the server tries to mismatch. It's also weird. (Say a future TLS version changed the master secret size...) Still, OpenSSL happily did so until [recently](https://git.openssl.org/gitweb/?p=openssl.git;a=commit;h=9e189b9dc10786c755919e6792e923c584c918a1).\n\nOn the client, RFC 5246, E.1 has this little paragraph that seems to have carried over into 1.3.\n\n> Whenever a client already knows the highest protocol version known to\n> a server (for example, when resuming a session), it SHOULD initiate\n> the connection in that native protocol.\n\nThis is terrible advice. The parenthetical bit is wrong, but I would push for dropping it completely. The server may have changed, there may be multiple differently-configured servers behind that host, the session may have been established under fallback conditions, etc.\n\nOpenSSL takes it to an [extreme](https://crbug.com/403378) and [breaks](https://crbug.com/417134) [horribly](https://twitter.com/pzb/status/531677249909821440). (I ended up completely rewriting this bit for BoringSSL.) NSS [cites that text](https://chromium.googlesource.com/chromium/src/+/master/net/third_party/nss/ssl/ssl3con.c#5096) in something less catastrophic but still has the second \"sticky fallback\" failure mode.\n",
      "createdAt": "2015-01-28T03:56:05Z",
      "updatedAt": "2015-09-12T21:27:59Z",
      "closedAt": "2015-09-12T19:51:45Z",
      "comments": [
        {
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I support removing that text. See also earlier discussion:\nhttp://www.ietf.org/mail-archive/web/tls/current/msg13732.html\nhttp://www.ietf.org/mail-archive/web/tls/current/msg13869.html\n\nNote that when a client does not consistently use the same ClientHello.client_version, it should probably avoid attempting to resume a session X if it used a different ClientHello.client_version for the connection that created session X than it is attempting to use in the current ClientHello. The consequence of this is that these clients should store ClientHello.client_version in the session cache entry. However, it is better for them to always consistently set ClientHello.client_version to TLS 1.2.\n",
          "createdAt": "2015-01-28T21:57:18Z",
          "updatedAt": "2015-01-28T21:57:18Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Having generic text to take care when mixing session caches between contexts with different parameters is probably worthwhile yeah. Sharing a session cache between a pile of sockets that, say, turn off AEADs and a pile that don't is also iffy. The client_version seems rather specific requirement to put in, and requiring TLS impls to store the entire ClientHello in the session cache seems a bit much.\n\nI actually don't see what doing just the client_version buys for the extra state, at least in contexts where a browser does it. Are you thinking to do that to account for the NSS client_version clamping behavior, the old OpenSSL server one when combined with fallbacks, or something else?\n\nIf the NSS side, that would mean NSS never resumes sessions on any but the highest version. It should just remove that logic; neither SChannel nor Secure Transport did it when I tested. Chrome + BoringSSL doesn't either and we haven't had problems. (It's hit stable on Mac and beta on Windows.)\n\nIf the old OpenSSL server behavior (and without FALLBACK_SCSV) and you should have negotiated a stronger TLS-1.2-only cipher, an attacker could just trigger the fallback again anyway, so we're not gaining much. That seems best fixed on the server (and has been now). In fact, if the server wants to be extra fancy, it could simulate picking a new cipher and only accept the session if that matched. But probably expiring old sessions when changing server config works just as well there. (That may also be worth some text: servers should take care when considering old sessions across a server config change.)\n",
          "createdAt": "2015-01-28T23:32:16Z",
          "updatedAt": "2015-01-28T23:32:16Z"
        },
        {
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I mean this (acting as the client):\n1. Decide what number (e.g. TLS 1.2) you are going to put in ClientHello.client_version and what cipher suites you are going to send in the ClientHello.\n2. Search the session cache for a matching entry, where the session was established on a connection where ClientHello.client_version matches the ClientHello.client_version you picked in the previous step, and where the cipher suite for the cached session matches a cipher suite in the set of cipher suites you've enabled for the current ClientHello. Note that we're matching ClientHello.client_version to ClientHello.client_version, NOT to the version that was negotiated (ServerHello.server_version).\n3. If the server attempts to resume the session with a different server_version or a different cipher suite, then something's gone very wrong; bail!\n\nThe idea here is to avoid cases where the server may do strange things like use a different ServerHello.server_version or a different cipher suite than what was originally negotiated. As you mentioned, the logic I described isn't enough to prevent all silliness, but I think it would avoid most cases.\n",
          "createdAt": "2015-01-29T04:22:52Z",
          "updatedAt": "2015-01-29T04:22:52Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We removed resumption entirely as of draft-07 so I think this is OBE.\n",
          "createdAt": "2015-09-12T19:51:45Z",
          "updatedAt": "2015-09-12T19:51:45Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's renegotiation that was removed.  This might still be relevant.\n",
          "createdAt": "2015-09-12T21:19:32Z",
          "updatedAt": "2015-09-12T21:19:32Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, we removed explicit resumption as well, and at least technically you could do PSK-resumption with different cipher suites and/or versions.\n",
          "createdAt": "2015-09-12T21:27:59Z",
          "updatedAt": "2015-09-12T21:27:59Z"
        }
      ]
    },
    {
      "number": 137,
      "id": "MDU6SXNzdWU1NzUxNDAxNg==",
      "title": "A mechanism is needed to indicate that a session will not be resumed",
      "url": "https://github.com/tlswg/tls13-spec/issues/137",
      "state": "CLOSED",
      "author": "briansmith",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "1. If the client has session resumption disabled, then it should be able to tell the server this, so that the server doesn't cache the master secret.\n2. If the server has decided not to cache the session, then the server should tell the client this, so that the client doesn't cache the master secret.\n3. Optionally, either side should be able to announce this at any time during the connection. However, it may be acceptable to just have these indications in ClientHello and ServerHello extensions.\n\nBy throwing away the master secret ASAP, the confidentiality of the connection is protected.\n\nAlthough I worded this issue in terms of traditional session resumption, the same considerations apply to anything that requires the client or server to hold onto the master secret after the handshake is complete.\n",
      "createdAt": "2015-02-12T20:21:45Z",
      "updatedAt": "2015-09-12T20:03:39Z",
      "closedAt": "2015-09-12T20:03:39Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note that the current key hierarchy divorces the MS used to generate the traffic keys\nfrom the RMS used to resume the session, so storing the RMS doesn't impact the\nsecurity of the connection that initiated the connection.\n\nIt might still be worthwhile to have subsequent connections be able to announce this,\nbut I'm not sure how practical that is in the case of tickets since as long as the\nticket key exists, deleting the ticket store doesn't help much.\n",
          "createdAt": "2015-02-12T21:13:31Z",
          "updatedAt": "2015-02-12T21:13:31Z"
        },
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "Regarding point 2: The server is already able to do this via sending an empty session_id in the ServerHello. cf RFC 5246 7.4.1.3:\n\n```\nThe server may return an empty session_id to indicate that the session will not be cached\nand therefore cannot be resumed.\n```\n",
          "createdAt": "2015-02-13T11:39:10Z",
          "updatedAt": "2015-02-13T11:39:10Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "At this point, the server can opt not to allow resumption by simply not sending a new session ticket.\nThe client cannot tell the server not to send it, but this is merely saving cost to the server because the Resumption Master Secret (which is what is attached to the session) does not allow you to decrypt the connection. My sense is that list consensus did not support a change here.\n\nIf you want to pursue this, please take it to the list.\n",
          "createdAt": "2015-09-12T20:03:39Z",
          "updatedAt": "2015-09-12T20:03:39Z"
        }
      ]
    },
    {
      "number": 138,
      "id": "MDU6SXNzdWU1Nzk4NDQxNA==",
      "title": "Fix which master secret is used for exporters",
      "url": "https://github.com/tlswg/tls13-spec/issues/138",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current text claims that the HMS should be used for Exporters. That\ndoesn't make sense. The MS should be used for Exporters.\n",
      "createdAt": "2015-02-17T21:24:06Z",
      "updatedAt": "2015-03-09T19:59:04Z",
      "closedAt": "2015-03-09T19:59:04Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Given the potential for us to update the MS with the update mechanism, I'm going to suggest that a new exporter MS be generated from the HMS.\n",
          "createdAt": "2015-02-17T23:00:41Z",
          "updatedAt": "2015-02-17T23:00:41Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm going to fix this thinko now for draft submission. and leave your point pending post-interim revisions of the key schedule\n",
          "createdAt": "2015-03-09T19:58:03Z",
          "updatedAt": "2015-03-09T19:58:03Z"
        }
      ]
    },
    {
      "number": 139,
      "id": "MDU6SXNzdWU1ODY4NTIwMw==",
      "title": "No RFC number for TLSEXT in references",
      "url": "https://github.com/tlswg/tls13-spec/issues/139",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-02-24T02:35:38Z",
      "updatedAt": "2015-05-16T21:45:40Z",
      "closedAt": "2015-05-16T21:45:40Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/tlswg/tls13-spec/commit/af9a2b12570095166f29d211ca179dce4bb7c31e\n\nFix merged. This should be closable now.\n",
          "createdAt": "2015-03-11T02:16:08Z",
          "updatedAt": "2015-03-11T02:16:08Z"
        }
      ]
    },
    {
      "number": 144,
      "id": "MDU6SXNzdWU2MDU0MDE4Nw==",
      "title": "Remove TLSCiphertext.opaque_type & TLSCiphertext.record_version",
      "url": "https://github.com/tlswg/tls13-spec/issues/144",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "TLSCiphertext.record_version provides no useful information, encourages implementations to check it unnecessarily, and wastes two bytes per record. It should be removed entirely.\n\nThis is effectively dependent on PR #51 or similar changes.\n\nFiling this as a specific issue rather than just bringing it up in backwards compatibility discussion.\n\nEdited to add:\nNote that this value is called TLSCiphertext.version in TLS 1.2 and TLSCiphertext.record_version as of TLS 1.3 draft 06. The TLSPlaintext equivalent of this version field cannot be removed as it is required for backwards compatibility, however it's only used with ClientHello at this point.\n",
      "createdAt": "2015-03-10T17:48:28Z",
      "updatedAt": "2017-04-16T17:21:22Z",
      "closedAt": "2017-04-16T17:21:22Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Defer pending measurements. Note that this fate shares with removing the cleartext content type\n",
          "createdAt": "2015-09-22T21:02:53Z",
          "updatedAt": "2015-09-22T21:02:53Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "sgtm\n\nAmending issue title.\n",
          "createdAt": "2015-09-22T21:05:26Z",
          "updatedAt": "2015-09-22T21:05:26Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mozilla is working on measurements.\n",
          "createdAt": "2016-07-08T00:34:07Z",
          "updatedAt": "2016-07-08T00:34:07Z"
        }
      ]
    },
    {
      "number": 154,
      "id": "MDU6SXNzdWU2MTQzNzIwNg==",
      "title": "add ecdsa_sign to Client Request section",
      "url": "https://github.com/tlswg/tls13-spec/issues/154",
      "state": "CLOSED",
      "author": "cem-",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "ecdsa_sign should be an included in the ClientCertificateType enum definition as well as the certificate_types list in the client request section. It is already present in the client certificate section.\n",
      "createdAt": "2015-03-14T05:42:49Z",
      "updatedAt": "2015-03-23T16:01:22Z",
      "closedAt": "2015-03-23T16:01:22Z",
      "comments": [
        {
          "author": "cem-",
          "authorAssociation": "CONTRIBUTOR",
          "body": "per ekr, this section is going away:\nhttps://www.ietf.org/mail-archive/web/tls/current/msg15504.html \n",
          "createdAt": "2015-03-23T16:01:22Z",
          "updatedAt": "2015-03-23T16:01:22Z"
        }
      ]
    },
    {
      "number": 156,
      "id": "MDU6SXNzdWU2MzA4NTc0MQ==",
      "title": "Specifying MUST NOT behavior",
      "url": "https://github.com/tlswg/tls13-spec/issues/156",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There are a couple of places in the spec where it says client/server MUST not do x but doesn't specify what happens if they do.  Should we specify that behavior?\n\nSome examples:\ns7.3.2:  Clients MUST NOT offer multiple ClientKeyShareOffers for the same parameters.\n\ns7.3.2.5: There MUST NOT be more than one extension of the same type.\n\ns7.3.2.5.1:  signature  ... It MUST NOT appear in this extension.\n  and Servers MUST NOT send this extension.\n\ns7.3.2.5.3:  If the EarlyData extension is used, then clients MUST NOT send any messages other than the ClientHello in their initial flight.\nand Servers MUST NOT send the EarlyData extension.\n\nsA.4: TLS_NULL_WITH_NULL_NULL is specified and is the initial state of a TLS connection during the first handshake on that channel, but MUST NOT be negotiated, as it provides no more protection than an unsecured connection.\n",
      "createdAt": "2015-03-19T20:32:59Z",
      "updatedAt": "2015-09-22T21:02:22Z",
      "closedAt": "2015-09-22T21:02:22Z",
      "comments": [
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "Sounds like a good idea. I assume that the proper response is for the peer to send a fatal alert, but specifying exactly what alert is probably a good idea.\n",
          "createdAt": "2015-03-20T15:33:57Z",
          "updatedAt": "2015-03-20T15:33:57Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is addressed in PR #201.\n",
          "createdAt": "2015-07-17T21:48:30Z",
          "updatedAt": "2015-07-17T21:48:30Z"
        }
      ]
    },
    {
      "number": 161,
      "id": "MDU6SXNzdWU2NjQ3MTE5OQ==",
      "title": "Restore empty compression field in ServerHello?",
      "url": "https://github.com/tlswg/tls13-spec/issues/161",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Brian Smith writes:\n\n> (note that ServerHello is already changed by dropping compression_method)\n\nThat seems unnecessary to me. compression_method could/should just be\nfixed to be \"null\", avoiding unnecessary compatibility risk.\n",
      "createdAt": "2015-04-05T19:03:36Z",
      "updatedAt": "2015-09-21T23:32:30Z",
      "closedAt": "2015-09-21T23:32:30Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There's only a compatibility risk if there's the possibility of a TLS 1.3 ServerHello being sent do an older client that cannot understand it. If we switched to a list based negotiation, this would be impossible.\n\n(you're quoting me, not Brian, btw)\n",
          "createdAt": "2015-04-05T19:13:40Z",
          "updatedAt": "2015-04-05T19:13:40Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing for now.\n",
          "createdAt": "2015-09-21T23:32:30Z",
          "updatedAt": "2015-09-21T23:32:30Z"
        }
      ]
    },
    {
      "number": 162,
      "id": "MDU6SXNzdWU2ODAzMDc0Ng==",
      "title": "Add ability to negotiate curves for ECDHE independently of curves for ECDSA signatures",
      "url": "https://github.com/tlswg/tls13-spec/issues/162",
      "state": "CLOSED",
      "author": "briansmith",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some implementations (e.g. OpenSSL) have constant-time implementations of ECDH for curve P-256 but do not have constant-time implementations of either ECDH for curve P-384. Since signature verification is an operation that only uses a public key, it does not need to be constant-time. However, since ECDH is an operation that requires the use of a private key, it isn't generally safe to support P-384 for ECDH if the implementation isn't free of timing side channels.\n\nMany publicly-trusted certificate authorities use the P-384 curve for signing certificates, so it is important to support P-384 signature verification even if P-384 isn't supported for ECDH. Further, some servers may use the curves advertised in the ClientHello to choose whether to use an ECDSA-based certificate chain (which would have smaller certificates and OCSP responses, but would require support for P-384) or an RSA-based certificate chain (which would have larger certificates and OCSP responses, but would not require support for P-384).\n\nIn order for such clients and such servers to interoperate optimally, it would be useful for the client to be able to say \"I support only P-256 for ECDHE, and I support only P-256 and P-384 for ECDSA signature verification.\" However, currently there is no way to do this.\n\nAn alternative to specifying such a mechanism is to require that every client that supports P-384 signature verification must also implement P-384 ECDH, and also require that they implement the ECDH operations on the P-384 curve in a way that avoids timing side channels. However, the implementation of P-384 without timing side channels is not well understood and not known to be generally reasonable to require of implementations.\n",
      "createdAt": "2015-04-13T07:37:41Z",
      "updatedAt": "2015-09-12T19:43:54Z",
      "closedAt": "2015-09-12T19:43:54Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please raise this issue on the list.\n",
          "createdAt": "2015-04-13T16:58:44Z",
          "updatedAt": "2015-04-13T16:58:44Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe that the present consensus (based on the way we are treating X25519) is to have separate group names for these two applications if needed. Given that essentially any change we make here is likely to be breaking, if you want to pursue this I think you should submit a PR for new code points for signature only.\n",
          "createdAt": "2015-09-12T19:43:54Z",
          "updatedAt": "2015-09-12T19:43:54Z"
        }
      ]
    },
    {
      "number": 164,
      "id": "MDU6SXNzdWU2ODkwMzUyMg==",
      "title": "Clarify \"in the same flight\"",
      "url": "https://github.com/tlswg/tls13-spec/issues/164",
      "state": "CLOSED",
      "author": "thijzert",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I'm working on a hobby implementation of TLS1.3 as a way of vetting the spec draft, and I ran into an issue with sending the ClientKeyShare.\n\nThe handshake spec (7.2) says it should be sent \"in the same flight\" as the ClientHello message, without specifying the correct encapsulation method. Maybe it's just me, but this phrase could be interpreted as either the following:\n\n```\nTCP packet\n \\- TLSPlaintext  (content_type 22)\n     |- Handshake (msg_type 1)\n     |   \\- ClientHello\n     \\- Handshake (msg_type 5)\n         \\- ClientKeyShare\n```\n\nor:\n\n```\nTCP packet\n |  TLSPlaintext  (content_type 22)\n |   \\- Handshake (msg_type 1)\n |       \\- ClientHello\n \\- TLSPlaintext  (content_type 22)\n     \\- Handshake (msg_type 5)\n         \\- ClientKeyShare\n```\n\nIf I were to venture a guess, I'd say the two are equivalent, but it's also conceivable that some implementations require any TLSPlaintext to contain exactly one child struct. (Source: last night's revision of my implementation did just that. [Unintentionally.])\n\nI think that if we have a preference for either one, the spec should reflect that. If not, it may be wise to explicitly declare either option to be correct.\n",
      "createdAt": "2015-04-16T11:25:08Z",
      "updatedAt": "2015-04-17T14:05:07Z",
      "closedAt": "2015-04-17T14:05:07Z",
      "comments": [
        {
          "author": "thijzert",
          "authorAssociation": "NONE",
          "body": "It has been pointed out to me by Hubert Kario that according to RFC 5246, section 6.2.1 these options are in fact equivalent:\n\n> Client\n>    message boundaries are not preserved in the record layer (i.e.,\n>    multiple client messages of the same ContentType MAY be coalesced\n>    into a single TLSPlaintext record, or a single message MAY be\n>    fragmented across several records).\n",
          "createdAt": "2015-04-17T14:05:07Z",
          "updatedAt": "2015-04-17T14:05:07Z"
        }
      ]
    },
    {
      "number": 181,
      "id": "MDU6SXNzdWU4NDI3NjY5NA==",
      "title": "Sign Ephemeral Parameters *and* the context",
      "url": "https://github.com/tlswg/tls13-spec/issues/181",
      "state": "CLOSED",
      "author": "tomrittervg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See: LogJam, [Mavrogiannopoulos, et al](http://dl.acm.org/citation.cfm?id=2382206), and [Schneier/Wagner](https://www.schneier.com/paper-ssl-revised.pdf). (And perhaps this [message/thread](http://www.ietf.org/mail-archive/web/tls/current/msg16361.html))\n\nThe Ephemeral Parameters should include some context in the signature. Some options:\n- Algorithm (this wouldn't have prevented LogJam or Mavrogiannopoulos)\n- Ciphersuite (this wouldn't prevent Mavrogiannopoulos)\n- Transcript up to that point\n- Some \"let's try to be clever\" choice of Algorithm, Ciphersuite, and other context\n",
      "createdAt": "2015-06-03T00:21:50Z",
      "updatedAt": "2015-09-12T19:49:10Z",
      "closedAt": "2015-09-12T19:49:10Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We presently sign the entire transcript.\n",
          "createdAt": "2015-09-12T19:49:10Z",
          "updatedAt": "2015-09-12T19:49:10Z"
        }
      ]
    },
    {
      "number": 184,
      "id": "MDU6SXNzdWU4OTEwNzI3MA==",
      "title": "The ClientHello/ServerHello should define the rest of the handshake",
      "url": "https://github.com/tlswg/tls13-spec/issues/184",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Rather than having optional messages later.\n",
      "createdAt": "2015-06-17T19:44:31Z",
      "updatedAt": "2016-03-21T17:09:44Z",
      "closedAt": "2016-03-21T17:09:44Z",
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "that also includes the 0-RTT exchange\n",
          "createdAt": "2015-07-20T18:44:46Z",
          "updatedAt": "2015-07-20T18:44:46Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The certificate request and server configuration are still conditional. Wait for @agl's proposed message merging patch\n",
          "createdAt": "2015-09-22T21:01:43Z",
          "updatedAt": "2015-09-22T21:01:43Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is as true as it can be unless we merge as AGL has suggested.\n",
          "createdAt": "2016-03-21T17:09:44Z",
          "updatedAt": "2016-03-21T17:09:44Z"
        }
      ]
    },
    {
      "number": 185,
      "id": "MDU6SXNzdWU4OTEwODcxOQ==",
      "title": "Generate a new ClientRandom for HelloRetryRequest",
      "url": "https://github.com/tlswg/tls13-spec/issues/185",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending",
        "discuss-seattle"
      ],
      "body": "Suggested by Karthik\n",
      "createdAt": "2015-06-17T19:51:51Z",
      "updatedAt": "2015-12-16T20:49:19Z",
      "closedAt": "2015-12-16T20:49:19Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I created a short PR for this: PR #189\n",
          "createdAt": "2015-06-20T03:46:15Z",
          "updatedAt": "2015-06-20T03:46:15Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I amended the PR to make sure to be clear that the new client random is used and the old is discarded, and that it still ends up in the session hash which still starts from the beginning of the connection with the initial ClientHello. (see also issue #104, which this might be sufficient to resolve)\n",
          "createdAt": "2015-06-20T04:11:50Z",
          "updatedAt": "2015-06-20T04:11:50Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Please close this too. (this is the issue for PR #189)\n",
          "createdAt": "2015-12-16T20:18:21Z",
          "updatedAt": "2015-12-16T20:18:39Z"
        }
      ]
    },
    {
      "number": 186,
      "id": "MDU6SXNzdWU4OTEwODg4MQ==",
      "title": "Prune EC curves and remove md5",
      "url": "https://github.com/tlswg/tls13-spec/issues/186",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-06-17T19:52:36Z",
      "updatedAt": "2015-07-15T21:10:05Z",
      "closedAt": "2015-07-15T21:10:05Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Here's a PR for this: #188 \n\nQuestion: Are we dropping all curves <224 bits or <255 bits?\n(was consensus ever called on this specific number?)\n",
          "createdAt": "2015-06-17T21:23:58Z",
          "updatedAt": "2015-06-17T21:23:58Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There was not a specific WG consensus call on this point.  I hope we don't need one and that we should keep the curves in that are used and trim the ones that aren't.\n",
          "createdAt": "2015-06-17T22:11:09Z",
          "updatedAt": "2015-06-17T22:11:09Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good. In that case, I'll slash everything other than secp256r1 (prime256v1 / NIST P-256), secp384r1 (NIST P-384), secp521r1 (NIST P-521), and sect571r1 (NIST B-571). (plus, of course, new CFRG curves yet to be added) PR updated.\n\nhttps://tools.ietf.org/html/rfc4492#appendix-A\nhttps://securitypitfalls.wordpress.com/2015/05/23/april-2015-scan-results/\n",
          "createdAt": "2015-06-17T23:28:55Z",
          "updatedAt": "2015-06-17T23:28:55Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Based on the fact that apparently precisely zero servers actually use SHA-224 for signatures, can we drop that too while we're at it? (not an exaggeration; the scan cited in the last comment shows none)\n",
          "createdAt": "2015-06-18T00:09:10Z",
          "updatedAt": "2015-06-18T00:09:10Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would drop it.\n\nspt\n\nOn Jun 17, 2015, at 20:09, Dave Garrett notifications@github.com wrote:\n\n> Based on the fact that apparently precisely zero servers actually use SHA-224 for signatures, can we drop that too while we're at it? (not an exaggeration; the scan cited in the last comment shows none)\n> \n> \ufffd\n> Reply to this email directly or view it on GitHub.\n",
          "createdAt": "2015-06-18T00:23:17Z",
          "updatedAt": "2015-06-18T00:23:17Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK. PR updated.\n",
          "createdAt": "2015-06-18T00:48:12Z",
          "updatedAt": "2015-06-18T00:48:12Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: This can be closed now that PR #188 has been merged.\n",
          "createdAt": "2015-07-15T20:59:24Z",
          "updatedAt": "2015-07-15T20:59:24Z"
        }
      ]
    },
    {
      "number": 187,
      "id": "MDU6SXNzdWU4OTExODk3OQ==",
      "title": "Add API considerations for 0-RTT",
      "url": "https://github.com/tlswg/tls13-spec/issues/187",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "help wanted",
        "Editor Ready"
      ],
      "body": "",
      "createdAt": "2015-06-17T20:33:23Z",
      "updatedAt": "2016-08-17T21:47:41Z",
      "closedAt": "2016-08-17T21:47:41Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@dkg should help here.\n",
          "createdAt": "2015-09-22T20:59:56Z",
          "updatedAt": "2015-09-22T20:59:56Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "WBL contributed some stuff. Not sure more is needed.\n",
          "createdAt": "2016-08-17T21:47:41Z",
          "updatedAt": "2016-08-17T21:47:41Z"
        }
      ]
    },
    {
      "number": 190,
      "id": "MDU6SXNzdWU5MTkzNTE0Nw==",
      "title": "Omit ClientKeyShare if it's empty",
      "url": "https://github.com/tlswg/tls13-spec/issues/190",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready",
        "PR Pending"
      ],
      "body": "Now that ClientKeyShare is looking like an extension, should we omit it if it's empty.\n",
      "createdAt": "2015-06-29T23:33:23Z",
      "updatedAt": "2015-10-17T18:18:41Z",
      "closedAt": "2015-10-17T18:18:41Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Consensus: omit if empty\n",
          "createdAt": "2015-09-22T20:59:15Z",
          "updatedAt": "2015-09-22T20:59:15Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Of course, if ServerKeyShare is the same extension, then it can't be empty from the client.  See #214.\n",
          "createdAt": "2015-09-23T16:45:35Z",
          "updatedAt": "2015-09-23T16:47:00Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It could probably be omitted in a system with one generalized key sharing extension, however I think it's simpler to just spend the 6 bytes for an empty offer than to have an extension with special permission to be added to a retried ClientHello. I don't like special cases if I can avoid them. I can't say for sure until I'm done with the patch and ready to submit a PR, though.\n",
          "createdAt": "2015-09-25T04:13:35Z",
          "updatedAt": "2015-09-25T04:13:35Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, thinking on this more, you can safely omit it.  It prevents the server from generating shares, but that isn't actually bad.  It prevents the client from being tricked by a falsified `HelloRetryRequest`.  In any case, you can't use the server's share until after the `HelloRetryRequest` and subsequent `ClientHello` anyway.\n",
          "createdAt": "2015-09-25T16:47:20Z",
          "updatedAt": "2015-09-25T16:47:20Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Omitted.\n",
          "createdAt": "2015-10-17T18:18:41Z",
          "updatedAt": "2015-10-17T18:18:41Z"
        }
      ]
    },
    {
      "number": 191,
      "id": "MDU6SXNzdWU5MjIxMDg5Mg==",
      "title": "master secret is master of very little",
      "url": "https://github.com/tlswg/tls13-spec/issues/191",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The key derivation process uses the \"master secret\" as the basis for application traffic keys and both the resumption and exporter secrets.  There are lots of other secrets though.\n\nI don't have a better name right now, so close this if none better can be found.\n\nAlso s/resumption master secret/resumption secret/ throughout, it's a little inconsistent.\n",
      "createdAt": "2015-06-30T22:00:02Z",
      "updatedAt": "2015-09-22T20:59:31Z",
      "closedAt": "2015-09-22T20:59:31Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Now master of more\n",
          "createdAt": "2015-09-22T20:59:31Z",
          "updatedAt": "2015-09-22T20:59:31Z"
        }
      ]
    },
    {
      "number": 193,
      "id": "MDU6SXNzdWU5MzEwMjU2Nw==",
      "title": "Having record_version in the AD is redundant.",
      "url": "https://github.com/tlswg/tls13-spec/issues/193",
      "state": "CLOSED",
      "author": "grubba",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "(Draft 6)\nSections 6.2.1 and 6.2.2 hard code record_version to { 3, 1 }. Having this constant value in the authenticated data (section 6.2.2) doesn't have any function. I suggest either replacing it with the negotiated protocol version (also a bit redundant, but better as it could change with TLS 1.4), or removing it.\n",
      "createdAt": "2015-07-05T11:05:11Z",
      "updatedAt": "2015-07-15T17:34:31Z",
      "closedAt": "2015-07-15T17:34:31Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is a duplicate of issue #144.\n",
          "createdAt": "2015-07-05T16:19:03Z",
          "updatedAt": "2015-07-05T16:19:03Z"
        }
      ]
    },
    {
      "number": 204,
      "id": "MDU6SXNzdWU5NTg0NTM3OA==",
      "title": "When does the session ticket lifetime start?",
      "url": "https://github.com/tlswg/tls13-spec/issues/204",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://tlswg.github.io/tls13-spec/#new-session-ticket-message\n\n> ticket_lifetime_hint\n>    Indicates the lifetime in seconds as a 32-bit unsigned integer in\n>    network byte order. A value of zero is reserved to indicate that\n>    the lifetime of the ticket is unspecified.\n\nLifetime counting from when? There could be a big difference between the lifetime since having the ticket issued (or connection start) and the lifetime of the ticket being valid after the connection is closed. So, should this value be counting from ticket issue or connection close? Either way, it should be specified.\n",
      "createdAt": "2015-07-18T17:59:52Z",
      "updatedAt": "2015-09-12T19:53:07Z",
      "closedAt": "2015-09-12T19:53:07Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It should be from ticket issue, which is consistent with the existing draft (where it's from the time of the handshake which is at ticket issue).\n",
          "createdAt": "2015-09-12T19:53:07Z",
          "updatedAt": "2015-09-12T19:53:07Z"
        }
      ]
    },
    {
      "number": 207,
      "id": "MDU6SXNzdWU5NjMxNzQxNQ==",
      "title": "Presence of ServerConfiguration isn't signaled in ServerHello",
      "url": "https://github.com/tlswg/tls13-spec/issues/207",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed in the meeting @ IETF 93.\n",
      "createdAt": "2015-07-21T13:41:47Z",
      "updatedAt": "2015-09-12T20:01:24Z",
      "closedAt": "2015-09-12T20:01:24Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Duplicate of #184\n",
          "createdAt": "2015-09-12T20:01:24Z",
          "updatedAt": "2015-09-12T20:01:24Z"
        }
      ]
    },
    {
      "number": 210,
      "id": "MDU6SXNzdWU5NzEwNjAxOA==",
      "title": "Not all AEAD ciphers are randomized with random nonces",
      "url": "https://github.com/tlswg/tls13-spec/issues/210",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "Per Dan Boneh, some AEAD ciphers are not completely randomized with a random\nnonce. Add this as a requirement for cipher selection\n",
      "createdAt": "2015-07-24T18:08:48Z",
      "updatedAt": "2017-04-16T17:21:22Z",
      "closedAt": "2017-04-16T17:21:22Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just make a note in the document to this effect.\n",
          "createdAt": "2015-09-21T22:38:53Z",
          "updatedAt": "2015-09-21T22:38:53Z"
        }
      ]
    },
    {
      "number": 212,
      "id": "MDU6SXNzdWU5ODg1MzE3OA==",
      "title": "Consider combining Certificate+CertificateVerify",
      "url": "https://github.com/tlswg/tls13-spec/issues/212",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "They always appear together anyway.  Having them independently optional risks errors.  And combining them will save a few bytes from the handshake.\n\nThe separation might have been nice in a past where static (EC)DH cipher suites were in use, but I don't see any way of TLS 1.3 supporting those modes in the future once we accept #211.\n",
      "createdAt": "2015-08-03T22:52:51Z",
      "updatedAt": "2015-09-12T19:54:20Z",
      "closedAt": "2015-09-12T19:54:20Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ilari notes:\n\n```\nAlso, regarding issue #212, unless the Certificate is handled specially,\nit would mean that the signature does not cover certificate. And not\nsigning the certificate (esp. the public key within) causes problems\nin some exotic cases (I don't know if any of those cases pop up in TLS\n1.3).\n```\n",
          "createdAt": "2015-08-04T16:17:04Z",
          "updatedAt": "2015-08-04T16:17:04Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ilari's point is quite a good one, and unless you can elaborate on a known risk that's particularly important, I don't see it outweighing the need to touch this area. I think Certificate, CertificateVerify, & Finished all need to be separate, because the latter two each depend on a hash of the session prior to it and I think the safest route is to just keep this design as-is.\n\nHandshake messages are coalesced into a single record, so merging two only saves 4 bytes, which I don't think is worth worrying about once per handshake.\n",
          "createdAt": "2015-08-31T05:50:15Z",
          "updatedAt": "2015-08-31T05:50:15Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the conclusion is that this was a bad idea.\n",
          "createdAt": "2015-09-12T19:54:20Z",
          "updatedAt": "2015-09-12T19:54:20Z"
        }
      ]
    },
    {
      "number": 213,
      "id": "MDU6SXNzdWU5ODg1MzM0MQ==",
      "title": "Make EncryptedExtensions mandatory",
      "url": "https://github.com/tlswg/tls13-spec/issues/213",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In #211, @davegarrett suggests that the added EncryptedExtensions message from the client should be optional.  I'd rather make it mandatory and simply carry the extra bits if it happens to be empty.  The fewer optional parts the better.\n",
      "createdAt": "2015-08-03T22:54:17Z",
      "updatedAt": "2015-08-20T17:10:53Z",
      "closedAt": "2015-08-20T17:10:53Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The server-side one is optional, but the client-side one in that PR isn't. Consistency, either way, is probably a good idea.\n\nThat said, I agree with your assessment. All usually needed handshake messages should probably be mandatory, with empty fields if not needed. This seems like a good idea to reduce risk potential issues from unneeded complexity.\n\nI see you also filed issue #212, which is another straightforward way to reduce complexity here. Also, turning ServerKeyShare into an extension to stick directly into ServerHello, as has been done already on the client-side, could simplify things a bit as well.\n\n(Edit: I just filed issue #214 for the last bit)\n",
          "createdAt": "2015-08-04T05:25:09Z",
          "updatedAt": "2015-08-04T05:30:56Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, this is just pilot error. They should all be mandatory.\n\nOn Mon, Aug 3, 2015 at 10:25 PM, Dave Garrett notifications@github.com\nwrote:\n\n> The server-side one is optional, but the client-side one in that PR isn't.\n> Consistency, either way, is probably a good idea.\n> \n> That said, I agree with your assessment. All usually needed handshake\n> messages should probably be mandatory, with empty fields if not needed.\n> This seems like a good idea to reduce risk potential issues from unneeded\n> complexity.\n> \n> I see you also filed issue #212\n> https://github.com/tlswg/tls13-spec/issues/212, which is another\n> straightforward way to reduce complexity here. Also, turning ServerKeyShare\n> into an extension to stick directly into ServerHello, as has been done\n> already on the client-side, could simplify things a bit as well.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/tlswg/tls13-spec/issues/213#issuecomment-127482659.\n",
          "createdAt": "2015-08-04T12:46:39Z",
          "updatedAt": "2015-08-04T12:46:39Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This should be done now.\n",
          "createdAt": "2015-08-20T17:10:53Z",
          "updatedAt": "2015-08-20T17:10:53Z"
        }
      ]
    },
    {
      "number": 214,
      "id": "MDU6SXNzdWU5ODg5MjUwMg==",
      "title": "Extensionify ServerKeyShare",
      "url": "https://github.com/tlswg/tls13-spec/issues/214",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "ClientKeyShare was converted from a message into an extension. I suggest doing the same for ServerKeyShare. This would make the two consistent with each-other and work towards issue #184.\n",
      "createdAt": "2015-08-04T05:28:26Z",
      "updatedAt": "2015-10-17T22:53:52Z",
      "closedAt": "2015-10-17T22:53:52Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Consensus in interim is \"let's do it\".\n",
          "createdAt": "2015-09-22T22:00:53Z",
          "updatedAt": "2015-09-22T22:00:53Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Here's an early WIP:\nhttps://github.com/davegarrett/tls13-spec/commit/66d2fb35a46157641d63944355e64b02e1bfd45d\n\nThe client extension and server message already use the same struct, so just merging them into one general extension is relatively simple and better than two almost identical extensions.\n",
          "createdAt": "2015-09-23T01:48:35Z",
          "updatedAt": "2015-09-23T01:48:35Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, PR #268 filed for this. Will probably need some changes, so feedback / drive-by reviews would be appreciated in that PR.\n",
          "createdAt": "2015-09-26T00:34:06Z",
          "updatedAt": "2015-09-26T00:34:06Z"
        }
      ]
    },
    {
      "number": 216,
      "id": "MDU6SXNzdWUxMDA2NDMyMjY=",
      "title": "Explicit API recommandation for a TLS stack",
      "url": "https://github.com/tlswg/tls13-spec/issues/216",
      "state": "CLOSED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "help wanted",
        "parked"
      ],
      "body": "At some point in the future we should try to include a protocol API for implementations to follow.\nI do understand that current libraries implementing their own API will not follow that soon (or ever) but new implementations could benefit from that ...\n",
      "createdAt": "2015-08-12T21:50:15Z",
      "updatedAt": "2017-05-24T10:12:58Z",
      "closedAt": "2017-04-16T17:21:22Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@beurdouche this seems like a great companion document\n",
          "createdAt": "2015-09-22T20:57:30Z",
          "updatedAt": "2015-09-22T20:57:30Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also, perhaps look at libtls from openbsd: http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man3/tls_accept_fds.3?query=tls_init&sec=3\n",
          "createdAt": "2015-09-22T21:00:18Z",
          "updatedAt": "2015-09-22T21:00:18Z"
        },
        {
          "author": "dwmw2",
          "authorAssociation": "NONE",
          "body": "Please ensure that any such API recommendation covers the use of _(esp. client)_ certificates. In particular, there should be an API which applications can use to simply ask the library to use a certificate/key specified by the user, from a file or ([RFC7512](http://tools.ietf.org/html/rfc7512)) PKCS#11 URI.\n\nApplications currently have to jump through a _lot_ of hoops even to have comprehensive support for files \u2014 often having to determine for _themselves_ if a file is PEM- or DER-encoded, if it's PKCS#1, PKCS#8, PKCS#12 or something more esoteric, and then invoke the library API [differently](http://www.advogato.org/person/dwmw2/diary/205.html) for each type of file.\n\nThere should be a simple function that the application can call, with the filename/URI string(s) provided by the user, and expect the library to do the right thing.\n",
          "createdAt": "2016-09-19T07:45:34Z",
          "updatedAt": "2016-09-19T07:45:34Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think this belongs in the main spec, so I'm parking it.\n",
          "createdAt": "2016-10-26T05:14:47Z",
          "updatedAt": "2016-10-26T05:14:47Z"
        },
        {
          "author": "dwmw2",
          "authorAssociation": "NONE",
          "body": "FWIW in case this does get picked up again here or elsewhere, here's a document which attempts to address the use of certificates from such an application: http://david.woodhou.se/draft-woodhouse-cert-best-practice.html",
          "createdAt": "2017-05-24T10:12:57Z",
          "updatedAt": "2017-05-24T10:12:57Z"
        }
      ]
    },
    {
      "number": 217,
      "id": "MDU6SXNzdWUxMDExNTc0MjA=",
      "title": "Document kramdown magic",
      "url": "https://github.com/tlswg/tls13-spec/issues/217",
      "state": "CLOSED",
      "author": "yaronf",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In the readme file, please add a link to kramdown-rfc2629 (the link in the Makefile is broken).\n\nhttps://github.com/cabo/kramdown-rfc2629\n",
      "createdAt": "2015-08-15T10:13:10Z",
      "updatedAt": "2015-09-12T19:48:40Z",
      "closedAt": "2015-09-12T19:48:40Z",
      "comments": []
    },
    {
      "number": 219,
      "id": "MDU6SXNzdWUxMDIwMjgxMjM=",
      "title": "What identity is hashed into the secrets in \"anonymous\" mode",
      "url": "https://github.com/tlswg/tls13-spec/issues/219",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is relevant if what you want isn't TLS-layer anonymity but a channel binding and\nyou want to set up 0-RTT\n",
      "createdAt": "2015-08-20T00:16:56Z",
      "updatedAt": "2015-09-22T20:56:57Z",
      "closedAt": "2015-09-22T20:56:57Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We removed anonymous mode.\n",
          "createdAt": "2015-09-22T20:56:57Z",
          "updatedAt": "2015-09-22T20:56:57Z"
        }
      ]
    },
    {
      "number": 222,
      "id": "MDU6SXNzdWUxMDMzOTIzNTk=",
      "title": "Remove DSA support",
      "url": "https://github.com/tlswg/tls13-spec/issues/222",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It has been suggested we should remove DSA. Tracking issue\n",
      "createdAt": "2015-08-27T00:15:00Z",
      "updatedAt": "2015-09-21T22:48:03Z",
      "closedAt": "2015-09-21T22:48:03Z",
      "comments": [
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1\n",
          "createdAt": "2015-08-27T09:17:48Z",
          "updatedAt": "2015-08-27T09:17:48Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner do we have consensus on this or can you call for it on-list?\n",
          "createdAt": "2015-08-27T11:27:24Z",
          "updatedAt": "2015-08-27T11:27:24Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "we should do a call, but I\ufffdll phrase it as in is there anybody who wants to speak in favor of keeping it.\n\nspt\n\nOn Aug 27, 2015, at 07:27, ekr notifications@github.com wrote:\n\n> @seanturner do we have consensus on this or can you call for it on-list?\n> \n> \ufffd\n> Reply to this email directly or view it on GitHub.\n",
          "createdAt": "2015-08-27T12:32:23Z",
          "updatedAt": "2015-08-27T12:32:23Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner: Also, please clarify if it's to just be dropped from the document, but technically still permitted, or dropped from the spec and no longer considered acceptable with TLS 1.3+.\n",
          "createdAt": "2015-08-27T12:35:53Z",
          "updatedAt": "2015-08-27T12:35:53Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would prefer we either allow it or not, but not have it exist in some intermediate status.\n",
          "createdAt": "2015-08-27T12:43:45Z",
          "updatedAt": "2015-08-27T12:43:45Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not a fan of keeping it technically permitted either, but I think there was mention of this on-list at some point. I don't remember this being explicitly decided.\n",
          "createdAt": "2015-08-27T12:48:07Z",
          "updatedAt": "2015-08-27T12:48:07Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This was done.\n",
          "createdAt": "2015-09-21T22:48:03Z",
          "updatedAt": "2015-09-21T22:48:03Z"
        }
      ]
    },
    {
      "number": 223,
      "id": "MDU6SXNzdWUxMDMzOTIzODc=",
      "title": "Absolute or relative time in ServerConfiguration",
      "url": "https://github.com/tlswg/tls13-spec/issues/223",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "discuss-seattle"
      ],
      "body": "Currently we are using absolute time. Should we move to relative time?\n",
      "createdAt": "2015-08-27T00:15:24Z",
      "updatedAt": "2015-09-21T22:34:45Z",
      "closedAt": "2015-09-21T22:34:45Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Decision at Seattle interim: leave as-is\n",
          "createdAt": "2015-09-21T22:34:45Z",
          "updatedAt": "2015-09-21T22:34:45Z"
        }
      ]
    },
    {
      "number": 224,
      "id": "MDU6SXNzdWUxMDMzOTI1NTA=",
      "title": "Include randoms directly in digital signatures",
      "url": "https://github.com/tlswg/tls13-spec/issues/224",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "wontfix"
      ],
      "body": "nmav suggested that we sign something that directly includes the randoms to allow\nprivilege separation\n",
      "createdAt": "2015-08-27T00:17:28Z",
      "updatedAt": "2015-10-21T22:42:18Z",
      "closedAt": "2015-10-21T22:42:18Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Consensus at the interim was that this has straightforward to do by just having the server\nsupply the server random was enough since it can search through the handshake transcript.\n\n@ekr to post a message to the list.\n",
          "createdAt": "2015-09-22T18:48:45Z",
          "updatedAt": "2015-09-22T18:48:45Z"
        }
      ]
    },
    {
      "number": 225,
      "id": "MDU6SXNzdWUxMDMzOTI2MjM=",
      "title": "Indicate deprecated extensions",
      "url": "https://github.com/tlswg/tls13-spec/issues/225",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "Provide a list of the deprecated extensions.\n",
      "createdAt": "2015-08-27T00:18:15Z",
      "updatedAt": "2015-10-22T13:29:54Z",
      "closedAt": "2015-10-22T13:29:54Z",
      "comments": [
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Would you prefer having all deprecated stuff into the main TLS 1.3 RFC or maybe having a separate document explicitly containing all deprecated stuff like extensions, ciphers, signature algs \u2026 and explaining why ?\n",
          "createdAt": "2015-08-27T09:21:37Z",
          "updatedAt": "2015-08-27T09:21:37Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that the cipher suites are covered already. Noting that we don't support point compression negotiation (for instance) would be good.\n",
          "createdAt": "2015-08-27T17:01:18Z",
          "updatedAt": "2015-08-27T17:01:18Z"
        }
      ]
    },
    {
      "number": 226,
      "id": "MDU6SXNzdWUxMDMzOTI2NDg=",
      "title": "Add support for CFRG groups",
      "url": "https://github.com/tlswg/tls13-spec/issues/226",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "Merge this in from the drafts.\n",
      "createdAt": "2015-08-27T00:18:36Z",
      "updatedAt": "2015-11-07T14:43:08Z",
      "closedAt": "2015-11-07T14:43:08Z",
      "comments": []
    },
    {
      "number": 227,
      "id": "MDU6SXNzdWUxMDMzOTI5MDA=",
      "title": "PRF designation in server certificate verify",
      "url": "https://github.com/tlswg/tls13-spec/issues/227",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Ilari writes:\n\n> > > 6.3.7. (Server Certificate Verify)\n> > \n> > Should PRF hash designation be added in order to avoid attacks from\n> > weak PRF hashes?\n> \n> Could you say more about this?\n\nIf server or client supports some very weak PRF algorithm (they shouldn't,\nbut we know how practice looks like), could it be possible to forge\nsignatures by causing the weak hash value collide with one from strong\nhash peer accepts?\n\nAlso known as \"hash firewalling\" (too bad most firewall schemes in\nsignatures are broken).\n",
      "createdAt": "2015-08-27T00:21:09Z",
      "updatedAt": "2015-09-22T20:56:06Z",
      "closedAt": "2015-09-22T20:56:06Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Consensus at interim is to leave as-is\n",
          "createdAt": "2015-09-22T20:56:06Z",
          "updatedAt": "2015-09-22T20:56:06Z"
        }
      ]
    },
    {
      "number": 228,
      "id": "MDU6SXNzdWUxMDMzOTI5NzA=",
      "title": "Document TLS-Unique for 1.3",
      "url": "https://github.com/tlswg/tls13-spec/issues/228",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "help wanted"
      ],
      "body": "Probably the right thing here is just another key generated off of the MS,\nsince that includes the whole transcript.\n",
      "createdAt": "2015-08-27T00:21:57Z",
      "updatedAt": "2016-03-21T17:29:08Z",
      "closedAt": "2016-03-21T17:29:08Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Consensus at interim:\n1. Don't document unique for TLS 1.3.\n2. We need a draft with guidance for applications.\n",
          "createdAt": "2015-09-22T17:52:00Z",
          "updatedAt": "2015-09-22T17:52:00Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Attempted to punt this to Niko.\n",
          "createdAt": "2015-09-22T20:43:19Z",
          "updatedAt": "2015-09-22T20:43:19Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "External specs will be using exporters, so we can just define an exporter.\n",
          "createdAt": "2016-03-21T17:29:08Z",
          "updatedAt": "2016-03-21T17:29:08Z"
        }
      ]
    },
    {
      "number": 229,
      "id": "MDU6SXNzdWUxMDMzOTMwNjU=",
      "title": "Require that ServerConfiguration not be acceptable till handshake finished",
      "url": "https://github.com/tlswg/tls13-spec/issues/229",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready",
        "PR Pending"
      ],
      "body": "Hubert Karlo writes:\n\n> > > Also, the record protection used for early handshake messages should be\n> > > indicated.\n> > \n> > Can you expand on that?\n> \n> How does the client know what record protection algorithms are valid\n> for 0RTT transmission for that server?\n\nAnd how does the client know that the algorithms came from the server. We\nshould have a \"client MUST wait for the full handshake to finish before\nrecording this information\" or we will have a very nice cipher downgrade. Just\nhaving it signed is likely not a good idea, as they may depend on ciphersuites\nadvertised by client.\n",
      "createdAt": "2015-08-27T00:23:09Z",
      "updatedAt": "2015-10-05T18:16:38Z",
      "closedAt": "2015-10-05T18:16:38Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since the ServerConfiguration and the suites are covered by the signature the server provides, isn't it safe to use the configuration add soon as you have verified the server identity?\n",
          "createdAt": "2015-08-27T16:57:59Z",
          "updatedAt": "2015-08-27T16:57:59Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "n.b., I have no problem with mandating that clients wait for finished, because it is immediately after the signature, but I wasn't the properties to be clear.\n",
          "createdAt": "2015-08-27T16:59:21Z",
          "updatedAt": "2015-08-27T16:59:21Z"
        }
      ]
    },
    {
      "number": 230,
      "id": "MDU6SXNzdWUxMDM0ODk2MDk=",
      "title": "Remove unknown_psk_identity?",
      "url": "https://github.com/tlswg/tls13-spec/issues/230",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This doesn't really make sense with the current PSK\n negotiation scheme where the client provides multiple PSKs in\n flight 1.\n",
      "createdAt": "2015-08-27T11:39:45Z",
      "updatedAt": "2015-09-22T20:42:39Z",
      "closedAt": "2015-09-22T20:42:39Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There's no reason a client couldn't send a giant pile of identities and still have them all be useless for the server in question. Likewise, the server could still have a bug and pick an unsupported PSK, in which case having a specific error would help debugging. There's also the new use-case of PSK resumption, so if a client picks a PSK for resumption that the server doesn't have around to use anymore, it could easily hit this error.\n\nIt's also a pre-existing error alert, so I don't see a point in removing it now. Might as well just leave in as it's already standardized and is technically optional anyway. (defined in RFC 4279)\n",
          "createdAt": "2015-08-31T05:30:14Z",
          "updatedAt": "2015-08-31T05:30:14Z"
        }
      ]
    },
    {
      "number": 233,
      "id": "MDU6SXNzdWUxMDM3NjEwNTM=",
      "title": "Use \"raw public keys\" instead of DH_anon?",
      "url": "https://github.com/tlswg/tls13-spec/issues/233",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready",
        "PR Pending"
      ],
      "body": "",
      "createdAt": "2015-08-28T17:27:39Z",
      "updatedAt": "2015-10-05T18:16:20Z",
      "closedAt": "2015-10-05T18:16:20Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just posting this link here, too. This is the \"Unauthenticated Cipher Suites\" section I put together for my old a la carte proposal. I had already made note of raw public keys in it, so here it is cut out, as it's already done and usable with almost no changes needed. If the decision is to completely deprecate DH_anon as well as note raw key use, then some minor changes to this are needed.\nhttps://github.com/davegarrett/tls13-spec/commit/17a884c9c53658258eb3abe9777b1cd76e9d5064\n\nNot a PR or otherwise a complete proposed solution; just an existing section that I had on hand that can serve as a starting point, if desired.\n",
          "createdAt": "2015-09-15T05:23:13Z",
          "updatedAt": "2015-09-15T05:23:13Z"
        },
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/beurdouche/tls13-spec/tree/patch_anonDH_removal\ntakes that commit and makes small progress... I can PR if you want...\n",
          "createdAt": "2015-09-20T18:49:10Z",
          "updatedAt": "2015-09-20T18:49:40Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Consensus at interim: make this change. @beurdouche I will review this PR\n",
          "createdAt": "2015-09-21T22:03:57Z",
          "updatedAt": "2015-09-21T22:03:57Z"
        }
      ]
    },
    {
      "number": 237,
      "id": "MDU6SXNzdWUxMDM5OTQ2NzI=",
      "title": "consider reordering handshake protocol sections",
      "url": "https://github.com/tlswg/tls13-spec/issues/237",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "Currently, we have:\n6. The TLS Handshaking Protocols\n    6.1. Alert Protocol\n        6.1.1. Closure Alerts\n        6.1.2. Error Alerts\n    6.2. Handshake Protocol Overview\n        6.2.1. Incorrect DHE Share\n        6.2.2. Zero-RTT Exchange\n        6.2.3. Resumption and PSK\n    6.3. Handshake Protocol\n        6.3.1. Hello Messages\n        6.3.2. Hello Extensions\n        6.3.3. Server Key Share\n        6.3.4. Encrypted Extensions\n        6.3.5. Server Certificate\n        6.3.6. Certificate Request\n        6.3.7. Server Configuration\n        6.3.8. Server Certificate Verify\n        6.3.9. Server Finished\n        6.3.10. Client Certificate\n        6.3.11. Client Certificate Verify\n        6.3.12. New Session Ticket Message\n\nThis feels like it's not completely in a consistent order, which could make it a little confusing to read through. I think we should consider reordering these sections in the order they're actually used. The list in Handshake Protocol Overview should also be in the same order. This means:\n- Alert Protocol after Handshake Protocol\n- order messages' sections based on send order (move Server Configuration)\n\nSo, something more like this, instead:\n6. The TLS Handshaking Protocols\n    6.1. Handshake Protocol Overview\n        6.1.1. Incorrect DHE Share\n        6.1.2. Zero-RTT Exchange\n        6.1.3. Resumption and PSK\n    6.2. Handshake Protocol\n        6.2.1. Hello Messages\n        6.2.2. Hello Extensions\n        6.2.3. Server Key Share\n        6.2.4. Encrypted Extensions\n        6.2.5. Server Configuration (moved up)\n        6.2.6. Server Certificate\n        6.2.7. Certificate Request\n        6.2.8. Server Certificate Verify\n        6.2.9. Server Finished\n        6.2.10. Client Certificate\n        6.2.11. Client Certificate Verify\n        6.2.12. New Session Ticket Message\n    6.3. Alert Protocol (moved down)\n        6.3.1. Closure Alerts\n        6.3.2. Error Alerts\n\nAs @ekr is planning on rewriting quite a bit, I'm just filing this idea as an issue for consideration later on.\n\nAnother idea might be to also split 1-RTT into its own section to go right before the 0-RTT section and leave Handshake Protocol Overview as a more basic and generic explanation of what goes into the handshake. (also move Incorrect DHE Share down to after those & PSK)\n",
      "createdAt": "2015-08-31T06:12:19Z",
      "updatedAt": "2015-10-17T22:55:12Z",
      "closedAt": "2015-10-17T22:55:11Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've done some restructuring here, so I think this is largely overtaken by events. I'll bear the rest of these ideas in mind for when I do big-time rewriting.\n",
          "createdAt": "2015-10-17T22:55:11Z",
          "updatedAt": "2015-10-17T22:55:11Z"
        }
      ]
    },
    {
      "number": 242,
      "id": "MDU6SXNzdWUxMDYxODQxNzU=",
      "title": "Should we require alerts to be sent",
      "url": "https://github.com/tlswg/tls13-spec/issues/242",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "In #231, @briansmith argues that we should not require alerts be sent.\n\nThis is inconsistent with the present specification and a number of people have argued against it, including, IIRC @martinthomson. This bug tracks this issue.\n",
      "createdAt": "2015-09-12T20:46:22Z",
      "updatedAt": "2015-10-19T16:09:55Z",
      "closedAt": "2015-10-19T16:09:55Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Consensus in Seattle was:\n1. The spec should indicate which alert MUST be sent _if_ you send an alert.\n2. We would consider a PR making sending an alert a SHOULD.\n",
          "createdAt": "2015-09-21T22:49:10Z",
          "updatedAt": "2015-09-21T22:49:10Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "duplicate of #254 \n",
          "createdAt": "2015-10-19T16:09:55Z",
          "updatedAt": "2015-10-19T16:09:55Z"
        }
      ]
    },
    {
      "number": 246,
      "id": "MDU6SXNzdWUxMDcwMzI5ODc=",
      "title": "remove ClientCertificateType",
      "url": "https://github.com/tlswg/tls13-spec/issues/246",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "Filing an issue to track this.\nhttps://github.com/tlswg/tls13-spec/pull/245#issuecomment-141153278\n",
      "createdAt": "2015-09-17T17:24:58Z",
      "updatedAt": "2015-10-17T22:55:23Z",
      "closedAt": "2015-10-17T22:55:23Z",
      "comments": []
    },
    {
      "number": 247,
      "id": "MDU6SXNzdWUxMDcwMzQzMzI=",
      "title": "rendering discrepancy; indented references not linkified",
      "url": "https://github.com/tlswg/tls13-spec/issues/247",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "There's a rendering discrepancy between the editor's copy & working group draft. Within indented sections, bracketed links are not linkified in the github.io version but are in the final version that ends up on ietf.org. See the cipher suite and contributors sections:\n\nhttps://tlswg.github.io/tls13-spec/#cipher-suites\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-08#appendix-A.4\n\nhttps://tlswg.github.io/tls13-spec/#rfc.appendix.F\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-08#appendix-F\n\nIf these two differ in a substantial way, it makes catching issues that break one but not the other a bit difficult.\n",
      "createdAt": "2015-09-17T17:33:03Z",
      "updatedAt": "2015-12-16T21:56:07Z",
      "closedAt": "2015-12-16T21:56:07Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That is a shortcoming of the kramdown tool, which doesn't recognize those as references correctly.  That can be corrected by using a strict reference form `{{I-D.reference}}` rather than square brackets.  However, it looks like the contributors section is not a list, but a diagram, so that might not work there either.\n\nConverting the cipher suites section to a table would work, but the kramdown syntax for that is horrific.  Converting the contributors section to a list would address the problem, but that might be a little difficult to do properly.\n\nNote that the links on the html-ized tools version is generated from the plaintext, so all it has to go on are the square brackets.\n",
          "createdAt": "2015-09-17T18:52:28Z",
          "updatedAt": "2015-09-17T18:52:28Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Thursday, September 17, 2015 02:52:31 pm Martin Thomson wrote:\n\n> That is a shortcoming of the kramdown tool, which doesn't recognize those as references correctly.\n\nCan this be reported upstream then, or is this already known there?\n",
          "createdAt": "2015-09-17T18:57:54Z",
          "updatedAt": "2015-09-17T18:57:54Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would think that you should try to fix this by changing to using tables and lists rather than diagrams.  The kramdown tool can't be expected to extract references from artwork.  It wouldn't have anywhere to put the references in the XML format even if it did.\n\nYou could also decide that this isn't important enough to bother fixing.\n",
          "createdAt": "2015-09-17T19:40:27Z",
          "updatedAt": "2015-09-17T19:40:27Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Thursday, September 17, 2015 03:40:30 pm Martin Thomson wrote:\n\n> I would think that you should try to fix this by changing to using tables and lists rather than diagrams.  The kramdown tool can't be expected to extract references from artwork.  It wouldn't have anywhere to put the references in the XML format even if it did.\n\nIsn't there just some way to indent some text without it being treated as \"artwork\"? If not, that's rather silly.\n\n> You could also decide that this isn't important enough to bother fixing.\n\nIf there's no simple fix, then yeah, I'll just close this as wontfix.\n",
          "createdAt": "2015-09-17T21:36:19Z",
          "updatedAt": "2015-09-17T21:36:19Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Indenting is easy:  http://kramdown.gettalong.org/syntax.html#blockquotes\n\nTables are relatively easy too: http://kramdown.gettalong.org/syntax.html#tables \n",
          "createdAt": "2015-09-17T21:43:42Z",
          "updatedAt": "2015-09-17T21:43:42Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If someone wants to provide a PR, I'll take a fix for this, but since it doesn't apply to the final RFC, I'm going to backburner it.\n",
          "createdAt": "2015-10-03T20:44:13Z",
          "updatedAt": "2015-10-03T20:44:13Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is fixed now. Both renderings now linkify properly with recent changes from @martinthomson. There's actually quite a bit more difference between the two renderings, but this issue, the noted reference linkification, is fixed. Closing.\n",
          "createdAt": "2015-12-16T21:56:07Z",
          "updatedAt": "2015-12-16T21:56:07Z"
        }
      ]
    },
    {
      "number": 251,
      "id": "MDU6SXNzdWUxMDc1OTAxMTM=",
      "title": "Eliminate TLS_NULL_NULL_WITH_NULL_NULL_NULL_NULL",
      "url": "https://github.com/tlswg/tls13-spec/issues/251",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready",
        "PR Pending"
      ],
      "body": "This was always a hack.  We should just remove mention of this as a \"cipher suite\" and just talk about certain messages being encrypted and others not.\n",
      "createdAt": "2015-09-21T20:16:57Z",
      "updatedAt": "2015-10-05T18:16:29Z",
      "closedAt": "2015-10-05T18:16:29Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If issue #214 is done, then I think the only cleartext messages left would be the 3 hello messages: ClientHello, ServerHello, & HelloRetryRequest. TLSPlaintext could then just be renamed to TLSHelloRecord, which would make the distinction between cleartext and encrypted records relatively easy.\n",
          "createdAt": "2015-09-21T22:41:26Z",
          "updatedAt": "2015-09-21T22:41:26Z"
        },
        {
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that this psuedo-cipher-suite should be removed. It is confusing. Some implementations may work in a way where they implement some TLS_NULL_NULL_WITH_NULL_... cipher suite, but that's an implementation detail. Other implementations, particularly implementations that don't do renegotiation, likely won't work like that.\n",
          "createdAt": "2015-09-22T00:34:24Z",
          "updatedAt": "2015-09-22T00:34:24Z"
        }
      ]
    },
    {
      "number": 252,
      "id": "MDU6SXNzdWUxMDc2MjIyNjY=",
      "title": "Relax the TLS extension IANA policy?",
      "url": "https://github.com/tlswg/tls13-spec/issues/252",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "TLS Cipher Suite Registry: Future values with the first byte in\n      the range 0-191 (decimal) inclusive are assigned via Standards\n      Action [RFC2434].  Values with the first byte in the range 192-254\n      (decimal) are assigned via Specification Required [RFC2434].\n      Values with the first byte 255 (decimal) are reserved for Private\n      Use [RFC2434].\n",
      "createdAt": "2015-09-22T00:07:20Z",
      "updatedAt": "2015-11-30T21:47:15Z",
      "closedAt": "2015-11-30T21:47:15Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The title here says \"extension\" but comment 0 says \"cipher suite\". You meant the latter, correct? Extension ID registry is simply \"allocated via IETF Consensus [RFC2434]\".\n",
          "createdAt": "2015-09-22T00:39:29Z",
          "updatedAt": "2015-09-22T00:39:29Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No, i meant extension. IETF Consensus is stronger than Specification required.\n",
          "createdAt": "2015-09-22T04:15:33Z",
          "updatedAt": "2015-09-22T04:15:33Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So comment 0, with the \"TLS Cipher Suite Registry\" policy pasted up there, is what you're suggesting modeling extensions on? e.g. Something like:\n0x0000 - 0x0fff : IETF Consensus (almost all current extensions; some standards, some not)\n0x1000 - 0x7fff : Specification Required\n0x8000 - 0xefff : Private Use\n0xf000 - 0xffff : Standards Action (renegotiation_info is in here)\n\nLink to the current registry:\nhttps://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#tls-extensiontype-values-1\n",
          "createdAt": "2015-09-22T06:37:23Z",
          "updatedAt": "2015-09-22T06:37:23Z"
        }
      ]
    },
    {
      "number": 254,
      "id": "MDU6SXNzdWUxMDc3NDc1MjE=",
      "title": "Change alert requirements to be consistent",
      "url": "https://github.com/tlswg/tls13-spec/issues/254",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready",
        "PR Pending"
      ],
      "body": "Consensus at the interim was:\n- All alerts shall be SHOULD to send (or may in some cases)\n- In cases where alerts SHOULD be sent, there will be MUSTs for which one.\n",
      "createdAt": "2015-09-22T16:09:27Z",
      "updatedAt": "2016-09-20T01:00:55Z",
      "closedAt": "2016-09-20T01:00:55Z",
      "comments": []
    },
    {
      "number": 256,
      "id": "MDU6SXNzdWUxMDc3OTE3NDU=",
      "title": "Don't split alerts across records",
      "url": "https://github.com/tlswg/tls13-spec/issues/256",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "They are small.  They don't need to be split.  Splitting them might cause interoperability problems.\n",
      "createdAt": "2015-09-22T20:09:59Z",
      "updatedAt": "2015-09-22T20:22:46Z",
      "closedAt": "2015-09-22T20:22:46Z",
      "comments": []
    },
    {
      "number": 260,
      "id": "MDU6SXNzdWUxMDc4MDQ0NTI=",
      "title": "Add on-the-fly client auth based on PR #209",
      "url": "https://github.com/tlswg/tls13-spec/issues/260",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ekr"
      ],
      "labels": [
        "Editor Ready",
        "PR Pending"
      ],
      "body": "",
      "createdAt": "2015-09-22T21:15:39Z",
      "updatedAt": "2015-12-01T17:33:18Z",
      "closedAt": "2015-12-01T17:33:18Z",
      "comments": []
    },
    {
      "number": 261,
      "id": "MDU6SXNzdWUxMDc4MDQ1ODY=",
      "title": "Update CertificateRequest to include richer filtering based on PR#209",
      "url": "https://github.com/tlswg/tls13-spec/issues/261",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is for Andrei\n",
      "createdAt": "2015-09-22T21:16:31Z",
      "updatedAt": "2015-10-17T22:55:58Z",
      "closedAt": "2015-10-17T22:55:58Z",
      "comments": []
    },
    {
      "number": 262,
      "id": "MDU6SXNzdWUxMDc4MjA2Nzc=",
      "title": "Include CertificateRequest.correlator into signature?",
      "url": "https://github.com/tlswg/tls13-spec/issues/262",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-09-22T23:09:12Z",
      "updatedAt": "2015-11-09T23:02:43Z",
      "closedAt": "2015-11-09T23:02:43Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Added to PR#316\n",
          "createdAt": "2015-11-09T23:02:43Z",
          "updatedAt": "2015-11-09T23:02:43Z"
        }
      ]
    },
    {
      "number": 276,
      "id": "MDU6SXNzdWUxMDk3MDMyNDY=",
      "title": "Describe what additional information is bound to a ServerConfiguration",
      "url": "https://github.com/tlswg/tls13-spec/issues/276",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think that the list is:\n- selected cipher suite\n- Certificate\n- CertificateRequest (if present/if client is authenticating)\n- supported signature algorithms (if client is authenticating, though it seems like the field in the CertificateRequest duplicates this)\n",
      "createdAt": "2015-10-04T20:40:35Z",
      "updatedAt": "2016-05-12T13:39:18Z",
      "closedAt": "2016-05-12T13:39:18Z",
      "comments": []
    },
    {
      "number": 277,
      "id": "MDU6SXNzdWUxMDk4Nzc1ODI=",
      "title": "prohibit immediate plain PSK negotiation if no usable (EC)DHE key is provided, but could be, and any (EC)DHE suite is offered at a higher priority",
      "url": "https://github.com/tlswg/tls13-spec/issues/277",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "There's a specific risk with plain PSK (no (EC)DHE) that needs explicit handling here. Assume the following:\n1) Client offers both plain PSK & any other (EC)DHE suite (e.g. (EC)DHE-PSK)\n2) Server supports both as well\n3) The client does not provide a (EC)DHE key share that the server can use\n\nThere is a risk that the server will:\n1) Skip all (EC)DHE suites due to lack of usable key share\n2) Continue checking other suites, and then negotiate plain PSK if supported\n\nInstead, we need to explicitly make sure that this scenario triggers a HelloRetryRequest so that the client has a chance to get PFS and not accidentally be downgraded to plain PSK. (especially if plain PSK is lowest priority, as it should be)\n\nEdited to add:\nOf course, this also needs to handle the case where there is no group support overlap and plain PSK is the correct choice.\n",
      "createdAt": "2015-10-05T20:19:55Z",
      "updatedAt": "2016-09-07T15:48:42Z",
      "closedAt": "2016-09-07T15:48:42Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This doesn't seem right, because in order to do resumption, you offer plain PSK and your ordinary ECDHE (non-PSK) cipher suite and you expect the server to pick one or the other, and quite\npossible that you want them to prefer PSK-only.\n\nIt might be possible to restrict to not allowing ECDHE-PSK and plain PSK together, but then you basically couldn't resume ECDHE-PSK.\n",
          "createdAt": "2015-10-05T22:30:45Z",
          "updatedAt": "2015-10-05T22:30:45Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If plain PSK is top priority, then it should get picked and that's that. If it's not, e.g. the client cipher list is (EC)DHE-CERT-AES, (EC)DHE-PSK, plain PSK, (in this descending priority order) and there's no usable group in the client's key share, but there is a usable PSK identity, the point I'm making is that the correct route is to request a retry to try to get a usable (EC)DHE key to do one of the first two rather than just going straight to plain PSK. In the case of resumption, the client knows what works with the server and has no reason to offer an unusable offer set. If that changes due to a config change, resumption really isn't an option anymore anyway.\n\nThe retry mechanism explicitly sets up (EC)DHE negotiation as 1RTT ideal, or 2RTT as fallback. I'm concerned that also offering plain PSK could lead to short-circuiting that and servers just ditching PFS to save a RTT (possibly accidentally).\n",
          "createdAt": "2015-10-05T23:21:51Z",
          "updatedAt": "2015-10-05T23:21:51Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'll add the word \"immediate\" to the title to make it more clear. If the retry fails, then plain PSK is correct. It should attempt it, though.\n",
          "createdAt": "2015-10-05T23:23:01Z",
          "updatedAt": "2015-10-05T23:23:01Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note that the retry \"fails\" just by the server checking the supported groups and seeing no overlap with itself.\n\nEdited to add:\nThere, an even longer, but more precise, title.\n",
          "createdAt": "2015-10-05T23:24:07Z",
          "updatedAt": "2015-10-05T23:26:33Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not really following the algorithm you propose. Can you write it as a bulleted list or something?\n",
          "createdAt": "2015-10-05T23:34:34Z",
          "updatedAt": "2015-10-05T23:34:34Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, it's sort of a narrow issue.\n\nPlain PSK should only be negotiated in one of the two following scenarios:\n1) plain PSK is top priority of mutual supported ciphers\n2) it is not top, but ones earlier in the list are unusable due to known unsupported groups\n\nWe can, however, hit a third case where we have a supported group that simply did not have a key sent. This fact is what causes the hiccup.\n\nThe server needs to iterate through the mutually supported cipher list, in descending order of priority, to look for the highest priority supported cipher suite. If the suite is negotiable with the current available information, great; done. Otherwise, if it finds a suite where all three of the following are true:\n1) it's (EC)DHE\n2) A mutually supported group is known via the supported_groups extension\n3) No mutually supported key was offered for said group in the key share extension\nThen, as a consequence, it should stop right there and kick off a HelloRetryRequest to get a key and negotiate that cipher suite. It should NOT continue iterating down through the list and then instead negotiate a lower priority suite that it does currently have enough information to use.\n\nFrom another perspective, HelloRetryRequest makes the operation of negotiating support for the cipher's key exchange a potentially asynchronous operation. The spec needs to be clear that the correct route is to spend the RTT to fetch the key rather than to resort to a low priority plain PSK suite. Right now, it's ambiguous as to whether the server should request a retry and negotiate a (EC)DHE suite or negotiate plain PSK in this scenario.\n\nOn additional thought, this also affects ECDHE vs. DHE. If ECDHE is a higher priority, but no key was provided, but a key is possible, it should kick off a HelloRetryRequest rather than go down the list to a DHE. Not doing so here, however, isn't that much of a problem. They both have PFS; plain PSK doesn't.\n",
          "createdAt": "2015-10-06T00:24:24Z",
          "updatedAt": "2015-10-06T00:44:58Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There can be another hiccup if a client were to (stupidly) offer groups with a high priority group not getting its key sent, but lower priority group(s) getting their key(s) sent. If the prioritization is to be respected fully, it should fetch the highest mutually supported group's key rather than using a lower priority, but already available, one. This is fixable by just making sure all groups with keys sent in the first flight are at a higher priority than the other supported groups.\n",
          "createdAt": "2015-10-06T00:39:27Z",
          "updatedAt": "2015-10-06T00:39:27Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think we should be dictating the server's policy here. If the client wants ECDHE it can force it, just as the server can. Feel free to raise this issue on-list if you disagree. In the meantime I'm marking it parked.\n",
          "createdAt": "2016-07-08T00:59:06Z",
          "updatedAt": "2016-07-08T00:59:06Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This edge case was a possible result of PSK cipher suite prioritization that is no longer applicable in the new negotiation that lacks them. Closing.\n",
          "createdAt": "2016-09-07T15:48:42Z",
          "updatedAt": "2016-09-07T15:48:42Z"
        }
      ]
    },
    {
      "number": 278,
      "id": "MDU6SXNzdWUxMDk5MDU2Mjg=",
      "title": "Version in additional data",
      "url": "https://github.com/tlswg/tls13-spec/issues/278",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The additional data covers:\n       additional_data = seq_num + TLSPlaintext.record_version\n\nHowever TLSPlaintext.record_version is now a fixed field {3, 1}.\nWe have two sensible options here:\n1. Remove the record_version as an input\n2. Use the actual protocol version.\n\nI lean towards option 2, but I could do either.\n",
      "createdAt": "2015-10-05T23:19:47Z",
      "updatedAt": "2015-10-29T07:14:31Z",
      "closedAt": "2015-10-29T07:14:31Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The version is already mixed into the keygen. I see no reason to keep it in the AD.\n",
          "createdAt": "2015-10-05T23:27:55Z",
          "updatedAt": "2015-10-05T23:27:55Z"
        },
        {
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There is a third sensible option: Just keep doing the same thing that TLS 1.2 did, so that we don't have to add more complexity to implementations that need to support both TLS 1.3 and TLS 1.2. This is what I prefer.\n",
          "createdAt": "2015-10-05T23:59:08Z",
          "updatedAt": "2015-10-05T23:59:08Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Monday, October 05, 2015 07:59:10 pm Brian Smith wrote:\n\n> There is a third sensible option: Just keep doing the same thing that TLS 1.2 did, so that we don't have to add more complexity to implementations that need to support both TLS 1.3 and TLS 1.2. This is what I prefer.\n\nIt's already different, though.\n\nTLS 1.2:\n    additional_data = seq_num + TLSCompressed.type +\n                        TLSCompressed.version + TLSCompressed.length;\nTLS 1.3:\n    additional_data = seq_num + TLSPlaintext.record_version\n\nDropping the version makes the new version simpler with no downside. Keeping it means that additional_data still needs to be computed, rather than just being equivalent to the seq_num.\n\nThe length was removed for a specific reason, noted in the current draft:\n\n> Note: In versions of TLS prior to 1.3, the additional_data included a length field. This presents a problem for cipher constructions with data-dependent padding (such as CBC). TLS 1.3 removes the length field and relies on the AEAD cipher to provide integrity for the length of the data.\n\nIf it's going to be different, it may as well be the simplest different.\n",
          "createdAt": "2015-10-06T00:33:11Z",
          "updatedAt": "2015-10-06T00:33:11Z"
        },
        {
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If it's going to be different, it may as well be the simplest different.\n\nI agree.\n",
          "createdAt": "2015-10-06T00:38:55Z",
          "updatedAt": "2015-10-06T00:38:55Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It just needs to make sure it's clear that TLSPlaintext.record_version MUST be ignored and for all we care it could be modified by an intermediary because it's irrelevant.\n\nJust to cross-link the obviously better route: issue #144. If viable, just ditching the useless fields entirely is simplest.\n",
          "createdAt": "2015-10-06T00:43:36Z",
          "updatedAt": "2015-10-06T00:43:36Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Removing the field doesn't answer the question of whether it should be MACed or not.\n\nFor instance, we MAC the sequence number even though it's not carried inline.\n",
          "createdAt": "2015-10-06T01:13:33Z",
          "updatedAt": "2015-10-06T01:13:33Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner I think we have consensus to remove the version number here. @martinthomson do you want to file a separate issue to remove the sequence #?\n",
          "createdAt": "2015-10-21T22:46:16Z",
          "updatedAt": "2015-10-21T22:46:16Z"
        }
      ]
    },
    {
      "number": 279,
      "id": "MDU6SXNzdWUxMTAwMjEzODg=",
      "title": "swap order of EC and RSA in MTI cipher suites",
      "url": "https://github.com/tlswg/tls13-spec/issues/279",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "(no hat)\n\nI would like to humbly suggest that we swap the order of listed MTI algorithms in Section 8.1 to put ECDSA first.  I have this vague and completely unsubstantiated notion that it would be better for the future to put the ECDSA algorithms first.  Also, I kind of remember the conversation at the Spring TLS Interim meeting in Seattle going something like \"EC, EC, EC, EC!\" and the \"oh yeah we also have to do RSA\".\n\nOLD:\n\nthe musts\n\n```\n   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n```\n\nthe shoulds:\n\n```\n   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\n   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\n   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n```\n\nNEW:\n\nthe must:\n\n```\n   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n```\n\nthe shoulds:\n\n```\n   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\n   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\n   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n```\n",
      "createdAt": "2015-10-06T14:34:52Z",
      "updatedAt": "2015-10-06T14:43:11Z",
      "closedAt": "2015-10-06T14:43:11Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Doneish.\n",
          "createdAt": "2015-10-06T14:43:09Z",
          "updatedAt": "2015-10-06T14:43:09Z"
        }
      ]
    },
    {
      "number": 280,
      "id": "MDU6SXNzdWUxMTAwNzk1Mzg=",
      "title": "sha1 in s6.3.2.1",
      "url": "https://github.com/tlswg/tls13-spec/issues/280",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "I think sha1 is supposed to be removed from this?  If not, the int is missing sha2.\n\n   enum {\n       none(0),\n       sha1,\n       sha256(4), sha384(5), sha512(6),\n       (255)\n   } HashAlgorithm;\n",
      "createdAt": "2015-10-06T19:12:49Z",
      "updatedAt": "2015-10-10T14:02:36Z",
      "closedAt": "2015-10-10T14:02:36Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No, it's there because you can offer it for certs. It is missing the assignment. PRs welcome :)\n",
          "createdAt": "2015-10-06T19:17:51Z",
          "updatedAt": "2015-10-06T19:17:51Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Okay so it's just missing the \"(2)\".  I'll get on the PR.\n",
          "createdAt": "2015-10-06T19:51:41Z",
          "updatedAt": "2015-10-06T19:51:41Z"
        },
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed by PR #286\n",
          "createdAt": "2015-10-10T09:27:04Z",
          "updatedAt": "2015-10-10T09:27:04Z"
        }
      ]
    },
    {
      "number": 281,
      "id": "MDU6SXNzdWUxMTAwODU2NTg=",
      "title": "Be consistent about the use of \"_RESERVED\"",
      "url": "https://github.com/tlswg/tls13-spec/issues/281",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "There are a couple of times the reserved values don't include the string \"_RESERVED\".  Can we either note this in the intro or add \"_RESERVED\" to the appropriate places in ContentType and HandshakeType:\n\n```\n  Appendix A.  Protocol Data Structures and Constant Values\n\n  This section describes protocol types and constants.  Values listed\n  as _RESERVED were used in previous versions of TLS and are listed\n  here for completeness.\n\n  enum {\n      reserved(0),\n      reserved(20), alert(21), handshake(22),\n      application_data(23), early_handshake(25),\n      (255)\n  } ContentType;\n\n  enum {\n      reserved(0), client_hello(1), server_hello(2),\n      session_ticket(4), hello_retry_request(6),\n      server_key_share(7), encrypted_extensions(8),\n      certificate(11), reserved(12), certificate_request(13),\n      reserved(14), certificate_verify(15), reserved(16),\n      server_configuration(17), finished(20), (255)\n  } HandshakeType;\n```\n",
      "createdAt": "2015-10-06T19:47:49Z",
      "updatedAt": "2015-10-12T22:42:42Z",
      "closedAt": "2015-10-12T22:42:42Z",
      "comments": [
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we can remove all the fields suffixed by `_RESERVED` it would make the enums more easy to read. =)\n",
          "createdAt": "2015-10-08T17:14:07Z",
          "updatedAt": "2015-10-08T17:14:07Z"
        }
      ]
    },
    {
      "number": 282,
      "id": "MDU6SXNzdWUxMTAyMDY5NDc=",
      "title": "Redefine exporters for TLS 1.3",
      "url": "https://github.com/tlswg/tls13-spec/issues/282",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "b-a"
      ],
      "body": "This isn't going to change a great deal, but we need to identify how exporters are constructed with the change to a HKDF-based PRF and the new key schedule.\n",
      "createdAt": "2015-10-07T11:42:27Z",
      "updatedAt": "2016-03-22T00:22:14Z",
      "closedAt": "2016-03-22T00:22:14Z",
      "comments": []
    },
    {
      "number": 291,
      "id": "MDU6SXNzdWUxMTE1OTc2NjU=",
      "title": "Section \"4.9.1. Digital Signing\" does not state salt length for RSA-PSS signatures",
      "url": "https://github.com/tlswg/tls13-spec/issues/291",
      "state": "CLOSED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The RSA-PSS salt length seems to be missing from the specification. The original post on the mailing list and a few other sources propose that `saltLength := hLen` where `hLen` is the length of the digest output in bytes.\n\nShould this be raised on the mailing list again or was this agreed on already?\n",
      "createdAt": "2015-10-15T11:27:34Z",
      "updatedAt": "2015-10-16T22:10:09Z",
      "closedAt": "2015-10-16T22:10:09Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let's just do it the way you propose. PR welcome\n",
          "createdAt": "2015-10-15T13:18:00Z",
          "updatedAt": "2015-10-15T13:18:00Z"
        }
      ]
    },
    {
      "number": 292,
      "id": "MDU6SXNzdWUxMTE2MTQ4MDU=",
      "title": "Allow NamedGroups from the server?",
      "url": "https://github.com/tlswg/tls13-spec/issues/292",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This would let the server indicate which signature keys it would accept from the client.\n",
      "createdAt": "2015-10-15T13:18:34Z",
      "updatedAt": "2015-11-20T21:47:33Z",
      "closedAt": "2015-11-20T21:47:33Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we concluded this wasn't allowed.\n",
          "createdAt": "2015-11-20T21:47:33Z",
          "updatedAt": "2015-11-20T21:47:33Z"
        }
      ]
    },
    {
      "number": 295,
      "id": "MDU6SXNzdWUxMTE5ODEzOTg=",
      "title": "Close client's 0-RTT application data with close_notify",
      "url": "https://github.com/tlswg/tls13-spec/issues/295",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "This seems obvious. Otherwise it's trial decryption FTW.\n",
      "createdAt": "2015-10-17T19:43:01Z",
      "updatedAt": "2015-12-01T17:14:48Z",
      "closedAt": "2015-12-01T17:14:48Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Will there be an exception for the encrypted content type so that a server can find the close_notify when it doesn't have the keys?\n",
          "createdAt": "2015-10-17T19:47:41Z",
          "updatedAt": "2015-10-17T19:47:41Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think so. We already agreed in Prague that trial decryption was OK for the  transition from failed 0-RTT to 1-RTT.\n",
          "createdAt": "2015-10-17T19:57:00Z",
          "updatedAt": "2015-10-17T19:57:00Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If trial decryption is considered OK here, please make sure that's noted explicitly wherever applicable.\n",
          "createdAt": "2015-10-17T19:59:15Z",
          "updatedAt": "2015-10-17T19:59:15Z"
        }
      ]
    },
    {
      "number": 298,
      "id": "MDU6SXNzdWUxMTE5ODU0Mzk=",
      "title": "CELLOS: AEAD - 1",
      "url": "https://github.com/tlswg/tls13-spec/issues/298",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To exclude the length field from the additional data maybe cumbersome.\n",
      "createdAt": "2015-10-17T21:14:26Z",
      "updatedAt": "2015-10-17T21:26:13Z",
      "closedAt": "2015-10-17T21:26:13Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's actually quite convenient. This had WG consensus.\n",
          "createdAt": "2015-10-17T21:26:13Z",
          "updatedAt": "2015-10-17T21:26:13Z"
        }
      ]
    },
    {
      "number": 299,
      "id": "MDU6SXNzdWUxMTE5ODU0NjY=",
      "title": "CELLOS: AEAD - 2",
      "url": "https://github.com/tlswg/tls13-spec/issues/299",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We do not have security concern to use explicit sequence number if AEAD is mandatory in data encryption.  And it is convenient if the use in DTLS is taken in account.\n\nSolution proposed: Include the sequence number in TLS header.\n",
      "createdAt": "2015-10-17T21:15:19Z",
      "updatedAt": "2015-10-17T21:27:42Z",
      "closedAt": "2015-10-17T21:27:42Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The sequence number is included in the AAD, but is implicit in the TLS header since it must always increase by one. It is explicit in DTLS.\n",
          "createdAt": "2015-10-17T21:27:42Z",
          "updatedAt": "2015-10-17T21:27:42Z"
        }
      ]
    },
    {
      "number": 300,
      "id": "MDU6SXNzdWUxMTE5ODU2MDU=",
      "title": "CELLOS: KDF",
      "url": "https://github.com/tlswg/tls13-spec/issues/300",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The order of argument is not clear. RFC5869 spefifies HKDF-Extract(salt, IKM) and HKDF-Expand(PRK,info,L) but not HKDF(a, b, c, d).\n\nSolution proposed: Specify the order of arguments for HKDF in order to avoid the ambiguity of the specification.\n",
      "createdAt": "2015-10-17T21:18:41Z",
      "updatedAt": "2015-10-17T21:26:50Z",
      "closedAt": "2015-10-17T21:26:50Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This section was extensively reworked and should now be clear.\n",
          "createdAt": "2015-10-17T21:26:50Z",
          "updatedAt": "2015-10-17T21:26:50Z"
        }
      ]
    },
    {
      "number": 301,
      "id": "MDU6SXNzdWUxMTE5ODU2Mzg=",
      "title": "CELLOS: full-handshake",
      "url": "https://github.com/tlswg/tls13-spec/issues/301",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "It is not clear which optional data is required when.\n\nSolution proposed: Add a matrix of the relations of optional data.\n",
      "createdAt": "2015-10-17T21:19:50Z",
      "updatedAt": "2015-12-01T21:31:56Z",
      "closedAt": "2015-12-01T21:31:56Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm going to put this on ice because hopefully it will become clear with forthcoming editorial update. I'd like to avoid yet more matrixes.\n",
          "createdAt": "2015-10-19T16:11:00Z",
          "updatedAt": "2015-10-19T16:11:00Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is clear enough in the current spec\n",
          "createdAt": "2015-12-01T21:31:56Z",
          "updatedAt": "2015-12-01T21:31:56Z"
        }
      ]
    },
    {
      "number": 302,
      "id": "MDU6SXNzdWUxMTE5ODU2NjM=",
      "title": "CELLOS: HelloRetryRequest",
      "url": "https://github.com/tlswg/tls13-spec/issues/302",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Seems not necessary.\n",
      "createdAt": "2015-10-17T21:20:32Z",
      "updatedAt": "2015-10-17T21:45:28Z",
      "closedAt": "2015-10-17T21:29:02Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It is definitely necessary because the client may be wrong about which groups the server supports. I'm closing this, but feel free to re-open if you have a more detailed explanation.\n",
          "createdAt": "2015-10-17T21:29:02Z",
          "updatedAt": "2015-10-17T21:29:02Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There is an alternative to HelloRetryRequest: require all clients offer keys for all of their supported groups. Probably not desired, thus the retry mechanism. Alternatively, make this a \"SHOULD\" or \"RECOMMENDED\" and have a clear \"unsupported_groups\" alert that MUST be returned the instant group negotiation fails, after which point the client then MUST send its full set of possible keys. This provides the same sort of mechanism, but with just the one simple signal instead of a new message (both unauthenticated).\n",
          "createdAt": "2015-10-17T21:42:52Z",
          "updatedAt": "2015-10-17T21:42:52Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't believe that either of these are good options, especially since we need\na mechanism like this in any case for DTLS anti-DoS\n\n@martinthomson, @beurdouche, Karthik, and I have worked out what we believe\nis a good answer for this entire class of issues which I'll be posting next week.\n",
          "createdAt": "2015-10-17T21:45:28Z",
          "updatedAt": "2015-10-17T21:45:28Z"
        }
      ]
    },
    {
      "number": 303,
      "id": "MDU6SXNzdWUxMTE5ODU2OTI=",
      "title": "CELLOS: SharedSecret",
      "url": "https://github.com/tlswg/tls13-spec/issues/303",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Why the padding formats of DSA and ECDSA are different?\n\nSolution proposed: It is better to add the backgrounds of each padding.\n",
      "createdAt": "2015-10-17T21:21:19Z",
      "updatedAt": "2015-10-17T21:25:13Z",
      "closedAt": "2015-10-17T21:25:13Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We have removed DSA.\n",
          "createdAt": "2015-10-17T21:25:13Z",
          "updatedAt": "2015-10-17T21:25:13Z"
        }
      ]
    },
    {
      "number": 304,
      "id": "MDU6SXNzdWUxMTE5ODU3MTM=",
      "title": "CELLOS: ClientAuthentication",
      "url": "https://github.com/tlswg/tls13-spec/issues/304",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Client authentication is important in IoT applications.\n",
      "createdAt": "2015-10-17T21:21:43Z",
      "updatedAt": "2015-10-17T21:26:31Z",
      "closedAt": "2015-10-17T21:26:31Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We are retaining client auth, so I think this is addressed.\n",
          "createdAt": "2015-10-17T21:26:31Z",
          "updatedAt": "2015-10-17T21:26:31Z"
        }
      ]
    },
    {
      "number": 305,
      "id": "MDU6SXNzdWUxMTE5ODU3ODU=",
      "title": "CELLOS: CipherSuite",
      "url": "https://github.com/tlswg/tls13-spec/issues/305",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready",
        "b-a"
      ],
      "body": "The list of cipher suite does not consider **_-PSK-**_.\n\nSolution proposed: Add (EC)DHE-PSK-**\\* to the list.\n",
      "createdAt": "2015-10-17T21:23:52Z",
      "updatedAt": "2016-03-21T18:03:00Z",
      "closedAt": "2016-03-21T18:03:00Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree. PR welcome.\n",
          "createdAt": "2015-10-19T16:10:16Z",
          "updatedAt": "2015-10-19T16:10:16Z"
        },
        {
          "author": "shmatsuo",
          "authorAssociation": "NONE",
          "body": "As described in A.4., \"cipher suite name\" is the string \nTLS_KEA_SIGN_WITH_CIPHER_HASH\nwhere\n KEA            The key exchange algorithm\n SIGN           The signature algorithm\n CIPHER         The symmetric cipher used for record protection\n HASH           The hash algorithm used with HKDF.\nAnd RSA-PSS and ECDSA are listed as the signature algorithm.\n\nOn the other hand, \"PSK cipher suites\" uses PSK to establish \na connection authenticated by that key, as noted in 6.2.3.\nThis means that SIGN algorithm is not RSA nor ECDSA in PSK.\nTherefore I propose to add cipher suites \"TLS_(EC)DHE_PSK_***\" \nto the list.\n",
          "createdAt": "2015-11-01T12:09:39Z",
          "updatedAt": "2015-11-01T12:09:39Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This should now be fixed due to a separate PR from @davegarrett \n",
          "createdAt": "2016-03-21T18:03:00Z",
          "updatedAt": "2016-03-21T18:03:00Z"
        }
      ]
    },
    {
      "number": 306,
      "id": "MDU6SXNzdWUxMTE5ODU4NTc=",
      "title": "CELLOS: O-RTT 1",
      "url": "https://github.com/tlswg/tls13-spec/issues/306",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It is not clear whether the server can send [ApplicationData] before receiving client {Finished}. (This is prohibited only if client authentication is used.) If this is not allowed, the client can receive [Application Data] only after sending {Finished} and needs two rounds for receiving the server's data. In this case \"0-RTT\" has no advantage over the full-handshake with respect to latency because in the full-handshake the client can receive the server's data in two rounds by sending the client's {Finished} and [ApplicatiomData] at the same time.\n\nSolution proposed: Explicitly allow the server to send application data before receiving Client Finished. Also consider to allow this in case of client authentication is used.\n",
      "createdAt": "2015-10-17T21:26:01Z",
      "updatedAt": "2015-10-19T16:11:28Z",
      "closedAt": "2015-10-19T16:11:28Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This will be fixed in a forthcoming version.\n",
          "createdAt": "2015-10-17T21:28:26Z",
          "updatedAt": "2015-10-17T21:28:26Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing, because redundant with upcoming changes.\n",
          "createdAt": "2015-10-19T16:11:28Z",
          "updatedAt": "2015-10-19T16:11:28Z"
        }
      ]
    },
    {
      "number": 307,
      "id": "MDU6SXNzdWUxMTE5ODU5MTE=",
      "title": "CELLOS: O-RTT 2",
      "url": "https://github.com/tlswg/tls13-spec/issues/307",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The action of the client when the {CertificateRequest*} is sent is not defined.\n\nSolution proposed: Improve the protocol in order to be coherent to this optional case, or remove {CertificateRequest*}.\n",
      "createdAt": "2015-10-17T21:26:56Z",
      "updatedAt": "2015-10-19T16:11:40Z",
      "closedAt": "2015-10-19T16:11:40Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This will be fixed in a forthcoming version. The answer is most likely that you treat it exactly like 1-RTT.\n",
          "createdAt": "2015-10-17T21:29:30Z",
          "updatedAt": "2015-10-17T21:29:30Z"
        }
      ]
    },
    {
      "number": 308,
      "id": "MDU6SXNzdWUxMTE5ODYwMzI=",
      "title": "CELLOS: 0-RTT 3",
      "url": "https://github.com/tlswg/tls13-spec/issues/308",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It is not clear how we can avoid replay attack in 0-RTT.\n\nSolution proposed:\n\nAdd how we can avoid replay in 0-RTT:\n- Check freshness of the random value in ClientHello, or\n- Verify client {Finished}, which contains server's random in ServerHello.\n",
      "createdAt": "2015-10-17T21:28:02Z",
      "updatedAt": "2015-10-17T21:30:01Z",
      "closedAt": "2015-10-17T21:30:01Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This doesn't work without global state. See:\nhttp://www.ietf.org/mail-archive/web/tls/current/msg15594.html\n",
          "createdAt": "2015-10-17T21:30:01Z",
          "updatedAt": "2015-10-17T21:30:01Z"
        }
      ]
    },
    {
      "number": 309,
      "id": "MDU6SXNzdWUxMTE5ODYwOTI=",
      "title": "CELLOS: Resumption & PSK 1",
      "url": "https://github.com/tlswg/tls13-spec/issues/309",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "b-a"
      ],
      "body": "Note that the client supplies a ClientKeyShare to the server as well, which allows the server to decline resumption and fall back to a full handshake.\" Here PSK is ignored.\n\nSolution proposed: Replace this sentence by \"Note that the client supplies a ClientKeyShare to the server as well, which allows PSK + (EC)DHE or the server to decline resumption and fall back to a full handshake\"\n",
      "createdAt": "2015-10-17T21:29:44Z",
      "updatedAt": "2016-03-21T18:39:42Z",
      "closedAt": "2016-03-21T18:39:42Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PR welcome.\n",
          "createdAt": "2015-10-17T21:30:21Z",
          "updatedAt": "2015-10-17T21:30:21Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Already fixed.\n",
          "createdAt": "2016-03-21T18:39:42Z",
          "updatedAt": "2016-03-21T18:39:42Z"
        }
      ]
    },
    {
      "number": 310,
      "id": "MDU6SXNzdWUxMTE5ODYxMjU=",
      "title": "CELLOS: Resumption & PSK 2",
      "url": "https://github.com/tlswg/tls13-spec/issues/310",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Whether or not to reset the sequence number in this protocol is not mentioned.\n\nSolution proposed: Clarify it as it is mentioned in 0-RTT.\n",
      "createdAt": "2015-10-17T21:30:36Z",
      "updatedAt": "2015-10-17T21:34:25Z",
      "closedAt": "2015-10-17T21:34:25Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The sequence number always starts at 0 at the beginning of a handshake. I think this is clear enough.\n",
          "createdAt": "2015-10-17T21:34:25Z",
          "updatedAt": "2015-10-17T21:34:25Z"
        }
      ]
    },
    {
      "number": 311,
      "id": "MDU6SXNzdWUxMTE5ODYzMjY=",
      "title": "Remove early_data content type",
      "url": "https://github.com/tlswg/tls13-spec/issues/311",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "The early_data type was introduced to allow easy differentiation\nof early handshake messages from later ones but now that we have\nencrypted content types, you need trial decryption anyway. I propose\nthat we simply revert to using the handshake type. They use different\nkeys and there is going to be an intervening Finished so there's no\nreal chance of confusion.\n\n@beurdouche \n",
      "createdAt": "2015-10-17T21:36:33Z",
      "updatedAt": "2015-12-01T17:14:48Z",
      "closedAt": "2015-12-01T17:14:48Z",
      "comments": []
    },
    {
      "number": 318,
      "id": "MDU6SXNzdWUxMTI2OTUxODU=",
      "title": "Remove sequence number from AAD",
      "url": "https://github.com/tlswg/tls13-spec/issues/318",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It's the nonce after all.\n",
      "createdAt": "2015-10-21T22:52:43Z",
      "updatedAt": "2015-10-29T07:14:31Z",
      "closedAt": "2015-10-29T07:14:31Z",
      "comments": []
    },
    {
      "number": 323,
      "id": "MDU6SXNzdWUxMTQxMjI4MTI=",
      "title": "Is EncryptedExtensions optional or mandatory?",
      "url": "https://github.com/tlswg/tls13-spec/issues/323",
      "state": "CLOSED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 6.2 Figure 1 and others show `EncryptedExtensions` messages as non-optional. Section 6.3.3 however states that:\n\n> If this message is sent, it MUST be sent immediately after the ServerHello message.\n\nIt seems that the message could indeed be omitted if the server doesn't need to respond with any extensions, but I may be wrong here. We should fix one of the two places though as they contradict each other.\n",
      "createdAt": "2015-10-29T18:58:42Z",
      "updatedAt": "2015-10-29T22:34:29Z",
      "closedAt": "2015-10-29T22:34:29Z",
      "comments": []
    },
    {
      "number": 329,
      "id": "MDU6SXNzdWUxMTQ3NDQ2NDM=",
      "title": "Individual key derivation",
      "url": "https://github.com/tlswg/tls13-spec/issues/329",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "We should generate each traffic key on its own\n",
      "createdAt": "2015-11-03T05:25:40Z",
      "updatedAt": "2015-11-21T22:59:58Z",
      "closedAt": "2015-11-21T22:59:58Z",
      "comments": []
    },
    {
      "number": 330,
      "id": "MDU6SXNzdWUxMTQ5NDM1Nzc=",
      "title": "Reorder hkdf-expand inputs to put label before context",
      "url": "https://github.com/tlswg/tls13-spec/issues/330",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "Just a little hygiene.  This matches the order and puts all the fixed fields first.\n",
      "createdAt": "2015-11-04T00:43:53Z",
      "updatedAt": "2015-11-10T02:51:19Z",
      "closedAt": "2015-11-10T02:51:19Z",
      "comments": []
    },
    {
      "number": 338,
      "id": "MDU6SXNzdWUxMTU0NDAxMTU=",
      "title": "HKDF generates invalid master secret length?",
      "url": "https://github.com/tlswg/tls13-spec/issues/338",
      "state": "CLOSED",
      "author": "zakar",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "https://tlswg.github.io/tls13-spec/#key-schedule says master secret is generated by\n\nmaster_secret = HKDF-Extract(mSS, mES)\n\nThe master secret length depends on the underlying hash function. So if the the hash function's output length is not 48bytes, then master secret is not 48bytes. It's conflicted with the master secret length specifiied in SecurityParameters (https://tlswg.github.io/tls13-spec/#connection-states)\n\nAnd https://tlswg.github.io/tls13-spec/#cipher-suites says HKDF should used with hash function specified in ciphersuite. So if the a ciphersuite use sha256, the master secret won't be 48bytes.\n",
      "createdAt": "2015-11-06T05:50:57Z",
      "updatedAt": "2016-07-07T22:50:07Z",
      "closedAt": "2016-07-07T22:50:07Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The master secret isn't going to be 48 bytes any more. I just haven't gotten to editing that section of the spec. Thanks.\n",
          "createdAt": "2015-11-06T08:22:12Z",
          "updatedAt": "2015-11-06T08:22:12Z"
        },
        {
          "author": "zakar",
          "authorAssociation": "NONE",
          "body": "So is there any length restriction for master secret? It's totally depends on the length of the underlying hash function?\n",
          "createdAt": "2015-11-09T09:32:21Z",
          "updatedAt": "2015-11-09T09:32:21Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Pretty much. Though I would expect us not to standardize hash functions\nwith much shorter lengths.\n\nOn Mon, Nov 9, 2015 at 1:32 AM, zaker notifications@github.com wrote:\n\n> So is there any length restriction for master secret? It's totally depends\n> on the length of the underlying hash function?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/tlswg/tls13-spec/issues/338#issuecomment-155008723.\n",
          "createdAt": "2015-11-09T11:25:29Z",
          "updatedAt": "2015-11-09T11:25:29Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed by removing SecurityParamerts\n",
          "createdAt": "2016-07-07T22:50:07Z",
          "updatedAt": "2016-07-07T22:50:07Z"
        }
      ]
    },
    {
      "number": 340,
      "id": "MDU6SXNzdWUxMTU5NzUwNDQ=",
      "title": "Editorial: used of early_handshake in 6.3.2.5. Early Data Indication ",
      "url": "https://github.com/tlswg/tls13-spec/issues/340",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending",
        "b-a"
      ],
      "body": "The early data indication parameters are defined as client_authentication(1), early_data(2), and client_authentication_and_data(3). A few paragraph after that, some text refers to them by what was probably an old name: \n   If TLS client authentication is being used, then either \"early_handshake\" or \"early_handshake_and_data\" MUST be indicated in order to send the client authentication data on the first flight. \nEasy fix...\n",
      "createdAt": "2015-11-09T21:50:10Z",
      "updatedAt": "2016-03-21T19:35:50Z",
      "closedAt": "2016-03-21T19:35:50Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See https://github.com/tlswg/tls13-spec/pull/373\n",
          "createdAt": "2015-12-15T22:31:19Z",
          "updatedAt": "2015-12-15T22:31:19Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This should now be fixed.\n",
          "createdAt": "2016-03-21T19:35:50Z",
          "updatedAt": "2016-03-21T19:35:50Z"
        }
      ]
    },
    {
      "number": 343,
      "id": "MDU6SXNzdWUxMTcxODM5NzI=",
      "title": "Add a privacy considerations section describing linkage values",
      "url": "https://github.com/tlswg/tls13-spec/issues/343",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "help wanted"
      ],
      "body": "1. Tickets\n2. ServerConfiguration values\n3. Cookies\n",
      "createdAt": "2015-11-16T18:03:48Z",
      "updatedAt": "2017-04-27T13:05:51Z",
      "closedAt": "2017-04-27T13:05:51Z",
      "comments": [
        {
          "author": "jsalowey",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is it appropriate to consider the similar issue of fingerprinting an implementation? \n",
          "createdAt": "2015-11-22T16:36:37Z",
          "updatedAt": "2015-11-22T16:36:37Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@dkg you were going to provide?\n",
          "createdAt": "2016-05-16T12:53:57Z",
          "updatedAt": "2016-05-16T12:53:57Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@dkg you promised to do this back in B-A.\n",
          "createdAt": "2016-07-08T01:00:24Z",
          "updatedAt": "2016-07-08T01:00:24Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is actually adequately covered by the current text.",
          "createdAt": "2017-04-27T13:05:51Z",
          "updatedAt": "2017-04-27T13:05:51Z"
        }
      ]
    },
    {
      "number": 348,
      "id": "MDU6SXNzdWUxMTg0MzQ3ODA=",
      "title": "32bit (seconds since UNIX epoch): expiration_date in ServerConfiguration",
      "url": "https://github.com/tlswg/tls13-spec/issues/348",
      "state": "CLOSED",
      "author": "hannesm",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "As far as I can see, the only timestamp used is `expiration_date` in the ServerConfiguration (apart from X.509 validity checks which require synchronised clocks).  This is defined as seconds since UNIX epoch, and will overflow sooner than later.  Maybe either use a relative amount of seconds here, or expand to a 64bit value!?\n\nI suggest to use 32bit network byte order (same as `ticket_lifetime_hint`), which value are the seconds how long this configuration is valid, and thus may be cached for at most this amount of seconds.\n",
      "createdAt": "2015-11-23T17:48:34Z",
      "updatedAt": "2016-05-12T13:39:18Z",
      "closedAt": "2016-05-12T13:39:18Z",
      "comments": [
        {
          "author": "songdongsheng",
          "authorAssociation": "NONE",
          "body": "We don't expect that TLS 1.3 can live to year 2106.\n",
          "createdAt": "2015-11-24T02:17:45Z",
          "updatedAt": "2015-11-24T02:17:45Z"
        },
        {
          "author": "hannesm",
          "authorAssociation": "CONTRIBUTOR",
          "body": "discussion on the mailing list https://www.ietf.org/mail-archive/web/tls/current/msg18403.html\n",
          "createdAt": "2016-02-03T10:31:53Z",
          "updatedAt": "2016-02-03T10:31:53Z"
        }
      ]
    },
    {
      "number": 350,
      "id": "MDU6SXNzdWUxMTk2MTExNzQ=",
      "title": "Re-add 0-RTT client encrypted extensions. ",
      "url": "https://github.com/tlswg/tls13-spec/issues/350",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I pulled out 0-RTT client encrypted extensions because they were ill-specified, so they won't be in the doc as of PR#316. However, we do have a use for EncryptedExtensions from the client, so we should re-add. This issue reminds me not to forget.\n",
      "createdAt": "2015-12-01T00:09:36Z",
      "updatedAt": "2016-05-16T12:52:37Z",
      "closedAt": "2016-05-16T12:52:37Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Moving to post-BA\n",
          "createdAt": "2016-03-21T20:18:19Z",
          "updatedAt": "2016-03-21T20:18:19Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done\n",
          "createdAt": "2016-05-16T12:52:37Z",
          "updatedAt": "2016-05-16T12:52:37Z"
        }
      ]
    },
    {
      "number": 351,
      "id": "MDU6SXNzdWUxMTk2MTE1NTc=",
      "title": "Hash 0-RTT client handshake messages?",
      "url": "https://github.com/tlswg/tls13-spec/issues/351",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We've gone back and forth on whether to hash the client's 0-RTT handshake\nmessages (other than ClientHello). The argument for is that hashing everything\nis arguably easier to reason about if the server uses those extensions to make\ndecisions. This is more compelling if we have EncryptedExtensions\n\nThe argument against is:\n1. It is better to have the client's 0-RTT data just separate conceptually\nentirely from the 1-RTT data.\n2. This makes the accepted and rejected 0-RTT cases more similar.\n3. We don't need to decide where in the transcript the 0-RTT client data\nfalls.\n4. The server doesn't need to wait before it can start sending encrypted\ndata of its own on its first flight but can send immediately on receiving\nthe ClientHello.\n",
      "createdAt": "2015-12-01T00:13:10Z",
      "updatedAt": "2016-05-12T13:39:18Z",
      "closedAt": "2016-05-12T13:39:18Z",
      "comments": []
    },
    {
      "number": 353,
      "id": "MDU6SXNzdWUxMTk2Mzk0ODM=",
      "title": "Replace forward secure with forward secret throughout",
      "url": "https://github.com/tlswg/tls13-spec/issues/353",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per discussion on list.\n",
      "createdAt": "2015-12-01T04:21:53Z",
      "updatedAt": "2015-12-01T17:32:59Z",
      "closedAt": "2015-12-01T17:32:59Z",
      "comments": []
    },
    {
      "number": 357,
      "id": "MDU6SXNzdWUxMjAxMzE2MzM=",
      "title": "Traffic key calculation efficiency",
      "url": "https://github.com/tlswg/tls13-spec/issues/357",
      "state": "CLOSED",
      "author": "zakar",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The newest TLS1.3 specification has changed the traffic key calculation:\n\nkey = HKDF-Expand-Label(Secret,\n                           phase + \", \" + purpose,\n                           handshake_context,\n                           key_length)\n\nThere are three phases (Key Exchange, Server Parameters, Authentication) and 4 keys ( client/server key/iv). So there would be 12 HKDF-Expand-Label operation per handshake. I wonder this may have impact on pure PSK ciphersuite whose bottleneck is hash calculation.\nIs there any big safety consideration to change it?\n",
      "createdAt": "2015-12-03T09:56:32Z",
      "updatedAt": "2016-03-11T08:10:35Z",
      "closedAt": "2016-03-11T08:10:35Z",
      "comments": []
    },
    {
      "number": 358,
      "id": "MDU6SXNzdWUxMjAyNzEyNjU=",
      "title": "fix Bleichenbacher attack reference",
      "url": "https://github.com/tlswg/tls13-spec/issues/358",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, the \"FI06\" reference links to:\nhttp://www.imc.org/ietf-openpgp/mail-archive/msg14307.html\nLink text is:\n\"Bleichenbacher's RSA signature forgery based on implementation error\"\n\nThis is now 404. It should be replaced with a working link, preferably one other than a mailing list archive.\n\nAlso, it's missing the leading quotation mark, which can get fixed at the same time.\n",
      "createdAt": "2015-12-03T21:13:17Z",
      "updatedAt": "2015-12-15T22:30:43Z",
      "closedAt": "2015-12-15T22:30:43Z",
      "comments": [
        {
          "author": "satokan",
          "authorAssociation": "NONE",
          "body": "Here is the new link;\nhttps://www.ietf.org/mail-archive/web/openpgp/current/msg00999.html\n",
          "createdAt": "2015-12-06T16:37:02Z",
          "updatedAt": "2015-12-06T16:37:02Z"
        }
      ]
    },
    {
      "number": 362,
      "id": "MDU6SXNzdWUxMjE1NDMwMDg=",
      "title": "Encrypted extensions is mandatory",
      "url": "https://github.com/tlswg/tls13-spec/issues/362",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Update draft\n",
      "createdAt": "2015-12-10T17:56:11Z",
      "updatedAt": "2015-12-15T22:29:20Z",
      "closedAt": "2015-12-15T22:29:20Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed in editor's copy\n",
          "createdAt": "2015-12-15T22:29:20Z",
          "updatedAt": "2015-12-15T22:29:20Z"
        }
      ]
    },
    {
      "number": 371,
      "id": "MDU6SXNzdWUxMjIzMTIyNjM=",
      "title": "Clarify position of certificate status",
      "url": "https://github.com/tlswg/tls13-spec/issues/371",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-12-15T16:33:40Z",
      "updatedAt": "2016-05-12T13:39:18Z",
      "closedAt": "2016-05-12T13:39:18Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I suggest we instead make this part of Certificate. I will provide a PR.\n",
          "createdAt": "2016-03-21T19:47:39Z",
          "updatedAt": "2016-03-21T19:47:39Z"
        }
      ]
    },
    {
      "number": 377,
      "id": "MDU6SXNzdWUxMjI2Mzc3Nzc=",
      "title": "clarify ECDHE AES GCM Standards Track promotion",
      "url": "https://github.com/tlswg/tls13-spec/issues/377",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://tlswg.github.io/tls13-spec/#cipher-suites\n\n\"Note: ECDHE AES GCM was not yet standards track prior to the publication of this specification. This document promotes it to Standards Track.\"\n\nWhat precisely is \"it\" here: all of RFC5289 or just the ECDHE AES GCM suites?\n",
      "createdAt": "2015-12-17T00:51:53Z",
      "updatedAt": "2016-03-21T17:05:38Z",
      "closedAt": "2016-03-21T17:05:38Z",
      "comments": []
    },
    {
      "number": 378,
      "id": "MDU6SXNzdWUxMjI3NTM5NTc=",
      "title": "KAT values for key derivation",
      "url": "https://github.com/tlswg/tls13-spec/issues/378",
      "state": "CLOSED",
      "author": "jfigus",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "help wanted"
      ],
      "body": "It would be good to provide an appendix that included KAT values for the key derivation logic.  These KAT values should include the intermediate values for xSS, xES, mSS, mES, master_secret, etc.  \n",
      "createdAt": "2015-12-17T15:09:14Z",
      "updatedAt": "2016-10-17T14:22:24Z",
      "closedAt": "2016-10-17T14:22:24Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this would be useful, but actually I think we should provide a whole handshake transcript.\n\nI wonder if this should be a separate draft.\n",
          "createdAt": "2015-12-17T15:25:30Z",
          "updatedAt": "2015-12-17T15:25:30Z"
        },
        {
          "author": "jfigus",
          "authorAssociation": "NONE",
          "body": "That would be useful too.  But there are so many variations in the handshake messages (e.g. extension values), it may be a lot to sift through.  The KDF is fairly self-contained and is an area that typically is harder to troubleshoot during the implementation process, compared to the handshake messages that can be easily sniffed off the wire.  For instance, if the key_block is miscalculated, having the intermediate values for xSS, mSS, etc. is very helpful to determine which phase of the KDF has failed.\n",
          "createdAt": "2015-12-17T15:31:38Z",
          "updatedAt": "2015-12-17T15:31:38Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, what I meant was to provide a full transcript plus the intermediate values.\n",
          "createdAt": "2015-12-17T15:42:57Z",
          "updatedAt": "2015-12-17T15:42:57Z"
        },
        {
          "author": "hannesm",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We're [nqsb.io](https://nqsb.io) (@pqwy and @hannesm) are working on an automated conformance checker exploring the state space for TLS 1.3 (which we submitted as a proposal to TRON, where we will also present working code and tools, currently work in progress).  Likely, it will also be able to dump the full handscript transcript including intermediate states.  We will hopefully resolve discrepancies of the interpretation of the RFC between our model/implementation and others early.  (This can be an addition to some statically written handshake transcripts.)\n",
          "createdAt": "2015-12-17T16:05:49Z",
          "updatedAt": "2015-12-17T16:05:49Z"
        },
        {
          "author": "jfigus",
          "authorAssociation": "NONE",
          "body": "Here's my first attempt at implementing the KDF (https://github.com/jfigus/s2n).  I realize this section of the draft is changing and these KAT values may not be useful yet.  But if anyone is interested...\n\nHandshake type:  1-RTT\nHandshake hash:  SHA-256\n\nSS/ES: \n    4b d0 af e6 49 8b c0 ec 66 34 5b 8f 01 24 78 90 \n    ae cd 83 11 ac 5e a3 30 dd c0 d5 6b a1 4f 60 08 \nhandshake_hash: \n    18 87 12 7f fa 7b 29 02 7d 08 68 06 75 65 b0 82 \n    47 2d 96 83 c3 4a a1 92 60 20 1c 20 82 54 51 55 \nxSS: \n    79 32 3e 23 93 e0 79 39 05 2d 36 b7 52 6b 6f 2d \n    f0 87 e5 03 57 ba c9 32 e5 08 ec 16 39 9e de 9d \nmSS: \n    86 d3 89 1a 54 93 c7 a7 45 09 ff f4 42 ee 32 21 \n    eb 92 bd 11 7d 20 c2 f2 e2 60 aa 0d ca c8 b8 a4 \nmSS: \n    e1 f7 18 33 9d e3 eb 32 15 64 03 37 da 95 29 3d \n    03 c0 41 91 2f a9 61 4d ad f4 8b 20 a3 1b 20 9f \nmaster_secret: \n    e1 86 8f 0e 17 86 80 00 ee d6 34 c1 65 2e 08 1e \n    f2 01 78 e5 29 0d 48 36 c3 c3 f1 bc 02 ca 28 c3 \nfinished_secret: \n    86 02 cf 88 65 d0 de 62 de 3e 3c 55 e0 41 20 85 \n    1b 94 02 97 41 41 d2 bd de 4f 99 91 f5 28 3c f5 \napplication_keyblock: \n    8a 18 35 42 fe c2 a5 7b 47 4d 63 52 a7 a9 b5 71 \n    9c df a2 7d 68 8a 28 80 ab ef 59 cc 3b bb ee 2e \n    2f cc 75 08 c7 61 6d f4 b6 cb 6b da 64 cf a3 c7 \n    c0 ea 31 56 dd db 9b fc e8 76 01 87 ef db 85 3b \n    33 87 73 b5 b8 0c 33 56 be 92 87 a8 e8 b6 b5 80 \n    2e 8a af 9f ff 17 60 69 51 6c d9 65 a1 f2 96 3e \n    e5 40 82 f9 21 d1 b3 ff 1d fe 61 c0 7e 76 d0 c6 \n    e8 48 ab 2f 7b 29 ef 6c 41 fd 5e 32 26 c5 39 49 \n",
          "createdAt": "2015-12-22T16:24:42Z",
          "updatedAt": "2015-12-22T16:24:42Z"
        },
        {
          "author": "hannesm",
          "authorAssociation": "CONTRIBUTOR",
          "body": "while I get the same for `xSS` and `xES`, my derivation differs in `mSS` already.  input to `HKDF.expand` (which works with RFC5869 tests) is:\n\n```\nHkdfLabel:\n00 20 1f 54 4c 53 20 31 2e 33 2c 20 65 78 70 61\n6e 64 65 64 20 73 74 61 74 69 63 20 73 65 63 72\n65 74 20 18 87 12 7f fa 7b 29 02 7d 08 68 06 75\n65 b0 82 47 2d 96 83 c3 4a a1 92 60 20 1c 20 82\n54 51 55\n```\n\n```\nmss:\nf8 31 e3 2f 71 79 e4 9f 81 be 3c 6a 8e a9 3f a5\n96 a4 e1 fc 0e d9 2c e6 72 ec cd 75 17 c4 ec c2\n```\n",
          "createdAt": "2016-01-12T18:38:14Z",
          "updatedAt": "2016-01-12T18:38:14Z"
        },
        {
          "author": "jfigus",
          "authorAssociation": "NONE",
          "body": "Are you implementing to revision 11 of the draft?  Revision 10 was still the latest when I posted these KAT values.  It looks like HkdfLabel is now defined different in revision 11.  The label now comes before the hash value in the byte stream.\n\nThe first two octets of your HkdfLabel are 0020, which is the length of HkdfLabel.  This is 32 bytes in your case, but you've provided 67 bytes of output for HkdfLabel.  You may want to take a closer look at this.\n\nThe hex stream for \"expanded static secret\" is:\n65 78 70 61 6e 64 65 64 20 73 74 61 74 69 63 20 73 65 63 72 65 74\nwhich appears to start at the 13th octet in your HkdfLabel.  Shouldn't this start at the 4th octet?\n",
          "createdAt": "2016-01-12T19:25:35Z",
          "updatedAt": "2016-01-12T19:25:35Z"
        },
        {
          "author": "hannesm",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(ups, replied directly to john). yes, I'm working on draft-11\n- length: from the draft `HkdfLabel.length is Length` -- where `Length` is an argument (`L`, the digest size of the hash function, in this case 32 bytes) -- is this supposed to be the length of the `HkdfLabel` struct?  It should be clarified.\n- expanded static secret: `HkdfLabel.label is \"TLS 1.3, \" + Label` -- I read this as the label in `HkdfLabel` should then be `TLS 1.3, expanded static secret`\n",
          "createdAt": "2016-01-13T11:20:16Z",
          "updatedAt": "2016-01-13T11:20:16Z"
        },
        {
          "author": "jfigus",
          "authorAssociation": "NONE",
          "body": "Yes, I missed the \"TLS 1.3, \" prefix to the label.  Good catch.  \n\nI'm still confused on the HkdfLabel.length.  The spec does say \"HkdfLabel.length is Length\".  But the spec does not define \"Length\".  It does define \"L\" as the length of the hash function.  Are we to assume that \"L\" and \"Length\" are the same?  Given that HkdfLabel contains two opaque values, and an opaque value begins with the length, setting HkdfLabel.length to L seems redundant.  I was interpreting \"Length\" to be the length of the HkdfLabel, not L.\n",
          "createdAt": "2016-01-13T15:11:24Z",
          "updatedAt": "2016-01-13T15:11:24Z"
        },
        {
          "author": "jfigus",
          "authorAssociation": "NONE",
          "body": "Here are new values with the fixes you identified...\n\nhandshake_hash: \n\n```\n    18 87 12 7f fa 7b 29 02 7d 08 68 06 75 65 b0 82 \n    47 2d 96 83 c3 4a a1 92 60 20 1c 20 82 54 51 55 \n```\n\nSS/ES: \n\n```\n    4b d0 af e6 49 8b c0 ec 66 34 5b 8f 01 24 78 90 \n    ae cd 83 11 ac 5e a3 30 dd c0 d5 6b a1 4f 60 08 \n```\n\nxSS: \n\n```\n    79 32 3e 23 93 e0 79 39 05 2d 36 b7 52 6b 6f 2d \n    f0 87 e5 03 57 ba c9 32 e5 08 ec 16 39 9e de 9d \n```\n\nmss_HkdfLabel:\n\n```\n    00 43 1f 54 4c 53 20 31 2e 33 2c 20 65 78 70 61 \n    6e 64 65 64 20 73 74 61 74 69 63 20 73 65 63 72 \n    65 74 20 18 87 12 7f fa 7b 29 02 7d 08 68 06 75 \n    65 b0 82 47 2d 96 83 c3 4a a1 92 60 20 1c 20 82\n    54 51 55 \n```\n\nmSS: \n\n```\n    61 63 fb a8 12 98 64 af 36 ff 4c cc f0 0b 51 22 \n    f7 c9 36 67 34 f0 1d 19 d2 9f a8 19 a9 83 af da \n```\n\nmes_HkdfLabel: \n\n```\n    00 46 22 54 4c 53 20 31 2e 33 2c 20 65 78 70 61 \n    6e 64 65 64 20 65 70 68 65 6d 65 72 61 6c 20 73 \n    65 63 72 65 74 20 18 87 12 7f fa 7b 29 02 7d 08  \n    68 06 75 65 b0 82 47 2d 96 83 c3 4a a1 92 60 20 \n    1c 20 82 54 51 55 \n```\n\nmES: \n\n```\n    14 fc 5e 90 20 a4 0b 69 00 1b ce b8 64 91 b6 56 \n    e9 7c 44 c7 99 38 77 b8 5b ce af b9 1c 41 ef 70 \n```\n\nmaster_secret: \n\n```\n    d5 61 f3 b3 18 8e 6d d3 a0 9d b3 ee 11 a9 7a 08 \n    bf 83 d0 92 f6 27 92 10 5b 37 b0 14 d3 f6 da ce \n```\n\nfs_HkdfLabel: \n\n```\n    00 3c 18 54 4c 53 20 31 2e 33 2c 20 66 69 6e 69 \n    73 68 65 64 20 73 65 63 72 65 74 20 18 87 12 7f \n    fa 7b 29 02 7d 08 68 06 75 65 b0 82 47 2d 96 83 \n    c3 4a a1 92 60 20 1c 20 82 54 51 55 \n```\n\nfinished_secret: \n\n```\n    9c e6 9b 95 2e b8 3a 64 bf 7f 50 29 e7 6c b7 d8\n    4a 07 be cd 23 91 e3 c4 4c b8 be 2f 78 e8 d9 bf \n```\n\napp_HkdfLabel: \n\n```\n    00 4b 27 54 4c 53 20 31 2e 33 2c 20 61 70 70 6c\n    69 63 61 74 69 6f 6e 20 64 61 74 61 20 6b 65 79\n    20 65 78 70 61 6e 73 69 6f 6e 20 18 87 12 7f fa\n    7b 29 02 7d 08 68 06 75 65 b0 82 47 2d 96 83 c3\n    4a a1 92 60 20 1c 20 82 54 51 55 \n```\n\napplication_keyblock:\n\n```\n    a2 63 95 c4 fc a5 ae d8 e5 f5 c5 85 62 73 67 a4\n    b2 b1 e3 38 91 6e 97 15 75 7c c6 54 ca 10 ad 11\n    11 75 8a 4f c3 de 0a fb ba a8 59 85 0a fc f4 54\n    b6 e2 3c e8 05 fc fb c7 b0 18 fb 73 af 92 7b b4\n    43 f1 4c 94 54 9c e3 43 b9 32 58 bd 4b e2 e4 57\n    4e f2 4e e4 18 2e 4c 3b 81 5c 7a bf ea 2e 04 37\n    6e 8b db 90 ba af 43 3b 2f b3 79 60 d2 de ac 05\n    3e 41 3c 90 37 c6 bb af 05 aa 1f 54 08 17 14 55 \n```\n",
          "createdAt": "2016-01-13T16:34:48Z",
          "updatedAt": "2016-01-13T16:40:46Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Length is the length of the output key.\n",
          "createdAt": "2016-01-14T00:28:00Z",
          "updatedAt": "2016-01-14T00:28:00Z"
        },
        {
          "author": "jfigus",
          "authorAssociation": "NONE",
          "body": "OK, I had it wrong.  Here are the updated KAT values...\n\nhandshake_hash: \n\n```\n18 87 12 7f fa 7b 29 02 7d 08 68 06 75 65 b0 82\n47 2d 96 83 c3 4a a1 92 60 20 1c 20 82 54 51 55 \n```\n\nSS/ES: \n\n```\n4b d0 af e6 49 8b c0 ec 66 34 5b 8f 01 24 78 90\nae cd 83 11 ac 5e a3 30 dd c0 d5 6b a1 4f 60 08 \n```\n\nxSS: \n\n```\n79 32 3e 23 93 e0 79 39 05 2d 36 b7 52 6b 6f 2d\nf0 87 e5 03 57 ba c9 32 e5 08 ec 16 39 9e de 9d \n```\n\nHkdfLabel: \n\n```\n00 20 1f 54 4c 53 20 31 2e 33 2c 20 65 78 70 61 \n6e 64 65 64 20 73 74 61 74 69 63 20 73 65 63 72\n65 74 20 18 87 12 7f fa 7b 29 02 7d 08 68 06 75\n65 b0 82 47 2d 96 83 c3 4a a1 92 60 20 1c 20 82\n54 51 55 \n```\n\nmSS: \n\n```\nf8 31 e3 2f 71 79 e4 9f 81 be 3c 6a 8e a9 3f a5\n96 a4 e1 fc 0e d9 2c e6 72 ec cd 75 17 c4 ec c2\n```\n\nHkdfLabel: \n\n```\n00 20 22 54 4c 53 20 31 2e 33 2c 20 65 78 70 61\n6e 64 65 64 20 65 70 68 65 6d 65 72 61 6c 20 73\n65 63 72 65 74 20 18 87 12 7f fa 7b 29 02 7d 08\n68 06 75 65 b0 82 47 2d 96 83 c3 4a a1 92 60 20\n1c 20 82 54 51 55 \n```\n\nmES:\n\n```\ne7 55 7c 57 47 21 ce 01 53 7a d9 d6 37 5a a9 73\n1b 7e 8a 20 1d db 06 3f 98 70 ae 06 a0 e8 7b 67\n```\n\nmaster_secret: \n\n```\nfe 8a 3e 40 f7 00 4a ea 18 26 e0 57 53 c8 a4 cd \n55 fa d5 f0 38 92 58 f5 45 03 21 64 14 71 6c 4e \n```\n\nHkdfLabel: \n\n```\n00 20 18 54 4c 53 20 31 2e 33 2c 20 66 69 6e 69\n73 68 65 64 20 73 65 63 72 65 74 20 18 87 12 7f\nfa 7b 29 02 7d 08 68 06 75 65 b0 82 47 2d 96 83\nc3 4a a1 92 60 20 1c 20 82 54 51 55 \n```\n\nfinished_secret: \n\n```\n9b b0 9c 9f ca ea a2 86 11 86 f2 3e 41 d0 9c f6 \n26 63 02 54 b1 da 41 63 3c 42 02 c7 c9 70 9c 7b \n```\n\nHkdfLabel: \n\n```\n00 80 27 54 4c 53 20 31 2e 33 2c 20 61 70 70 6c\n69 63 61 74 69 6f 6e 20 64 61 74 61 20 6b 65 79\n20 65 78 70 61 6e 73 69 6f 6e 20 18 87 12 7f fa\n7b 29 02 7d 08 68 06 75 65 b0 82 47 2d 96 83 c3\n4a a1 92 60 20 1c 20 82 54 51 55 \n```\n\napplication_keyblock: \n\n```\n9e e5 64 ef f3 d1 43 00 17 66 3e 32 9d a6 8a 07\nb5 ea 4e c2 5b 21 af 56 a0 72 54 88 64 b3 c7 b9\ne7 eb 18 4c 37 9e 1e 14 4b 30 e6 ca f6 95 27 66\n19 6f 07 37 9b be 05 be 3e 7a 28 c5 73 ec 9c ea\n22 b1 bb 61 2d 3d 29 6c b7 55 0b 8a 06 90 d1 99\ne9 12 b4 5d 09 30 34 37 56 a4 f7 cb 4f e7 7c b1\nd6 86 c5 bd 23 84 fb cc c0 b4 f9 32 04 ca 0f ad\n91 49 94 68 ff 05 3c 47 00 4c 68 c5 6b 38 45 82\n```\n",
          "createdAt": "2016-01-14T13:13:44Z",
          "updatedAt": "2016-01-14T13:13:44Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Conclusion is that this should go into a new document. @martinthomson to write\n",
          "createdAt": "2016-10-17T14:22:24Z",
          "updatedAt": "2016-10-17T14:22:24Z"
        }
      ]
    },
    {
      "number": 389,
      "id": "MDU6SXNzdWUxMjM4ODMxMjU=",
      "title": "Clarify timing of client auth wrt application data ",
      "url": "https://github.com/tlswg/tls13-spec/issues/389",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It's technically possible for the server to start sending 1-RTT data\nbefore processing any of the server's 0-RTT handshake or application data.\nThis has always been true for application data in TLS, but the fact of 0-RTT\nmeans that the server may also be sending before having processed\nthe client's authentication data. We might forbid this, but note that the\npossibility of post-handshake client auth means that the client already\nmay be receiving data from the server without knowing whether it was\nunder the new or old authentication context.\n",
      "createdAt": "2015-12-25T14:13:26Z",
      "updatedAt": "2016-05-12T13:39:18Z",
      "closedAt": "2016-05-12T13:39:18Z",
      "comments": []
    },
    {
      "number": 400,
      "id": "MDU6SXNzdWUxMjcyMzI0MzQ=",
      "title": "Clarify which key to use for Finished (in full handshake)",
      "url": "https://github.com/tlswg/tls13-spec/issues/400",
      "state": "CLOSED",
      "author": "hannesm",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Table in section 6.3.4. specifies the BaseKey and Handshake context (needed for Finished computation), but only in 0-RTT, 1-RTT and post-handshake scenarios.  What should the BaseKey for the (Server and Client) Finished in a full handshake be? I assume the BaseKey to be the master secret, and the handshake context to be `ClientHello .. [Server] CertificateVerify` (for Server Finished), `ClientHello .. [Client] CertificateVerify` (or `Server Finished` in case of no client authentication) for Client Finished.  Is this correct?\n",
      "createdAt": "2016-01-18T14:05:53Z",
      "updatedAt": "2016-02-03T15:41:59Z",
      "closedAt": "2016-02-03T15:41:59Z",
      "comments": [
        {
          "author": "hannesm",
          "authorAssociation": "CONTRIBUTOR",
          "body": "closing this, since full handshake falls into the 1-RTT column.  sorry for my confusion\n",
          "createdAt": "2016-02-03T15:41:59Z",
          "updatedAt": "2016-02-03T15:41:59Z"
        }
      ]
    },
    {
      "number": 401,
      "id": "MDU6SXNzdWUxMjczOTE1MDU=",
      "title": "Improve ECC security, move to non NIST curves.",
      "url": "https://github.com/tlswg/tls13-spec/issues/401",
      "state": "CLOSED",
      "author": "fefafefa",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Dear TLS1.3 spec. staff.\n\nThere are a lot of curves that are well implemented and full documented, not like the NIST curves [https://safecurves.cr.yp.to/].\nPlease, consider to use, or at least support, non NIST curves.\n\nWe can improve the security of the web, using open and strong ECC in our communications!  :)\nCurve25519 [State: Mature.]\nEd448-Goldilocks  [State: Mature.]\nE-521 [State: New.]\n\nThanks for your time.\n\nMaking the web secure.\n\nBest regards.\n\nFefafefa.\n",
      "createdAt": "2016-01-19T08:33:36Z",
      "updatedAt": "2016-03-21T17:06:19Z",
      "closedAt": "2016-03-21T17:06:19Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://tools.ietf.org/html/draft-ietf-tls-tls13-11#page-51\n\n25519 & 448 are already listed in the current draft, for both ECDHE & signatures. X25519 (CRFG's document) is listed in the MTI section as a \"SHOULD\" support for key exchange alongside P-256 which is at \"MUST\" level support, due to its already widespread adoption.\n\nI suggest reading the current draft in full, as well as mailing list discussions on this topic. New proposals are better posted to the list with details, rather than here.\n",
          "createdAt": "2016-01-19T11:03:46Z",
          "updatedAt": "2016-01-19T11:03:46Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Already fixed.\n",
          "createdAt": "2016-03-21T17:06:19Z",
          "updatedAt": "2016-03-21T17:06:19Z"
        }
      ]
    },
    {
      "number": 407,
      "id": "MDU6SXNzdWUxMjg1OTQyMDM=",
      "title": "How to build the DigitallySigned for a CertificateVerify?",
      "url": "https://github.com/tlswg/tls13-spec/issues/407",
      "state": "CLOSED",
      "author": "hannesm",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "b-a"
      ],
      "body": "In the draft, we have\n\n```\n   struct {\n        digitally-signed struct {\n           opaque hashed_data[hash_length];\n        };\n   } CertificateVerify;\n```\n\n`Where hashed_data is the hash output described in Section 6.3.4, namely Hash(Handshake Context + Certificate).`\n\nwhere digitally-signed is defined:\n`The signature is a digital signature using those algorithms over the contents of the element. The contents themselves do not appear on the wire but are simply calculated. The length of the signature is specified by the signing algorithm and key.`\n`the contents of the element always start with 64 bytes of octet 32 in order to clear that chosen-prefix.`\n`Following that padding is a context string used to disambiguate signatures for different purposes. The context string will be specified whenever a digitally-signed element is used. A single 0 byte is appended to the context to act as a separator.`\n`Finally, the specified contents of the digitally-signed structure follow the 0 byte after the context string. (See the example at the end of this section.)`\n\nAssuming  the raw handshake messages (client_hello .. certificate) to be `packets`, and `+` being concatenation. Should it be:\n`Sign (Hash (64 * 0x20 + context + 0x0 + packets))`\nOR\n`Sign (Hash (64 * 0x20 + context + 0x0 + Hash(packets)))`\n\nThanks,\n\nhannes\n",
      "createdAt": "2016-01-25T17:31:16Z",
      "updatedAt": "2016-03-21T17:46:19Z",
      "closedAt": "2016-03-21T17:46:19Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I use the second.\n",
          "createdAt": "2016-01-25T17:48:56Z",
          "updatedAt": "2016-01-25T17:48:56Z"
        }
      ]
    },
    {
      "number": 410,
      "id": "MDU6SXNzdWUxMzE4Nzk4Nzk=",
      "title": "KeyShareEntry encoding",
      "url": "https://github.com/tlswg/tls13-spec/issues/410",
      "state": "CLOSED",
      "author": "hannesm",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To confirm my interpretation: a concrete KeyShare entry (ffdhe2048, share is 0xFFFF) would look like the following (hex encoded) `01 00 00 04 00 02 FF FF` (there is a 16 bit length field for the Key_exchange followed by another 16 bit length field for DH_y), one for secp256r1 (share 0xFF) would look like: `00 17 00 02 01 FF` (16 bit length followed by 8 bit length)?\n",
      "createdAt": "2016-02-06T17:43:39Z",
      "updatedAt": "2016-02-06T19:50:51Z",
      "closedAt": "2016-02-06T19:50:51Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I agree. \n",
          "createdAt": "2016-02-06T18:50:58Z",
          "updatedAt": "2016-02-06T18:50:58Z"
        },
        {
          "author": "hannesm",
          "authorAssociation": "CONTRIBUTOR",
          "body": "thx\n",
          "createdAt": "2016-02-06T19:50:51Z",
          "updatedAt": "2016-02-06T19:50:51Z"
        }
      ]
    },
    {
      "number": 411,
      "id": "MDU6SXNzdWUxMzIxNTQ2OTk=",
      "title": "Allow late tickets",
      "url": "https://github.com/tlswg/tls13-spec/issues/411",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It looks like the spec isn't clear about late tickets being allowed.\n",
      "createdAt": "2016-02-08T14:21:47Z",
      "updatedAt": "2016-03-21T17:08:36Z",
      "closedAt": "2016-03-21T17:08:36Z",
      "comments": []
    },
    {
      "number": 412,
      "id": "MDU6SXNzdWUxMzIxNzg4NzY=",
      "title": "1RTT transport keys include transcript through CertVerify, not ServerConfiguration",
      "url": "https://github.com/tlswg/tls13-spec/issues/412",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "b-a"
      ],
      "body": "This is a result of reordering some messages...\n\n   +----------------+-----------------------------------------+--------+\n   | Mode           | Handshake Context                       | Base   |\n   |                |                                         | Key    |\n   +----------------+-----------------------------------------+--------+\n   | 0-RTT          | ClientHello + ServerConfiguration +     | xSS    |\n   |                | Server Certificate + CertificateRequest |        |\n   |                | (where ServerConfiguration, etc. are    |        |\n   |                | from the previous handshake)            |        |\n   |                |                                         |        |\n   | 1-RTT (Server) | ClientHello ... ServerConfiguration     | master |     <--- problem here.\n   |                |                                         | secret |\n",
      "createdAt": "2016-02-08T15:50:20Z",
      "updatedAt": "2016-03-21T17:59:46Z",
      "closedAt": "2016-03-21T17:59:46Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is the wrong table. But there was a bug in the other table too.\n",
          "createdAt": "2016-03-21T17:59:46Z",
          "updatedAt": "2016-03-21T17:59:46Z"
        }
      ]
    },
    {
      "number": 413,
      "id": "MDU6SXNzdWUxMzIxNzkwMjg=",
      "title": "0-RTT Transport keys should include CertificateRequest, same as  input to CertificateVerify",
      "url": "https://github.com/tlswg/tls13-spec/issues/413",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Another Editorial error.\n",
      "createdAt": "2016-02-08T15:50:52Z",
      "updatedAt": "2016-05-12T13:39:18Z",
      "closedAt": "2016-05-12T13:39:18Z",
      "comments": []
    },
    {
      "number": 415,
      "id": "MDU6SXNzdWUxMzM4NTQ0MDQ=",
      "title": "Allow servers to send KnownGroups",
      "url": "https://github.com/tlswg/tls13-spec/issues/415",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "So that the clients can learn about what groups a server supports.\n\nThe idea here is to allow a client to offer P256 but then learn that\na server supports 25519 for next time without the server having to\nreject.\n",
      "createdAt": "2016-02-16T01:02:34Z",
      "updatedAt": "2016-05-02T19:46:03Z",
      "closedAt": "2016-05-02T19:46:03Z",
      "comments": []
    },
    {
      "number": 416,
      "id": "MDU6SXNzdWUxMzM4NTczMDA=",
      "title": "Define handshake_hashes",
      "url": "https://github.com/tlswg/tls13-spec/issues/416",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "b-a"
      ],
      "body": "Wan-Teh Chang writes:\n\nIn draft-11, handshake_hash (note the underscore) is used but not\nformally defined. The formal definition of handshake_hash, in the form\nof an equation, was deleted from Section 7.3.1. \"The Handshake Hash\"\nin draft-11. What remains is a definition in prose:\n\n   The handshake hash is defined as the hash of all handshake messages\n   sent or received, starting at ClientHello up to the present time,\n   with the exception of the client's 0-RTT authentication messages\n   (Certificate, CertificateVerify, and Finished) including the type and\n   length fields of the handshake messages.  This is the concatenation\n   the exchanged Handshake structures in plaintext form (even if they\n   were encrypted on the wire).\n\nA fix can be as simple as adding \"handshake_hash\" (note the\nunderscore) to that paragraph.\n\nAlternatively, we can partially bring back the definition in draft-10:\n\n```\n  handshake_hash = Hash(handshake_messages)\n```\n\n   handshake_messages\n      All handshake messages sent or received, starting at ClientHello\n      up to the present time, with the exception of the client's 0-RTT\n      authentication messages (Certificate, CertificateVerify, and Finished),\n      including the type and length fields of the handshake\n      messages.  This is the concatenation of all the exchanged\n      Handshake structures in plaintext form (even if they were\n      encrypted on the wire).\n",
      "createdAt": "2016-02-16T01:26:55Z",
      "updatedAt": "2016-03-21T20:24:27Z",
      "closedAt": "2016-03-21T20:24:27Z",
      "comments": []
    },
    {
      "number": 417,
      "id": "MDU6SXNzdWUxMzQ4OTQ4MTk=",
      "title": "Recommend reporting EMS in use",
      "url": "https://github.com/tlswg/tls13-spec/issues/417",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "b-a"
      ],
      "body": "",
      "createdAt": "2016-02-19T15:39:29Z",
      "updatedAt": "2016-03-21T18:35:21Z",
      "closedAt": "2016-03-21T18:35:21Z",
      "comments": []
    },
    {
      "number": 418,
      "id": "MDU6SXNzdWUxMzUxNjI1MTM=",
      "title": "Have the server provide the PSK index not the label?",
      "url": "https://github.com/tlswg/tls13-spec/issues/418",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Save space in ServerHello\n",
      "createdAt": "2016-02-21T05:17:09Z",
      "updatedAt": "2016-05-12T13:39:18Z",
      "closedAt": "2016-05-12T13:39:18Z",
      "comments": []
    },
    {
      "number": 419,
      "id": "MDU6SXNzdWUxMzUyNDUzMTE=",
      "title": "Should EncryptedExtensions have an inner list",
      "url": "https://github.com/tlswg/tls13-spec/issues/419",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The document is written as:\n      struct {\n          Extension extensions<0..2^16-1>;\n      } EncryptedExtensions;\n\nThis seems like it's a redundant length. Should we have it be\nExtension extensions[TLSHandshake.length]\n",
      "createdAt": "2016-02-21T19:09:37Z",
      "updatedAt": "2016-07-07T23:22:11Z",
      "closedAt": "2016-07-07T23:22:11Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben Thoughts?\n",
          "createdAt": "2016-07-07T22:52:01Z",
          "updatedAt": "2016-07-07T22:52:01Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "_shrug_ I don't hugely care either way.\n\nI probably lean towards leaving it as is? It's all of two bytes. I suppose consistency would demand it stay there. Every other struct in TLS is self-delimiting, even though it costs length prefixes. That is, one could write:\n\n```\nstruct {\n  ClientHello client_hellos<0..2^24-1>\n  ServerHello server_hellos<0..2^24-1>\n} HelloList\n```\n\neven though it doesn't actually make much sense.\n\nOne could equally easily omit the length in `ServerHello.extensions` without being ambiguous. It's just a let messier to spell out. But it seems weird to cut it out only in `EncryptedExtensions`.\n",
          "createdAt": "2016-07-07T23:07:15Z",
          "updatedAt": "2016-07-07T23:07:15Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sold, on the principle of avoiding unnecessary change.\n",
          "createdAt": "2016-07-07T23:22:11Z",
          "updatedAt": "2016-07-07T23:22:11Z"
        }
      ]
    },
    {
      "number": 420,
      "id": "MDU6SXNzdWUxMzUyNDczODM=",
      "title": "Remove client authentication from 0-RTT",
      "url": "https://github.com/tlswg/tls13-spec/issues/420",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See Karthik's talk at TRON.\n",
      "createdAt": "2016-02-21T19:29:17Z",
      "updatedAt": "2016-05-16T12:52:29Z",
      "closedAt": "2016-05-16T12:52:29Z",
      "comments": [
        {
          "author": "prosecco",
          "authorAssociation": "NONE",
          "body": "[TRON-ProScript.pdf](https://github.com/tlswg/tls13-spec/files/139937/TRON-ProScript.pdf)\n",
          "createdAt": "2016-02-22T00:04:14Z",
          "updatedAt": "2016-02-22T00:04:14Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done\n",
          "createdAt": "2016-05-16T12:52:29Z",
          "updatedAt": "2016-05-16T12:52:29Z"
        }
      ]
    },
    {
      "number": 421,
      "id": "MDU6SXNzdWUxMzUyNDc1MTk=",
      "title": "PSK and Certificates?",
      "url": "https://github.com/tlswg/tls13-spec/issues/421",
      "state": "CLOSED",
      "author": "wbl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This leaves an ugly taste in my mouth. Don't you know who has the PSK because it's a PSK?\n\nAlternatively we can kick all client auth to the after-handshake context to address issues Karthik pointed to in his talk and unify several different flows.\n",
      "createdAt": "2016-02-21T19:31:05Z",
      "updatedAt": "2016-08-31T00:58:37Z",
      "closedAt": "2016-08-31T00:58:37Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We removed PSK + Client Auth\n",
          "createdAt": "2016-08-31T00:58:37Z",
          "updatedAt": "2016-08-31T00:58:37Z"
        }
      ]
    },
    {
      "number": 422,
      "id": "MDU6SXNzdWUxMzU3MDAxODg=",
      "title": "Add encrypted NextRecordLength field to make next record's unencrypted header optional",
      "url": "https://github.com/tlswg/tls13-spec/issues/422",
      "state": "CLOSED",
      "author": "bford",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "The Record Padding section currently adds a 1-byte encrypted trailer with the new encrypted content type.  Extend this encrypted trailer to include a \"next record length\" field just before encrypted content type and after record payload, which:\n- If zero, indicates that the following TLS record starts with the usual 5-byte unencrypted header, with the record's length defined by that header.\n- If nonzero, indicates the length of the AEAD-encrypted portion of the next TLS record, and suppresses the next record's 5-byte unencrypted header entirely.\n\nThis change permits TLS implementations that care about traffic analysis protection to hide record lengths and boundaries, making one long record cryptographically indistinguishable from several short records for example.  TLS implementations that that don't care can just always set this field to 0 for simplicity and retain complete legacy compatibility with TLS 1.2's unencrypted record format.\n\nBackground on mailing list:\n- Proposal details: https://www.ietf.org/mail-archive/web/tls/current/msg18524.html\n- Implementation in NSS: https://www.ietf.org/mail-archive/web/tls/current/msg18710.html\n\nThanks.\n",
      "createdAt": "2016-02-23T10:40:35Z",
      "updatedAt": "2017-04-16T17:21:22Z",
      "closedAt": "2017-04-16T17:21:22Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Parking this because of minimal WG interest.\n",
          "createdAt": "2016-03-21T17:04:03Z",
          "updatedAt": "2016-03-21T17:04:03Z"
        }
      ]
    },
    {
      "number": 425,
      "id": "MDU6SXNzdWUxMzU4NzYyNDI=",
      "title": "Remove DH-based 0-RTT",
      "url": "https://github.com/tlswg/tls13-spec/issues/425",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just a suggestion.\n\nIt can be retrofitted easily.\n",
      "createdAt": "2016-02-23T21:46:57Z",
      "updatedAt": "2016-05-12T05:45:38Z",
      "closedAt": "2016-05-12T05:45:38Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Are we there yet?\n",
          "createdAt": "2016-05-12T01:16:46Z",
          "updatedAt": "2016-05-12T01:16:46Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, though there are a few remnants to clean up\n",
          "createdAt": "2016-05-12T05:45:38Z",
          "updatedAt": "2016-05-12T05:45:38Z"
        }
      ]
    },
    {
      "number": 427,
      "id": "MDU6SXNzdWUxMzk1NjM0MDA=",
      "title": "With resumption PSK, make the PSK label partly derived from the session hash",
      "url": "https://github.com/tlswg/tls13-spec/issues/427",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "E.g.,\nLabel = Session_Hash + NewSessionTicket.ticket.\n\nThis binds HS1 to HS2 more tightly.\n",
      "createdAt": "2016-03-09T12:28:57Z",
      "updatedAt": "2016-05-21T16:32:05Z",
      "closedAt": "2016-05-21T16:32:05Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems reasonable.  I think, however, that this assumes a ticket-based scheme; where the resumption MS is somehow encrypted into the ticket value.  Two servers doing stateful resumption could generate the same value for NewSessionTicket.ticket with non-trivial probability.\n",
          "createdAt": "2016-03-09T18:30:44Z",
          "updatedAt": "2016-03-09T18:30:44Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not following. Right now the resumptions of those handshakes will have psk_label the same. This will make them different.\n",
          "createdAt": "2016-03-09T18:41:10Z",
          "updatedAt": "2016-03-09T18:41:10Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I misunderstood your suggestion then.  \n\nAre you suggesting that the key derivation for HS2 include the ticket identifier (my initial assumption). or that the construction of the resumption master secret needs to take NewSessionTicket as input?  Because I don't see how the latter is compatible with having NewSessionTicket constructed at arbitrary times.\n\nBTW, we should try to align `psk_identity` with `NewSessionTicket.ticket`\n",
          "createdAt": "2016-03-09T19:08:56Z",
          "updatedAt": "2016-03-09T19:08:56Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Right now psk_identity == NewSessionTicket.ticket (at least that's what I think the spec says and that's how Karthik and I both implemented)\n\nWhat Karthik is suggesting is something like:\n1. NewSessionTicket.ticket == T, which is some value which allows the server to recover (RMS, SessionHash)\n2. psk_identity = Hash(SessionHash) || T [Hash()] may be unnecessary\n3. The server uses T to recover RMS, SessionHash (and probably verifies Hash(SessionHash))\n\nWe should discuss on-list. I just made the issue so I didn't forget.\n",
          "createdAt": "2016-03-09T19:20:36Z",
          "updatedAt": "2016-03-09T19:20:36Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, then yes.  I would recommend a new field rather than concatenating.  And maybe just export something unless transitively including the session hash is problematic for any reason.\n\nNow you can't forget the actual details.\n",
          "createdAt": "2016-03-09T19:24:32Z",
          "updatedAt": "2016-03-09T19:24:32Z"
        }
      ]
    },
    {
      "number": 430,
      "id": "MDU6SXNzdWUxNDI0MTY0MTU=",
      "title": "ChangeLog for -12",
      "url": "https://github.com/tlswg/tls13-spec/issues/430",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "b-a"
      ],
      "body": "Reminder to do a changelog before submitting -12\n",
      "createdAt": "2016-03-21T17:31:11Z",
      "updatedAt": "2016-03-21T20:33:59Z",
      "closedAt": "2016-03-21T20:33:59Z",
      "comments": []
    },
    {
      "number": 438,
      "id": "MDU6SXNzdWUxNDQ3Nzg5NTg=",
      "title": "0-RTT when the server rejects a ClientHello",
      "url": "https://github.com/tlswg/tls13-spec/issues/438",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There are two questions here:\n1. Can the client send 0-RTT data on its second attempt?\n2. What session hash does the client fold into the 0-RTT key derivation?\n\nAt time of opening, it appears that the discussion is gravitating toward saying no to the first option, which makes the second question moot.\n",
      "createdAt": "2016-03-31T03:28:38Z",
      "updatedAt": "2016-07-10T16:41:05Z",
      "closedAt": "2016-07-10T16:41:05Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed.\n",
          "createdAt": "2016-07-10T16:41:05Z",
          "updatedAt": "2016-07-10T16:41:05Z"
        }
      ]
    },
    {
      "number": 440,
      "id": "MDU6SXNzdWUxNDgwNjk2NjI=",
      "title": "PKCS1",
      "url": "https://github.com/tlswg/tls13-spec/issues/440",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> rsa_pkcs1_sha1 and dsa_sha1 SHOULD NOT be offered.\n\nThis implies that PKCS1 with SHA-256 is totally cool.  I don't think that has ever been the consensus position.\n",
      "createdAt": "2016-04-13T13:57:41Z",
      "updatedAt": "2016-08-17T21:42:34Z",
      "closedAt": "2016-08-17T21:42:34Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner you guys need to get us to consensus on allowing PKCS#1 in CertificateVErify\n",
          "createdAt": "2016-06-04T20:14:22Z",
          "updatedAt": "2016-06-04T20:14:22Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done\n",
          "createdAt": "2016-08-17T21:42:34Z",
          "updatedAt": "2016-08-17T21:42:34Z"
        }
      ]
    },
    {
      "number": 441,
      "id": "MDU6SXNzdWUxNDgwNjk5NjI=",
      "title": "Define what the SignatureScheme code points are",
      "url": "https://github.com/tlswg/tls13-spec/issues/441",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The definition is all \"etcetera\" currently.  We should not assume that readers can parse out the hash algorithm from the enum label.\n",
      "createdAt": "2016-04-13T13:58:36Z",
      "updatedAt": "2016-05-21T19:44:02Z",
      "closedAt": "2016-05-21T19:44:02Z",
      "comments": []
    },
    {
      "number": 443,
      "id": "MDU6SXNzdWUxNTEyNzM5Mzk=",
      "title": "Should it be possible to do 0-RTT with the server signing",
      "url": "https://github.com/tlswg/tls13-spec/issues/443",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked",
        "discuss:berlin"
      ],
      "body": "This would be nice to demonstrate key continuity. It's not entirely clear how to do this, but sense in B-A was that it was desirable. This is a placeholder bug so I don't forget.\n",
      "createdAt": "2016-04-27T01:00:45Z",
      "updatedAt": "2017-04-16T17:21:22Z",
      "closedAt": "2017-04-16T17:21:22Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'll take an action to write a draft on this.  Some new cipher suites will be required with the design I have in mind.\n",
          "createdAt": "2016-05-12T08:01:11Z",
          "updatedAt": "2016-05-12T08:01:11Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Working on proposal for this\n",
          "createdAt": "2016-07-08T00:32:49Z",
          "updatedAt": "2016-07-08T00:32:49Z"
        }
      ]
    },
    {
      "number": 447,
      "id": "MDU6SXNzdWUxNTE3NzMxMTQ=",
      "title": "Generate a separate post-handshake Finished key",
      "url": "https://github.com/tlswg/tls13-spec/issues/447",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This would be cleaner\n",
      "createdAt": "2016-04-29T00:38:31Z",
      "updatedAt": "2016-05-21T16:32:06Z",
      "closedAt": "2016-05-21T16:32:06Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And anyone not doing post-handshake authentication could simply not generate it.\n",
          "createdAt": "2016-04-29T01:00:30Z",
          "updatedAt": "2016-04-29T01:00:30Z"
        }
      ]
    },
    {
      "number": 450,
      "id": "MDU6SXNzdWUxNTM0MTU1MDU=",
      "title": "Can supported_groups be included in the server's EncryptedExtensions",
      "url": "https://github.com/tlswg/tls13-spec/issues/450",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I can't see any reason why not.\n",
      "createdAt": "2016-05-06T09:39:19Z",
      "updatedAt": "2016-05-07T11:56:53Z",
      "closedAt": "2016-05-06T13:10:13Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This PR already landed.\n",
          "createdAt": "2016-05-06T13:10:13Z",
          "updatedAt": "2016-05-06T13:10:13Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Maybe you should look again:\n\nsupported_groups [RFC-ietf-tls-negotiated-ff-dhe]   Yes     Client\n\nAnd I found no text on where the server is expected to send the extension.\n",
          "createdAt": "2016-05-07T11:10:13Z",
          "updatedAt": "2016-05-07T11:10:13Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/tlswg/tls13-spec/commit/7e3f37f33ad4d70029e7216a17d2922a565d6c5a\n\nIt's just the table that needs editing.\n",
          "createdAt": "2016-05-07T11:46:30Z",
          "updatedAt": "2016-05-07T11:47:03Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/tlswg/tls13-spec/commit/47a5f34a11d25dac1f9efbb64e711d57749b41d1\n",
          "createdAt": "2016-05-07T11:56:53Z",
          "updatedAt": "2016-05-07T11:56:53Z"
        }
      ]
    },
    {
      "number": 451,
      "id": "MDU6SXNzdWUxNTM1OTU1Njk=",
      "title": "What are the exact rules for how closely 0-RTT must conform to the handshake where it was established",
      "url": "https://github.com/tlswg/tls13-spec/issues/451",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We currently have \"identical\" but Ilari argues we should have more specific rules\n",
      "createdAt": "2016-05-07T13:56:50Z",
      "updatedAt": "2016-07-10T15:42:41Z",
      "closedAt": "2016-07-10T15:42:41Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From Ilari:\n\n\"Here is what I think should match (going through all currently known\nvalues and excetions):\n- Version\n- Ciphersuite Protection+PRF, key exchange in allowed values.\n- What to do with server_name???\n- Status_request presence (but not contents)???\n- Status_request_v2 presence (but not contents)???\n- Signed_certificate_timestamp presence (but not contents)???\n- ALP can not be negotiated by any means.\n- 0-RTT Protection+PRF+ALP can not be negotiated.\n\n(I think status_request and status_request_v2 should mirror whatever\nsigned_certificate_timestamp does).\n\nAlso, that server_name is just its own kind of mess, where what is\nthe proper thing isn't at all obvious.\n\nAnd here is the list of extensions that are allowed to be negotiated\nwith 0-RTT (parenthesis denotes extensions where things depend on exact\nhandling discussed above).\n- (server_name)\n- max_framgment_length\n- (status_request)\n- supported_groups\n- use_srtp\n- heartbeat\n- (status_request_v2)\n- (signed_certificate_timestamp)\n- token_binding [I-D stage]\n- cached_info?\n- key_share\n- pre_shared_key\n- early_data (required for obvious reasons)\n\n(Note: application_layer_protocol_negotiation is not on this list,\nvery much intentionally, since negotiation of ALP is not possible\nin presence of 0-RTT. Don't even try).\"\n",
          "createdAt": "2016-07-08T17:37:42Z",
          "updatedAt": "2016-07-08T17:37:42Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "More from Ilari:\n\nThinking about it some more, including status_request/status_request_v2/\nsigned_certificate_timestamp is only useful if one wants to tie the\nticket lifetime to parent certificate lifetime.\n\nAlso, list of things saved for 0-RTT-capable context would be useful.\nI presume:\n- The context name\n- The PSK key\n- The PSK context\n- Timestamp\n- Expiry time (not needed for 0-RTT)\n- On server side: RTT estimate\n- Allowed key exchanges\n- Negotiated protection\n- Negotiated PRF\n- Negotiated ALP (negotiated via any means, or absence thereof)\n- (Implementation-defined peer identity, not needed for 0-RTT)\n- (Implementation-defined self identity, not needed for 0-RTT)\n- What to do with server_name???\n\n(On server side, one can save the rest encrypted into context name).\n",
          "createdAt": "2016-07-08T17:37:57Z",
          "updatedAt": "2016-07-08T17:37:57Z"
        }
      ]
    },
    {
      "number": 452,
      "id": "MDU6SXNzdWUxNTM4NjU3MjU=",
      "title": "Apllication traffic keys don't derive from client Finished",
      "url": "https://github.com/tlswg/tls13-spec/issues/452",
      "state": "CLOSED",
      "author": "svince",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "According to 7.1 Key Schedule, traffic_secret is derived from the handshake hash up to servers CertificateVerify. In 7.3 the application traffic keys are defined as:\n\nkey = HKDF-Expand-Label(traffic_secret,\n                           \u201capplication data key expansion, client/server write key\u201d,\n                           handshake_context,\n                           key_length)\n\nwhere handshake_context is defined as the hash up to server Finished.\nTherefore, these traffic keys are not derived from the client Finished.\n\nSo my question is if this is intented? If so, why?\n",
      "createdAt": "2016-05-09T20:45:47Z",
      "updatedAt": "2016-05-09T22:05:06Z",
      "closedAt": "2016-05-09T22:05:06Z",
      "comments": [
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, it's intended. The reason is that the server can respond with application data ahead of the Client Finished, which is in a different flight from the Hello. Prohibiting this would introduce extra latency in a very common application scenario, namely HTTPs.\n",
          "createdAt": "2016-05-09T21:02:03Z",
          "updatedAt": "2016-05-09T21:02:03Z"
        },
        {
          "author": "svince",
          "authorAssociation": "NONE",
          "body": "Ok thank you for the explanation.\nSo the data sent in that flight, before receiving any client authentication message, is not yet guaranteed to be secure.\n",
          "createdAt": "2016-05-09T22:05:06Z",
          "updatedAt": "2016-05-09T22:05:06Z"
        }
      ]
    },
    {
      "number": 455,
      "id": "MDU6SXNzdWUxNTQyNzQzNzc=",
      "title": "Derivation of traffic key has no intermediate HKDF-Extract",
      "url": "https://github.com/tlswg/tls13-spec/issues/455",
      "state": "CLOSED",
      "author": "svince",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The traffic key is derived by applying HKDF-Extract to the traffic_secret, which in turn is derived by applying HKDF-Extract to the master secret. There is no intermediate HKDF-Extract stage.\n\nIs this intended?\nShould there be an intermediate Extract stage?\nCould the traffic key maybe be derived directly from the master secret, of course together with the correct handshake hash?\n",
      "createdAt": "2016-05-11T15:36:14Z",
      "updatedAt": "2016-05-11T16:55:59Z",
      "closedAt": "2016-05-11T16:55:58Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, which line are talking about? The traffic keys are derived by applying HKDF-Expand-Label to the current traffic secret:\n\nhttp://tlswg.github.io/tls13-spec/#rfc.section.7.3\n\n key = HKDF-Expand-Label(Secret,\n                           phase + \", \" + purpose,\n                           handshake_context,\n                           key_length)\n",
          "createdAt": "2016-05-11T15:52:50Z",
          "updatedAt": "2016-05-11T15:52:50Z"
        },
        {
          "author": "svince",
          "authorAssociation": "NONE",
          "body": "According to [http://tlswg.github.io/tls13-spec/#rfc.section.7.3], the traffic key is computed like this:\n\nkey = HKDF-Expand-Label(Secret,\nphase + \", \" + purpose,\nhandshake_context,\nkey_length),\nwhere Secret = traffic_secret\n\nAccording to [https://tlswg.github.io/tls13-spec/#rfc.section.7.1], the traffic_secret is computed as follows:\n\ntraffic_secret_0 = HKDF-Expand-Label(master_secret,\n                                          \"traffic secret\",\n                                          handshake_hash, L)\n\nThe note at the end of 7.1 declares \"each HKDF-Expand operation is paired with an HKDF-Extract\".\nBut this is not the case for the traffic key, as there is no HKDF-Extract operation performed on traffic_secret.\n\nIs this intended? If so, why?\nWouldn't it be the same (security wise) as directly using the master_secret to derive the traffic key?\n",
          "createdAt": "2016-05-11T16:48:11Z",
          "updatedAt": "2016-05-11T16:48:11Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, that's an oversight. We are currently reworking the key schedule a bit (see https://github.com/tlswg/tls13-spec/pull/453) and that will have parity between extract and expand.\n\nWe could derive the traffic keys from MS, but then we would have to either precompute traffic_secret_1 (which is a bit odd) or keep MS around (which threatens PFS for resumed connections). So we did it this way.\n",
          "createdAt": "2016-05-11T16:51:42Z",
          "updatedAt": "2016-05-11T16:51:42Z"
        },
        {
          "author": "svince",
          "authorAssociation": "NONE",
          "body": "Okay thank you for the information. This helped.\n",
          "createdAt": "2016-05-11T16:55:58Z",
          "updatedAt": "2016-05-11T16:55:58Z"
        }
      ]
    },
    {
      "number": 456,
      "id": "MDU6SXNzdWUxNTQzMTc4MjA=",
      "title": "Clarify interaction between 0-RTT and HelloRetryRequest",
      "url": "https://github.com/tlswg/tls13-spec/issues/456",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If the server's changed significantly between NewSessionTicket and the 0-RTT offer, it's possible that the client won't even have the right key_share. The server will then need to send HelloRetryRequest (and skip past any early data). What happens here is reasonably straightforward, but it probably should be mentioned explicitly that this can happen and, in that case, the second ClientHello should not have an early_data indicator.\n",
      "createdAt": "2016-05-11T19:03:07Z",
      "updatedAt": "2016-07-10T16:40:46Z",
      "closedAt": "2016-07-10T16:40:46Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed. PR welcome :)\n",
          "createdAt": "2016-05-12T15:19:47Z",
          "updatedAt": "2016-05-12T15:19:47Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed\n",
          "createdAt": "2016-07-10T16:40:46Z",
          "updatedAt": "2016-07-10T16:40:46Z"
        }
      ]
    },
    {
      "number": 467,
      "id": "MDU6SXNzdWUxNTYxMTAyNTk=",
      "title": "Add Kyle Rose to acknowledgements",
      "url": "https://github.com/tlswg/tls13-spec/issues/467",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@squarooticus PR needed\n",
      "createdAt": "2016-05-21T16:32:25Z",
      "updatedAt": "2016-05-23T21:56:11Z",
      "closedAt": "2016-05-23T21:56:11Z",
      "comments": []
    },
    {
      "number": 470,
      "id": "MDU6SXNzdWUxNTYxMjI5NzA=",
      "title": "Record version numbers for cleartext messages probably should match TLS version #",
      "url": "https://github.com/tlswg/tls13-spec/issues/470",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Otherwise we surprise 1.2 stacks.\n",
      "createdAt": "2016-05-21T21:42:00Z",
      "updatedAt": "2016-07-07T22:52:13Z",
      "closedAt": "2016-07-07T22:52:13Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Never mind. 5246 already requires you to accept anything.\n",
          "createdAt": "2016-05-21T22:19:58Z",
          "updatedAt": "2016-05-21T22:19:58Z"
        }
      ]
    },
    {
      "number": 471,
      "id": "MDU6SXNzdWUxNTYxMjMxMDI=",
      "title": "Don't invalidate sessions on fatal errors",
      "url": "https://github.com/tlswg/tls13-spec/issues/471",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is inconsistent with session tickets and people don't do it\n",
      "createdAt": "2016-05-21T21:45:37Z",
      "updatedAt": "2016-07-08T15:15:05Z",
      "closedAt": "2016-07-08T15:15:05Z",
      "comments": []
    },
    {
      "number": 472,
      "id": "MDU6SXNzdWUxNTYxMjMxMjc=",
      "title": "Shall we just get rid of warning alerts except for the end_of_data markers?",
      "url": "https://github.com/tlswg/tls13-spec/issues/472",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-05-21T21:46:09Z",
      "updatedAt": "2016-07-11T02:54:39Z",
      "closedAt": "2016-07-11T02:54:39Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Don't forget no_certificate.\n",
          "createdAt": "2016-05-22T16:28:28Z",
          "updatedAt": "2016-05-22T16:28:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not relevant:           no_certificate_RESERVED(41),          /\\* fatal */\n\nOn Sun, May 22, 2016 at 9:28 AM, Martin Thomson notifications@github.com\nwrote:\n\n> Don't forget no_certificate.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/tlswg/tls13-spec/issues/472#issuecomment-220841657\n",
          "createdAt": "2016-05-22T18:31:28Z",
          "updatedAt": "2016-05-22T18:31:28Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Right.  I just noticed that we send an empty certificate instead.\n",
          "createdAt": "2016-05-22T22:04:53Z",
          "updatedAt": "2016-05-22T22:04:53Z"
        }
      ]
    },
    {
      "number": 473,
      "id": "MDU6SXNzdWUxNTYxMjM1MzA=",
      "title": "Relax server-side KeyShareEntry checking",
      "url": "https://github.com/tlswg/tls13-spec/issues/473",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Clients MUST NOT offer multiple KeyShareEntry values for the same parameters.\nClients and servers MUST NOT offer any KeyShareEntry values for groups not\nlisted in the client's \"supported_groups\" extension.\nServers MUST NOT offer a KeyShareEntry value for a group not offered by the\nclient in its corresponding KeyShare.\nImplementations receiving any KeyShare containing any of these prohibited\nvalues MUST abort the connection with a fatal \"illegal_parameter\" alert.\n\nIt's a pain in the ass to check for KeyShareEntry values that are not in the NamedGroups and NSS doesn't presently do it. I think the requirement should be relaxed to just be that you don't select one of them. \n",
      "createdAt": "2016-05-21T21:56:45Z",
      "updatedAt": "2016-07-07T22:49:17Z",
      "closedAt": "2016-07-07T22:49:17Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett I think you wrote this text. Objections?\n",
          "createdAt": "2016-05-21T22:07:24Z",
          "updatedAt": "2016-05-21T22:07:24Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Relaxing this a bit should be fine. Letting redundant keys slide sounds a bit risky for interop, though. PR with new text submitted.\n",
          "createdAt": "2016-05-22T01:18:06Z",
          "updatedAt": "2016-05-22T01:18:06Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The \"MUST\" for what error to throw could be reduced to a \"SHOULD\", if you'd like to make this even less strict. Not likely to come up that often, though, and I don't see it being more than an interop & waste issue (at least at the moment).\n",
          "createdAt": "2016-05-22T01:22:18Z",
          "updatedAt": "2016-05-22T01:22:18Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that MUST NOT send and MAY generate a fatal error is the right balance here.  As an implementation, it's annoying to do this sort of validation because you have to cross validate two extensions, and most of the code for extensions is in the extension handler.\n\nNote that even the check for duplicate groups is not something that NSS does.\n\n(Did you want to close this now?)\n",
          "createdAt": "2016-05-22T22:04:19Z",
          "updatedAt": "2016-05-22T22:04:19Z"
        }
      ]
    },
    {
      "number": 478,
      "id": "MDU6SXNzdWUxNTYzNTIyMTk=",
      "title": "define hash_value in the definition of Hkdf-Expand-Label",
      "url": "https://github.com/tlswg/tls13-spec/issues/478",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It never actually says that hash_value is H(messages).\n",
      "createdAt": "2016-05-23T19:51:00Z",
      "updatedAt": "2016-07-07T22:51:29Z",
      "closedAt": "2016-07-07T22:51:29Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This should be clear now.\n",
          "createdAt": "2016-07-07T22:51:29Z",
          "updatedAt": "2016-07-07T22:51:29Z"
        }
      ]
    },
    {
      "number": 495,
      "id": "MDU6SXNzdWUxNTkyOTI0MTQ=",
      "title": "early_data should be sent in EncryptedExtensions",
      "url": "https://github.com/tlswg/tls13-spec/issues/495",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It's marked \"clear\" in the draft, but that's not necessary.\n",
      "createdAt": "2016-06-08T22:39:33Z",
      "updatedAt": "2016-07-08T00:17:52Z",
      "closedAt": "2016-07-08T00:17:52Z",
      "comments": []
    },
    {
      "number": 496,
      "id": "MDU6SXNzdWUxNTkzMzQ2MjA=",
      "title": "The `context` parameter on early_data is undefined",
      "url": "https://github.com/tlswg/tls13-spec/issues/496",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I couldn't find an actual definition for this.  Is the plan to remove it?\n",
      "createdAt": "2016-06-09T06:07:18Z",
      "updatedAt": "2016-07-07T23:23:45Z",
      "closedAt": "2016-07-07T23:23:45Z",
      "comments": []
    },
    {
      "number": 497,
      "id": "MDU6SXNzdWUxNTk5NjQ4MTI=",
      "title": "0-RTT handshake with client side authentication?",
      "url": "https://github.com/tlswg/tls13-spec/issues/497",
      "state": "CLOSED",
      "author": "svince",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In Section 6.2.3 Figure 4 shows a handshake with 0-RTT data and the possibility of client side authentication (Certificate and CertificateVerify). However in Section 6.2.2, Figure 3, in the subsequent handshake, it is not shown that the client may need to authenticate itself. Do I miss something or is this not consistent?\n",
      "createdAt": "2016-06-13T14:33:40Z",
      "updatedAt": "2016-08-17T22:33:38Z",
      "closedAt": "2016-08-17T22:27:39Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We agreed to ban this in Berlin but I failed to remove it from the spec. PR wanted. @siyengar \n",
          "createdAt": "2016-08-17T22:05:41Z",
          "updatedAt": "2016-08-17T22:05:41Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ya I was going to send a pr once we land the other major renegotiation prs going on. I'll check out whether there would be any major conflicts with the existing prs \n",
          "createdAt": "2016-08-17T22:31:48Z",
          "updatedAt": "2016-08-17T22:31:48Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Already fixed, I think.\n",
          "createdAt": "2016-08-17T22:33:38Z",
          "updatedAt": "2016-08-17T22:33:38Z"
        }
      ]
    },
    {
      "number": 500,
      "id": "MDU6SXNzdWUxNjA4NTcxMzc=",
      "title": "Pure PSK and the PRF hash",
      "url": "https://github.com/tlswg/tls13-spec/issues/500",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When you are using PSK, you should also include some additional information with the PSK so that it isn't used outside of the expected context.  When we use PSK for resumption we have some rules that constrain how the PSK is used, having pure PSK follow similar rules reduces the differences between how the PSKs are used.\n\nFor resumption, we require that the PRF hash be fixed to the same value that was used in the previous session.  We should recommend that the same policy be applied to resumption keys.\n\n(As suggested by Karthik.)\n",
      "createdAt": "2016-06-17T10:20:21Z",
      "updatedAt": "2016-08-29T20:48:29Z",
      "closedAt": "2016-08-29T20:48:29Z",
      "comments": []
    },
    {
      "number": 501,
      "id": "MDU6SXNzdWUxNjA5MjM0Njk=",
      "title": "Hash Client's EncryptedExtensions and Finished when the Server picks PSK 0",
      "url": "https://github.com/tlswg/tls13-spec/issues/501",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "With the addition of `ticket_age`, we now require that the server process the client's EncryptedExtensions (and Finished) to determine whether it wants to process 0-RTT.  This means that the server is looking at things that aren't in the handshake transcript.  The temptation to use that data somehow to influence what is used in the final handshake is too much, we should not leave this footgun lying around.\n\nProposal:\nPicking PSK 0 means that the server has the PSK that the client used for 0-RTT.  It might later indicate that it didn't accept the _data_ that the client sent (by omitting `early_data_indication` from its `EncryptedExtensions`).  When the server indicates that it wants to use PSK 0, that means that it will have included the client's EncryptedExtensions and Finished in the session transcript.\n",
      "createdAt": "2016-06-17T16:12:17Z",
      "updatedAt": "2016-07-07T22:34:56Z",
      "closedAt": "2016-07-07T22:34:56Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rendered moot by removal of EE.\n",
          "createdAt": "2016-07-07T22:34:56Z",
          "updatedAt": "2016-07-07T22:34:56Z"
        }
      ]
    },
    {
      "number": 506,
      "id": "MDU6SXNzdWUxNjI2OTAwMDU=",
      "title": "Typo: empty extensions in NewSessionTicket are allowed.",
      "url": "https://github.com/tlswg/tls13-spec/issues/506",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-06-28T13:47:10Z",
      "updatedAt": "2016-07-07T22:34:44Z",
      "closedAt": "2016-07-07T22:34:44Z",
      "comments": []
    },
    {
      "number": 510,
      "id": "MDU6SXNzdWUxNjMyOTYzNzM=",
      "title": "A lot of important stuff doesn't appear in the TOC",
      "url": "https://github.com/tlswg/tls13-spec/issues/510",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "...including extensions, and messages.\n\nThese are a really common thing to want to find.  A flatter structure would fix this; as would a deeper TOC, though my preference is for the former.\n",
      "createdAt": "2016-07-01T00:33:49Z",
      "updatedAt": "2016-07-10T15:22:21Z",
      "closedAt": "2016-07-10T15:22:21Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "After looking at it for a little bit, I think the subsections in the current Handshake Protocol section (6.3) can be pulled up a tier to be part of a standalone section just called Messages, and the remaining text that starts the current Handshake Protocol section (6.3) would be better placed closer to Handshake Protocol Overview (6.2).\n\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-13#section-6.3\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-13#section-6.2\n\nCurrent layout:\n\n```\n6. The TLS Handshaking Protocols\n    6.1. Alert Protocol\n        6.1.1. Closure Alerts\n        6.1.2. Error Alerts\n    6.2. Handshake Protocol Overview\n        6.2.1. Incorrect DHE Share\n        6.2.2. Resumption and Pre-Shared Key (PSK)\n        6.2.3. Zero-RTT Data\n    6.3. Handshake Protocol\n        6.3.1. Key Exchange Messages\n        6.3.2. Hello Extensions\n        6.3.3. Server Parameters\n        6.3.4. Authentication Messages\n        6.3.5. Post-Handshake Messages\n```\n\nPossible new layout:\n\n```\n6. The TLS Handshaking Protocols\n    6.1. Alert Protocol\n        6.1.1. Closure Alerts\n        6.1.2. Error Alerts\n    6.2. Handshake Protocol\n        6.2.1. Incorrect DHE Share\n        6.2.2. Resumption and Pre-Shared Key (PSK)\n        6.2.3. Zero-RTT Data\n7. Messages\n    7.1. Key Exchange Messages\n        [...]\n    7.2. Hello Extensions\n        [...]\n    7.3. Server Parameters\n    7.4. Authentication Messages\n    7.5. Post-Handshake Messages\n```\n\nwith 6.2 in the new absorbing a bit of the root of the previous 6.3.\n\nI think this would be sufficient to get all the important stuff in the TOC and abolish the mild insanity of the 5 number subsection IDs.\n",
          "createdAt": "2016-07-06T01:54:04Z",
          "updatedAt": "2016-07-06T01:55:10Z"
        }
      ]
    },
    {
      "number": 520,
      "id": "MDU6SXNzdWUxNjQ0MzY2OTc=",
      "title": "Generate the pure PSK resumption context rather than having it be 0",
      "url": "https://github.com/tlswg/tls13-spec/issues/520",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "finished_stuffing"
      ],
      "body": "",
      "createdAt": "2016-07-08T00:31:35Z",
      "updatedAt": "2016-10-16T20:41:24Z",
      "closedAt": "2016-10-16T20:41:24Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cf. Antoine\n",
          "createdAt": "2016-07-08T00:42:54Z",
          "updatedAt": "2016-07-08T00:42:54Z"
        }
      ]
    },
    {
      "number": 528,
      "id": "MDU6SXNzdWUxNjQ3MjE3ODY=",
      "title": "Remove cipher_suite from HRR?",
      "url": "https://github.com/tlswg/tls13-spec/issues/528",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It doesn't seem to be needed.\n",
      "createdAt": "2016-07-10T16:00:04Z",
      "updatedAt": "2016-08-17T21:39:02Z",
      "closedAt": "2016-08-17T21:39:02Z",
      "comments": []
    },
    {
      "number": 534,
      "id": "MDU6SXNzdWUxNjQ3MzI1NTE=",
      "title": "cookie extension ID",
      "url": "https://github.com/tlswg/tls13-spec/issues/534",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "The cookie hello extension ID is currently assigned as 44, however the ticket age extension that was at 43 has been dropped, so there's a gap in the list of new IDs now. If we have no new extension to retake 43, cookie should probably be reassigned it to keep a contiguous set of IDs. Filing as an issue as this would be a notable wire-format change.\n",
      "createdAt": "2016-07-10T20:25:16Z",
      "updatedAt": "2016-09-21T17:52:12Z",
      "closedAt": "2016-09-21T17:52:11Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This doesn't seem like it makes life much better. Please take to the list if you want to make this change.\n",
          "createdAt": "2016-08-17T22:10:44Z",
          "updatedAt": "2016-08-17T22:10:44Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oops. Didn't mean to close just yet.\n",
          "createdAt": "2016-08-17T22:11:00Z",
          "updatedAt": "2016-08-17T22:11:00Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I closed the gap with a different extension\n",
          "createdAt": "2016-09-21T17:52:11Z",
          "updatedAt": "2016-09-21T17:52:11Z"
        }
      ]
    },
    {
      "number": 538,
      "id": "MDU6SXNzdWUxNjQ5Njk5NzY=",
      "title": "Enforce HTTPS for the site itself",
      "url": "https://github.com/tlswg/tls13-spec/issues/538",
      "state": "CLOSED",
      "author": "konklone",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "GitHub now lets you enforce HTTPS for `*.github.io` domains:\n\nhttps://github.com/blog/2186-https-for-github-pages\n\nThe site already works over HTTPS: https://tlswg.github.io/tls13-spec/ \n\n![support page](https://help.github.com/assets/images/help/pages/enforce-https-checkbox.png)\n",
      "createdAt": "2016-07-12T00:38:05Z",
      "updatedAt": "2016-07-12T01:06:55Z",
      "closedAt": "2016-07-12T00:45:52Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I pushed the button.\n",
          "createdAt": "2016-07-12T00:45:52Z",
          "updatedAt": "2016-07-12T00:45:52Z"
        },
        {
          "author": "konklone",
          "authorAssociation": "NONE",
          "body": ":+1: :tada: \n",
          "createdAt": "2016-07-12T01:06:55Z",
          "updatedAt": "2016-07-12T01:06:55Z"
        }
      ]
    },
    {
      "number": 539,
      "id": "MDU6SXNzdWUxNjQ5ODM4Mzk=",
      "title": "Allow empty TicketExtensions?",
      "url": "https://github.com/tlswg/tls13-spec/issues/539",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Right now it appears that the NewSessionTicket message is required to have at least one extension, whose body contains at least one byte.\n\n```\n struct {\n     TicketExtensionType extension_type;\n     opaque extension_data<1..2^16-1>;\n } TicketExtension;\n\n struct {\n     uint32 ticket_lifetime;\n     uint32 flags;\n     uint32 ticket_age_add;\n     TicketExtension extensions<2..2^16-2>;\n     opaque ticket<0..2^16-1>;\n } NewSessionTicket;\n```\n\nThis seems silly, given that there are no extensions defined in this document.  Seems like the lower bounds should just be zero.\n",
      "createdAt": "2016-07-12T02:58:03Z",
      "updatedAt": "2016-08-17T21:41:04Z",
      "closedAt": "2016-08-17T21:41:04Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed\n",
          "createdAt": "2016-08-17T21:41:04Z",
          "updatedAt": "2016-08-17T21:41:04Z"
        }
      ]
    },
    {
      "number": 540,
      "id": "MDU6SXNzdWUxNjQ5ODUyMjE=",
      "title": "Exporter length",
      "url": "https://github.com/tlswg/tls13-spec/issues/540",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hugo writes\n\"\u200bThis is unrelated to the issue\u200bs\u200b raised by Douglas, but  if the exporter _key_ is intended for use as a unique session identifier \u200b(or \u200ba sort of \"channel binding\") then calling it a \"key\" is misleading. For example, while a key of 128 bits is perfectly fine (e.g. for AES-128), such length is insufficient as a channel binding string (where resistance to birthday attacks seems necessary). I do not see a note on this in the TLS document or RFC 5705.\"\n",
      "createdAt": "2016-07-12T03:12:30Z",
      "updatedAt": "2016-09-02T13:11:18Z",
      "closedAt": "2016-09-02T13:11:18Z",
      "comments": []
    },
    {
      "number": 543,
      "id": "MDU6SXNzdWUxNjUwNjQwMDA=",
      "title": "Ilari ]",
      "url": "https://github.com/tlswg/tls13-spec/issues/543",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-12T12:06:21Z",
      "updatedAt": "2016-10-20T12:57:55Z",
      "closedAt": "2016-10-20T12:57:55Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Copying here so they don't get lost.\n\nOn Mon, Jul 11, 2016 at 12:08:00PM -0700, Eric Rescorla wrote:\n\n> Folks,\n> \n> I've just submitted draft-ietf-tls-tls13-14.txt and it should\n> show up on the draft repository shortly. In the meantime you\n> can find the editor's copy in the usual location at:\n> \n> As usual, comments welcome.\n> -Ekr\n\nDid a readthrough, here's a bunch of comments (didn't check the\nissues list):\n\n---\n\n> ## Zero-RTT Data\n> \n> [[OPEN ISSUE: Should it be possible to combine 0-RTT with the\n> server authenticating via a signature\n> https://github.com/tlswg/tls13-spec/issues/443]]\n\nOne should note that it is not clear what sort of continuity properties\nshould be provoded:\n- Certificate valid for hostname\n- The same key as in last time\n- The same certificate as in last time\n\nThe last choice obviously limits lifetime of derived PSK to\nthe parent certificate.\n\nAlso, extension matching is quite different between those three (and the\nlast two are rather different from the current rules, tuned for 0-RTT\nonly being used with PSK.\n\n> ## Numbers\n> \n> Note that in some cases (e.g., DH parameters) it is necessary to represent\n> integers as opaque vectors. In such cases, they are represented as unsigned\n> integers (i.e., additional leading zero octets are not used even if the most\n> significant bit is set).\n\nWell, I think the DH parameters are gone, but DH public keys are still there,\nand those AFAIK are padded with zeroes.\n\n> ### Client Hello\n> \n> When this message will be sent:\n> \n> > When a client first connects to a server, it is required to send the\n> > ClientHello as its first message. The client will also send a\n> > ClientHello when the server has responded to its ClientHello with a\n> > ServerHello that selects cryptographic parameters that don't match the\n> > client's \"key_share\" extension. In that case, the client MUST send the same\n> > ClientHello (without modification) except:\n\nShould the \"ServerHello\" be \"HelloRetryRequest\"?\n\n> - Including a new KeyShareEntry as the lowest priority share\n>   (i.e., appended to the list of shares in the \"key_share\" extension).\n> - Removing the EarlyDataIndication {{early-data-indication}} extension\n>   if one was present. Early data is not permitted after HelloRetryRequest.\n\nAlso, adding cookie extension if that was present in HRR?\n\nBTW, with the early_data context and cross-connection cookies gone, I\nhave figured out how to delta-compress the first client_hello and its\nrejection against to-be-sent second client hello plus connection\nparameters server selected into 6 bytes(!) of space (not including\nreturn-reachability check or MAC).\n\n> ### Server Hello\n> \n> cipher_suite\n> : The single cipher suite selected by the server from the list in\n>   ClientHello.cipher_suites.  For resumed sessions, this field is\n>   the value from the state of the session being resumed.\n>   [[TODO: interaction with PSK.]]\n\nIsn't this the true ciphersuite used on this connection, \"resumption\"\nor not? Otherwise you can get into all sorts of crazy situations that\nWILL be sources of implementation bugs.\n\nThe idea that it isn't true ciphersuite brings me bad flashbacks about\nTLS 1.2 ticket \"maybe resume\" craziness (except this would be even\nworse).\n\n> extensions\n> : A list of extensions.  Note that only extensions offered by the\n>   client can appear in the server's list. In TLS 1.3, as opposed to\n>   previous versions of TLS, the server's extensions are split between\n>   the ServerHello and the EncryptedExtensions {{encrypted-extensions}}\n>   message. The ServerHello MUST only include extensions which are\n>   required to establish the cryptographic context. Currently the only\n>   such extensions are \"key_share\", \"pre_shared_key\", and \"early_data\".\n>   Clients MUST check the ServerHello for the presence of any forbidden\n>   extensions and if any are found MUST terminate the handshake with a\n>   \"illegal_parameter\" alert. In prior versions of TLS, the extensions\n>   field could be omitted entirely if not needed, similar to\n>   ClientHello. As of TLS 1.3, all clients and servers will send at\n>   least one extension (at least \"key_share\" or \"pre_shared_key\").\n\nHasn't early_data just moved to EncryptedExtensions?\n\n### Hello Retry Request\n\n> selected_group\n> : The mutually supported group the server intends to negotiate and\n>   is requesting a retried ClientHello/KeyShare for.\n> {:br }\n\nWhat is written into this field if server selects pure-PSK ciphersuite\nand then decides to reject the ClientHello? Or connections that use\npure-PSK just plain can't be rejected for any reason (including IP\naddress verification in DTLS?)\n\n> [[NOTE: cipher_suite may disappear. https://github.com/tlswg/tls13-spec/issues/528]]\n\nCurrently assuming pure-PSK rejections are possible, cipher_suite is\nneeded to tell if the next group field contains anything sane or\nnot...\n\n> The\n> server SHOULD send only the extensions necessary for the client to\n> generate a correct ClientHello pair (currently no such extensions\n> exist). As with ServerHello, a\n> HelloRetryRequest MUST NOT contain any extensions that were not first\n> offered by the client in its ClientHello.\n\nWhat about cookie? IIRC, it is allowed to be in HRR even without\nbeing in CH...\n\n> Upon receipt of a HelloRetryRequest, the client MUST first verify that\n> the selected_group field corresponds to a group which was provided\n> in the \"supported_groups\" extension in the original ClientHello.  It\n> MUST then verify that the selected_group field does not correspond\n> to a group which was provided in the \"key_share\" extension in the\n> original ClientHello. If either of these checks fails, then the client\n> MUST abort the handshake with a fatal \"handshake_failure\"\n> alert. Clients SHOULD also abort with \"handshake_failure\" in response\n> to any second HelloRetryRequest which was sent in the same connection\n> (i.e., where the ClientHello was itself in response to a\n> HelloRetryRequest).\n> \n> Otherwise, the client MUST send a ClientHello with an updated KeyShare\n> extension to the server. The client MUST append a new KeyShareEntry\n> for the group indicated in the selected_group field to the groups\n> in its original KeyShare.\n\nAgain, rejections with cookie aren't spurious, and the cookie needs to\nbe added.\n\n## Hello Extensions\n\n> An extension type MUST NOT appear in the ServerHello or HelloRetryRequest\n> unless the same extension type appeared in the corresponding ClientHello.\n> If a client receives an extension type in ServerHello or HelloRetryRequest\n> that it did not request in the associated ClientHello, it MUST abort the\n> handshake with an \"unsupported_extension\" fatal alert.\n\nCookie in HRR might not follow that....\n\n> In general, the specification of each extension type needs to describe the\n> effect of the extension both during full handshake and session resumption. Most\n> current TLS extensions are relevant only when a session is initiated: when an\n> older session is resumed, the server does not process these extensions in\n> ClientHello, and does not include them in ServerHello. However, some\n> extensions may specify different behavior during session resumption.\n> [[TODO: update this and the previous paragraph to cover PSK-based resumption.]]\n\nI would say that it is a bad idea for any extension to do anything\nspecial with \"resumption\" without very good reasons.\n\nIn fact, the only non-connection-control extension that is relevant for\nPSK I know is server_name.\n\nNow, ALPN (connection-control by definition!) behaves specially with\nearly_data for darn good reasons (the ALP is locked).\n\nThis is made worse by the fact that what consistutes \"resumption\" is not\nclearly defined (the ALPN rules are related to early_data, not choosing\nPSK #0!).\n\n> ### Signature Algorithms\n> - In TLS 1.2, the extension contained hash/signature pairs. The pairs are\n>   encoded in two octets, so SignatureScheme values have been allocated to\n>   align with TLS 1.2's encoding. Some legacy pairs are left unallocated. These\n>   algorithms are deprecated as of TLS 1.3. They MUST NOT be offered or\n>   negotiated by any implementation. In particular, MD5 {{SLOTH}} and SHA-224\n>   MUST NOT be used.\n> - ecdsa_secp256r1_sha256, etc., align with TLS 1.2's ECDSA hash/signature pairs.\n>   However, the old semantics did not constrain the signing curve.\n\nAlso, for interoperability, any legal TLS 1.3 meaning of these algorithms must\nbe extended to apply to TLS 1.2, even for TLS 1.2 ClientHello. Anything else\nwould be pointless trap.\n\nThis impiles that RSA PSS and EdDSA work in TLS 1.2 and also how those work.\n\nAlso, even if meaning of the ECDSA codepoints changed, those would not break\nthat rule, since new definition is strict subset of old.\n\n> ### Negotiated Groups\n> \n> As of TLS 1.3, servers are permitted to send the \"supported_groups\"\n> extension to the client.  If the server has a group it prefers to the\n> ones in the \"key_share\" extension but is still willing to accept the\n> ClientHello, it SHOULD send \"supported_groups\" to update the client's\n> view of its preferences.  Clients MUST NOT act upon any information\n> found in \"supported_groups\" prior to successful completion of the\n> handshake, but MAY use the information learned from a successfully\n> completed handshake to change what groups they offer to a server in\n> subsequent connections.\n\nAre those supposed to be filtered to be subset of ones client advertised\nor not? E.g. if client didn't indicate support for x448, can the server\nstill send x448?\n\n> ### Key Share\n> \n> If this extension is not provided in a ServerHello or ClientHello,\n> and the peer is offering (EC)DHE cipher suites, then the endpoint MUST close\n> the connection with a fatal \"missing_extension\" alert.\n> (see {{mti-extensions}})\n\nDoesn't seem to consistent with the other descriptions of this and\npre_shared_key (those are just \"MUST NOT select covered ciphersuite if\nmissing\"). Of course, in practice, it might be more this (at least\nthat's how I would implement it)...\n\n> [[TODO: Recommendation about what the client offers.\n> Presumably which integer DH groups and which curves.]]\n\nBit crazy algorithm: If you haven't heard of this server before,\npick smallest you support, if you have, pick the one it selected\nthe last time.\n\n> ### Pre-Shared Key Extension\n> \n> Note that although 0-RTT data is encrypted with the first PSK identity, the\n> server MAY fall back to 1-RTT and select a different PSK identity if multiple\n> identities are offered.\n\nThe temporal ordering in messages is actually selecting different PSK\nand then rejecting 0-RTT.\n\n> ### Early Data Indication\n> \n> obfuscated_ticket_age\n> : The time since the client learned about the server configuration that it is\n>   using, in milliseconds.  This value is added modulo 2^32 to with the\n>   \"ticket_age_add\" value that was included with the ticket, see\n>   {{NewSessionTicket}}.  This addition prevents passive observers from\n>   correlating sessions unless tickets are reused.  Note: because ticket\n>   lifetimes are restricted to a week, 32 bits is enough to represent any\n>   plausible age, even in milliseconds.\n\nAnd the addition also prevents correlating session with its parent,\neven in case of reuse (this was the reason for switching to addition\nfrom XOR).\n\n> A server MUST validate that the ticket_age is within a small\n> tolerance of the time since the ticket was issued (see {{replay-time}}).\n\nGood luck with that...\n\nAlso, requirement that the server MUST proceed with the handshake and\nreject 0-RTT if that validation fails would be good here...\n\n> 0-RTT messages sent in the first flight have the same content types\n> as their corresponding messages sent in other flights (handshake,\n> application_data, and alert respectively) but are protected under\n> different keys. After all the 0-RTT application data messages (if\n> any) have been sent, an \"end_of_early_data\" alert of type\n> \"warning\" is sent to indicate the end of the flight.\n> 0-RTT MUST always be followed by an \"end_of_early_data\" alert.\n\nThis does not talk about if end_of_early_data alert is encrypted or\nnot (obviously encrypted one won't work if server rejected 0-RTT,\nunless server trial-decrypts).\n\n> If any of these checks fail, the server MUST NOT respond\n> with the extension and must discard all the remaining first\n> flight data (thus falling back to 1-RTT). If the client attempts\n> a 0-RTT handshake but the server rejects it, it will generally\n> not have the 0-RTT record protection keys and must instead\n> trial decrypt each record with the 1-RTT handshake keys\n> until it finds one that decrypts properly, and then pick up\n> the handshake from that point.\n\nOh, still trial decryption... Got it.\n\n> #### Processing Order\n> \n> Clients are permitted to \"stream\" 0-RTT data until they\n> receive the server's Finished, only then sending the \"end_of_early_data\"\n> alert. In order to avoid deadlock, when accepting \"early_data\",\n> servers MUST process the client's Finished and then immediately\n> send the ServerHello, rather than waiting for the client's\n> \"end_of_early_data\" alert.\n\nI think there was some proposal to dump the Finished. Would simplify\nimplementation. In TLS, there is at least one appdata record with its\nMAC to be deprotected. That's not true in DTLS.\n\nHowever, even in DTLS, any wrong keys almost certainly cause handshake\nto immediately blow up as handshake keys won't match up...\n\n> #### Replay Properties {#replay-time}\n> \n> There are several potential sources of error that make an exact\n> measurement of time difficult.  Variations in client and server clocks\n> are likely to be minimal, outside of gross time corrections.  Network\n> propagation delays are most likely causes of a mismatch in legitimate\n> values for elapsed time.  Both the NewSessionTicket and ClientHello\n> messages might be retransmitted and therefore delayed, which might be\n> hidden by TCP.\n\nI don't think variations in clocks are minimal...\n\nI wonder what 95% timeskew interval per day is...\n\n(Oh, and have fun with leap seconds!)\n\n> ### Encrypted Extensions\n> \n> The same extension types MUST NOT appear in both the ServerHello and\n> EncryptedExtensions.  If the same extension appears in both locations,\n> the client MUST rely only on the value in the EncryptedExtensions\n> block.  All server-sent extensions other than those explicitly listed\n> in {{server-hello}} or designated in the IANA registry MUST only\n> appear in EncryptedExtensions. Extensions which are designated to\n> appear in ServerHello MUST NOT appear in EncryptedExtensions. Clients\n> MUST check EncryptedExtensions for the presence of any forbidden\n> extensions and if any are found MUST terminate the handshake with an\n> \"illegal_parameter\" alert.\n\nThis seems inconsistent. In implementation, I would write explicit disjoint\nwhitelists of extensions for both (and non-whitelisted one is a fatal\nerror). Explicit whitelisting is safe even on client side, since the\nextensions are bounded by client-supported ones.\n\n> ### Certificate Request\n> - The Extended Key Usage extension in a certificate matches the\n>   request when all key purpose OIDs present in the request are also\n>   found in the Extended Key Usage certificate extension. The special\n>   anyExtendedKeyUsage OID MUST NOT be used in the request.\n\nHow are multiple OIDs represented? Multiple EKU OID/value pairs?\n\n> #### Server Certificate Selection\n> - The \"server_name\" and \"trusted_ca_keys\" extensions {{RFC6066}} are used to\n>   guide certificate selection. As servers MAY require the presence of the \"server_name\"\n>   extension, clients SHOULD send this extension, when applicable.\n\nI think the certificate should be REQUIRED to match (as in, not be\ninconsistent with it) server_name, even if not ACK'd.\n\n> ### Certificate Verify\n> \n> If sent by a server, the signature algorithm MUST be one offered in the\n> client's \"signature_algorithms\" extension unless no valid certificate chain can be\n> produced without unsupported algorithms (see {{signature-algorithms}}). Note that\n> there is a possibility for inconsistencies here. For instance, the client might\n> offer an ECDHE_ECDSA cipher suite but omit any ECDSA and EdDSA values from its\n> \"signature_algorithms\" extension. In order to negotiate correctly, the server\n> MUST check any candidate cipher suites against the \"signature_algorithms\"\n> extension before selecting them. This is somewhat inelegant but is a compromise\n> designed to minimize changes to the original cipher suite design.\n\nThe exception on not having valid value can not work at all. With\ncertificates, even if the EE cert is signed with unknown algorithm,\nthere is a small chance things will work. In contrast, there is\nabsolutely no chance of success if either endpoint tries ot use this\nfallback.\n\n> Note: When used with non-certificate-based handshakes (e.g., PSK), the\n> client's signature does not cover the server's certificate directly,\n> although it does cover the server's Finished message, which\n> transitively includes the server's certificate when the PSK derives\n> from a certificate-authenticated handshake.  {{PSK-FINISHED}}\n> describes a concrete attack on this mode if the Finished is omitted\n> from the signature. It is unsafe to use certificate-based client\n> authentication when the client might potentially share the same\n> PSK/key-id pair with two different endpoints. In order to ensure\n> this, implementations MUST NOT mix certificate-based client\n> authentication with pure PSK modes (i.e., those where the\n> PSK was not derived from a previous non-PSK handshake).\n\nDoes this apply to in-handshake or post-handshake auth? I thought\nin-handshake auth with PSK is not possible.\n\nIf it is intended to be possible, that's certainly going to be\nsurprising to implementers, and there are probably going to be multiple\nimplementations that outright choke if one tries to send\nCertificateRequest in (DHE-)PSK mode\n\n> ## Record Payload Protection\n> \n> length\n> : The length (in bytes) of the following TLSCiphertext.fragment, which\n>   is the sum of the lengths of the content and the padding, plus one\n>   for the inner content type. The length MUST NOT exceed 2^14 + 256.\n>   An endpoint that receives a record that exceeds this length MUST\n>   generate a fatal \"record_overflow\" alert.\n\nLater the document seems to imply that the limit for for content+type+\npadding is in fact 16385 bytes.\n\n> ## Per-Record Nonce {#nonce}\n> \n> Sequence numbers do not wrap.  If a TLS implementation would need to\n> wrap a sequence number, it MUST either rekey ({{key-update}}) or\n> terminate the connection.\n\nMaybe add requirement that record with sequence number of 2^64-1 MUST\nbe either fatal alert or KeyUpdate.\n\n> ## Limits on Key Usage\n> \n> For AES-GCM, up to 2^24.5 full-size records may be encrypted on a\n> given connection while keeping a safety margin of approximately\n> 2^-57 for Authenticated Encryption (AE) security. For\n> ChaCha20/Poly1305, the record sequence number will wrap before the\n> safety limit is reached.\n\nI would expand that 2^24.5 to some rough number (\"about 24 million\"?).\n\nAnd also \"will wrap\" -> \"would wrap\". Because such wrapping can't\nhappen (even if endpoint delays KeyUpdate to RSN 2^64-1).\n\n> ## Key Schedule\n> \n> If a given secret is not available, then the 0-value consisting of\n> a string of Hash.length zeroes is used.  Note that this does not mean skipping\n> rounds, so if PSK is not in use Early Secret will still be\n> HKDF-Extract(0, 0).\n\nThis might cause fun with future key exchange types...\n\n> # IANA Considerations\n> \n> | Extension | Recommended | TLS 1.3 |\n> | :-- | --: | --: |\n> | max_fragment_length [RFC6066] | Yes | Encrypted |\n\nI think this needs to be in ServerHello on server-side, given how low-\nlevel it is.\n\n> | user_mapping [RFC4681]                   |         Yes | Encrypted |\n> | client_authz [RFC5878]                   |          No | Encrypted |\n> | server_authz [RFC5878]                   |          No | Encrypted |\n\nThese darn things use Supplemental Data messages, would need to define\nwhere the data goes.  And one can't stick it to extension for\nuser_mapping and client_authz, because those are sent by the client,\nnot the server.\n\n> | cookie [[this document]]                 |         Yes | Encrypted/HelloRetryRequest |\n\nIsn't that \"Client/HelloRetryRequest\"? I don't think EncryptedExtensions\ncan have Cookie...\n\n> -  TLS SignatureScheme Registry: Values with the first byte in the range\n>   0-254 (decimal) are assigned via Specification Required {{RFC2434}}.\n>   Values with the first byte 255 (decimal) are reserved for Private\n>   Use {{RFC2434}}. This registry SHALL have a \"Recommended\" column.\n>   The registry [shall be/ has been] initially populated with the values described in\n>   {{signature-algorithms}}. The following values SHALL be marked as\n>   \"Recommended\": ecdsa_secp256r1_sha256, ecdsa_secp384r1_sha384,\n>   rsa_pss_sha256, rsa_pss_sha384, rsa_pss_sha512, ed25519.\n\nShould the two registeries shadowed by this closed?\n\n> ## Cipher Suites\n> \n> Note: The values listed for ECDHE and ChaCha/Poly are preliminary but\n> are being or will be used for interop testing and therefore are likely to be\n> assigned.\n\nIsn't the RFC already published, so the codepoints are stable?\n\n> ## Random Number Generation and Seeding\n> \n> To estimate the amount of seed material being produced, add the number of bits\n> of unpredictable information in each seed byte. For example, keystroke timing\n> values taken from a PC compatible 18.2 Hz timer provide 1 or 2 secure bits\n> each, even though the total size of the counter value is 16 bits or more.\n> Seeding a 128-bit PRNG would thus require approximately 100 such timer values.\n\nThis seems really obsolete. The timers have not been 18.2Hz for years, and\napplications running on operating systems damn better use OS services for\nrandom numbers, given that anything else is fraught with peril.\n\n> ## Implementation Pitfalls\n> -  Have you ensured that all support for SSL, RC4, EXPORT ciphers, and\n>   MD5 (via the \"signature_algorithm\" extension) is completely removed from\n>   all possible configurations that support TLS 1.3 or later, and that\n>   attempts to use these obsolete capabilities fail correctly?\n>   (see {{backward-compatibility}})\n\nBetter to just nuke the code entierely for all versions.\n\n\"Disabled\" code has nasty tendency of coming back to life.\n\n> -  Do you handle TLS extensions in ClientHello correctly, including\n>   unknown extensions or omitting the extensions field completely?\n\nThe extensions field can't be omitted in TLS 1.3. And I would\nconsider TLS 1.2 client implementations that send such messages\nas quite pathological.\n\n> Cryptographic details:\n> -  What countermeasures do you use to prevent timing attacks against\n>   RSA signing operations {{TIMING}}?\n\nAlso, ECDSA signing operations do have problems with timing attacks.\n\n> - When verifying RSA signatures, do you accept both NULL and missing parameters?\n>   Do you verify that the RSA padding\n>   doesn't have additional data after the hash value? {{FI06}}\n\nAlso, the lengths need to be correct (not verifying this leads to an\nattack). Best just to treat first length bytes >0x82 or >0x83 as\nmalformed. There is no way to send legimate message with first length\nbyte >0x83 in TLS.\n\n> # Overview of Security Properties {#security-analysis}\n> \n> [[TODO: This section is still a WIP and needs a bunch more work.]]\n> \n> A complete security analysis of TLS is outside the scope of this document.\n> In this section, we provide an informal description the desired properties\n> as well as references to more detailed work in the research literature\n> which provides more formal definitions.\n> \n> We cover properties of the handshake separately from those of the record layer.\n\nI think properties of the exporter should be covered as well:\n- Is it intended to generate secret data (yes)\n- Is it intended to generate connection-unique data (yes)\n- Are values for different labels/contexts intended to be computationally\n  independent (yes)\n\n(The TLS 1.2 exporter without EMS failed the middle requirement,\ncreating security issues in applications that assumed the data was\nconnection-unique.\n\n---\n\n-Ilari\n\nDave Garrett\n10:52 PM (6 hours ago)\n\nto tls, Ilari, me \nJust replying to a few points.\n\nOn Tuesday, July 12, 2016 12:16:24 am Ilari Liusvaara wrote:\n\n> ### Hello Retry Request\n> \n> > selected_group\n> > : The mutually supported group the server intends to negotiate and\n> >   is requesting a retried ClientHello/KeyShare for.\n> > {:br }\n> \n> What is written into this field if server selects pure-PSK ciphersuite\n> and then decides to reject the ClientHello? Or connections that use\n> pure-PSK just plain can't be rejected for any reason (including IP\n> address verification in DTLS?)\n\nThe HelloRetryRequest message is not applicable to pure-PSK, which does not use the KeyShare extension at all. PSK has its own separate extension. ((EC)DHE-PSK uses both together)\n\nThe purpose of HelloRetryRequest is to allow for clients to not send full keys for every single algorithm they support, yet allow the server to still pick from that entire list if it needs to. PSK has no equivalent system; pre-shared keys are first-flight or bust. If an (EC)DHE-PSK suite is selected, and a valid PSK identity is selected, the server can use HelloRetryRequest to reject a group in favor of another supported by the client, but it can't reject the suite or identity in this manner. The response to no acceptable PSK identity is either to negotiate another suite or to abort with a fatal alert.\n\nSee draft 14 section 4.2.5:\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-14#section-4.2.5\n\n> > ## Cipher Suites\n> > \n> > Note: The values listed for ECDHE and ChaCha/Poly are preliminary but\n> > are being or will be used for interop testing and therefore are likely to be\n> > assigned.\n> \n> Isn't the RFC already published, so the codepoints are stable?\n\nxiaoyinl fixed the second one of those notes, but that was merged after the checkpoint for draft 14. I'll fix this one to just note for ECDHE PSK AES.\n\n> > ## Implementation Pitfalls\n> > -  Have you ensured that all support for SSL, RC4, EXPORT ciphers, and\n> >   MD5 (via the \"signature_algorithm\" extension) is completely removed from\n> >   all possible configurations that support TLS 1.3 or later, and that\n> >   attempts to use these obsolete capabilities fail correctly?\n> >   (see {{backward-compatibility}})\n> \n> Better to just nuke the code entierely for all versions.\n> \n> \"Disabled\" code has nasty tendency of coming back to life.\n\nEmphatically agreed, however I worded it this way to be slightly more general. If I said that all that code should be universally gutted, I'd risk more people ignoring it due to the severe status quo bias that is very common. In lieu of modernizing fully and dropping it completely, having these old features disabled via the same compile-time option that enables building of TLS 1.3 would be acceptable, IMO (though, more trouble than it should be worth, and still not ideal at all). Bikeshedding better wordings in this section would not be unwelcome, if you think anything here can be made better.\n\n> > -  Do you handle TLS extensions in ClientHello correctly, including\n> >   unknown extensions or omitting the extensions field completely?\n> \n> The extensions field can't be omitted in TLS 1.3. And I would\n> consider TLS 1.2 client implementations that send such messages\n> as quite pathological.\n\nImplementations should be expected to handle pathological cases gracefully, even if only to recognize and reject. ;)\n\nIlari Liusvaara\n2:00 AM (3 hours ago)\n\nto Dave, tls, me \nOn Tue, Jul 12, 2016 at 01:52:57AM -0400, Dave Garrett wrote:\n\n> Just replying to a few points.\n> \n> On Tuesday, July 12, 2016 12:16:24 am Ilari Liusvaara wrote:\n> \n> > ### Hello Retry Request\n> > \n> > > selected_group\n> > > : The mutually supported group the server intends to negotiate and\n> > >   is requesting a retried ClientHello/KeyShare for.\n> > > {:br }\n> > \n> > What is written into this field if server selects pure-PSK ciphersuite\n> > and then decides to reject the ClientHello? Or connections that use\n> > pure-PSK just plain can't be rejected for any reason (including IP\n> > address verification in DTLS?)\n> \n> The HelloRetryRequest message is not applicable to pure-PSK, which\n> does not use the KeyShare extension at all. PSK has its own separate\n> extension. ((EC)DHE-PSK uses both together)\n\nYes, rejection because of group mismatch can't occur. However, I don't\nsee any requirement not to reject pure-PSK for cookie check (might be\nfeasible, if the computational and network load is determined \"small\nenough\").\n\n> > > ## Cipher Suites\n> > > \n> > > Note: The values listed for ECDHE and ChaCha/Poly are preliminary but\n> > > are being or will be used for interop testing and therefore are likely to be\n> > > assigned.\n> > \n> > Isn't the RFC already published, so the codepoints are stable?\n> \n> xiaoyinl fixed the second one of those notes, but that was merged\n> after the checkpoint for draft 14. I'll fix this one to just note\n> for ECDHE PSK AES.\n\nIIRC, there was merged patch that changed the reference, but not the\ntext. Just checked, seems to still be there in Editor's Copy.\n",
          "createdAt": "2016-07-12T12:06:47Z",
          "updatedAt": "2016-07-12T12:06:47Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ilaril I think I have dealt with most of these.\n- You should raise the topic of the CertificateRequest.extensions on list.\n- You say \"Later the document seems to imply that the limit for for content+type+\n  padding is in fact 16385 bytes.\" If you point out where I will fix it.\n- I don't think max_fragment_length should go in ServerHello because the client doesn't need it to interpret messages from the server.\n- If you want to provide a PR about RSA in S 8.5 that would be useful.\n",
          "createdAt": "2016-09-03T19:49:36Z",
          "updatedAt": "2016-09-03T19:49:36Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Sat, Sep 03, 2016 at 12:49:39PM -0700, ekr wrote:\n\n> @ilaril I think I have dealt with most of these.\n> - You say \"Later the document seems to imply that the limit for for content+type+\n>   padding is in fact 16385 bytes.\" If you point out where I will fix it.\n\nProbably just me misreading the 255 byte limit for expansion from protection\nand the 16384+1+255 formula for the 16384+256 byte limit.\n\nAlso, what's the protected limit if max_fragment_length is in effect?\n256 bytes above the plaintext limit (so e.g. 768 bytes for 512 byte\nplaintext limit)? \n\n> - I don't think max_fragment_length should go in ServerHello because the client doesn't need it to interpret messages from the server.\n\nActually, probably OK to keep it until EE if included at all because\nthe strictest limit one can apply is 512 octets, and the maximum size\nof ServerHello is (there is protection change afterwards, so one can't\ncombine the mesage):\n- 4 bytes for message header\n- 2 bytes for version\n- 32 bytes for random\n- 2 bytes for protection/prf\n- 2 bytes for extension length\n- 6 bytes for PSK ACK (might be reduced to 4)\n- 8 bytes for KeyShare header + dhf id + share len\n- ? bytes for key share data\n\nThis is 56 bytes, plus key share data, leaving at least 456 bytes\nfor the key share. Now, the only DHFs that exceed that are FFDH4k,\nFFDH6k and FFDH8k (and possible PQ exchanges).\n\nAnd any device that is puny enough to want 512-byte fragments is\nvery unlikely to support any of those.\n\n> - If you want to provide a PR about RSA in S 8.5 that would be useful.\n\nThe first length byte thing?\n\nActually, that's a special case of doing RSA PKCS#1 v1.5 (CA certs)\nverification by doing RSA op and then decoding the result, instead\nof the proper way, which is to do RSA op, encode the expected result\nand then compare.\n\n-Ilari\n",
          "createdAt": "2016-09-04T10:35:32Z",
          "updatedAt": "2016-09-04T10:35:32Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing this as Ilari did a new review. @ilaril please let me know if there's anything that got missed.\n",
          "createdAt": "2016-10-20T12:57:55Z",
          "updatedAt": "2016-10-20T12:57:55Z"
        }
      ]
    },
    {
      "number": 545,
      "id": "MDU6SXNzdWUxNjUxODgxNzc=",
      "title": "Post-handshake client auth should use traffic_secret_N not 0",
      "url": "https://github.com/tlswg/tls13-spec/issues/545",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-12T21:41:52Z",
      "updatedAt": "2016-08-17T22:12:22Z",
      "closedAt": "2016-08-17T22:12:22Z",
      "comments": []
    },
    {
      "number": 546,
      "id": "MDU6SXNzdWUxNjU0MjkyNzM=",
      "title": "Clarify empty context vs. no context for exporters",
      "url": "https://github.com/tlswg/tls13-spec/issues/546",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I've always thought this feature of RFC 5705 was ridiculous, but the empty string context and missing context are treated as distinct inputs and give distinct keys. TLS 1.3 claims to implement the same interface, but doesn't talk about the no context case.\n\nWe should do one of:\n- Add some distinguisher like \"0\" for no context and \"1 || context_value\" otherwise.\n- Declare that \"no context\" and \"empty context\" are, from now on, the same. Mention this in the spec explicitly.\n- Declare that \"no context\" is no longer a valid input and should fail. Mention this in the spec explicitly.\n",
      "createdAt": "2016-07-13T21:46:59Z",
      "updatedAt": "2016-08-30T13:30:47Z",
      "closedAt": "2016-08-30T13:30:47Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't care much and would be content with any of these. The first one is if we prefer to keep the interface 100% the same. The second is if we think \"no context\" is dumb but don't want to add a failure case. The third is if we think \"no context\" is dumb and think adding a new failure case is preferable to risking two previously distinct inputs becoming the same.\n",
          "createdAt": "2016-07-13T21:53:16Z",
          "updatedAt": "2016-07-13T21:53:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think I like version #1, but I don't much care.\n\nPRs wanted.\n",
          "createdAt": "2016-07-13T22:05:09Z",
          "updatedAt": "2016-07-13T22:05:09Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh, I guess there's also option 4, but it makes me sad: Bleed the \"no context\" mode all the way into HKDF-Expand-Label and say HKDF-Expand-Label can have no hash value. Then you omit the field in HkdfLabel, length prefix and all.\n\nNick pointed out that 2 or 3 are only a problem if someone uses both options with the same label. And if we believe the IANA registry, there's not all that many labels, so we could also check and see if anyone cares about \"no context\".\n\nAnyway, happy to put together a PR for whichever version. Is there a TLS-spec-idiomatic way to do a distinguisher? 0 and 1 fine or should it be something sillier? Could also do no context => empty string and context => \"\\0\" || context.\n",
          "createdAt": "2016-07-13T22:41:55Z",
          "updatedAt": "2016-07-13T22:41:55Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben OK, I think I'm persuaded by Nick's point. Someone needs to audit all the exporters and see if any of them can be used both ways. If not, I think we could get away with options 2 or 3. \n",
          "createdAt": "2016-08-22T03:11:44Z",
          "updatedAt": "2016-08-22T03:11:44Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is anyone expecting to be \"someone\"?  Maybe we should mention the need on the list and/or ask for the chairs' help...\n",
          "createdAt": "2016-08-22T14:46:06Z",
          "updatedAt": "2016-08-22T14:46:06Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sure, unless someone wants to volunteer here. Otherwise, it will eventually be me, I guess\n",
          "createdAt": "2016-08-22T14:53:49Z",
          "updatedAt": "2016-08-22T14:53:49Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've gone through all the IETF exporter definitions and none of them seem to use _both_ a missing and zero-length context. So I suggest we just declare them to be the same. @davidben OK with you?\n",
          "createdAt": "2016-08-29T19:34:40Z",
          "updatedAt": "2016-08-29T19:34:40Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note, I didn't go through the non-IETF definitions, but those guys are on their own\n",
          "createdAt": "2016-08-29T19:50:32Z",
          "updatedAt": "2016-08-29T19:50:32Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "SGTM\n",
          "createdAt": "2016-08-29T22:25:29Z",
          "updatedAt": "2016-08-29T22:25:29Z"
        }
      ]
    },
    {
      "number": 551,
      "id": "MDU6SXNzdWUxNjU5NjQ2NDQ=",
      "title": "Collision resistance for resumption context",
      "url": "https://github.com/tlswg/tls13-spec/issues/551",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "finished_stuffing"
      ],
      "body": "Hugo notes:\n\n> [...] we need some text in the security considerations about the collision \n> resistance assumption on HKDF (which is not an integral part of its key derivation \n> definition); this applies also to the exporter key as mentioned in a previous email\n> and any key/value that can be used as a \"binding value\".\n",
      "createdAt": "2016-07-17T07:16:31Z",
      "updatedAt": "2016-10-16T20:41:24Z",
      "closedAt": "2016-10-16T20:41:24Z",
      "comments": []
    },
    {
      "number": 553,
      "id": "MDU6SXNzdWUxNjY0MDU2Njc=",
      "title": "Specify key_exchange as a fixed-length vector",
      "url": "https://github.com/tlswg/tls13-spec/issues/553",
      "state": "CLOSED",
      "author": "s-zanella",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "~~I believe current implementations of Draft 13 don't include the length of the `key_exchange` field when serializing a `KeyShareEntry` struct to the wire. But `key_exchange` is specified as a variable-length vector (https://tlswg.github.io/tls13-spec/#key-share), so technically they should.~~\n\n**Edited**: _Karthik pointed out to me that only the inner length, which was clearly redundant, was dropped in Draft 13. So there is no need for a fix, but there is an opportunity for some savings by changing the encoding of shares._\n\nPR #462 changed the text to require padding DH shares to the length of the group, making communicating the length redundant. We could save 2 bytes per share and some processing for parsing and checking the length by specifying `key_exchange` as a fixed-length vector with a length dependent on the `group` field. This could also be done for ECDH shares since their length is determined by the curve (because any given curve must specify a single point format).\n\nI don't know exactly what is the proper syntax to use, but what I mean is something like this:\n\n```\n struct {\n       NamedGroup group;\n       select (NamedGroup):\n           case ffdhe2048: opaque key_exchange[256];\n           case ffdhe3072: opaque key_exchange[384];\n           ...\n           case secp256r1: opaque key_exchange[65];\n           case secp384r1: opaque key_exchange[97];\n           ...\n   } KeyShareEntry;\n```\n",
      "createdAt": "2016-07-19T18:46:55Z",
      "updatedAt": "2016-07-21T10:13:51Z",
      "closedAt": "2016-07-20T08:25:46Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The problem with this is that a new named group will have an indeterminate length.  The current design is fine.\n",
          "createdAt": "2016-07-20T06:51:04Z",
          "updatedAt": "2016-07-20T06:51:04Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Concur with MT's analysis. \n",
          "createdAt": "2016-07-20T08:25:46Z",
          "updatedAt": "2016-07-20T08:25:46Z"
        },
        {
          "author": "s-zanella",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A new named group will have an _indeterminate but fixed_ length, so the 2-byte length will still be redundant. \nThe `KeyShareEntry` struct can be extended as needed for new named groups.\n\nThe problem I see with redundancy is that implementations will have to check that the length field is consistent with the expected length determined by the group. Implementations will be tempted to omit parsing the length and doing this check.\n\nI haven't found any security concern with ignoring the 2-byte length, but being free to choose 2 arbitrary bytes sounds like a bad design. \n\nIn brief, what I'm suggesting is to either\n\n~~~1.  remove the redundant length bytes by changing the encoding of `KeyShareEntry`, or~~~ \n2. make a MUST for implementations to check that the length bytes encode the expected length\n",
          "createdAt": "2016-07-20T14:26:17Z",
          "updatedAt": "2016-07-20T15:13:58Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This proposal doesn't work. An old implementation that encounters an unknown new group needs to know the length of data it needs to skip. \n",
          "createdAt": "2016-07-20T15:03:57Z",
          "updatedAt": "2016-07-20T15:03:57Z"
        },
        {
          "author": "s-zanella",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fair enough, you're right.\n\nThen, would it be ok for an implementation that encounters a share from a known group and uses it to ignore the 2-byte length?\n",
          "createdAt": "2016-07-20T15:13:22Z",
          "updatedAt": "2016-07-20T15:13:22Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Failing to check values leads to bugs.  c.f. Heartbleed for an extreme example.  Implementations that encounter a 37 octet P-256 share should probably reject that message, but they are not obligated to do so if they aren't using the share.\n",
          "createdAt": "2016-07-21T10:13:51Z",
          "updatedAt": "2016-07-21T10:13:51Z"
        }
      ]
    },
    {
      "number": 555,
      "id": "MDU6SXNzdWUxNjY1ODUxNzA=",
      "title": "Generate the IVs for a single HKDF-Expand() operation",
      "url": "https://github.com/tlswg/tls13-spec/issues/555",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We need to generate the keys separately but we can generate both IVs as a single unit because we expect to export the IV anyway.\n",
      "createdAt": "2016-07-20T13:46:31Z",
      "updatedAt": "2016-08-28T14:08:38Z",
      "closedAt": "2016-08-28T14:08:38Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mailing list thread started.\n",
          "createdAt": "2016-08-17T22:10:05Z",
          "updatedAt": "2016-08-17T22:10:05Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No real interest on the list, so closing this issue.\n",
          "createdAt": "2016-08-28T14:08:38Z",
          "updatedAt": "2016-08-28T14:08:38Z"
        }
      ]
    },
    {
      "number": 556,
      "id": "MDU6SXNzdWUxNjY1ODU5MjQ=",
      "title": "Change 0-RTT Finished to be unencrypted",
      "url": "https://github.com/tlswg/tls13-spec/issues/556",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "finished_stuffing"
      ],
      "body": "ADL points out that:\n1. It makes the proof easier\n   2 It makes the implementation easier.\n",
      "createdAt": "2016-07-20T13:49:41Z",
      "updatedAt": "2016-10-16T20:41:24Z",
      "closedAt": "2016-10-16T20:41:24Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "and 3. there's nothing to protect\n",
          "createdAt": "2016-07-20T18:03:53Z",
          "updatedAt": "2016-07-20T18:03:53Z"
        }
      ]
    },
    {
      "number": 558,
      "id": "MDU6SXNzdWUxNjczNDYzMjE=",
      "title": "PSK resumption_context should not be 0",
      "url": "https://github.com/tlswg/tls13-spec/issues/558",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "finished_stuffing"
      ],
      "body": "See:\nhttps://www.ietf.org/mail-archive/web/tls/current/msg20637.html\n",
      "createdAt": "2016-07-25T11:39:38Z",
      "updatedAt": "2016-10-16T20:41:24Z",
      "closedAt": "2016-10-16T20:41:24Z",
      "comments": []
    },
    {
      "number": 560,
      "id": "MDU6SXNzdWUxNjczNjgwNDU=",
      "title": "Cookie-only HelloRetryRequest doesn't quite work right",
      "url": "https://github.com/tlswg/tls13-spec/issues/560",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This was mentioned at the hackathon, but I forgot to file a bug. The server may send a HelloRetryRequest if it needs a key_share AND/OR if it wants a cookie to prove reachability. If only the cookie, this part of the spec can't be followed:\n\n> Upon receipt of a HelloRetryRequest, the client MUST first verify that the selected_group field corresponds to a group which was provided in the \u201csupported_groups\u201d extension in the original ClientHello. It MUST then verify that the selected_group field does not correspond to a group which was provided in the \u201ckey_share\u201d extension in the original ClientHello.\n\nRelatedly, if the server selected a pure PSK cipher but still needed to assert a cookie, it can't send a HelloRetryRequest without requesting a key share.\n\nSimplest fix would probably be to move key_share to the extensions field, since it otherwise is an extension anyway. Though the `select (role)` needs now three cases, so it's a little screwy. Then the text can say something like \"if there is a key_share extension present, the client MUST first verify, etc.\". It may or may not also be worth saying something like \"servers MUST NOT send HelloRetryRequest without any extensions\".\n",
      "createdAt": "2016-07-25T13:38:38Z",
      "updatedAt": "2016-08-28T14:10:02Z",
      "closedAt": "2016-08-28T14:10:02Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, I noticed this the other day too. \n\nNot sure about your fix. Why not just say that if you sent a share in the group you take the cookie and move on\n",
          "createdAt": "2016-07-25T13:49:58Z",
          "updatedAt": "2016-07-25T13:49:58Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How would you handle pure PSK ciphers where you don't pick a group at all?\n",
          "createdAt": "2016-07-25T14:14:12Z",
          "updatedAt": "2016-07-25T14:14:12Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, fair point. I'll have to think about that.\n",
          "createdAt": "2016-07-25T14:17:09Z",
          "updatedAt": "2016-07-25T14:17:09Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would change the structure of the HelloRetryRequest message \n\nFROM:\n\n> struct {\n>        ProtocolVersion server_version;\n>        CipherSuite cipher_suite;\n>        NamedGroup selected_group;\n>        Extension extensions<0..2^16-1>;\n>    } HelloRetryRequest;\n\nTO:\n\n> struct {\n>        ProtocolVersion server_version;\n>        CipherSuite cipher_suite;\n>        Extension extensions<0..2^16-1>;\n>    } HelloRetryRequest;\n\nand put the selected_group in the extension part. Then, if the client only used a PSK cipher without any ECDHE then it will not provide a selected_group extension in the ClientHello and the server does not need to include it in the HelloRetryRequest either. \n\nOn the other hand, you are not likely going to send a HelloRetryRequest when you are using a pure PSK-based ciphersuite since the error condition of the server not finding an acceptable set of algorithms and groups that are mutually supported is not going to occur. The use of the  HelloRetryRequest for DoS protection is only mentioned as a side remark and I believe it was introduced for unreliable transports rather than for TLS over TCP.\n\nI prefer the former approach since it makes our life easier when we define DTLS 1.3 where the HelloRetryRequest message makes sense for testing reachability.\n",
          "createdAt": "2016-08-12T14:13:30Z",
          "updatedAt": "2016-08-12T14:14:43Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, this is my proposal as well (moving to an extension). I think it came up on the list as well. Then we say that an HRR MUST have at least one extension.\n\nNote though that the cookie use case will someday run into other troubles with HelloRetryRequest. You need all the information for HelloRetryRequest fit in the first packet of ClientHello. We're fine now, but the ClientHello is getting larger and larger. It suggests that the cookie use case really should be handled by something at the \"transport\" layer, to mirror the TCP case. (By \"transport\", I mean the layer just under the handshake. DTLS isn't quite so clearly layered like this, but I'm of course largely thinking QUIC.)\n\nE.g. you could imagine that every packet in the initial flight were tagged with some kind of source address token rather than doing it at the message level.\n",
          "createdAt": "2016-08-12T14:24:38Z",
          "updatedAt": "2016-08-12T14:24:38Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben, @hannestschofenig patch welcome\n",
          "createdAt": "2016-08-17T21:47:10Z",
          "updatedAt": "2016-08-17T21:47:10Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is fixed in @davidben's new PR.\n",
          "createdAt": "2016-08-28T14:10:02Z",
          "updatedAt": "2016-08-28T14:10:02Z"
        }
      ]
    },
    {
      "number": 571,
      "id": "MDU6SXNzdWUxNjg0MzMyNjE=",
      "title": "Point compression support",
      "url": "https://github.com/tlswg/tls13-spec/issues/571",
      "state": "CLOSED",
      "author": "wbl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The patent on point compression has expired, and compressed points in ECDHE offer some minor security benefits as they make it harder to exploit missing checks on validity of elliptic curve points. Should we mandate compression?\n",
      "createdAt": "2016-07-29T23:28:31Z",
      "updatedAt": "2016-08-17T21:43:09Z",
      "closedAt": "2016-08-17T21:43:09Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Consensus was not to to avoid forcing existing implementations to adopt it. It's of course not an option in X25519\n",
          "createdAt": "2016-08-17T21:43:09Z",
          "updatedAt": "2016-08-17T21:43:09Z"
        }
      ]
    },
    {
      "number": 572,
      "id": "MDU6SXNzdWUxNjg3OTk4Mzc=",
      "title": "No point in Finished for rejected post-handshake auth",
      "url": "https://github.com/tlswg/tls13-spec/issues/572",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> If it declines, it MUST send a Certificate message containing no certificates followed by Finished.\n\nIf the client declines to authenticate, the empty Certificate message is all that is necessary.  Retaining Finished keeps the form compatible with the initial handshake, but it serves no real purpose post-handshake.\n",
      "createdAt": "2016-08-02T05:02:45Z",
      "updatedAt": "2016-08-17T21:45:59Z",
      "closedAt": "2016-08-17T21:45:59Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It may not be a good idea, but it's not correct that it serves no purpose, because there is partial key separation. Therefore it's possible that if (for instance) the actual working keys were compromised the Finished keys would not be, and thus you would have authenticated assurance that the other side did intend to send you an unauthenticated Finished.\n",
          "createdAt": "2016-08-02T12:56:09Z",
          "updatedAt": "2016-08-02T12:56:09Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am going to mark this as closed. Please feel free to reraise on the list if you care.\n",
          "createdAt": "2016-08-17T21:45:59Z",
          "updatedAt": "2016-08-17T21:45:59Z"
        }
      ]
    },
    {
      "number": 573,
      "id": "MDU6SXNzdWUxNjg4MDMzNzU=",
      "title": "Hash forking for post-handshake authentication",
      "url": "https://github.com/tlswg/tls13-spec/issues/573",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "It makes sense for the initial handshake to include the CertificateRequest, because it's in the sequence, but when doing post-handshake authentication, you have to snapshot the hash.  It would be easier if the handshake context is separated.  For CertificateVerify, this would be easier to manage:\n\n```\nHash(HandshakeContext) + resumption_context + Hash(CertificateRequest + Certificate)\n```\n\nSimilarly, for Finished:\n\n```\nHash(HandshakeContext) + resumption_context + Hash(CertificateRequest + Certificate + CertificateVerify)\n```\n\n(I've taken David Benjamin's point about redundant hashing of the resumption context into account here.)\n",
      "createdAt": "2016-08-02T05:37:05Z",
      "updatedAt": "2016-08-28T14:09:22Z",
      "closedAt": "2016-08-28T14:09:22Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think this is a good change. It's not hard to build hash implementations that can be forked, and this creates inconsistency.\n",
          "createdAt": "2016-08-02T13:00:26Z",
          "updatedAt": "2016-08-02T13:00:26Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Martin, I am closing this. Feel free to raise on the list.\n",
          "createdAt": "2016-08-28T14:09:22Z",
          "updatedAt": "2016-08-28T14:09:22Z"
        }
      ]
    },
    {
      "number": 574,
      "id": "MDU6SXNzdWUxNjkxNTUxMDU=",
      "title": "Lock down TLS 1.2 {Hash,Signature}Algorithm registries",
      "url": "https://github.com/tlswg/tls13-spec/issues/574",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(Well, I think, strictly speaking, we need only lock down HashAlgorithm.)\n\nThe SignatureScheme change assumes that we will never again allocate new values in the TLS 1.2 HashAlgorithm and SignatureAlgorithm ranges. I'm not sure how to write that kind of IANA consideration or I'd put together a PR. The end result should probably be something like s/Unassigned/Reserved for TLS 1.3 compatibility/. From TLS 1.3 onwards, all new signature algorithms that apply to TLS 1.2 must go through a backported SignatureScheme.\n\n(If we're not happy with that strong of a restriction, we could perhaps only burn HashAlgorithms 0x80 and up. Then TLS 1.3 SignatureSchemes live in the 0x8000 to 0xfdff range. Though #557's PSS text already implies we'll be backporting SignatureSchemes, so the division probably isn't necessary? I dunno. I don't really care either way.)\n",
      "createdAt": "2016-08-03T15:06:30Z",
      "updatedAt": "2016-08-30T13:33:18Z",
      "closedAt": "2016-08-30T13:33:18Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let's just lock down HAshAlgorithm. Can you submit a PR?\n",
          "createdAt": "2016-08-29T21:11:55Z",
          "updatedAt": "2016-08-29T21:11:55Z"
        }
      ]
    },
    {
      "number": 577,
      "id": "MDU6SXNzdWUxNzA4ODE2NjY=",
      "title": "NewSessionTicket message modification",
      "url": "https://github.com/tlswg/tls13-spec/issues/577",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Appendix A.3.4. lists the NewSessionTicket message as follows:\n\n> enum { (65535) } TicketExtensionType;\n> \n> struct {\n>      TicketExtensionType extension_type;\n>      opaque extension_data<1..2^16-1>;\n>  } TicketExtension;\n> \n> enum {\n>    allow_early_data(1),\n>    allow_dhe_resumption(2),\n>    allow_psk_resumption(4)\n>  } TicketFlags;\n> \n> struct {\n>      uint32 ticket_lifetime;\n>      uint32 flags;\n>      uint32 ticket_age_add;\n>      TicketExtension extensions<0..2^16-2>;\n>      opaque ticket<1..2^16-1>;\n>  } NewSessionTicket;\n\nI believe the structure should be defined as follows:\n\n> enum {\n>    allow_early_data(1),\n>    allow_dhe_resumption(2),\n>    allow_psk_resumption(4), \n>    (255)\n>  } TicketFlags;\n> \n> struct {\n>      uint32 ticket_lifetime;\n>      TicketFlags flags;\n>      uint32 ticket_age_add;\n>      TicketExtension extensions<0..2^16-2>;\n>      opaque ticket<1..2^16-1>;\n>  } NewSessionTicket;\n\n32 bits for the flags feels a bit too long to me and the currently defined NewSessionTicket structure does not use the TicketFlags enum. \n",
      "createdAt": "2016-08-12T14:18:58Z",
      "updatedAt": "2016-08-17T21:48:26Z",
      "closedAt": "2016-08-17T21:48:26Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This was restructured, so closing\n",
          "createdAt": "2016-08-17T21:48:26Z",
          "updatedAt": "2016-08-17T21:48:26Z"
        }
      ]
    },
    {
      "number": 587,
      "id": "MDU6SXNzdWUxNzMwMDkyMTI=",
      "title": "description for encoded vector",
      "url": "https://github.com/tlswg/tls13-spec/issues/587",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "In s3.4 there's this sentence:\n\n```\nThe length of an encoded vector must be an even multiple of the length of a single element (for example, a 17-byte vector of uint16 would be illegal).\n```\n\nAn errata for 5246 was filed (http://www.rfc-editor.org/errata_search.php?rfc=5246&eid=4750) suggesting this fix:\n\n```\nThe length of an encoded vector must be a whole multiple of the length of a single element (for example, a 17-byte vector of uint16 would be illegal).\n```\n\nBen Kaduk pointed out that Jeff Hodges suggested this earlier:\n\n```\nThe length of an encoded variable-length vector must be an exact multiple of the length of a single element. For example, an encoded 17-byte vector of uint16 would be illegal, and an encoded variable-length vector of four 32 byte elements, having a ceiling of 2^16-1, will be 130 bytes long overall (2 byte length field followed by 128 bytes of data).\n```\n\nShould we leave as is or adopt one of the two suggestions?\n",
      "createdAt": "2016-08-24T17:14:32Z",
      "updatedAt": "2016-08-29T19:53:07Z",
      "closedAt": "2016-08-29T19:53:07Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would be willing to have \"whole\" but I think \"even\" is fine in this\ncontext.\n\nOn Wed, Aug 24, 2016 at 10:14 AM, seanturner notifications@github.com\nwrote:\n\n> In s3.4 there's this sentence:\n> \n> The length of an encoded vector must be an even multiple of the length of a single element (for example, a 17-byte vector of uint16 would be illegal).\n> \n> An errata for 5246 was filed (http://www.rfc-editor.org/\n> errata_search.php?rfc=5246&eid=4750) suggesting this fix:\n> \n> The length of an encoded vector must be a whole multiple of the length of a single element (for example, a 17-byte vector of uint16 would be illegal).\n> \n> Ben Kaduk pointed out that Jeff Hodges suggested this earlier:\n> \n> The length of an encoded variable-length vector must be an exact multiple of the length of a single element. For example, an encoded 17-byte vector of uint16 would be illegal, and an encoded variable-length vector of four 32 byte elements, having a ceiling of 2^16-1, will be 130 bytes long overall (2 byte length field followed by 128 bytes of data).\n> \n> Should we leave as is or adopt one of the two suggestions?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/issues/587, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ABD1oevp2Zyb-oIfE2ientIf42rq6mG7ks5qjHv6gaJpZM4JsPgC\n> .\n",
          "createdAt": "2016-08-24T17:19:01Z",
          "updatedAt": "2016-08-24T17:19:01Z"
        }
      ]
    },
    {
      "number": 588,
      "id": "MDU6SXNzdWUxNzMwNTI0Njk=",
      "title": "Need code point assignment for ticket_early_data_info",
      "url": "https://github.com/tlswg/tls13-spec/issues/588",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-08-24T20:38:51Z",
      "updatedAt": "2016-09-02T12:50:46Z",
      "closedAt": "2016-09-02T12:50:46Z",
      "comments": []
    },
    {
      "number": 603,
      "id": "MDU6SXNzdWUxNzM3NjI2MDI=",
      "title": "ke_modes and auth_modes have opposite order in NST and PSK xtns",
      "url": "https://github.com/tlswg/tls13-spec/issues/603",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "```\n struct {\n     uint32 ticket_lifetime;\n     PskKeyExchangeMode ke_modes<1..255>;\n     PskAuthenticationMode auth_modes<1..255>;\n     opaque ticket<1..2^16-1>;\n     TicketExtension extensions<0..2^16-2>;\n } NewSessionTicket;\n\n   struct {\n       PskKeyExchangeMode ke_modes<1..255>;\n       PskAuthenticationMode auth_modes<1..255>;\n       opaque identity<0..2^16-1>;\n   } PskIdentity;\n```\n",
      "createdAt": "2016-08-29T12:25:45Z",
      "updatedAt": "2016-08-29T17:00:08Z",
      "closedAt": "2016-08-29T17:00:08Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Swap one\n",
          "createdAt": "2016-08-29T12:25:52Z",
          "updatedAt": "2016-08-29T12:25:52Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Huh? Both go ke_modes then auth_modes.\n",
          "createdAt": "2016-08-29T16:52:52Z",
          "updatedAt": "2016-08-29T16:52:52Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Huh, this must be a cut-and-paste error in my code. \n",
          "createdAt": "2016-08-29T17:00:08Z",
          "updatedAt": "2016-08-29T17:00:08Z"
        }
      ]
    },
    {
      "number": 623,
      "id": "MDU6SXNzdWUxNzQ5MTM3ODU=",
      "title": "Can we just ban supplemental auth in 1.3",
      "url": "https://github.com/tlswg/tls13-spec/issues/623",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": " user_mapping [RFC4681] | Yes | Encrypted |\n| client_authz [RFC5878] | No | Encrypted |\n| server_authz [RFC5878] | No | Encrypted |\n\nDoes anyone use this stuff? It's now ill-defined\n",
      "createdAt": "2016-09-03T19:41:38Z",
      "updatedAt": "2016-09-10T16:08:09Z",
      "closedAt": "2016-09-10T16:08:09Z",
      "comments": []
    },
    {
      "number": 627,
      "id": "MDU6SXNzdWUxNzUxODE1ODc=",
      "title": "Structures with one member ",
      "url": "https://github.com/tlswg/tls13-spec/issues/627",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "What is the criteria to choose a structure with _one_ member and a _non_ structure? The followings are such data types defined in this spec:\n\n```\nstruct {\n    opaque random_bytes[32];\n} Random;\n\nuint8 CipherSuite[2];    /* Cryptographic suite selector */\n\nstruct {\n    opaque cookie<0..2^16-1>;\n} Cookie;\n\nSignatureScheme supported_signature_algorithms<2..2^16-2>;\n\nstruct {\n    NamedGroup named_group_list<1..2^16-1>;\n} NamedGroupList;\n\nstruct {\n    Extension extensions<0..2^16-1>;\n} EncryptedExtensions;\n\nopaque DistinguishedName<1..2^16-1>;\n\nopaque ASN1Cert<1..2^24-1>;\n\nstruct {\n   opaque verify_data[Hash.length];\n} Finished;\n```\n\nIf there is no reason, I would recommend to unify their syntax rules. It seems to me that the followings are much easier to read:\n\n```\nopaque Random[32];\n\nuint8 CipherSuite[2];    /* Cryptographic suite selector */\n\nopaque Cookie<0..2^16-1>;\n\nSignatureScheme SupportedSignatureAlgorithms<2..2^16-2>;\n\nNamedGroup NamedGroupList<1..2^16-1>;\n\nExtension EncryptedExtensions<0..2^16-1>;\n\nopaque DistinguishedName<1..2^16-1>;\n\nopaque ASN1Cert<1..2^24-1>;\n\nopaque Finished[Hash.length];\n```\n",
      "createdAt": "2016-09-06T07:49:03Z",
      "updatedAt": "2016-09-27T00:25:19Z",
      "closedAt": "2016-09-27T00:25:19Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good suggestion. Thanks.\n",
          "createdAt": "2016-09-06T13:48:38Z",
          "updatedAt": "2016-09-06T13:48:38Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One case where a single field struct is generally the best route is for the payload struct for extensions and messages. (e.g. Cookie, NamedGroupList, EncryptedExtensions, etc.) The section is defining a self-contained data-structure, and using the struct notation consistently to do this does make sense. The ones that aren't a self-contained data-structure, yeah, I think it could be cleaned up a bit. (e.g. Random)\n",
          "createdAt": "2016-09-06T19:56:26Z",
          "updatedAt": "2016-09-06T19:56:26Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In my opinion, if a structure with one member is used, the member should be used somewhere in definitions. For instance, \"verify_data\" is used as follows:\n\n```\n   verify_data =\n       HMAC(finished_key, Hash(\n                               Handshake Context +\n                               Certificate* +\n                               CertificateVerify*\n                          ) +\n                          Hash(resumption_context)\n       )\n```\n\nThis makes sense to me. But \"cookie\" is not used in the definitions. So, I would like to use non structure for \"Cookie\".\n",
          "createdAt": "2016-09-07T01:39:53Z",
          "updatedAt": "2016-09-07T01:39:53Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazu-yamamoto I would take a PR along the lines that @davegarrett suggests.\n",
          "createdAt": "2016-09-21T20:34:30Z",
          "updatedAt": "2016-09-21T20:34:30Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazu-yamamoto also, please provide a PR adding yourself to the contributor list in alphabetical order.\n",
          "createdAt": "2016-09-21T20:35:15Z",
          "updatedAt": "2016-09-21T20:35:15Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done in #651. Thank you.\n",
          "createdAt": "2016-09-22T06:26:25Z",
          "updatedAt": "2016-09-22T06:26:25Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I will handle @davegarrett's suggestions later.\n",
          "createdAt": "2016-09-22T06:27:28Z",
          "updatedAt": "2016-09-22T06:27:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazu-yamamoto can we close this?\n",
          "createdAt": "2016-09-26T11:30:31Z",
          "updatedAt": "2016-09-26T11:30:31Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes! Let's close.\n",
          "createdAt": "2016-09-27T00:25:19Z",
          "updatedAt": "2016-09-27T00:25:19Z"
        }
      ]
    },
    {
      "number": 630,
      "id": "MDU6SXNzdWUxNzU0NDA0NDU=",
      "title": "Syntax issues",
      "url": "https://github.com/tlswg/tls13-spec/issues/630",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I have written a syntax validator to check the validity of definitions. In this issue, I would like to point out what I noticed.\n",
      "createdAt": "2016-09-07T08:17:37Z",
      "updatedAt": "2016-09-26T11:34:01Z",
      "closedAt": "2016-09-26T11:34:01Z",
      "comments": [
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(1) Some enum definitions use \"floor..ceiling\" notation which is not defined. Section 3.5 should clearly define this.\n",
          "createdAt": "2016-09-07T08:19:31Z",
          "updatedAt": "2016-09-07T08:19:31Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(2) I think that the `struct` keyword is allowed only in the top level definitions. But `struct {}` is used inside of EarlyDataIndication. I would suggest to defined the following in the top level:\n\n```\nstruct {} None;\n```\n",
          "createdAt": "2016-09-07T08:21:57Z",
          "updatedAt": "2016-09-07T08:21:57Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(3) The following assignment is really strange:\n\n```\nstruct {\n    ContentType opaque_type = application_data(23); /* see TLSInnerPlaintext.type */\n```\n\nI would suggest to change this to:\n\n```\nstruct {\n    ContentType opaque_type = { 23 }; /* application_data, see TLSInnerPlaintext.type */\n```\n",
          "createdAt": "2016-09-07T08:24:12Z",
          "updatedAt": "2016-09-07T08:24:12Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Wednesday, September 07, 2016 04:24:15 am Kazu Yamamoto wrote:\n\n> (3) The following assignment is really strange:\n> \n> ```\n> struct {\n>     ContentType opaque_type = application_data(23); /* see TLSInnerPlaintext.type */\n> ```\n> \n> I would suggest to change this to:\n> \n> ```\n> struct {\n>     ContentType opaque_type = { 23 }; /* application_data, see TLSInnerPlaintext.type */\n> ```\n\nI don't understand why you consider this current notation here strange. It's the same notation used for enum values elsewhere.\n",
          "createdAt": "2016-09-07T16:44:09Z",
          "updatedAt": "2016-09-07T16:44:09Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What I can tell from Section 3 is as follows:\n- The \"symbol(num)\" notation is allowed in the _declaration_ of enum.\n- \"symbol\" can be used as _label_ of the case clause.\n- \"{num, ...}\" can be used for assignment.\n\nI don't see that \"symbol(num)\" can be used for assignment.\n\nI wrote a parse based on Section 3 and what I reported here is the errors reported by the parser.\n",
          "createdAt": "2016-09-08T02:42:05Z",
          "updatedAt": "2016-09-08T02:42:05Z"
        }
      ]
    },
    {
      "number": 631,
      "id": "MDU6SXNzdWUxNzU2NTgzNjg=",
      "title": "KeyUpdate is missing in Appendix A",
      "url": "https://github.com/tlswg/tls13-spec/issues/631",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\"%%% SOMETHING\" is necessary before the definition of `KeyUpdate`. Since I don't know what is appropriate for SOMETHING, I don't send a pull request.\n",
      "createdAt": "2016-09-08T03:43:57Z",
      "updatedAt": "2016-09-10T16:26:27Z",
      "closedAt": "2016-09-10T16:26:27Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"%%% Key Exchange Messages\" with an empty line after it before the struct, would fit.\n\nI'd suggest we just drop it, but PR #611 is giving it a member to make it worth not just stating it with a sentence instead.\n",
          "createdAt": "2016-09-08T05:43:36Z",
          "updatedAt": "2016-09-08T05:43:36Z"
        }
      ]
    },
    {
      "number": 639,
      "id": "MDU6SXNzdWUxNzY1NTQ5NzQ=",
      "title": "the \"allow_early_data\" flag",
      "url": "https://github.com/tlswg/tls13-spec/issues/639",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> ## Zero-RTT Data\n> \n> When resuming via a PSK with an appropriate ticket (i.e., one with\n> the \"allow_early_data\" flag),\n\nThe \"allow_early_data\" flag does not exist anymore. This should be replaced with the \"ticket_early_data_info\" extension or something.\n",
      "createdAt": "2016-09-13T05:47:08Z",
      "updatedAt": "2016-09-21T19:09:49Z",
      "closedAt": "2016-09-21T19:09:48Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed\n",
          "createdAt": "2016-09-21T19:09:48Z",
          "updatedAt": "2016-09-21T19:09:48Z"
        }
      ]
    },
    {
      "number": 644,
      "id": "MDU6SXNzdWUxNzg0NDM1NjI=",
      "title": "Client key share ordering does not mesh with HelloRetryRequest",
      "url": "https://github.com/tlswg/tls13-spec/issues/644",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is what I get for uploading PR #643 immediately before trying to enforce it instead of immediately afterwards... :-) On the plus side, yay for tests!\n\nThe `client_shares` list in the `key_share` extension is supposed to be \"in descending order of client preference\". However, this isn't true for the second ClientHello because the new KeyShareEntry is always appended.\n\nIt's only a SHOULD-level requirement with #643 reverted, but the spec text is still off, and it is a little bit odd for stateless HRR implementations. (Though if the stateless implementation remembers in the cookie that it already committed to a group, it's probably still fine?)\n",
      "createdAt": "2016-09-21T19:40:47Z",
      "updatedAt": "2016-10-16T19:57:15Z",
      "closedAt": "2016-10-16T19:57:15Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just put an \"except for the last `key_share`, in the case where an additional `key_share` is requested with a HelloRetryRequest\" or something on the sentence.\n",
          "createdAt": "2016-09-21T23:58:26Z",
          "updatedAt": "2016-09-21T23:58:26Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sounds reasonable. Another option is we say `key_share` isn't ordered at all. I dunno, maybe you have to keep them sorted or something. There already is a `supported_groups` ordering. We're pretty ambiguous right now about whether `key_share` is a secondary preference list or merely a prediction set. (I think it's best to make it a prediction set and avoid the complex semantics.)\n",
          "createdAt": "2016-09-22T00:29:03Z",
          "updatedAt": "2016-09-22T00:29:03Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Although keeping them sorted would be a huge pain, even if it is easier to enforce. That's probably not a good idea.\n",
          "createdAt": "2016-09-22T00:30:08Z",
          "updatedAt": "2016-09-22T00:30:08Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, if we wanted the HRR case to jive nicely with sorting, we could mandate reverse priority order; the appended would be top priority. This would work nicely, but could be considered unnecessary if sorting is any burden.\n\nI don't remember if this was specifically why I put a SHOULD here, but mandating an absolute requirement here could just be more trouble than it's worth. The worry with not having any requirement is that a pair of bad implementations could use the key_share priority instead of supported_groups and mess things up, however I'm not so sure it's that big of a risk. I think a SHOULD with @martinthomson's exception is fine.\n",
          "createdAt": "2016-09-22T03:47:51Z",
          "updatedAt": "2016-09-22T03:47:51Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr's proposal on-list to replace the key_share after an HRR, rather than append to it, would fix this rather easily. Much better than fiddling with the language or ordering.\n",
          "createdAt": "2016-10-09T20:03:04Z",
          "updatedAt": "2016-10-09T20:03:04Z"
        }
      ]
    },
    {
      "number": 660,
      "id": "MDU6SXNzdWUxNzkzNzcxMjQ=",
      "title": "Other syntax issues",
      "url": "https://github.com/tlswg/tls13-spec/issues/660",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "1. There is no definition for `Hash`.  I would like to know the type of `Hash.length` at least.\n2. Should we use `select` for `TicketExtension.extension_data`, `Extension.extension_data`, `TLSPlaintext.fragment`, and `TLSInnerPlaintext.content`? If we do it, we can verify the coverage of enum types by parsers.\n",
      "createdAt": "2016-09-27T01:33:10Z",
      "updatedAt": "2016-09-28T00:57:50Z",
      "closedAt": "2016-09-27T12:13:14Z",
      "comments": [
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I did it for testing and I think the spec gets much readable. But I found one issue. For instance, if we change\n\n```\nstruct {\n    ExtensionType extension_type;\n    opaque extension_data<0..2^16-1>;\n} Extension;\n```\n\nto\n\n```\nstruct {\n    ExtensionType extension_type;\n    select (Extension.extension_type) {\n        case supported_groups:     NamedGroupList;\n        case signature_algorithms: SignatureSchemeList;\n        case key_share:            KeyShare;\n        case pre_shared_key:       PreSharedKeyExtension;\n        case early_data:           EarlyDataIndication;\n        case supported_versions:   SupportedVersions;\n        case cookie:               Cookie;\n    };\n} Extension;\n```\n\nlength information is lost.\n\nNote that this change provides benefit particularly to this `Extension` because the case names are differrent from the corresponding type names.\n",
          "createdAt": "2016-09-27T04:32:11Z",
          "updatedAt": "2016-09-27T04:32:11Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is not an OK change. It would make it impossible to process unknown extensions.\n",
          "createdAt": "2016-09-27T12:13:14Z",
          "updatedAt": "2016-09-27T12:13:14Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr Two questions:\n- What about `Hash`?\n- Even if explicit `select` is not suitable for extensions, what about `TLSPlaintext.fragment` and `TLSInnerPlaintext.content`? See the following example:\n\n```\nstruct {\n    // TLSPlaintext.length\n    select (TLSInnerPlaintext.type) {\n        case alert:            Alert;\n        case handshake:        Handshake;\n        case application_data: ApplicationData;\n    };\n   ContentType type;\n   uint8 zeros[length_of_padding];\n} TLSInnerPlaintext;\n```\n",
          "createdAt": "2016-09-27T14:02:43Z",
          "updatedAt": "2016-09-27T14:02:43Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, I don't think these are helping things much.\n",
          "createdAt": "2016-09-27T15:51:30Z",
          "updatedAt": "2016-09-27T15:51:30Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A handshake message in TLS may be fragmented across several records anyway, so there is no more descriptive thing to put there than an opaque byte string. In general, record boundaries and subprotocol message boundaries need not be correlated. The record payload is treated as a stream, with record boundaries discarded, and then parsed anew to get message boundaries. (Except for alerts and the points where handshake message boundaries induce key changes.)\n",
          "createdAt": "2016-09-27T16:04:50Z",
          "updatedAt": "2016-09-27T16:04:50Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> what about Hash?\n\nThe question of length is addressed in\n\n```\n   The Hash function and the HKDF hash are the cipher suite hash\n   algorithm.  Hash.length is its output length.\n```\n",
          "createdAt": "2016-09-27T16:40:56Z",
          "updatedAt": "2016-09-27T16:40:56Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK. Thank you, guys, for your explanations!\n",
          "createdAt": "2016-09-28T00:57:50Z",
          "updatedAt": "2016-09-28T00:57:50Z"
        }
      ]
    },
    {
      "number": 661,
      "id": "MDU6SXNzdWUxNzkzOTQ4MDg=",
      "title": "TicketEarlyDataInfo",
      "url": "https://github.com/tlswg/tls13-spec/issues/661",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "TicketEarlyDataInfo is missing in Appendix A.\n",
      "createdAt": "2016-09-27T04:26:36Z",
      "updatedAt": "2016-10-09T01:18:16Z",
      "closedAt": "2016-10-09T01:18:16Z",
      "comments": []
    },
    {
      "number": 677,
      "id": "MDU6SXNzdWUxODE4NTM1MDg=",
      "title": "Unify all the extension code points into a common list",
      "url": "https://github.com/tlswg/tls13-spec/issues/677",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This will make life a lot easier\n",
      "createdAt": "2016-10-08T23:02:28Z",
      "updatedAt": "2016-10-12T15:24:35Z",
      "closedAt": "2016-10-12T15:24:35Z",
      "comments": []
    },
    {
      "number": 682,
      "id": "MDU6SXNzdWUxODI2MTc5NDU=",
      "title": "Draft format on supported_versions",
      "url": "https://github.com/tlswg/tls13-spec/issues/682",
      "state": "CLOSED",
      "author": "alagoutte",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "on 4.2.1.1. Draft Version Indicator, it is no indicate the \"format\" of draft\n\nNSS (Firefox) use draft convert to hex (0x7f10 for draft-16) but new picotls implementation use decimal (0x7f16)\n",
      "createdAt": "2016-10-12T19:53:20Z",
      "updatedAt": "2016-10-12T20:24:42Z",
      "closedAt": "2016-10-12T20:12:22Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is a list of byte values (cf. DTLS 1.2 version number), so it should be 0x7f0a.\n\nI pushed https://github.com/tlswg/tls13-spec/commit/0353994e038cfbf15becc68c412644789d2e3009 to clarify this point\n",
          "createdAt": "2016-10-12T20:12:22Z",
          "updatedAt": "2016-10-12T20:12:22Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you for the clarification. I have updated picotls addressing the issue.\n",
          "createdAt": "2016-10-12T20:23:01Z",
          "updatedAt": "2016-10-12T20:23:01Z"
        },
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for (quick) fix/clarification ! \n",
          "createdAt": "2016-10-12T20:24:42Z",
          "updatedAt": "2016-10-12T20:24:42Z"
        }
      ]
    },
    {
      "number": 688,
      "id": "MDU6SXNzdWUxODI3NzM5MDk=",
      "title": "Clarify that handshake context includes the type and length.",
      "url": "https://github.com/tlswg/tls13-spec/issues/688",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This got lost somewhere.\n",
      "createdAt": "2016-10-13T12:19:10Z",
      "updatedAt": "2016-10-17T00:43:18Z",
      "closedAt": "2016-10-17T00:43:18Z",
      "comments": []
    },
    {
      "number": 700,
      "id": "MDU6SXNzdWUxODMzMTE5MDk=",
      "title": "Undefined \"select\" syntax",
      "url": "https://github.com/tlswg/tls13-spec/issues/700",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Only one _expression_ is allowed after \"case\" of \"select\". But after the \"client_hello\" case, two expressions are enumerated:\n\n```\n   struct {\n       select (Handshake.msg_type) {\n           case client_hello:\n              PskIdentity identities<6..2^16-1>;\n              PskBinderEntry binders<33..2^16-1>;\n\n           case server_hello:\n              uint16 selected_identity;\n       };\n\n   } PreSharedKeyExtension;\n```\n\nWe should define one structure to hold both `PskIdentity` and `PskBinderEntry`.\n",
      "createdAt": "2016-10-17T02:24:44Z",
      "updatedAt": "2016-10-18T10:19:26Z",
      "closedAt": "2016-10-18T10:19:26Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We can't combine the structures, the line between those two things is where the handshake transcript is truncated when calculating the binders.\n\nI wasn't aware of the rule for one entry after each case.  I thought that it permitted all entries up until the next case statement.\n",
          "createdAt": "2016-10-17T03:30:24Z",
          "updatedAt": "2016-10-17T03:30:24Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Where are you getting the rule that only one value can come after a case?\n\nIn any case, as MT says you can't combine the structures. If such a rule exists (which I'm not convinced it does) you would need to do:\n\nstruct {\n   PskIdentity identities<6..2^16-1>;\n    PskBinderEntry binders<33..2^16-1>;\n} \n",
          "createdAt": "2016-10-17T03:31:17Z",
          "updatedAt": "2016-10-17T03:31:17Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe the the restriction @kazu-yamamoto is referring to is: _There must be a case arm for **every** element of the enumeration declared in the select_ ([section 3.6.1](https://tlswg.github.io/tls13-spec/#variants)).\n",
          "createdAt": "2016-10-17T03:48:02Z",
          "updatedAt": "2016-10-17T03:48:02Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "`struct` in `struct` is not allowed execpt _annoymous struct_ (`struct {}`). I believe the presentation language is carefully designed to avoid such a nesting definition.\n\nWe should define a top level structure for this.\n",
          "createdAt": "2016-10-17T04:56:48Z",
          "updatedAt": "2016-10-17T04:56:48Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We may have stumbled into a prescriptivist vs. descriptivist debate, here. Since our syntax is effectively ad hoc with respect to this document, I'm on the descriptivist side.\n\nThe current syntax is fine. If clarifications would help on how we describe that syntax to allow for this case, then that wouldn't be unwelcome. However, we're not writing a machine-readable language here; this is for human consumption, and superfluous notation can just be counter-productive.\n",
          "createdAt": "2016-10-17T07:07:15Z",
          "updatedAt": "2016-10-17T07:07:15Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not on both sides. What I want is just a clear definition. I implemented a parser based on Section 3 but it cannot parse the syntax time to time. It's OK for me to extend the presentation language but I want to avoid usage of non-defined syntax rule.\n\nNote that I could find many syntax errors since the syntax is machine-readable. And basically static analysis tools help productivity.\n\nBut if the editor and contributors think this syntax check is counter-productive, I will stop this activity.\n",
          "createdAt": "2016-10-17T07:56:50Z",
          "updatedAt": "2016-10-17T07:56:50Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I do think it's productive to have a clear definition, and having something\nthat can be mechanically parsed is good. If there are clear inconsistencies\nin the syntax as used, I'm happy to fix them, but I think @davegarrett is\nbasically right in that the defn of the syntax is mostly in the way it's\nused, so if there's something that we do a lot and that would be contorted\nnot to do then we should do it and modify the syntax section to match\n(that's mostly how we got case fall-through btw).\n\nAnyway, I don't see a section that forbids the use of multiple struct\nelements in a single case branch: the section @kazuho points to says that\nthere must be an arm for every enum element.\n\nI suggest we resolve this particular item by explicitly allowing the\nconstruct;\n\nselect (foo) {\n  case A:\n     T t1;\n  case B:\n     T t2;\n     U u1;\n};\n\nOn Mon, Oct 17, 2016 at 12:56 AM, Kazu Yamamoto notifications@github.com\nwrote:\n\n> I'm not on both sides. What I want is just a clear definition. I\n> implemented a parser based on Section 3 but it cannot parse the syntax time\n> to time. It's OK for me to extend the presentation language but I want to\n> avoid usage of non-defined syntax rule.\n> \n> Note that I could find many syntax errors since the syntax is\n> machine-readable. And basically static analysis tools help productivity.\n> \n> But if the editor and contributors think this syntax check is\n> counter-productive, I will stop this activity.\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/issues/700#issuecomment-254137747,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ABD1oRWxGUQF9bETJFW7gx1zVYoDc56fks5q0ypEgaJpZM4KYLE0\n> .\n",
          "createdAt": "2016-10-17T11:07:01Z",
          "updatedAt": "2016-10-17T11:07:01Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK. I send a pull request to clarify the presentation language. I modified my parser and confirmed that it can parse the current syntax.\n",
          "createdAt": "2016-10-18T06:59:30Z",
          "updatedAt": "2016-10-18T06:59:30Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The patch above has been merged. Let's close.\n",
          "createdAt": "2016-10-18T10:19:26Z",
          "updatedAt": "2016-10-18T10:19:26Z"
        }
      ]
    },
    {
      "number": 711,
      "id": "MDU6SXNzdWUxODM2MDgxNzQ=",
      "title": "Extension in NewSessionTicket",
      "url": "https://github.com/tlswg/tls13-spec/issues/711",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- `NewSessionTicket` includes `Extension` which means a hello extension.\n  Is this intentional or should this be `TicketExtension` or something?\n- How we can tell the type of `extensions` without `TicketExtensionType`?\n- `ticket_extensions` is used in the explanation but not found in this structure. Should we replace `extensions` with `ticket_extensions`?\n\n```\nstruct {\n    uint32 ticket_lifetime;\n    uint32 ticket_age_add;\n    opaque ticket<1..2^16-1>;\n    Extension extensions<0..2^16-2>;\n} NewSessionTicket;\n```\n",
      "createdAt": "2016-10-18T07:20:10Z",
      "updatedAt": "2016-10-20T00:18:40Z",
      "closedAt": "2016-10-20T00:18:40Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "1. I made all extensions the same type. Having a separate type seemed silly.\n2. Extension contains a type:\n      struct {\n          ExtensionType extension_type;\n          opaque extension_data<0..2^16-1>;\n      } Extension;\n3. I actually think s/ticket_extensions/extensions/ as we can say NewSessionTicket.extensions\n",
          "createdAt": "2016-10-18T14:04:06Z",
          "updatedAt": "2016-10-18T14:04:06Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr Thank you for explanation. I sent a pull request to make this easier to understand.\n",
          "createdAt": "2016-10-19T07:01:34Z",
          "updatedAt": "2016-10-19T07:01:34Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The PR has been merged. Let's close.\n",
          "createdAt": "2016-10-20T00:18:40Z",
          "updatedAt": "2016-10-20T00:18:40Z"
        }
      ]
    },
    {
      "number": 719,
      "id": "MDU6SXNzdWUxODQwOTk2NzE=",
      "title": "Should the server send psk_key_exchange_modes?",
      "url": "https://github.com/tlswg/tls13-spec/issues/719",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is really unclear from the description of the extension itself.\n",
      "createdAt": "2016-10-19T23:28:35Z",
      "updatedAt": "2016-10-20T12:57:01Z",
      "closedAt": "2016-10-20T12:57:01Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No. I'll fix.\n\nOn Wed, Oct 19, 2016 at 4:28 PM, Martin Thomson notifications@github.com\nwrote:\n\n> This is really unclear from the description of the extension itself.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/issues/719, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ABD1obm1W9IAEZA0ybUDeq5axfzH7QJbks5q1qekgaJpZM4KbkPl\n> .\n",
          "createdAt": "2016-10-19T23:44:52Z",
          "updatedAt": "2016-10-19T23:44:52Z"
        }
      ]
    },
    {
      "number": 720,
      "id": "MDU6SXNzdWUxODQxMDAxNDE=",
      "title": "SNI and 0-RTT",
      "url": "https://github.com/tlswg/tls13-spec/issues/720",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The intro mentions that SNI is bound to a PSK.  But later the server is only required to validate version, cipher suite and ALPN.  What gives?\n",
      "createdAt": "2016-10-19T23:32:17Z",
      "updatedAt": "2016-10-21T00:34:11Z",
      "closedAt": "2016-10-21T00:34:11Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good catch. We changed it but not everywhere.\n\nOn Wed, Oct 19, 2016 at 4:32 PM, Martin Thomson notifications@github.com\nwrote:\n\n> The intro mentions that SNI is bound to a PSK. But later the server is\n> only required to validate version, cipher suite and ALPN. What gives?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/issues/720, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ABD1oXVkcnvhb3qKZbHxJ5UNXSr_-ZIlks5q1qiDgaJpZM4KbkX4\n> .\n",
          "createdAt": "2016-10-19T23:45:12Z",
          "updatedAt": "2016-10-19T23:45:12Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh, this is only needed for external PSKs. That's fine.\n",
          "createdAt": "2016-10-20T12:56:08Z",
          "updatedAt": "2016-10-20T12:56:08Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So it's OK to resume with a different name in the SNI?  I'm pretty sure that we don't accept that in NSS.\n",
          "createdAt": "2016-10-20T23:31:09Z",
          "updatedAt": "2016-10-20T23:31:09Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The conclusion was that it should be the same for 0-RTT and resumption and David argued to me that it was OK for both (IIRC).\n\nMaybe @davidben can weigh in here.\n",
          "createdAt": "2016-10-20T23:38:05Z",
          "updatedAt": "2016-10-20T23:38:05Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If the conclusion was that they should be the same, then why do we insist on binding 0-RTT keys to SNI?\n",
          "createdAt": "2016-10-20T23:46:11Z",
          "updatedAt": "2016-10-20T23:46:11Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't know of anyone that resumes across names (although there may be something to be said for doing so with h2). The spec hasn't historically done a good job of saying when you do and don't get to resume. Name isn't sufficient if, say, your application has two different contexts with different client certificate decisions. The discussion in issue #136 tried to touch on this, though it was closed before it got anywhere.\n\nAnyway, I don't think 0-RTT rules are the place for it, one way or another. It seems either both 0-RTT and resumption should be okay or both shouldn't be. 0-RTT has no particular need to constrain client extensions, just like it's perfectly fine to change your ALPN advertisement when you do 0-RTT. The only requirement is what the server selects not change.\n",
          "createdAt": "2016-10-20T23:46:36Z",
          "updatedAt": "2016-10-20T23:46:36Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson if you are referring to S 2.3, that really should be in the PSK section, because the requirement is that the client know what SNI to offer.\n",
          "createdAt": "2016-10-20T23:49:38Z",
          "updatedAt": "2016-10-20T23:49:38Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I'm referring to the list in 2.3.  There is a difference between what the client might offer in the handshake (which should reflect what the client is willing to do, nothing else) and what it _binds to the PSK_.  The list in 2.3 says that SNI is bound to the PSK, but I agree with @davidben that that is only really possible if we insist on binding SNI to resumption in general.\n",
          "createdAt": "2016-10-20T23:51:57Z",
          "updatedAt": "2016-10-20T23:51:57Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, this all got kind of confused.\n\nRight now, RFC 6066 simply forbids resumption across SNI:\n\n\"   When the server is deciding whether or not to accept a request to\n   resume a session, the contents of a server_name extension MAY be used\n   in the lookup of the session in the session cache.  The client SHOULD\n   include the same server_name extension in the session resumption\n   request as it did in the full handshake that established the session.\n   A server that implements this extension MUST NOT accept the request\n   to resume the session if the server_name extension contains a\n   different name.  Instead, it proceeds with a full handshake to\n   establish a new session.  When resuming a session, the server MUST\n   NOT include a server_name extension in the server hello.\n\"\n\nSo, this seems like it should also apply to TLS 1.3 and of course also to 0-RTT, but of course the text doesn't say one way or the other (ugh).\n\nIf we're considering allowing it (and obviously I kind of thinkoed the text here) we presumably should have some real analysis before we allow it in TLS 1.3, as we know there are risks here:\nhttp://antoine.delignat-lavaud.fr/doc/www15.pdf\n",
          "createdAt": "2016-10-21T00:07:36Z",
          "updatedAt": "2016-10-21T00:07:36Z"
        }
      ]
    },
    {
      "number": 721,
      "id": "MDU6SXNzdWUxODQxMDAzOTQ=",
      "title": "What does it mean to have a Certificate with zero CertificateEntry items?",
      "url": "https://github.com/tlswg/tls13-spec/issues/721",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The grammar permits it, but I don't see how it would make sense.\n",
      "createdAt": "2016-10-19T23:34:20Z",
      "updatedAt": "2016-10-20T12:55:16Z",
      "closedAt": "2016-10-20T12:55:16Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since TLS 1.0, a client is to respond to a certificate request with an empty list if it has none. Response of some kind is mandatory. We could change this, but I don't see any reason to do so.\n",
          "createdAt": "2016-10-19T23:41:35Z",
          "updatedAt": "2016-10-19T23:41:35Z"
        }
      ]
    },
    {
      "number": 722,
      "id": "MDU6SXNzdWUxODQxMDA3Nzk=",
      "title": "How does RFC 7250 (raw public keys) fit in?",
      "url": "https://github.com/tlswg/tls13-spec/issues/722",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "Do we replace ASN1Cert, CertificateEntry, or the entirety of the Certificate message body with the SPKI?\n",
      "createdAt": "2016-10-19T23:37:18Z",
      "updatedAt": "2017-04-16T17:21:37Z",
      "closedAt": "2017-04-16T17:21:37Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Replaces the whole message. Them's the rules.\n",
          "createdAt": "2016-10-19T23:49:20Z",
          "updatedAt": "2016-10-19T23:49:20Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "7250 mentions ASN1Cert directly.  It probably needs some clarification in this document to avoid confusion.\n",
          "createdAt": "2016-10-20T02:45:38Z",
          "updatedAt": "2016-10-20T02:45:38Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, will fix.\n\nOn Wed, Oct 19, 2016 at 7:45 PM, Martin Thomson notifications@github.com\nwrote:\n\n> 7250 mentions ASN1Cert directly. It probably needs some clarification in\n> this document to avoid confusion.\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/issues/722#issuecomment-254995094,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ABD1oeWxVWKs1Bd-LUSnUrzl5FArRxBNks5q1tXUgaJpZM4Kbkjh\n> .\n",
          "createdAt": "2016-10-20T03:05:30Z",
          "updatedAt": "2016-10-20T03:05:30Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We may actually need a 7250-bis. I'm going to leave this for now.\n",
          "createdAt": "2016-10-20T12:56:51Z",
          "updatedAt": "2016-10-20T12:56:51Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is still a problem. RFC 7250 is referenced in several places, but its use in TLS 1.3 is not well-defined.\r\n\r\nSection 2 of draft 18 says:\r\n>  Certificate:  [..]  Note that if raw public keys [RFC7250] or the cached information extension [RFC7924] are in use, then **this message will not contain a certificate but rather some other value corresponding to the server's long-term key**.  [Section 4.4.1]\r\n\r\nCertificate (section 4.4.1) is defined via:\r\n>     opaque ASN1Cert<1..2^24-1>;\r\n>\r\n>     struct {\r\n>         ASN1Cert cert_data;\r\n>         Extension extensions<0..2^16-1>;\r\n>     } CertificateEntry;\r\n>\r\n>     struct {\r\n>         opaque certificate_request_context<0..2^8-1>;\r\n>         CertificateEntry certificate_list<0..2^24-1>;\r\n>     } Certificate;\r\n\r\nIf the whole Certificate is replaced as suggested by Section 2, then the `certificate_request_context` is lost. While not a problem for the server certificate message (of which there can be only one), it is not good for client certificates.\r\n\r\nIn TLS 1.2 there is only one Certificate per handshake. In TLS 1.3 you can have multiple CertificateRequests and Certificate responses (in any order).\r\n\r\nRestricting the number of CertificateRequest/Certificate responses (or requiring the context to be the same) is one option, but may complicate the protocol/implementation.\r\nSince the main motivation of RPK is to share public keys with reduced overhead (no need for a full forest of options/extensions), what about replacing the `certificate_list` field? Overhead is only 1 byte if no context is needed.",
          "createdAt": "2017-01-30T16:19:13Z",
          "updatedAt": "2017-01-30T16:19:13Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done",
          "createdAt": "2017-04-16T17:21:37Z",
          "updatedAt": "2017-04-16T17:21:37Z"
        }
      ]
    },
    {
      "number": 727,
      "id": "MDU6SXNzdWUxODQzNDg0MTA=",
      "title": "editorial: reference not linkified",
      "url": "https://github.com/tlswg/tls13-spec/issues/727",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://tools.ietf.org/html/draft-ietf-tls-tls13-17#section-4.4.1.1\n\nThe first RFC6066 in the above section is not linkified, but the second is. The first has an exclamation mark in the syntax. I don't know what this is for, so filing an issue rather than a PR to change.\n",
      "createdAt": "2016-10-20T21:43:48Z",
      "updatedAt": "2016-10-25T18:23:32Z",
      "closedAt": "2016-10-25T04:14:26Z",
      "comments": [
        {
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett `{{!RFCxxx}}` means it is a normative reference [1]. But probably that's not the cause of this issue, since this syntax is used in many places in the draft.\n\nEdit: And the HTML file generated by the [xml2rfc tool](https://xml2rfc.tools.ietf.org/) links to RFC6066 in this section correctly. So I think it is a bug of tools.ietf.org. (Note that the `[RFC6066]` is at the start of a section. Maybe their tool can't handle that?)\n\n[1] https://github.com/cabo/kramdown-rfc2629#references\n",
          "createdAt": "2016-10-20T22:23:17Z",
          "updatedAt": "2016-10-20T22:48:43Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Based on @xiaoyinl's comments I am going to close this. Ultimately RFC-Ed can fix it\n",
          "createdAt": "2016-10-25T04:14:26Z",
          "updatedAt": "2016-10-25T04:14:26Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the doc link. Maybe it's possible it's breaking because we're mixing this syntax and a manual list here? I don't know. Personally, I'd rather we just maintain the manual list and not bother with this syntax. It would've been good to use from the start, but we didn't.\n",
          "createdAt": "2016-10-25T18:23:31Z",
          "updatedAt": "2016-10-25T18:23:31Z"
        }
      ]
    },
    {
      "number": 733,
      "id": "MDU6SXNzdWUxODQ3MDQ5Nzg=",
      "title": "Clean up Finished key table",
      "url": "https://github.com/tlswg/tls13-spec/issues/733",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://tlswg.github.io/tls13-spec/#rfc.section.4.4\n\nThe 1-RTT annotations are redundant and you also don't need [sender] in brackets because we can just fill in the values, as client/server have separate tables lines\n",
      "createdAt": "2016-10-23T18:09:45Z",
      "updatedAt": "2016-10-26T05:32:21Z",
      "closedAt": "2016-10-26T05:32:21Z",
      "comments": []
    },
    {
      "number": 734,
      "id": "MDU6SXNzdWUxODQ3MzA2ODQ=",
      "title": "Reorder key derivations in ladder diagram",
      "url": "https://github.com/tlswg/tls13-spec/issues/734",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The binder key should come first\n",
      "createdAt": "2016-10-24T01:23:17Z",
      "updatedAt": "2016-10-25T04:01:30Z",
      "closedAt": "2016-10-25T04:01:30Z",
      "comments": []
    },
    {
      "number": 746,
      "id": "MDU6SXNzdWUxODYzNTc0MDQ=",
      "title": "minimum required extensions",
      "url": "https://github.com/tlswg/tls13-spec/issues/746",
      "state": "CLOSED",
      "author": "kroeckx",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In the Client Hello (4.1.2) it says:\r\nAs of TLS 1.3, all clients and servers will send at least one extension (at least \"key_share\" or \"pre_shared_key\").\r\n\r\nI believe that at least the supported_versions extension is also required for a client.",
      "createdAt": "2016-10-31T18:15:09Z",
      "updatedAt": "2016-11-28T18:41:59Z",
      "closedAt": "2016-11-28T18:41:59Z",
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rather than enumerating everything here, I've pushed a PR to just change \"at least\" to \"e.g.\".\n",
          "createdAt": "2016-10-31T18:46:36Z",
          "updatedAt": "2016-10-31T18:46:36Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I changed this separately.",
          "createdAt": "2016-11-28T18:41:59Z",
          "updatedAt": "2016-11-28T18:41:59Z"
        }
      ]
    },
    {
      "number": 749,
      "id": "MDU6SXNzdWUxODY3NDg0MTA=",
      "title": "Description of confidentiality in ch 1.",
      "url": "https://github.com/tlswg/tls13-spec/issues/749",
      "state": "CLOSED",
      "author": "secworks",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Could we rephrase the description of confidentiality in chapter one?\r\n\r\nIt now reads \"Confidentiality: Data sent over the channel is not visible to attackers.\". As far as I see it, data, will be visible to anybody that observes the traffic. However it is not possible for an attacker to get the contents, the cleartext meaning of the data. But for example observing the amount of data and that data is flowing over the channel is visible to an attacker.\r\n\r\nSomething like this perhaps:\r\nConfidentiality: The information in the data sent over the channel is not available to attackers.\r\n",
      "createdAt": "2016-11-02T09:21:09Z",
      "updatedAt": "2016-11-28T18:45:33Z",
      "closedAt": "2016-11-28T18:45:33Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We could be more pedantic and observe that it's not just attackers, it's everyone else.\n\n> The data sent over the connection is only available to the endpoints.\n\nAnd then maybe add:\n\n> TLS does not hide the length of the data it transmits, though endpoints are able to pad to obscure lengths.\n",
          "createdAt": "2016-11-03T02:57:05Z",
          "updatedAt": "2016-11-03T02:57:05Z"
        },
        {
          "author": "secworks",
          "authorAssociation": "NONE",
          "body": "Sounds good to me.\n",
          "createdAt": "2016-11-03T07:40:09Z",
          "updatedAt": "2016-11-03T07:40:09Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> TLS does not hide the length of the data it transmits, though endpoints are able to pad to obscure lengths.\n\nOn first reading, I took obscure to be an adjective.  How about \"in order to obscure...\"\n",
          "createdAt": "2016-11-03T10:43:57Z",
          "updatedAt": "2016-11-03T10:43:57Z"
        },
        {
          "author": "secworks",
          "authorAssociation": "NONE",
          "body": "Even better.\n",
          "createdAt": "2016-11-10T15:16:34Z",
          "updatedAt": "2016-11-10T15:16:34Z"
        }
      ]
    },
    {
      "number": 754,
      "id": "MDU6SXNzdWUxODc3NDQzMDA=",
      "title": "SHA-224 in signature algorithms must be SHA-1",
      "url": "https://github.com/tlswg/tls13-spec/issues/754",
      "state": "CLOSED",
      "author": "roelpeeters",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "[editorial]\r\nIn section 4.2.3. Signature Algorithms it says:\r\n In particular, MD5 [SLOTH] and SHA-224 MUST NOT be used.\r\nthis should be:\r\n In particular, MD5 and SHA-1 [SLOTH] MUST NOT be used.",
      "createdAt": "2016-11-07T15:39:39Z",
      "updatedAt": "2016-11-28T18:42:18Z",
      "closedAt": "2016-11-28T18:42:18Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's actually SHA-224, confusingly. That text refers to algorithms that were completely removed as of TLS 1.3 and thus applies retroactively to TLS 1.2. Sadly, SHA-1 cannot be taken out of TLS 1.2 just yet. TLS 1.2 messed up catastrophically here. Its ServerKeyExchange SHA-1 default meant a lot of implementations took shortcuts and only sign SHA-1. It will take a lot of ecosystem work to get rid of that one, so a MUST NOT is not realistic right now. :-(\n",
          "createdAt": "2016-11-07T15:48:43Z",
          "updatedAt": "2016-11-07T15:48:43Z"
        }
      ]
    },
    {
      "number": 758,
      "id": "MDU6SXNzdWUxODg4OTUyMDM=",
      "title": "Exporters should hash before calling HKDF-Expand-Label()",
      "url": "https://github.com/tlswg/tls13-spec/issues/758",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "HKDF-Expand-Label is defined as taking a HashValue.\r\n\r\nHKDF-Expand-Label(Secret, Label, HashValue, Length) =\r\n         HKDF-Expand(Secret, HkdfLabel, Length)\r\n\r\n\r\nHowever, exporters are defined as passing the context directly to the third argument:\r\n         HKDF-Expand-Label(Secret, label, context_value, key_length)\r\n\r\nThis should be:\r\n         HKDF-Expand-Label(Secret, label, Hash(context_value), key_length)\r\n\r\nThis would be a wire format change.\r\n",
      "createdAt": "2016-11-12T06:14:13Z",
      "updatedAt": "2016-11-28T19:10:35Z",
      "closedAt": "2016-11-28T19:10:35Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note that another reason for changing this is that context_value would be limited to a maximum of 255 bytes.\n",
          "createdAt": "2016-11-12T07:01:15Z",
          "updatedAt": "2016-11-12T07:01:15Z"
        }
      ]
    },
    {
      "number": 760,
      "id": "MDU6SXNzdWUxODg5Njc1MDM=",
      "title": "Certificate extension rules don't work for client certs",
      "url": "https://github.com/tlswg/tls13-spec/issues/760",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The spec says:\r\n> extensions:\r\n> A set of extension values for the CertificateEntry. The \u201cExtension\u201d format is defined in Section 4.2. Valid extensions include OCSP Status extensions ([RFC6066] and [RFC6961]) and SignedCertificateTimestamps ([RFC6962]). Any extension presented in a Certificate message must only be presented if the corresponding ClientHello extension was presented in the initial handshake. If an extension applies the the entire chain, it SHOULD be included in the first CertificateEntry.\r\n\r\nIt's not clear what the rules for client certificate extensions are. I don't think it's right to say an extension may only be included if in the ClientHello because that means I can send a totally unknown ClientHello extension followed by a totally unknown Certificate extension and since most stacks won't keep state around for unknown extensions, that boils to allowing unsolicited extensions on the client, but not the server.\r\n\r\nOne option is to resurrect PR #656. Then you can say that client Certificate extensions are solicited by CertificateRequest extensions, which mirrors how server Certificate extensions are solicited by ClientHello extensions.",
      "createdAt": "2016-11-13T12:25:46Z",
      "updatedAt": "2016-12-12T22:02:23Z",
      "closedAt": "2016-12-12T22:02:23Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Two observations about that:\n1. Clients can of course send any unsolicited stuff they want in CH, so I'm not _sure_ that this is a crisis. However, it is annoying that it's asymmetrical.\n2. I think this does point out a failing in the current structure, but I'm not not entirely sure we want PR#656. Here's another fix that adds an extra layer of hierarchy.\n\n```\n   struct {\n       opaque certificate_request_context<0..2^8-1>;\n       SignatureScheme\n         supported_signature_algorithms<2..2^16-2>;\n       DistinguishedName certificate_authorities<0..2^16-1>;\n       Extension certificate_extensions<0..2^16-1>;\n   } CertificateRequest;\n\n   struct {\n       opaque certificate_extension_oid<1..2^8-1>;\n       opaque certificate_extension_values<0..2^16-1>;\n   } OIDFilter;\n\n   struct {\n     OIDFilter filters<0..2^16-1>;\n   } OIDFilterExtension;\n```\n\nThe idea here would be that you would be allowed to offer a pile of extensions and one of which would be a list of OIDFilters, which are the current extensions defined for this message.\n\nNote: another idea I considered and rejected was to have an extension type which was \"I am an OID filter\" and then contain OIDFilter, but that falls afoul of the \"you can only have one extension rule.\"\n\nP.S. I think while we're in here we should also remove the explicit certificate_authorities block and replace it with an extension.\n",
          "createdAt": "2016-11-13T23:03:57Z",
          "updatedAt": "2016-11-13T23:03:57Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "[davidben 2016-11-17: Did someone my comment instead of replying? I did not write the unquoted sections.]\n\n> Agreed it's not a crisis. It's also a little unfortunate in that the client doesn't know a priori doesn't know what the server requested, so it'd have to just send everything. I could also imagine situations a la X.509 critical extensions that you'd like to know the peer will process some Certificate extension.\n> \n> (We also don't quite have unsolicited extensions as is. The spec, as written, says clients may staple OCSP responses, SCTs, etc., to their certs only if they also request it of the server in ClientHello, which is bizarre.)\n\nNo, what I mean is that they can put any extensions they want in their ClientHello, not in their certs.\n\n> Isn't your proposal the same as PR#565 (rebasing atop unified extension namespace aside) but with the OID filters hidden behind an extensible extension? \n\nYes. Given that we're talking about fairly small tweaks, I'm not sure debating about the same versus different makes sense.\n\n> I don't actually care (our implementation will probably ignore it anyway), but that seems odd. An OIDFilter is in itself an extension point where we'd need implementations to ignore unknown fields. Clients cannot process OIDFilters generically because each OID has custom matching rules.\n\nYes, I agree with this technical claim. I think it's a matter of design taste, with the advantage of the current design being that it's clear which X.509 Extension things apply to without a separate table, and the disadvantage being extra hierarchy and perhaps some reduced flexibility.\n\n> P.S. I think while we're in here we should also remove the explicit certificate_authorities block and replace it with an extension.\n\n*shrug* Sounds reasonable.\n",
          "createdAt": "2016-11-13T23:25:35Z",
          "updatedAt": "2016-11-17T01:15:20Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> P.S. I think while we're in here we should also remove the explicit certificate_authorities block and replace it with an extension.\n\nThen we could also rename 'extensions' to feature_data or TLV_data or something like that ;)\n",
          "createdAt": "2016-11-15T06:27:01Z",
          "updatedAt": "2016-11-15T06:27:01Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Eh, it's called extensions everywhere else. Let's keep that the same.\n",
          "createdAt": "2016-11-15T09:38:23Z",
          "updatedAt": "2016-11-15T09:38:23Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Another point in favor of this is that making this change makes dealing with cached info with certificate requests easier in TLS 1.3 since cached info is kind of broken right now \n",
          "createdAt": "2016-11-17T01:11:09Z",
          "updatedAt": "2016-11-17T01:11:09Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'll get on this soon\n",
          "createdAt": "2016-11-17T01:11:54Z",
          "updatedAt": "2016-11-17T01:11:54Z"
        }
      ]
    },
    {
      "number": 761,
      "id": "MDU6SXNzdWUxODkwMjk1NjY=",
      "title": "Cite Abdalla/Bellare paper on rekeying",
      "url": "https://github.com/tlswg/tls13-spec/issues/761",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Note that we use a serialized key derivation for KeyUpdate, an approach that is supported by the paper.\r\n\r\nTitle: Increasing the Lifetime of a Key: A Comparative Analysis of the\r\nSecurity of Re-Keying Techniques",
      "createdAt": "2016-11-14T05:04:37Z",
      "updatedAt": "2016-12-21T19:37:48Z",
      "closedAt": "2016-12-21T19:37:48Z",
      "comments": []
    },
    {
      "number": 771,
      "id": "MDU6SXNzdWUxOTExMDAwMTE=",
      "title": "PSK shouldn't be mandatory",
      "url": "https://github.com/tlswg/tls13-spec/issues/771",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "S 8.2 requires that you implement pre_shared_key which accidentally makes implementing resumption and PSK mandatory. This was unintentional so fix.",
      "createdAt": "2016-11-22T19:22:34Z",
      "updatedAt": "2016-11-28T19:04:12Z",
      "closedAt": "2016-11-28T19:04:12Z",
      "comments": []
    },
    {
      "number": 784,
      "id": "MDU6SXNzdWUxOTE5NTIzODQ=",
      "title": "0 for salt",
      "url": "https://github.com/tlswg/tls13-spec/issues/784",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In Section 7.1, `0` for input key material (or secret) is 0s of Hash.length.\r\nBut `0` for salt is not clearly defined.\r\nIf it means 0s of Hash.length, please state it explicitly.\r\n\r\nRelating to:\r\n\r\nhttps://github.com/martinthomson/tls13-vectors/issues/2",
      "createdAt": "2016-11-28T09:10:12Z",
      "updatedAt": "2016-11-29T01:45:54Z",
      "closedAt": "2016-11-28T18:35:57Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Do you see the text about:\r\n\r\n\r\n   If a given secret is not available, then the 0-value consisting of a\r\n   string of Hash.length zeroes is used.  Note that this does not mean\r\n   skipping rounds, so if PSK is not in use Early Secret will still be\r\n   HKDF-Extract(0, 0).\r\n\r\nWith respect to the start of the chain, the input from the top is the 'salt' input to HKDF-Extract; RFC 5869 says:\r\n\r\n```\r\n2.2.  Step 1: Extract\r\n\r\n   HKDF-Extract(salt, IKM) -> PRK\r\n\r\n   Options:\r\n      Hash     a hash function; HashLen denotes the length of the\r\n               hash function output in octets\r\n\r\n   Inputs:\r\n      salt     optional salt value (a non-secret random value);\r\n               if not provided, it is set to a string of HashLen zeros.\r\n      IKM      input keying material\r\n\r\n   Output:\r\n      PRK      a pseudorandom key (of HashLen octets)\r\n\r\n   The output PRK is calculated as follows:\r\n\r\n   PRK = HMAC-Hash(salt, IKM)\r\n```\r\n\r\nwhich is pretty clear about the HashLen of zeros part.  If there was a better way for the diagram to indicate \"not provided\" for the start of the chain that might be worth doing, but I am not convinced that extra text is really needed.",
          "createdAt": "2016-11-28T17:13:49Z",
          "updatedAt": "2016-11-28T17:13:49Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with @kaduk here. Closing",
          "createdAt": "2016-11-28T18:35:57Z",
          "updatedAt": "2016-11-28T18:35:57Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK.\r\nSo, we should fix the vector draft.",
          "createdAt": "2016-11-29T01:00:02Z",
          "updatedAt": "2016-11-29T01:00:02Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I just learned something today.  I will follow up with the CFRG regarding an erratum on RFC 5869.\r\n\r\nHashLen is defined as the output size of the hash.  RFC 2104 defines HMAC to take B bytes (B == block size).  That means that we have a potential interop problem if HKDF is ever used with a hash that has a smaller block size than its output size.  It's probably academic, but...",
          "createdAt": "2016-11-29T01:27:23Z",
          "updatedAt": "2016-11-29T01:27:23Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yep, it's academic.  HMAC breaks completely if B < L.",
          "createdAt": "2016-11-29T01:45:54Z",
          "updatedAt": "2016-11-29T01:45:54Z"
        }
      ]
    },
    {
      "number": 785,
      "id": "MDU6SXNzdWUxOTIwOTMxNjE=",
      "title": "Write formal state machine",
      "url": "https://github.com/tlswg/tls13-spec/issues/785",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-11-28T19:17:53Z",
      "updatedAt": "2016-12-21T22:03:45Z",
      "closedAt": "2016-12-21T22:03:45Z",
      "comments": [
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have one here, that could be a start: https://gist.github.com/mimoo/779dcf8c44d80a2a34a1a2f2ed620711\r\n\r\nAlso this is assuming PR https://github.com/tlswg/tls13-spec/pull/812 is accepted (`end_or_early_data` becomes a `handshake` message)",
          "createdAt": "2016-12-15T21:06:44Z",
          "updatedAt": "2016-12-16T22:11:38Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged.",
          "createdAt": "2016-12-21T22:03:45Z",
          "updatedAt": "2016-12-21T22:03:45Z"
        }
      ]
    },
    {
      "number": 787,
      "id": "MDU6SXNzdWUxOTIxNjMzMDY=",
      "title": "PSK in Section 7.1",
      "url": "https://github.com/tlswg/tls13-spec/issues/787",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I have implemented the resumption PSK in my Haskell implementation.\r\nDuring the implementation, I need to guess what \"PSK\" in the diagram in Section 7.1 means.\r\nIt would be nice to explicitly state the following:\r\n\r\n- For external PSK, \"PSK\" is the key established externally\r\n- For resumption PSK, \"PSK\" is `resumption_secret`\r\n\r\nNote that currently no text refers to `resumption_secret`. So, it a little bit hard to understand the purpose of `resumption_secret`. Adding items above would fix this issue.",
      "createdAt": "2016-11-29T01:23:06Z",
      "updatedAt": "2016-12-12T22:06:00Z",
      "closedAt": "2016-12-12T22:06:00Z",
      "comments": []
    },
    {
      "number": 796,
      "id": "MDU6SXNzdWUxOTI0Mzg2NjI=",
      "title": "Add an appendix containing a set of PRF test vectors",
      "url": "https://github.com/tlswg/tls13-spec/issues/796",
      "state": "CLOSED",
      "author": "alexmgr",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi,\r\n\r\nKnowing if `7.1. Key Schedule` is correctly implemented is difficult without having a set of test data to compare against. For example, `RFC 5869` provides a `Appendix A.  Test Vectors` section, which allows to trivially check the implementation.\r\nToday, in order to know if key derivation is correct, one has to implement encryption/decryption fully. It would be helpful to have a set of PRF inputs and expected outputs to be able to validate against.\r\n\r\nAs a side note, If anyone which has implemented TLS 1.3 could provide such test vectors, it would be useful to me at least ;)\r\n\r\nThanks\r\n\r\n\r\n",
      "createdAt": "2016-11-30T00:09:13Z",
      "updatedAt": "2016-11-30T00:14:51Z",
      "closedAt": "2016-11-30T00:14:51Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See https://tools.ietf.org/html/draft-thomson-tls-tls13-vectors-00",
          "createdAt": "2016-11-30T00:11:05Z",
          "updatedAt": "2016-11-30T00:11:05Z"
        },
        {
          "author": "alexmgr",
          "authorAssociation": "NONE",
          "body": "Perfect! Thank you.",
          "createdAt": "2016-11-30T00:14:51Z",
          "updatedAt": "2016-11-30T00:14:51Z"
        }
      ]
    },
    {
      "number": 823,
      "id": "MDU6SXNzdWUxOTYxMjY2NTI=",
      "title": "Format of Supported Versions Extension",
      "url": "https://github.com/tlswg/tls13-spec/issues/823",
      "state": "CLOSED",
      "author": "janrueth",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi,\r\n\r\nthe current draft illustrating the Supported Versions Extension differs from the actual implementations in Chrome and [NSS.](https://hg.mozilla.org/projects/nss/annotate/tip/lib/ssl/tls13exthandle.c#l899)\r\nThis is currently specified:\r\n\r\n      struct {\r\n          ProtocolVersion versions<2..254>;\r\n      } SupportedVersions;\r\n\r\nYet, Chrome Version 57.0.2953.0 (Official Build) canary (64-bit) sends the following:\r\n\r\n      struct {\r\n          uint8 len_bytes;\r\n          ProtocolVersion versions<2..254>;\r\n      } SupportedVersions;\r\n\r\nHere is an except from a packet dump:\r\n`00 2b | 00 0b  | 0a |  8a 8a | 7f 12 | 03 03 | 03 02 | 03 01`\r\n`TLS Ext: 43 | Ext Len: 11 | ?len?: 10 | random_version | draft-18 | tlv 1.2 | tls 1.1 | tls 1.0`\r\n\r\nI do get the random_version thing to test the other sides version negotiation, but what is that second len field for?\r\nAre the specs wrong or is the implementation wrong?\r\nImho it does not make sense to send the length twice, why limit the length to 256 bytes? okay this is kind of given by the draft but why do so via an 8-bit field?\r\n\r\nThanks",
      "createdAt": "2016-12-16T18:37:38Z",
      "updatedAt": "2016-12-16T19:20:11Z",
      "closedAt": "2016-12-16T19:20:11Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Chrome is correct (and matches the spec).\r\n\r\nThe outer four bytes are the extension type and length. The inner length byte is the length of the vector itself.\r\n",
          "createdAt": "2016-12-16T18:40:16Z",
          "updatedAt": "2016-12-16T18:40:16Z"
        },
        {
          "author": "janrueth",
          "authorAssociation": "NONE",
          "body": "How does it match the specs? The specs don't say anything about sending the length of the vector.\r\nAnd it is kind of unnecessary, the extension length would be exactly the length of the vector if one would not send the length of the vector... I would kind of get if it were the number of versions i.e. bytes/2 but this seems not right :)\r\n\r\nEdit: I mean other extensions do that as well and e.g., elliptic curve, but I could neither find that specified...",
          "createdAt": "2016-12-16T19:02:31Z",
          "updatedAt": "2016-12-16T19:12:58Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> How does it match the specs? The specs don't say anything about sending the length of the vector.\r\n\r\nhttps://tlswg.github.io/tls13-spec/#vectors\r\n\r\n\"Variable-length vectors are defined by specifying a subrange of legal lengths, inclusively, using the notation <floor..ceiling>. When these are encoded, the actual length precedes the vector\u2019s contents in the byte stream. The length will be in the form of a number consuming as many bytes as required to hold the vector\u2019s specified maximum (ceiling) length. \"\r\n\r\n\r\n\r\n> And it is kind of unnecessary, the extension length would be exactly the length of the vector if one would not send the length of the vector...\r\n\r\nYes, it is unnecessary. It's an artifact of the presentation language. That's just how vectors are represented. You could do something different, but it's clunky to write and doesn't let fields be self-contained in your decoder.\r\n\r\n> I would kind of get if it were the number of versions i.e. bytes/2 but this seems not right :)\r\n\r\nIn TLS the length bytes is the length of the field, not the number of entries. This is a persistent source of confusion, unfortunately, but we're stuck with it.",
          "createdAt": "2016-12-16T19:13:38Z",
          "updatedAt": "2016-12-16T19:14:21Z"
        },
        {
          "author": "janrueth",
          "authorAssociation": "NONE",
          "body": "Oh boy... thank you so much, sorry for bothering, I really did not find that part in the specs and I started to wonder and question so many things...\r\n",
          "createdAt": "2016-12-16T19:20:11Z",
          "updatedAt": "2016-12-16T19:20:11Z"
        }
      ]
    },
    {
      "number": 829,
      "id": "MDU6SXNzdWUxOTYzMzA3NTE=",
      "title": "Is it true that the exporter interface is the same?",
      "url": "https://github.com/tlswg/tls13-spec/issues/829",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In previous versions of TLS, passing no context was different to passing an empty context.  TLS 1.3 doesn't distinguish between these.  I don't know how important it is to highlight that minor difference, but it's probably worth mentioning.",
      "createdAt": "2016-12-19T04:48:14Z",
      "updatedAt": "2016-12-21T19:43:04Z",
      "closedAt": "2016-12-21T19:43:04Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So I should read more carefully: there is text about this, but it's not clear that this is a change from previous versions.",
          "createdAt": "2016-12-19T04:49:52Z",
          "updatedAt": "2016-12-19T04:49:52Z"
        }
      ]
    },
    {
      "number": 835,
      "id": "MDU6SXNzdWUxOTcwNTcwMjE=",
      "title": "Cipher Suite section in wrong appendix?",
      "url": "https://github.com/tlswg/tls13-spec/issues/835",
      "state": "CLOSED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The [Cipher Suite section](https://tlswg.github.io/tls13-spec/#cipher-suites) is in appendix B (State Machine). Seems like an error to me? Looks like it would be better suited for the Appendix A (A.3 handshake protocol)",
      "createdAt": "2016-12-21T23:18:29Z",
      "updatedAt": "2016-12-22T05:09:36Z",
      "closedAt": "2016-12-22T05:09:36Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed.",
          "createdAt": "2016-12-22T05:09:36Z",
          "updatedAt": "2016-12-22T05:09:36Z"
        }
      ]
    },
    {
      "number": 836,
      "id": "MDU6SXNzdWUxOTc4MDM2OTI=",
      "title": "PSK binder validation and fallback",
      "url": "https://github.com/tlswg/tls13-spec/issues/836",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 4.2.8. says:\r\n\r\n> Prior to accepting PSK key establishment, the server MUST validate the corresponding binder value (see Section 4.2.8.1 below). If this value is not present or does not validate, the server MUST abort the handshake. \r\n\r\nAre there any reasons to not allow fall back to full handshake if binder value is not present or does not validate?\r\n",
      "createdAt": "2016-12-28T06:33:33Z",
      "updatedAt": "2017-03-06T01:14:47Z",
      "closedAt": "2017-03-06T01:14:47Z",
      "comments": [
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If \"the handshake\" means \"selecting the PSK\", not the entire handshake, I would suggest to change the wording.",
          "createdAt": "2016-12-28T07:17:06Z",
          "updatedAt": "2016-12-28T07:17:06Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not sure why you would want to allow it. There's no legitimate reason for a binder to be invalid.\r\n\r\n\r\n",
          "createdAt": "2016-12-28T14:16:50Z",
          "updatedAt": "2016-12-28T14:16:50Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Suppose there is one pair of PSK and its binder. If the binder is invalid, I want to fallback to full handshake. But this sentence reads that the server must abort the entire handshake in that case.",
          "createdAt": "2016-12-29T05:18:01Z",
          "updatedAt": "2016-12-29T05:18:01Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Why? Implementations aren't expected to fallback to full handshake if early data can't be decrypted, which is a similar sort of thing. If a PSK can't be resumed because some configuration or state changed and it's no longer valid, you want to fallback. If it can't be resumed because the client doesn't appear to have possession of the PSK, a hard error is reasonable.\r\n\r\nMaking this a fatal error means it's less likely that interop errors in computing the binder will get masked.",
          "createdAt": "2016-12-29T05:21:15Z",
          "updatedAt": "2016-12-29T05:21:15Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK. Make sense. It would be nice if such conditions for fallback are explicitly described in the draft.",
          "createdAt": "2016-12-29T08:07:52Z",
          "updatedAt": "2016-12-29T08:07:52Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazu-yamamoto: PR welcome",
          "createdAt": "2017-03-04T22:06:37Z",
          "updatedAt": "2017-03-04T22:06:37Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let's close this issue in favor of #893.",
          "createdAt": "2017-03-06T01:14:42Z",
          "updatedAt": "2017-03-06T01:14:42Z"
        }
      ]
    },
    {
      "number": 839,
      "id": "MDU6SXNzdWUxOTgwMTczNzg=",
      "title": "Require SNI",
      "url": "https://github.com/tlswg/tls13-spec/issues/839",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I'm pretty confident we had consensus to require SNI but the current text just says that it's MTI, not mandatory to send if you had it. I believe that this is just editor error, but this is an issue to prompt me to go back and check the list.",
      "createdAt": "2016-12-29T14:41:27Z",
      "updatedAt": "2017-03-10T01:41:03Z",
      "closedAt": "2017-03-10T01:41:02Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"MUST use\" or \"MUST implement\"?  There are some of uses of TLS that don't require SNI for various reasons.  Many of those identify based on key/cert rather than name, for example.\r\n\r\nRequiring SNI for HTTPS makes perfect sense.  The same probably applies to a bunch of other protocols, but it might be hard to mandate use more broadly.\r\n\r\nThe hazard here is that where SNI is used, it needs to be checked.  Servers that accept SNI and ignore the value cause themselves (and others) problems.",
          "createdAt": "2017-01-01T10:44:53Z",
          "updatedAt": "2017-01-01T10:44:53Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett: do you recall?",
          "createdAt": "2017-03-07T00:35:21Z",
          "updatedAt": "2017-03-07T00:35:21Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Near as I can remember, we did settle on MUST implement, SHOULD use when applicable, and that servers MAY REQUIRE its use. However, if a system is specifically designed in a manner that has no need for SNI, for whatever reason, we don't need to compel them to leak information if they don't actually need to. I know the HTTP/2 spec does explicitly require SNI [0], and leaving this up to the application layer seems reasonable.\r\n\r\nI don't think we've had any discussion about what to do with a server that receives SNI but doesn't strictly require it. Adding a new requirement that all servers receiving SNI MUST validate that it is applicable also seems reasonable, but discussing it on list is probably warranted.\r\n\r\n[0] https://tools.ietf.org/html/rfc7540#section-9.2",
          "createdAt": "2017-03-08T04:18:00Z",
          "updatedAt": "2017-03-08T04:18:00Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett: I'm not sure I love this requirement, but feel free to raise this on the list.",
          "createdAt": "2017-03-10T00:44:38Z",
          "updatedAt": "2017-03-10T00:44:38Z"
        }
      ]
    },
    {
      "number": 847,
      "id": "MDU6SXNzdWUxOTgyMzg0MzY=",
      "title": "Session resume terminology",
      "url": "https://github.com/tlswg/tls13-spec/issues/847",
      "state": "CLOSED",
      "author": "kroeckx",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "There seem to be 3 cases left where we the draft talks about resumption:\r\n- In 4.5.1: Any ticket MUST only be resumed with a cipher suite that has the same KDF hash [...]\r\n- In 6.1: Failure to properly close a connection does not prohibit a session from being resumed.\r\n- In 1.2: Restate rule from RFC 6066 that you can't resume unless SNI is the  same. (Talking about 4.5.1)\r\n\r\nI think the term resume is misleading, you aren't resuming anything. You're really reusing parameters from that session, and can have multiple connections to the same server that use the same parameters.",
      "createdAt": "2016-12-31T16:29:00Z",
      "updatedAt": "2017-03-07T03:40:52Z",
      "closedAt": "2017-03-06T21:08:19Z",
      "comments": [
        {
          "author": "jensguballa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The term \"resumption\" occurs 38 times in the draft. :-)\r\n\r\nAnyway, I am more interested in a good definition of the term \"session\". \r\n\r\nSome thoughts:\r\n  - the term \"session\" is only required for resumption. That's my observation: if resumption would not be a feature of TLS, we would not need the term \"session\" at all.\r\n  - a handshake produces a context, which comprises:\r\n    - resumption_master_secret\r\n    - the used KDF hash function\r\n    - the fact that the server is authenticated\r\n    - an indication if the client is authenticated or not\r\n    - SNI (if provided by the client)\r\n    - others (e.g. protocol version, cipher method, etc)\r\n  - this context is used when generating a NewSessionTicket, or we can say: a ticket refers to this context\r\n  - We can give this context a name: \"session\"\r\n  - Thus each handshake produces a new unique session (because the resumption_master_secret will be unique)\r\n  - A handshake may bootstrap from a previous session (via a ticket, \"session resumption\"), but even in this case a new session will be created\r\n  - There is a one-to-one relationship between a connection and a session (the one created)\r\n  - multiple connections may bootstrap from the same session\r\n\r\nDo these thoughts make sense? If so, then probably some more considerations are needed, e.g. regarding externally provided PSKs (\"Are these external sessions? Or external tickets?\"). \r\n",
          "createdAt": "2017-01-04T14:42:35Z",
          "updatedAt": "2017-01-04T14:42:35Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Many of those thoughts make sense, yes.\r\n\r\nIn some sense we may think about TLS connections more than TLS sessions, with a connection being defined as starting at initial ClientHello and ending at TCP close, timeout, or termination by alert.  A TLS session is then a way to extend some context from one connection to another (which causes trouble for the generic \"one-to-one releationship between connection and session\" you list above).\r\n\r\nIn some sense this is all editorial, though, so we may be subject to @ekr 's discretion.",
          "createdAt": "2017-01-09T20:45:32Z",
          "updatedAt": "2017-01-09T20:45:32Z"
        },
        {
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(moving discussion from #867) @jensguballa points out that the term \"session key\" appears throughout the appendix, starting with \r\n>  A \"session key\" (the master secret) from which can be derived a set of working keys.\r\n\r\nSessions and session keys are terminology from academic security models (an authenticated key exchange protocol is defined to output a session key) which aren't really used elsewhere in the RFC. I suggest one of two options:\r\n 1. replace \"session key\" by \"master secret\" and \"session\" by \"context\" (or something) throughout the document\r\n 1. add a bit more explanation at the top of \u00a7Handshake to comment on the choice of terminology and the definitions of sessions and session keys\r\n\r\nBTW I think a session should be defined locally (a client has a session which outputs a session key), and the security property says roughly that if a client thinks its session is with some server S then it really is with server S. Happy to PR for the latter option.",
          "createdAt": "2017-02-22T09:20:16Z",
          "updatedAt": "2017-02-22T09:20:16Z"
        },
        {
          "author": "cascremers",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Both options seem reasonable, but I would prefer to avoid introducing terminology that is not really needed, leading to option 1 above: replacing \"session key\" and \"session\" by other terms that are used more widely in the spec.\r\n\r\n(If \"session\" is used somewhere in a non-local meaning, we need to carefully consider what to replace it with. Everything else is probably straightforward.)",
          "createdAt": "2017-02-22T11:22:53Z",
          "updatedAt": "2017-02-22T11:22:53Z"
        },
        {
          "author": "jensguballa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I definitely support option 1. Maybe, \"session\" can be replaced by \"PSK context\". NewSessionTicket would become NewPSKContextTicket, which would make quite a lot of sense, IMO. ",
          "createdAt": "2017-02-22T19:06:24Z",
          "updatedAt": "2017-02-22T19:06:24Z"
        },
        {
          "author": "jensguballa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If no more feedback is received, does that mean that everyone agrees silently and that a PR is expected? ;-)\r\n",
          "createdAt": "2017-03-06T08:55:03Z",
          "updatedAt": "2017-03-06T08:55:03Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we need to continue with the current use of TLS session, confusing\nthough it is.\n\nAnything else will be even more confusing.\n\n\nOn Mon, Mar 6, 2017 at 12:55 AM, jensguballa <notifications@github.com>\nwrote:\n\n> If no more feedback is received, does that mean that everyone agrees\n> silently and that a PR is expected? ;-)\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/issues/847#issuecomment-284337084>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oaXC19TVNhCKgSVdtVEdGWNIzilfks5ri8nogaJpZM4LYlSC>\n> .\n>\n",
          "createdAt": "2017-03-06T13:31:59Z",
          "updatedAt": "2017-03-06T13:31:59Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Strongly agree.",
          "createdAt": "2017-03-06T14:26:49Z",
          "updatedAt": "2017-03-06T14:26:49Z"
        },
        {
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In that case, I have more questions :) At a high level I support @jensguballa's point from above that the term \"session\" is confusing: sometimes it means a connection, and sometimes it means a nebulous set of connections.\r\n\r\n- is \"session state\" the same as connection state, or a subset, or a superset?\r\n- are \"tickets\" and \"session tickets\" the same? if not, should the language be made consistent, as both are used in the doc?\r\n- what exactly is \"resuming a session\"---performing a PSK resumption with a ticket that comes from a previous connection? If a client reuses a ticket, resulting in two connections, are those connections both the same session?\r\n- does every session have a unique session key? (if yes, you can't have session key = master secret)\r\n- the PSK binder says that it binds two sessions together, but the rest of the doc says that you resume the first session. which is it?",
          "createdAt": "2017-03-06T16:36:23Z",
          "updatedAt": "2017-03-06T16:36:23Z"
        },
        {
          "author": "jensguballa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "IMO these are valid questions caused by a lack of precise and consistent terminology . Would like to add one:\r\n\r\n- when does a session start to exist? With sending/receiving the ClientHello (no master secret [= session id] yet available)? Or with sending/receiving the ServerHello?\r\n\r\nI think the term \"session\" might have been appropriate for TLS1.0-1.2 in some way, as there the identical master secret is used by two different connections, and thus the term \"session resumption\" made some sense. However, with TLS1.3 a dedicated resumption master secret is used for the NewSessionTicket message. Thus the resumption mechanism has been changed drastically, but still the TLS1.0-1.2 terminology \"session resumption\" is used. Hm.\r\n\r\nSo honestly, I don't get the point why sticking to \"session\" should be less confusing than removing it. Different mechanisms in TLS1.3 justify different (better!) terminology.\r\n\r\nThe current version of the draft is using terms like \"resumption via PSK\", \"1-RTT handshake with PSK resumption\", \"when in resumption-PSK mode\", \"This extension also restricts the modes for use with PSK resumption\". So not using the term \"session\" here works quite well. :-)",
          "createdAt": "2017-03-06T19:07:04Z",
          "updatedAt": "2017-03-06T19:09:33Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, here's what I'm going to do: A lot of PR #895 is just good cleanup regardless of the resolution of this question. I'm going to take a subset of that and then revisit the question once I can read the whole draft in that context.\r\n",
          "createdAt": "2017-03-06T19:19:57Z",
          "updatedAt": "2017-03-06T19:19:57Z"
        },
        {
          "author": "cascremers",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Side note: indeed, I agree with @kroeckx 's original motivation for this thread. It seems that \"resumption\" is conceptually more similar to a \"fork\" or \"branch\", since the resulting connection can exist in parallel to the original connection.",
          "createdAt": "2017-03-06T19:55:44Z",
          "updatedAt": "2017-03-06T19:57:25Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@cascremers: yes, that's correct",
          "createdAt": "2017-03-06T20:36:52Z",
          "updatedAt": "2017-03-06T20:36:52Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@katrielalex @jensguballa: I took most of PR#895, so now the only use of \"session\" (except in PDU names and in references to previous versions) is in the security analysis section. I kept the term there because it's the one that appears on [CK01] and so SK-security is confusing without it. If people feel strongly, I could imagine pulling in the rest of PR#895 that made those changes, but I think that's a separate PR so closing this issue.",
          "createdAt": "2017-03-06T21:08:19Z",
          "updatedAt": "2017-03-06T21:08:19Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, is the \"Uniqueness of the session key\" claim in E.1 even true? We're saying the master secret is the session key, but the base secrets in the key schedule don't incorporate the handshake transcript. That gets mixed in at the Derive-Secret branches.\r\n\r\nNotably, if I do psk_ke resumption of the same PSK twice, I'll have the same master secret both times.",
          "createdAt": "2017-03-07T02:39:06Z",
          "updatedAt": "2017-03-07T02:39:06Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yah, you're right. Some sort of mental race condition where I was writing as if it were the old key schedule :)  The right key here is the various derived key Thanks for catching that. Fixed.",
          "createdAt": "2017-03-07T03:34:50Z",
          "updatedAt": "2017-03-07T03:34:50Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/tlswg/tls13-spec/commit/3996e459d1bc697b0b23a048cbe94496140bc3b5",
          "createdAt": "2017-03-07T03:40:51Z",
          "updatedAt": "2017-03-07T03:40:51Z"
        }
      ]
    },
    {
      "number": 849,
      "id": "MDU6SXNzdWUxOTk1MTE3MTA=",
      "title": "question about 32-bit signature prefix attack",
      "url": "https://github.com/tlswg/tls13-spec/issues/849",
      "state": "CLOSED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> This structure is intended to prevent an attack on previous versions of TLS in which the ServerKeyExchange format meant that attackers could obtain a signature of a message with a chosen, 32-byte prefix. The initial 64 byte pad clears that prefix.\r\n\r\nFrom the spec. There is no reference here. I'm wondering what attack it is.",
      "createdAt": "2017-01-09T09:49:23Z",
      "updatedAt": "2017-01-18T15:38:28Z",
      "closedAt": "2017-01-15T04:39:15Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There doesn't need to be a concrete attack.  The point is that a client can obtain a signature on 32 bytes of its choosing (the ClientHello.random), plus some stuff that it doesn't control.  In the right circumstances, that could be a problem.  For TLS 1.3, padding out the prefix means that a TLS 1.3 signature cannot be exchanged for a TLS <=1.2 signature.",
          "createdAt": "2017-01-09T21:20:01Z",
          "updatedAt": "2017-01-09T21:20:01Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for that answer! Any reason the padding is 64 byte instead of 32 byte then?",
          "createdAt": "2017-01-16T19:09:50Z",
          "updatedAt": "2017-01-16T19:09:50Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There's a 32-byte ServerHello.random after the ClientHello.random. We want to clear both of them.",
          "createdAt": "2017-01-16T19:15:40Z",
          "updatedAt": "2017-01-16T19:15:40Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah. In case the attacker would be the server. Ok I see thanks!",
          "createdAt": "2017-01-16T20:11:39Z",
          "updatedAt": "2017-01-16T20:11:39Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, that doesn't make sense, because the server can sign anything anyway. Now I'm back to not understanding why we would want to clear the ServerHello.random",
          "createdAt": "2017-01-18T12:33:25Z",
          "updatedAt": "2017-01-18T12:33:25Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hrm. Yeah, actually I can't see a concrete attack either if we don't clear ServerHello.random. An attacker trying to collide a TLS 1.2 signature can just echo back whatever ServerHello.random ends up in there. If TLS 1.2 client certificates had the same construction, we would want to clear it, but clients sign the handshake transcript in TLS 1.2. It's just the server half we got wrong.",
          "createdAt": "2017-01-18T15:36:05Z",
          "updatedAt": "2017-01-18T15:36:05Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh! This gives you a guarantee that the converse can't happen. A TLS 1.2 ServerKeyExchange signature can't be used in any TLS 1.3 context because the server will always pick a fresh ServerHello.random, which has low probability of matching the spaces. For that direction, clearing ClientHello.random doesn't work because I can send any ClientHello.random I want for the server to sign.\r\n\r\n(The server-selected ServerHello.random also has low probability of matching the context string, but then we depend on the length on the context string and whatnot.)",
          "createdAt": "2017-01-18T15:38:28Z",
          "updatedAt": "2017-01-18T15:38:28Z"
        }
      ]
    },
    {
      "number": 855,
      "id": "MDU6SXNzdWUyMDI0MDYxNDQ=",
      "title": "remove legacy_record_version in TLSCiphertext?",
      "url": "https://github.com/tlswg/tls13-spec/issues/855",
      "state": "CLOSED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "Any reason to keep the `legacy_record_version` field in the `TLSCiphertext` structure? ([see here](https://tlswg.github.io/tls13-spec/#record-payload-protection)).\r\n\r\nIt looks like this could be safely removed and allow us to release 6 lines in that long spec =)",
      "createdAt": "2017-01-22T20:07:18Z",
      "updatedAt": "2017-01-23T00:56:13Z",
      "closedAt": "2017-01-23T00:56:13Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please see PR#762. I am planning to run an experiment in the next few weeks to see if it is safe to land.",
          "createdAt": "2017-01-22T21:01:30Z",
          "updatedAt": "2017-01-22T21:01:30Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm closing this as a duplicate.",
          "createdAt": "2017-01-23T00:56:13Z",
          "updatedAt": "2017-01-23T00:56:13Z"
        }
      ]
    },
    {
      "number": 856,
      "id": "MDU6SXNzdWUyMDI0MTUxOTQ=",
      "title": "Removing the ",
      "url": "https://github.com/tlswg/tls13-spec/issues/856",
      "state": "CLOSED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "From the [Diffie-Hellman parameters](https://tlswg.github.io/tls13-spec/#ffdhe-param) section:\r\n\r\n> Peers SHOULD validate each other\u2019s public key Y by ensuring that 1 < Y < p-1. This check ensures that the remote peer is properly behaved and isn\u2019t forcing the local system into a small subgroup.\r\n\r\nI'm not sure how the public key being bigger than the prime p is forcing it into a small subgroup, at most you're avoiding the -1 that generates a subgroup of order 2 but that would never be enough to recover the full private key. \r\n\r\n1) I think the \"and isn\u2019t forcing the local system into a small subgroup\" is not necessary here. It just adds more words.\r\n\r\n2) A better check here would be to raise Y to the order of the used subgroup. [Looking at the list of groups](https://tools.ietf.org/html/rfc7919#appendix-A.1) I see that they are all safe primes so this check is useless (there is just no subgroup attack possible)\r\n\r\nSo I",
      "createdAt": "2017-01-22T22:25:04Z",
      "updatedAt": "2017-01-22T22:25:30Z",
      "closedAt": "2017-01-22T22:25:30Z",
      "comments": []
    },
    {
      "number": 861,
      "id": "MDU6SXNzdWUyMDI3OTE1MDI=",
      "title": "A broken syntax of  EarlyDataIndication",
      "url": "https://github.com/tlswg/tls13-spec/issues/861",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current syntax of `EarlyDataIndication` is broken because case arms must be terminated by `;`.\r\n\r\n```\r\n    struct {\r\n       select (Handshake.msg_type) {\r\n           case new_session_ticket:\r\n              uint32 max_early_data_size;\r\n\r\n           case client_hello:\r\n           case encrypted_extensions:\r\n              // empty\r\n       };\r\n   } EarlyDataIndication;\r\n```\r\n\r\nIf we respect to TLS 1.2's syntax, I would suggest to change this into:\r\n\r\n```\r\n    struct {\r\n       select (Handshake.msg_type) {\r\n           case new_session_ticket:\r\n              uint32 max_early_data_size;\r\n\r\n           case client_hello:\r\n           case encrypted_extensions:\r\n              struct {};\r\n       };\r\n   } EarlyDataIndication;\r\n```",
      "createdAt": "2017-01-24T11:23:47Z",
      "updatedAt": "2017-03-04T21:57:52Z",
      "closedAt": "2017-03-04T21:57:52Z",
      "comments": [
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "1. I think this is more confusing than the `// empty`. The presentation language is not a formally specified syntax so I don't think it matters.\r\n\r\n2. I remember tripping while reading this part of the specs because of the two cases following each other, I would rather replace them by this:\r\n\r\n```\r\ncase client_hello:\r\n    // empty\r\ncase encrypted_extensions:\r\n    // empty\r\n```",
          "createdAt": "2017-01-25T13:24:45Z",
          "updatedAt": "2017-01-25T13:24:45Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't like the comment, I'd rather have a syntactic token there and I don't care what it is.",
          "createdAt": "2017-01-25T13:27:29Z",
          "updatedAt": "2017-01-25T13:27:29Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What about just removing the cases for `client_hello` and `encrypted_extensions`?",
          "createdAt": "2017-01-25T13:48:09Z",
          "updatedAt": "2017-01-25T13:48:09Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Don't care. :)  Just don't want comments to be semantically meaningful.",
          "createdAt": "2017-01-25T13:53:49Z",
          "updatedAt": "2017-01-25T13:53:49Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Removing the cases is wrong, as then it leaves unspecified a structure that needs to be sent in a wire protocol message.",
          "createdAt": "2017-01-25T16:58:56Z",
          "updatedAt": "2017-01-25T16:58:56Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "`struct {}` is actually used to express empty in RFC 5246.\r\nLet's just define its semantics in Section 3.\r\n\r\nBut I recommend most is to define `Empty`:\r\n\r\n```\r\n    struct {} Empty;\r\n\r\n    struct {\r\n       select (Handshake.msg_type) {\r\n           case new_session_ticket:\r\n              uint32 max_early_data_size;\r\n\r\n           case client_hello:\r\n           case encrypted_extensions:\r\n              Empty;\r\n       };\r\n   } EarlyDataIndication;\r\n\r\n```",
          "createdAt": "2017-01-25T23:27:29Z",
          "updatedAt": "2017-01-25T23:27:29Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Any other opinions on this? Possibilities I see:\r\n\r\n* an `empty` field could be defined in the presentation language \u2192 but it's more text to the presentation language for few usages\r\n* the text in the presentation language about cases that must cover all the cases could be relaxed \u2192 but now that I think more about it, it's nicer for the implementer to see all the cases in this snippet\r\n* this `struct {} Empty;` could be defined  \u2192 I don't like it so much, I think a more casual `// empty` is actually clearer.\r\n\r\nThis makes me thing we should probably drop this issue.\r\n\r\nPS: or if anyone else was tripped by this double cases (I know it's defined in the presentation language, but it's weird to see it since there are no breaks) we could also use this:\r\n\r\n```\r\ncase client_hello:\r\n    // empty\r\ncase encrypted_extensions:\r\n    // empty\r\n```",
          "createdAt": "2017-01-30T07:45:18Z",
          "updatedAt": "2017-01-30T07:47:09Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How about this?\r\n\r\n```\r\ncase client_hello: ; // empty\r\ncase encrypted_extensions: ; // empty\r\n```\r\n\r\nP.S. Fall through is not used in other parts.",
          "createdAt": "2017-01-31T02:08:04Z",
          "updatedAt": "2017-01-31T02:08:04Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It looks good to me, also if fall through is not used anywhere else it could be removed from the presentation language section.",
          "createdAt": "2017-01-31T08:00:23Z",
          "updatedAt": "2017-01-31T08:00:23Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"Fall-through\" was added in TLS 1.2. We can copy-and-pase Section 4.6.1 of RFC 4346 to remove fall-through.\r\n\r\nIf this is consensus, I will make a PR.",
          "createdAt": "2017-02-14T00:44:25Z",
          "updatedAt": "2017-02-14T00:44:25Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've sent PR #877.",
          "createdAt": "2017-02-20T03:33:21Z",
          "updatedAt": "2017-02-20T03:33:21Z"
        }
      ]
    },
    {
      "number": 865,
      "id": "MDU6SXNzdWUyMDMyOTgxMTk=",
      "title": "Document candidate idea for special packets",
      "url": "https://github.com/tlswg/tls13-spec/issues/865",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ekr"
      ],
      "labels": [],
      "body": "option 1: special bit\r\noption 2: magic token",
      "createdAt": "2017-01-26T06:01:08Z",
      "updatedAt": "2017-01-26T07:15:26Z",
      "closedAt": "2017-01-26T07:15:26Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This was intended to be a QUIC issue",
          "createdAt": "2017-01-26T06:04:16Z",
          "updatedAt": "2017-01-26T06:04:16Z"
        }
      ]
    },
    {
      "number": 869,
      "id": "MDU6SXNzdWUyMDQzMjQ3MzQ=",
      "title": "self-signed certificates not validated?",
      "url": "https://github.com/tlswg/tls13-spec/issues/869",
      "state": "CLOSED",
      "author": "roelpeeters",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In section 4.2.3. Signature Algorithms:\r\n> The signatures on certificates that are self-signed or certificates that are trust anchors are not validated since they begin a certification path (see [RFC5280], Section 3.2). \r\n\r\nWhile it make sense not to validate the signatures on the certificates that are trust anchors, why would one not check the signature on a self-signed certificate? Also the reference that is to serve as justification seems to be wrong: [RFC5280], Section 3.2 points to a section on the keys of EdDSA.",
      "createdAt": "2017-01-31T15:08:23Z",
      "updatedAt": "2017-03-04T22:07:50Z",
      "closedAt": "2017-03-04T22:07:50Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A self-signed certificate is nothing more than a complicated key container when it comes down to it.  It's good hygiene to have a valid signature, but nothing depends on it.\r\n\r\nhttps://tools.ietf.org/html/rfc5280#section-3.2 looks like the right place to reference to me.  It is entitled \"Certification Paths and Trust\".  The text means \"Section 3.2 of [RFC5280]\", I'll admit that it's a cumbersome construction though.",
          "createdAt": "2017-02-01T02:02:36Z",
          "updatedAt": "2017-02-01T02:02:36Z"
        },
        {
          "author": "roelpeeters",
          "authorAssociation": "NONE",
          "body": "surely it must have value, otherwise why must certificates that start a certification path be signed in the first place? or do you mean that this is outside the scope of TLS and it is up to user whether or not to verify these signatures on certificates that start the certification path?\r\n\r\nMy bad, I had two rfc's open and I looked at the wrong one.",
          "createdAt": "2017-02-01T06:20:46Z",
          "updatedAt": "2017-02-01T06:20:46Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "All I can really say for sure is that TLS does not rely on the signature in the certificate.  As far as it goes, pretty much nothing in a self-signed certificate other than the public key is useless in most cases.\r\n\r\nI don't know why X.509 requires a self-signature, other than to fill the signature slot for consistency with certificates that have non-pointless signatures.  Of course, I am not familiar with all the potential uses for certificates or the development of X.509.",
          "createdAt": "2017-02-01T10:26:02Z",
          "updatedAt": "2017-02-01T10:26:02Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In any case, cert evaluation is out of scope for TLS. The purpose of this\ntext is just to exclude trust anchors from the algorithm restriction\n\nOn Wed, Feb 1, 2017 at 11:26 AM, Martin Thomson <notifications@github.com>\nwrote:\n\n> All I can really say for sure is that TLS does not rely on the signature\n> in the certificate. As far as it goes, pretty much nothing in a self-signed\n> certificate other than the public key is useless in most cases.\n>\n> I don't know why X.509 requires a self-signature, other than to fill the\n> signature slot for consistency with certificates that have non-pointless\n> signatures. Of course, I am not familiar with all the potential uses for\n> certificates or the development of X.509.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/issues/869#issuecomment-276622769>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oTwmE-UcM4PTnK_W3zbEOx8QSJuWks5rYF27gaJpZM4LywEr>\n> .\n>\n",
          "createdAt": "2017-02-01T10:41:00Z",
          "updatedAt": "2017-02-01T10:41:00Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with above, the signature in a self-signed certificate is not useful information. I don't see any reason to check that.",
          "createdAt": "2017-02-03T22:29:26Z",
          "updatedAt": "2017-02-03T22:29:34Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't believe any change is needed here.",
          "createdAt": "2017-03-04T22:07:50Z",
          "updatedAt": "2017-03-04T22:07:50Z"
        }
      ]
    },
    {
      "number": 871,
      "id": "MDU6SXNzdWUyMDQ5MTk0NTQ=",
      "title": "Guidance on ticket renewal cliff",
      "url": "https://github.com/tlswg/tls13-spec/issues/871",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is somewhat application-dependent, but ticket-based PSKs with certificate-based auth are by far the most common use of TLS, and this is not immediately obvious: we should include guidance on ticket lifetimes. Specifically, a ticket issued from a resumed connection should take into account the freshness of any CertificateVerify signature being carried over. This will probably translate to a non-renewable lifetime on sessions.",
      "createdAt": "2017-02-02T16:13:02Z",
      "updatedAt": "2017-03-08T21:22:46Z",
      "closedAt": "2017-03-08T21:22:46Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In other words, you can keep resuming from resumed sessions, but only up to the point that the original authentication remains valid.",
          "createdAt": "2017-02-03T01:07:52Z",
          "updatedAt": "2017-02-03T01:07:52Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "you can also keep replaying 0-RTT up until that point.",
          "createdAt": "2017-02-08T17:42:03Z",
          "updatedAt": "2017-02-08T17:42:03Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mimoo I think that's orthogonal? 0-RTT replay is bound by the server's ticket_age tolerance and the lifetime on the *server* for that *particular* ticket. If the ticket is renewed, you get a fresh ticket, so it wouldn't affect 0-RTT. This is about lifetime on the *client* (or server in case of client certs) of renewed tickets.\r\n\r\nAm I missing something?",
          "createdAt": "2017-02-08T18:05:13Z",
          "updatedAt": "2017-02-08T18:05:13Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah you are right.\r\n\r\nSo I thought you were talking about how long should a client hold on to a ticket (which is upper bounded by how long the server wants it to be valid (which should be heavily influence by how long it thinks it's OK for that ticket to be replayed)). But instead you're talking about how long, or how many times should a client limit itself to resume from a resumed session correct?",
          "createdAt": "2017-02-09T10:08:55Z",
          "updatedAt": "2017-02-09T10:08:55Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"Session\" is a little overloaded, so I'm not sure what you mean. This commit message might help:\r\nhttps://boringssl.googlesource.com/boringssl/+/17b30833737b32ecab1f12c105e1b5cae6d49458",
          "createdAt": "2017-02-09T14:33:52Z",
          "updatedAt": "2017-02-09T14:33:52Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": ">  But instead you're talking about how long, or how many times should a client limit itself to resume from a resumed session correct?\r\n\r\nFor \"session\" defined as something that encompasses multiple TLS connections all using tickets that chain back to the same initial handshake [with client authentication] with no subsequent occasions where the client certificate is presented, yes.  Though, I don't think there's much reason to limit by number of tickets; wall clock time seems to be the main concern.",
          "createdAt": "2017-02-09T16:12:00Z",
          "updatedAt": "2017-02-09T16:12:00Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben: maybe something like this in S 4.6.1 after we describe the 7 day limit.\r\n\r\n\"In principle, it is possible to continue issuing new tickets which continue to indefinitely extend the lifetime of the keying material originally derived from an initial non-PSK handshake (which was most likely tied to the peer's certificate). It is RECOMMENDED that implementations place limits on the total lifetime of such keying material; these limits should take into account the lifetime of the peer's certificate and the likelihood of intervening revocation.\"\r\n",
          "createdAt": "2017-03-07T00:50:47Z",
          "updatedAt": "2017-03-07T00:50:47Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sounds reasonable. I'd suggest explicitly mentioning the lifetime of the CertificateVerify signature. One might, say, re-verify the certificate on resumption, but that wouldn't quite resolve the issue.",
          "createdAt": "2017-03-07T04:44:44Z",
          "updatedAt": "2017-03-07T04:44:44Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If, by which, you mean \"...in the time since the peer last proved that it controls the private key corresponding to its certificate\", I agree that's the relevant factor.",
          "createdAt": "2017-03-07T04:48:39Z",
          "updatedAt": "2017-03-07T04:48:39Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What do you mean \"lifetime of the CertificateVerify\" signature? There's no explicit lifetime there, AFAIK.",
          "createdAt": "2017-03-07T04:52:20Z",
          "updatedAt": "2017-03-07T04:52:20Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I thought that was the whole point of this exercise and all the 0-RTT + certs musings. That we don't want to indefinitely reuse that signature. Though, yeah, there isn't an explicit lifetime. I think it's fine for that to be local policy.",
          "createdAt": "2017-03-07T13:48:40Z",
          "updatedAt": "2017-03-07T13:48:40Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben: I think we agree on the facts and what people should do, I'm just trying to figure out what you want changed about my text.",
          "createdAt": "2017-03-07T14:10:50Z",
          "updatedAt": "2017-03-07T14:10:50Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Perhaps: \"these limits should take into account the lifetime of the peer's certificate, the likelihood of intervening revocation, and the time since the peer's online CertificateVerify signature.\"\r\n\r\nThe old text suggests that, if I were to retain the certificate chain on resumption and re-check expiration plus perhaps an online revocation check, I'm all good for indefinite lifetimes.",
          "createdAt": "2017-03-07T14:19:18Z",
          "updatedAt": "2017-03-07T14:19:18Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Got it. Willdo.",
          "createdAt": "2017-03-07T16:32:36Z",
          "updatedAt": "2017-03-07T16:32:36Z"
        }
      ]
    },
    {
      "number": 872,
      "id": "MDU6SXNzdWUyMDU3MjA1ODU=",
      "title": "Exporter label requirements",
      "url": "https://github.com/tlswg/tls13-spec/issues/872",
      "state": "CLOSED",
      "author": "jsalowey",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": " refer the reader to exporter requirements in RFC 5705\r\n\r\n\"Requirements for the format of Exporter labels are defined in section 4 of RFC5705.\"\r\n\r\nCreating pull request. ",
      "createdAt": "2017-02-06T21:59:52Z",
      "updatedAt": "2017-03-08T21:36:59Z",
      "closedAt": "2017-03-07T00:35:06Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@jsalowey: should we expect a PR?",
          "createdAt": "2017-03-04T22:07:06Z",
          "updatedAt": "2017-03-04T22:07:06Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This appears to be done.",
          "createdAt": "2017-03-07T00:35:06Z",
          "updatedAt": "2017-03-07T00:35:06Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "CONTRIBUTOR",
          "body": "yes I submitted PR #874 which has been merged already. ",
          "createdAt": "2017-03-08T21:36:59Z",
          "updatedAt": "2017-03-08T21:36:59Z"
        }
      ]
    },
    {
      "number": 898,
      "id": "MDU6SXNzdWUyMTIzMzc2NzQ=",
      "title": "Fix exporter definition",
      "url": "https://github.com/tlswg/tls13-spec/issues/898",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "PR #882 lost the key length argument to the exporter. Note to self to fix.",
      "createdAt": "2017-03-07T05:53:48Z",
      "updatedAt": "2017-03-07T17:42:20Z",
      "closedAt": "2017-03-07T17:42:20Z",
      "comments": []
    },
    {
      "number": 906,
      "id": "MDU6SXNzdWUyMTM2NzQ2NzE=",
      "title": "tags",
      "url": "https://github.com/tlswg/tls13-spec/issues/906",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@ekr Would you push tags for ID 18 and ID 19?\r\nI would like to see the difference based on the tags.",
      "createdAt": "2017-03-13T05:03:43Z",
      "updatedAt": "2017-03-13T12:26:59Z",
      "closedAt": "2017-03-13T05:44:16Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Unfortunately, I forgot to tag -18 so the tag is approximate. The -19 tag is correct. You can use rfcdiff to diff the IDs.",
          "createdAt": "2017-03-13T05:44:16Z",
          "updatedAt": "2017-03-13T05:44:16Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't see the tags on github.\r\nI guess that you created the tags locally but forgot to push with `--tags`.",
          "createdAt": "2017-03-13T05:59:59Z",
          "updatedAt": "2017-03-13T05:59:59Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You're right, I pushed them to my repo but not to master. They should be on master now, but as noted, the -18 tag is only approximate.",
          "createdAt": "2017-03-13T11:01:08Z",
          "updatedAt": "2017-03-13T11:01:08Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you! I got the tags!",
          "createdAt": "2017-03-13T12:26:59Z",
          "updatedAt": "2017-03-13T12:26:59Z"
        }
      ]
    },
    {
      "number": 907,
      "id": "MDU6SXNzdWUyMTM5OTc5NzY=",
      "title": "Contributor middle initials get an extra space",
      "url": "https://github.com/tlswg/tls13-spec/issues/907",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Noticed while reading through the diff between the latest drafts.\r\n\r\nThis is an odd very minor issue showing in the rendered version. See the Contributors section:\r\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-19#appendix-G\r\n\r\nNow, see the listings for Steven M. Bellovin and David M. Garrett. The two of us have 'M' middle initials listed for our credits, and for some reason an extra space gets added after the period before the last name.\r\n\r\nThe actual MD file does not have these extra spaces:\r\nhttps://raw.githubusercontent.com/tlswg/tls13-spec/d329bc5e799221d42ee4a7f55a90460000613244/draft-ietf-tls-tls13.md\r\n\r\nThis is a little odd. Something somewhere is ever so slightly mangling our names' text.",
      "createdAt": "2017-03-14T08:23:35Z",
      "updatedAt": "2017-04-16T17:21:56Z",
      "closedAt": "2017-04-16T17:21:56Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Seems likely to be the consequence of a \"dumb\" script applying a two-spaces-after-full-stop policy.\r\nI wouldn't worry about it until AUTH48.",
          "createdAt": "2017-03-14T15:25:55Z",
          "updatedAt": "2017-03-14T15:25:55Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We'll let RFC Ed fix this.",
          "createdAt": "2017-04-16T17:21:56Z",
          "updatedAt": "2017-04-16T17:21:56Z"
        }
      ]
    },
    {
      "number": 911,
      "id": "MDU6SXNzdWUyMTU0MTQzOTk=",
      "title": "Update the external reference list.",
      "url": "https://github.com/tlswg/tls13-spec/issues/911",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "Felix G\\\"{u}nther sent me a list.\r\nAuthors: Badertscher, Matt, Maurer, Rogaway, Tackmann\r\nTitle: Augmented Secure Channels and the Goal of the TLS 1.3 Record Layer\r\nHowpublished: ProvSec 2015\r\nLink: https://eprint.iacr.org/2015/394\r\n\r\n\r\nAuthors: Bellare, Tackmann\r\nTitle: The Multi-User Security of Authenticated Encryption: AES-GCM in TLS 1.3\r\nHowpublished: Crypto 2016\r\nLink: http://eprint.iacr.org/2016/564\r\n\r\n\r\nAuthors: Beurdouche, Bhargavan, Blanchet, Delignat-Lavaud, Fournet, Ishtiaq, Kobeissi, Kohlweiss, Pan, Protzenko, Rastogi, Swamy, Zanella-Bguelin, Zinzindohou\u00e9\r\nTitle: ???\r\nHowpublished: presented at TRON 2016\r\nLink: ???\r\n\r\n\r\nAuthors: Bhargavan, Brzuska, Fournet, Green, Kohlweiss, Zanella-Beguellin\r\nTitle: Downgrade Resilience in Key-Exchange Protocols\r\nHowpublished: IEEE S&P 2016\r\nLink: https://eprint.iacr.org/2016/072\r\n\r\n\r\nAuthors: Bhargavan, Delignat-Lavaud, Fournet, Kohlweiss, Pan, Protzenko, Rastogi, Swamy, Zanella-Be\u0301guelin, Zinzindohou\u00e9\r\nTitle: Implementing and Proving the TLS 1.3 Record Layer\r\nHowpublished: IEEE S&P 2017 (?)\r\nLink: http://eprint.iacr.org/2016/1178\r\n\r\n\r\nAuthors: Cremers, Horvat, Scott, van der Merwe\r\nTitle: Automated Analysis and Verification of TLS 1.3: 0-RTT, Resumption and Delayed Authentication \r\nHowpublished: IEEE S&P 2016\r\nLink: http://ieeexplore.ieee.org/document/7546518/\r\n\r\n\r\nAuthors: Dowling, Fischlin, G\u00fcnther, Stebila\r\nTitle: A Cryptographic Analysis of the TLS 1.3 Handshake Protocol Candidates\r\nHowpublished: ACM CCS 2015\r\nLink: https://eprint.iacr.org/2015/914\r\n\r\n\r\nAuthors: Dowling, Fischlin, G\u00fcnther, Stebila\r\nTitle: A Cryptographic Analysis of the TLS 1.3 draft-10 Full and Pre-shared Key Handshake Protocol\r\nHowpublished: presented at TRON 2016\r\nLink: https://eprint.iacr.org/2016/081\r\n\r\n\r\nAuthors: Fischlin, G\u00fcnther\r\nTitle: Replay Attacks on Zero Round-Trip Time: The Case of the TLS 1.3 Handshake Candidates\r\nHowpublished: IEEE EuroS&P 2017\r\nLink: https://eprint.iacr.org/2017/082\r\n\r\n\r\nAuthors: Fischlin, G\u00fcnther, Schmidt, Warinschi\r\nTitle: Key Confirmation in Key Exchange: A Formal Treatment and Implications for TLS 1.3\r\nHowpublished: IEEE S&P 2016\r\nLink: http://ieeexplore.ieee.org/document/7546517/\r\n\r\n\r\nAuthors: Jager, Schwenk, Somorovsky\r\nTitle: On the Security of TLS 1.3 and QUIC Against Weaknesses in PKCS#1 v1.5 Encryption\r\nHowpublished: ACM CCS 2015\r\nLink: http://dl.acm.org/citation.cfm?id=2813657\r\n\r\n\r\nAuthors: Kohlweiss, Maurer, Onete, Tackmann, Venturi \r\nTitle: (De-)Constructing TLS\r\nHowpublished: ???\r\nLink: https://eprint.iacr.org/2014/020\r\n\r\n\r\nAuthors: Krawczyk, Wee\r\nTitle: The OPTLS Protocol and TLS 1.3\r\nHowpublished: IEEE EuroS&P 2016\r\nLink: https://eprint.iacr.org/2015/978\r\n\r\n\r\nAuthors: Krawczyk\r\nTitle: A Unilateral-to-Mutual Authentication Compiler for Key Exchange (with Applications to Client Authentication in TLS 1.3)\r\nHowpublished: ACM CCS 2016\r\nLink: https://eprint.iacr.org/2016/711\r\n\r\n\r\nAuthors: Li, Xu, Zhang, Feng, Hu\r\nTitle: Multiple Handshakes Security of TLS 1.3 Candidates \r\nHowpublished: IEEE S&P 2016\r\nLink: http://ieeexplore.ieee.org/document/7546519/",
      "createdAt": "2017-03-20T13:07:06Z",
      "updatedAt": "2017-04-18T13:10:36Z",
      "closedAt": "2017-04-18T13:10:36Z",
      "comments": []
    },
    {
      "number": 913,
      "id": "MDU6SXNzdWUyMTY5NDAwMTQ=",
      "title": "Clarification: should ticket_age_add be different for each ticket.",
      "url": "https://github.com/tlswg/tls13-spec/issues/913",
      "state": "CLOSED",
      "author": "tmthrgd",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I've spotted a difference between draft implementations of TLS1.3 in the wild and the specification isn't clear as to the required behavior.\r\n\r\nCloudflare's [tls-tris](https://github.com/cloudflare/tls-tris) implementation [reuses the same random ticket_age_add for multiple tickets](https://github.com/cloudflare/tls-tris/blob/911840a4013f4f57b3bd9475a724a4703a64c7dc/13.go#L568-L583), while [BoringSSL](https://boringssl.googlesource.com/boringssl)'s TLS1.3 implementation [uses a different random ticket_age_add for each ticket](https://github.com/google/boringssl/blob/cfb9d147bb8df5dd8b5b5f3d3ec04cf13077d677/ssl/tls13_server.c#L648-L651).\r\n\r\nBased on my understanding of ticket_age_add, the value should be unique per ticket to have the desired effect - I could well be wrong though. Either way, it seems the specification needs to be clearer about this. I suggest that this be clarified by explicitly stating whether ticket_age_add may be reused [in section 4.6.1](https://github.com/tlswg/tls13-spec/blob/d55c542ce89b35b317a2f2e1af405382c66ed01f/draft-ietf-tls-tls13.md#new-session-ticket-message-newsessionticket).",
      "createdAt": "2017-03-25T01:36:12Z",
      "updatedAt": "2017-04-04T00:05:21Z",
      "closedAt": "2017-04-04T00:05:21Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It should be unique per ticket.  But, I guess we ought to add more text, given the observed behavior.",
          "createdAt": "2017-03-27T02:30:11Z",
          "updatedAt": "2017-03-27T02:30:11Z"
        }
      ]
    },
    {
      "number": 918,
      "id": "MDU6SXNzdWUyMTcwODY0MjY=",
      "title": "old text referring to EOED sent as alert",
      "url": "https://github.com/tlswg/tls13-spec/issues/918",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 6 has a text suggesting that end_of_early_data is sent as an alert.\r\n\r\n> Some alerts are sent to indicate orderly closure of the connection or the end of early data (see Section 6.1).\r\n",
      "createdAt": "2017-03-26T20:26:40Z",
      "updatedAt": "2017-04-04T00:03:55Z",
      "closedAt": "2017-04-04T00:03:55Z",
      "comments": []
    },
    {
      "number": 919,
      "id": "MDU6SXNzdWUyMTcxMzQxMzI=",
      "title": "Clarifying replay properties",
      "url": "https://github.com/tlswg/tls13-spec/issues/919",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "It is hard to understand the current text of Section 4.2.9.3 (Replay Properties).\r\n@kazuho explained me that a server should check:\r\n\r\n```\r\n(server_recv_time - server_send_time) - (client_send_time - client_recv_time) < RTT + delta\r\n```\r\n\r\nThe server can tell:\r\n- server_recv_time == now\r\n- server_send_time == one parameter in the ticket\r\n- client_send_time - client_recv_time == ticket_age == obfuscated_ticket_age + ticket_age_add\r\n\r\nIf this understanding is correct, I would suggest to add more explanation to the section.",
      "createdAt": "2017-03-27T04:31:49Z",
      "updatedAt": "2017-04-17T13:27:53Z",
      "closedAt": "2017-04-17T13:27:53Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, that's correct. PRs welcome",
          "createdAt": "2017-04-11T17:01:24Z",
          "updatedAt": "2017-04-11T17:01:24Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I made a tweak to avoid referring to the \"base value\", in #936, though more changes may still be helpful.",
          "createdAt": "2017-04-11T17:03:52Z",
          "updatedAt": "2017-04-11T17:03:52Z"
        }
      ]
    },
    {
      "number": 923,
      "id": "MDU6SXNzdWUyMTc2ODI4NzI=",
      "title": "Write a new reader friendly changes section",
      "url": "https://github.com/tlswg/tls13-spec/issues/923",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "Posting an issue so this gets explicitly tracked, as it's come up on the mailing list a few times recently.\r\n\r\nThe \"Major Differences from TLS 1.2\" section evolved over the development time to be a full changelog, including changes from draft to draft. We need a new, fully fleshed-out, \"Major Differences from TLS 1.2\" section that covers this stated topic concisely and is written for a new reader of this document, rather than someone who's followed its development.",
      "createdAt": "2017-03-28T20:29:25Z",
      "updatedAt": "2017-04-16T21:51:36Z",
      "closedAt": "2017-04-16T21:51:36Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I'll write something.",
          "createdAt": "2017-03-28T22:44:15Z",
          "updatedAt": "2017-03-28T22:44:15Z"
        }
      ]
    },
    {
      "number": 927,
      "id": "MDU6SXNzdWUyMTgzNDAyNTY=",
      "title": "Fix Jim Roskind's Affiliation",
      "url": "https://github.com/tlswg/tls13-spec/issues/927",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Amazon\r\njroskind@amazon.com",
      "createdAt": "2017-03-30T21:58:38Z",
      "updatedAt": "2017-03-31T14:06:53Z",
      "closedAt": "2017-03-31T14:06:53Z",
      "comments": []
    },
    {
      "number": 928,
      "id": "MDU6SXNzdWUyMTgzODc0NDA=",
      "title": "Add matthew green to acknowledgements",
      "url": "https://github.com/tlswg/tls13-spec/issues/928",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@matthew_d_green send PR",
      "createdAt": "2017-03-31T03:21:33Z",
      "updatedAt": "2017-04-04T02:34:13Z",
      "closedAt": "2017-04-04T02:34:13Z",
      "comments": []
    },
    {
      "number": 929,
      "id": "MDU6SXNzdWUyMTg1MTMxNjY=",
      "title": "Define Raw Public Key support for TLS 1.3",
      "url": "https://github.com/tlswg/tls13-spec/issues/929",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is straightforward so we agreed to write a section",
      "createdAt": "2017-03-31T14:08:14Z",
      "updatedAt": "2017-04-11T00:18:16Z",
      "closedAt": "2017-04-11T00:18:16Z",
      "comments": []
    },
    {
      "number": 930,
      "id": "MDU6SXNzdWUyMTg1MTY3MDc=",
      "title": "Clarify that all the client auth messages must appear together without intervening other data",
      "url": "https://github.com/tlswg/tls13-spec/issues/930",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-31T14:20:35Z",
      "updatedAt": "2017-04-03T23:55:36Z",
      "closedAt": "2017-04-03T23:55:36Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Specifically, post-handshake client auth",
          "createdAt": "2017-03-31T16:17:28Z",
          "updatedAt": "2017-03-31T16:17:28Z"
        }
      ]
    },
    {
      "number": 934,
      "id": "MDU6SXNzdWUyMjA3ODM1Mjg=",
      "title": "CertificateVerify \"client's signature with non-certificate-based handshakes\"",
      "url": "https://github.com/tlswg/tls13-spec/issues/934",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "Section 4.4.3 (CertificateVerify) has:\r\n\r\n    Note: When used with non-certificate-based handshakes (e.g., PSK),\r\n    the client's signature does not cover the server's certificate\r\n    directly.  When the PSK was established through a NewSessionTicket,\r\n    the client's signature transitively covers the server's certificate\r\n    through the PSK binder.  [PSK-FINISHED] describes a concrete attack\r\n    on constructions that do not bind to the server's certificate.  It is\r\n    unsafe to use certificate-based client authentication when the client\r\n    might potentially share the same PSK/key-id pair with two different\r\n    endpoints and implementations MUST NOT combine external PSKs with\r\n    certificate-based authentication.\r\n\r\nI call attention to the first sentence, which appears to be describing a scenario that cannot happen in the current spec, if I am understanding things correctly.  That is, the server can only send CertificateRequest to the client if the server is authenticating with a certificate, and we don't specify a way to do both PSK and certificate auth yet (i.e., the resumption flow just has a Finished, with no room for Certificate/CertificateVerify).\r\n\r\nI conclude, then, that this text is a preemptive warning to people who might want to add such a thing in the future; if so, we should probably have text to more clearly indicate that that is what is going on.",
      "createdAt": "2017-04-10T22:00:44Z",
      "updatedAt": "2017-04-18T13:33:02Z",
      "closedAt": "2017-04-18T13:33:02Z",
      "comments": []
    },
    {
      "number": 937,
      "id": "MDU6SXNzdWUyMjA4MDU1NTY=",
      "title": "Explicitly forbid OpenPGP....",
      "url": "https://github.com/tlswg/tls13-spec/issues/937",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-11T00:18:35Z",
      "updatedAt": "2017-04-11T17:00:30Z",
      "closedAt": "2017-04-11T17:00:30Z",
      "comments": []
    },
    {
      "number": 939,
      "id": "MDU6SXNzdWUyMjEwMzgyMjY=",
      "title": "Have a range of permitted unsolicited values in HRR",
      "url": "https://github.com/tlswg/tls13-spec/issues/939",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Right now, only Cookie can be unsolicited in HRR, but maybe we would want to add other things which is basically impossible now. Nikos suggested allowing anything or having a range.\r\n",
      "createdAt": "2017-04-11T18:21:58Z",
      "updatedAt": "2017-04-16T15:29:45Z",
      "closedAt": "2017-04-16T15:29:45Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What would a client do in response to an unknown unsolicited field? Ignoring extensions in HRRs doesn't typically work (plus that means it is an optional feature and could be negotiated in the usual way). Cookie is this weird thing where we allowed it unsolicited just to make it MTI, but we can't just add new MTI extension after the fact.",
          "createdAt": "2017-04-11T18:32:21Z",
          "updatedAt": "2017-04-11T18:32:21Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, this is a good point.\r\n",
          "createdAt": "2017-04-11T18:38:41Z",
          "updatedAt": "2017-04-11T18:38:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "An alternative, though perhaps not a great one, is to require that clients include cookie in every handshake. One reason that it might be bad is that it is an extension that has had a definition for some time, and that definition never required inclusion in ClientHello, or in TLS (just DTLS). That could trigger a whole new class of intolerance.",
          "createdAt": "2017-04-16T10:09:14Z",
          "updatedAt": "2017-04-16T10:09:14Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, seeing no enthusiasm for a change here. Closing",
          "createdAt": "2017-04-16T15:29:45Z",
          "updatedAt": "2017-04-16T15:29:45Z"
        }
      ]
    },
    {
      "number": 940,
      "id": "MDU6SXNzdWUyMjEwNDI5MzA=",
      "title": "Clean up discussion of obfuscated_ticket_age_handing",
      "url": "https://github.com/tlswg/tls13-spec/issues/940",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending",
        "parked"
      ],
      "body": "",
      "createdAt": "2017-04-11T18:39:39Z",
      "updatedAt": "2017-04-17T13:28:48Z",
      "closedAt": "2017-04-17T13:28:48Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From Nikos's comment:\r\n\r\n```\r\n> 4.2.8.3. I believe that section can benefit from some improvements.\r\n> >From a first read it is not clear what this section wants to protect\r\n> from. It provides some checks, but it is unclear to me what these\r\n> protect from.\r\n> \r\n> Some more concrete comments on the same section:\r\n> It mentions \"see if the value used by the client matches its\r\n> expectations\". A question that arises, is what is the recommended\r\n> expectation for a server? Given the text in 4.2.8 that should be a\r\n> week, but the text in 4.2.8 seems to imply that the restriction is\r\n> defined somewhere else, and I would have expected it to be here.\r\n> \r\n> The text recommends: \"a server SHOULD measure the round trip time prior\r\n> to sending the NewSessionTicket message\". I see two issues here. (1) it\r\n> doesn't mention how to do this measurement --my guess is that this can\r\n> be done in the context of TLS--, and (2) it assumes that round-trips\r\n> are fixed over time. About (1), I ask because the obvious measurement\r\n> time between [server Application Data*] and client [Certificate*] would\r\n> include the processing of the application data by the client.\r\n> On (2), this check will not work as is for mobile clients which will\r\n> have variable round-trips.\r\n> \r\n> The check 'ticket age must be shorter than elapsed time by a round-\r\n> trip', is unclear to me what it intends to protect from.\r\n> \r\n> A clarification: \"the actual time elapsed on the server\", elapsed since\r\n> when? (I guess since the first message was received).\r\n```",
          "createdAt": "2017-04-11T18:40:02Z",
          "updatedAt": "2017-04-11T18:40:02Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is relating to #919.\r\nI will try to resolve both issues.",
          "createdAt": "2017-04-12T05:13:10Z",
          "updatedAt": "2017-04-12T05:13:10Z"
        }
      ]
    },
    {
      "number": 941,
      "id": "MDU6SXNzdWUyMjEwNDQ0ODc=",
      "title": "Extend downgrade protection to TLS 1.0",
      "url": "https://github.com/tlswg/tls13-spec/issues/941",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "Per Ben Kaduk's comments",
      "createdAt": "2017-04-11T18:45:36Z",
      "updatedAt": "2017-04-21T10:23:52Z",
      "closedAt": "2017-04-21T10:23:52Z",
      "comments": []
    },
    {
      "number": 942,
      "id": "MDU6SXNzdWUyMjEwNDYxOTI=",
      "title": "Make sure that key labels and key names match",
      "url": "https://github.com/tlswg/tls13-spec/issues/942",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "In the key schedule",
      "createdAt": "2017-04-11T18:52:02Z",
      "updatedAt": "2017-04-18T19:06:59Z",
      "closedAt": "2017-04-18T19:06:59Z",
      "comments": []
    },
    {
      "number": 943,
      "id": "MDU6SXNzdWUyMjEwNzU0OTI=",
      "title": "Import 4492 ECDHE PDUs in 4.2.5.2",
      "url": "https://github.com/tlswg/tls13-spec/issues/943",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "Per Nikos's comment.\r\n",
      "createdAt": "2017-04-11T20:45:39Z",
      "updatedAt": "2017-04-18T13:15:11Z",
      "closedAt": "2017-04-18T13:15:11Z",
      "comments": []
    },
    {
      "number": 945,
      "id": "MDU6SXNzdWUyMjE4MDEyMjY=",
      "title": "Fold in Hugo Krawczyk's proposed security considerations text",
      "url": "https://github.com/tlswg/tls13-spec/issues/945",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "",
      "createdAt": "2017-04-14T12:33:36Z",
      "updatedAt": "2017-04-18T13:33:23Z",
      "closedAt": "2017-04-18T13:33:23Z",
      "comments": []
    },
    {
      "number": 953,
      "id": "MDU6SXNzdWUyMjIwMzMyNDU=",
      "title": "Post-handshake client authentication with PSK",
      "url": "https://github.com/tlswg/tls13-spec/issues/953",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "Currently we prohibit all client auth with PSK, but IIRC the intent was to allow it in post-handshake.",
      "createdAt": "2017-04-16T21:05:36Z",
      "updatedAt": "2017-04-21T11:40:01Z",
      "closedAt": "2017-04-21T11:39:55Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben: ^^?",
          "createdAt": "2017-04-17T13:43:08Z",
          "updatedAt": "2017-04-17T13:43:08Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sounds reasonable to me.",
          "createdAt": "2017-04-19T00:20:29Z",
          "updatedAt": "2017-04-19T00:20:29Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged",
          "createdAt": "2017-04-21T11:40:01Z",
          "updatedAt": "2017-04-21T11:40:01Z"
        }
      ]
    },
    {
      "number": 957,
      "id": "MDU6SXNzdWUyMjIxNDEwMzM=",
      "title": "-20 changelog",
      "url": "https://github.com/tlswg/tls13-spec/issues/957",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-17T14:17:47Z",
      "updatedAt": "2017-04-27T13:05:27Z",
      "closedAt": "2017-04-27T13:05:27Z",
      "comments": []
    },
    {
      "number": 964,
      "id": "MDU6SXNzdWUyMjI1MTMzOTM=",
      "title": "Labels push HKDF-Expand-Label into two hash blocks",
      "url": "https://github.com/tlswg/tls13-spec/issues/964",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I notice that some of the application traffic secret labels are long enough to push us into a second hash block. I don't think this is a big deal, but I thought I would mention it because now is the time to change.\r\n\r\n@adl @martinthomson @davidben ",
      "createdAt": "2017-04-18T19:00:43Z",
      "updatedAt": "2017-04-26T15:55:03Z",
      "closedAt": "2017-04-26T15:55:03Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think someone mentioned this in ORD....",
          "createdAt": "2017-04-18T19:00:55Z",
          "updatedAt": "2017-04-18T19:00:55Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "*shrug* I also don't think it's a big deal, but if someone feels strongly, I also don't object to shrinking them.\r\n\r\n(Which labels?)",
          "createdAt": "2017-04-19T00:19:22Z",
          "updatedAt": "2017-04-19T00:19:22Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I also don't care, but I know that @adl was sad about the number of times we cranked the handle on the hash function (and that was before we added many).  I wouldn't object to someone trimming the strings a little if it came to that.",
          "createdAt": "2017-04-19T00:26:50Z",
          "updatedAt": "2017-04-19T00:26:50Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "&lt;unhelpful&gt;We could pump all our labels into the hash function. That would make them shorter!&lt;/unhelpful&gt; :-)\r\n\r\n(Edited because Github swallowed my tags.)",
          "createdAt": "2017-04-19T00:28:56Z",
          "updatedAt": "2017-04-19T00:29:36Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Chopping off the \" secret\" from the end of everything would be a quick easy shortening, if that's enough.\n",
          "createdAt": "2017-04-19T00:30:33Z",
          "updatedAt": "2017-04-19T00:30:33Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd have to make a list, but I think minimally client application traffic secret is going to be a problem because it has to be concatenated to the hash context and some framing info.\r\n",
          "createdAt": "2017-04-19T11:25:48Z",
          "updatedAt": "2017-04-19T11:25:48Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I calculated that the maximum label length for derive-secret is 18 bytes if one is not to blow SHA-256 block:\r\n\r\n* 2 bytes: Output length (always 32)\r\n* 1 byte: Length of label + 9\r\n* 9 bytes: \"TLS 1.3, \"\r\n* 18 bytes: Label\r\n* 1 byte: Length of context (always 32)\r\n* 32 bytes: hash\r\n* 1 byte: HKDF trailer (always 1)\r\n\r\nTotal: 64 bytes (block is 64 bytes).\r\n\r\nSo just chopping \"secret\" is not enough.\r\n\r\nSHA-384 uses 80 bytes of its 128 byte block at 18 byte label, so it fits too.\r\n\r\n(18 bytes would also be small enough not to make most other hashes not blow extra block. The most notable exception would be 512-bit SHA-3 (not to be confused with 512-bit SHAKE256), but that hash function is not very usable due to slowness anyway).\r\n",
          "createdAt": "2017-04-19T17:01:29Z",
          "updatedAt": "2017-04-19T17:01:29Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Here is a revised set of labels of which the longest is 18.\r\n\r\nexternal binder # was external psk binder key\r\nresumption binder # was resumption psk binder key\r\nclient e. traffic # was client early traffic\r\ne. exporter master # was early exporter master secret\r\nclient hs traffic # was client handshake traffic secret\r\nserver hs traffic # was server handshake traffic secret\r\nclient app traffic # was client application traffic secret\r\nserver app traffic # was server application traffic secret\r\nexporter master # was exporter master secret\r\nresumption # was resumption master secret\r\nkey # was key\r\niv # was iv\r\nfinished # was finished\r\napp traffic upd.  # was application traffic secret\r\nexporter # was exporter\r\n\r\n",
          "createdAt": "2017-04-22T17:46:54Z",
          "updatedAt": "2017-04-22T17:46:54Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In the category of things that don't matter:\r\n\r\n\"app traffic upd.\" could be \"key update\" which avoids abbreviation and matches the name of KeyUpdate. It loses the \"app\" distinguisher, but even if 0-RTT or HS data were to have a KeyUpdate, not having a distinguisher is fine for the reason keys and IVs have short labels.\r\n\r\n\"e. exporter master\" could be \"early exporter\" to avoid the abbreviation and also match \"exporter\". That said, avoiding the abbreviation means inconsistency with \"client e. traffic\". \"client 0rtt traffic\" and \"0rtt exporter\" do fit, but the spec tends to call it \"early\".\r\n\r\nIn other words: I see you have proposed a mauvy shade of pinky russet. I don't care, but have you considered a slightly greener color? :-)",
          "createdAt": "2017-04-22T22:46:00Z",
          "updatedAt": "2017-04-22T22:46:00Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with you about \"app traffic upd.\" will change.\r\n\r\nI did spend a while messing around with the earlys and masters but ran into the same problem you did, and thus ended up with the result you see here.\r\n\r\n\r\n\r\n",
          "createdAt": "2017-04-23T00:53:26Z",
          "updatedAt": "2017-04-23T00:53:26Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thus, we end up with a slightly bluer color :)",
          "createdAt": "2017-04-23T00:53:45Z",
          "updatedAt": "2017-04-23T00:53:45Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Revised:\r\n\r\nexternal binder # was external psk binder key\r\nresumption binder # was resumption psk binder key\r\nclient e. traffic # was client early traffic\r\ne. exporter master # was early exporter master secret\r\nclient hs traffic # was client handshake traffic secret\r\nserver hs traffic # was server handshake traffic secret\r\nclient app traffic # was client application traffic secret\r\nserver app traffic # was server application traffic secret\r\nexporter master # was exporter master secret\r\nresumption # was resumption master secret\r\nkey # was key\r\niv # was iv\r\nfinished # was finished\r\ntraffic key update  # was application traffic secret\r\nexporter # was exporter\r\n",
          "createdAt": "2017-04-24T12:52:55Z",
          "updatedAt": "2017-04-24T12:52:55Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "NONE",
          "body": "Is there value in namespacing the labels (eg, \"tls.key\" and \"tls.tfk.app.c\"?), even if it means shortening some?  This might help avoid unfortunate collisions with extensions down the road?\r\nAnd/or otherwise adding an IANA registry for the labels?\r\nOr (shudder) using OIDs for labels?\r\n(What the label string values presumably don't matter as much as that they have a good mapping to the specification and are clearly/unambiguously unique.)",
          "createdAt": "2017-04-24T13:42:04Z",
          "updatedAt": "2017-04-24T13:42:04Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "An FCFS label registry seems to make sense.",
          "createdAt": "2017-04-24T13:43:24Z",
          "updatedAt": "2017-04-24T13:43:24Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Revised based on ML discussion\r\n\r\n16 tls13 ext binder    #  was external psk binder key\r\n16 tls13 res binder    #  was resumption psk binder key\r\n17 tls13 c e traffic    #  was client early traffic secret\r\n18 tls13 e exp master    #  was early exporter master secret\r\n18 tls13 c hs traffic    #  was client handshake traffic secret\r\n18 tls13 s hs traffic    #  was server handshake traffic secret\r\n18 tls13 c ap traffic    #  was client application traffic secret\r\n18 tls13 s ap traffic    #  was server application traffic secret\r\n16 tls13 exp master    #  was exporter master secret\r\n16 tls13 res master    #  was resumption master secret\r\n9 tls13 key    #  was key\r\n8 tls13 iv    #  was iv\r\n14 tls13 finished    #  was finished\r\n17 tls13 traffic upd    #  was application traffic secret\r\n14 tls13 exporter    #  was exporter\r\n13 tls13 derived    #  was derived",
          "createdAt": "2017-04-25T17:37:53Z",
          "updatedAt": "2017-04-25T17:37:53Z"
        },
        {
          "author": "ad-l",
          "authorAssociation": "NONE",
          "body": "This does save some unnecessary compressions so I am in favour of this change.\r\nMy only comment is that the \"tls13\" prefix seems unnecessary given the hkdfLabel encoding:\r\n```C\r\n       struct {\r\n           uint16 length = Length;\r\n           opaque label<10..255> = \"TLS 1.3, \" + Label;\r\n           opaque hash_value<0..255> = HashValue;\r\n       } HkdfLabel;\r\n```\r\nI do not believe that HKDF-Expand is used directly for any of the above labels. Since HKDF-Expand-Label already injects the \"TLS 1.3, \" prefix I see no point in having it in the label too.",
          "createdAt": "2017-04-26T15:15:49Z",
          "updatedAt": "2017-04-26T15:15:49Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The intent is to have that inject \"tls13 \" and as you say, no redundant labels.\r\n",
          "createdAt": "2017-04-26T15:35:19Z",
          "updatedAt": "2017-04-26T15:35:19Z"
        }
      ]
    },
    {
      "number": 965,
      "id": "MDU6SXNzdWUyMjI1MjU5OTY=",
      "title": "Warn against low entropy PSKs",
      "url": "https://github.com/tlswg/tls13-spec/issues/965",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The binder makes it trivial to dictionary attack the PSK",
      "createdAt": "2017-04-18T19:51:18Z",
      "updatedAt": "2017-04-21T10:48:50Z",
      "closedAt": "2017-04-21T10:48:50Z",
      "comments": [
        {
          "author": "hannestschofenig",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it would be useful to add a short note to Section 2.2. \r\n\r\nSomething like this paragraph would do the job: \r\n\"Note: When using an out-of-band provisioned pre-shared secret, a critical consideration is using sufficient entropy during the key generation, as discussed in [RFC4086].  Deriving a shared secret from a password or other low-entropy sources is not secure. A low-entropy secret, or password, is subject to dictionary attacks. The specified PSK authentication is not a strong password-based authenticated key exchange even when used with a Diffie-Hellman exchange.\"\r\n",
          "createdAt": "2017-04-19T18:36:40Z",
          "updatedAt": "2017-04-19T18:36:40Z"
        }
      ]
    },
    {
      "number": 966,
      "id": "MDU6SXNzdWUyMjI1NjYyNjM=",
      "title": "\"Updating Traffic Keys and IVs\" section lists generic label for both client & server",
      "url": "https://github.com/tlswg/tls13-spec/issues/966",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://tools.ietf.org/html/draft-ietf-tls-tls13-19#section-7.2\r\nhttps://tlswg.github.io/tls13-spec/#updating-traffic-keys\r\n\r\nCurrently, we generically specify how to generate application_traffic_secret_N+1, and it uses the label \"application traffic secret\". Everywhere else we explicitly state separate client/server values/labels or use a \"[sender]_\" prefix. It should probably be something like this, instead:\r\n\r\nclient_application_traffic_secret_N+1 =\r\n        HKDF-Expand-Label(client_application_traffic_secret_N,\r\n                                         \"client application traffic secret\", \"\", Hash.length)\r\nserver_application_traffic_secret_N+1 =\r\n        HKDF-Expand-Label(server_application_traffic_secret_N,\r\n                                         \"server application traffic secret\", \"\", Hash.length)\r\n\r\n(or, use a \"[sender]_\" prefix and maybe list both labels with an \"|\" as done elsewhere, but that feels more complicated for no real reason)\r\n\r\nAlso, all the \"client_/server\" prefixes in this section's text should probably be simplified to \"[sender]_\" prefixes.\r\n\r\nPosting as an issue first rather than PR as this would change labels and be an effective wire-format change.",
      "createdAt": "2017-04-18T22:41:02Z",
      "updatedAt": "2017-04-21T10:45:51Z",
      "closedAt": "2017-04-21T10:45:51Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Getting rid of some of the repeated client/server label splits was an explicit goal (though not the primary one) of splitting up the key schedule ladders and some of the other key schedule tweaks around that time. The two schedules are already split at this point and it's a place where we'd needlessly check is_client/is_server send/receive. Same reason why the key/IV labels are just \"key\" and \"iv\" at this point. It seems small, but, having worked on an implementation, it's a significant complexity win.\r\n\r\n(Editorially, I don't care whether it's [sender] or two equations. Either seems fine to me. But the labels should be kept the same.)",
          "createdAt": "2017-04-19T00:13:48Z",
          "updatedAt": "2017-04-19T00:14:43Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we're ok with using the same label for both client & server key updates, it should probably be labeled something explicit and not something that could be mistaken for other labels, e.g. simply \"secret update\" or something. (similar to how we've got just \"key\" and \"iv\")\n",
          "createdAt": "2017-04-19T00:28:23Z",
          "updatedAt": "2017-04-19T00:28:23Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not seeing much of an issue here, but if we end up shrinking the labels as in #964, I would be willing to take a look. ",
          "createdAt": "2017-04-21T10:45:51Z",
          "updatedAt": "2017-04-21T10:45:51Z"
        }
      ]
    },
    {
      "number": 968,
      "id": "MDU6SXNzdWUyMjI3OTcwNjE=",
      "title": "Three phases in the TLS handshake (Figure 1)",
      "url": "https://github.com/tlswg/tls13-spec/issues/968",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "Figure 1 \"Message flow for full TLS Handshake\" classifies different TLS messages to three phases, key exchange, server parameters, and authentication. While this sounds useful it does not take the more recent developments around PSK-based authentication into account. For example, the ClientHello is labeled as a key exchange message while with PSK it also performs authentication since the pre_shared_key extension contains the binder value. \r\n\r\nMy suggestion is to remove the labels from the figure. The text that talks about the different phases is still consistent with the rest of the document. \r\n",
      "createdAt": "2017-04-19T16:33:40Z",
      "updatedAt": "2017-04-27T20:34:45Z",
      "closedAt": "2017-04-27T20:34:45Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I tend to think this is still useful, so absent wild outcry I'm going to leave this as-is. ",
          "createdAt": "2017-04-21T10:49:51Z",
          "updatedAt": "2017-04-21T10:49:51Z"
        }
      ]
    },
    {
      "number": 969,
      "id": "MDU6SXNzdWUyMjI3OTg3OTY=",
      "title": "Information to be provisioned with out-of-band PSKs",
      "url": "https://github.com/tlswg/tls13-spec/issues/969",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 2.2 says: \r\n\"\r\nWhen PSKs are provisioned out of band, the PSK identity and the KDF to be used with the PSK MUST also be provisioned.\r\n\"\r\n\r\nSection 2.3 \r\n\r\n\"\r\nWhen clients use a PSK obtained externally to send early data, then the following additional information MUST be provisioned to both parties:\r\n- The cipher suite for use with this PSK\r\n- The Application-Layer Protocol Negotiation (ALPN) protocol, if any is to be used\r\n- The Server Name Indication (SNI), if any is to be used\r\n\"\r\n\r\nI believe the two sections should say the same. Ideally, the text should better be included in Section 4.2.10 \"Pre-Shared Key Extension\", which already talks about associating the PSK with a hash algorithm. \r\n\r\nNote that the term ciphersuite in Section 2.3 refers to the hash/KDF used in Section 4.2.10 and Section 2.2.",
      "createdAt": "2017-04-19T16:39:45Z",
      "updatedAt": "2017-04-26T16:50:59Z",
      "closedAt": "2017-04-26T16:50:59Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note the \"additional\" in section 2.3's text.  There really are extra restrictions when you want to use early data, since negotiation is not possible.",
          "createdAt": "2017-04-19T16:47:29Z",
          "updatedAt": "2017-04-19T16:47:29Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am just suggesting to move the following text from Section 2.3 into Section 4.2.10:\r\n\r\n\"When clients use a PSK obtained externally to send early data, then the following additional information MUST be provisioned to both parties:\r\n- The cipher suite for use with this PSK\r\n- The Application-Layer Protocol Negotiation (ALPN) protocol, if any is to be used\r\n- The Server Name Indication (SNI), if any is to be used\r\n\"\r\n\r\nThe other security warnings about the zero-RTT exchange make sense in Section 2.3",
          "createdAt": "2017-04-19T16:56:31Z",
          "updatedAt": "2017-04-19T16:56:31Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Okay, the \r\n\r\n> I believe the two sections should say the same\r\n\r\nhad me thinking that you wanted the same restrictions to apply to early data and regular application data.\r\n\r\nI don't object to moving the normative restrictions to the section specific to the PSK extension, though my preference would be to leave them as-is -- the extension is used for both NST-provisioned and externally-provisioned PSKs, and it might be clearer to call out these specific restrictions in the section specific to the external provisioning.  One could argue that it would be okay in the replay properties sub-section (4.2.8.3 in the draft-19 numbering), but it feels a little off-topic to me there, too.",
          "createdAt": "2017-04-19T17:03:19Z",
          "updatedAt": "2017-04-19T17:03:19Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with @kaduk about this, and I think it's editorial discretion, so closing.",
          "createdAt": "2017-04-26T16:50:59Z",
          "updatedAt": "2017-04-26T16:50:59Z"
        }
      ]
    },
    {
      "number": 970,
      "id": "MDU6SXNzdWUyMjI4MDUyMzY=",
      "title": "Is Section 3.9. \"Decoding Errors\" misplaced?",
      "url": "https://github.com/tlswg/tls13-spec/issues/970",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I read through the entire TLS spec and when I got to Section 3.9 I was a bit confused to read the text about alerts in context of a section that explains the presentation language. \r\n\r\nWouldn't it be better to put this text into Section 9 \"Alert Protocol\"? \r\n\r\nI haven't previously noticed this section since I skipped the presentation language section since it is a bit like terminology. ",
      "createdAt": "2017-04-19T17:02:14Z",
      "updatedAt": "2017-04-26T16:43:59Z",
      "closedAt": "2017-04-26T16:43:59Z",
      "comments": []
    },
    {
      "number": 971,
      "id": "MDU6SXNzdWUyMjI4MTgyNTE=",
      "title": "Leave question of replaying early data to application profile?",
      "url": "https://github.com/tlswg/tls13-spec/issues/971",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is from a note I made on a paper copy; I don't think I mentioned it anywhere already, but my apologies if it is a duplicate.\r\n\r\nAt the end of section 4.2.7 we have a paragraph saying that the client application MAY replay early data if the server rejects early data, but SHOULD NOT do so automatically (absent application input).  Do we need to say anything about this topic other than \"what to do when early data is rejected is left to the application profile\"?  I guess the concerns about matching ALPN and connection state do need to be here, at least.",
      "createdAt": "2017-04-19T17:51:15Z",
      "updatedAt": "2017-04-26T16:30:46Z",
      "closedAt": "2017-04-26T16:30:46Z",
      "comments": []
    },
    {
      "number": 972,
      "id": "MDU6SXNzdWUyMjI5NTY2MzI=",
      "title": "Early Data after HelloRetryRequest",
      "url": "https://github.com/tlswg/tls13-spec/issues/972",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "Section 4.1.2 says that \"Early data is not permitted after HelloRetryRequest.\"\r\n\r\nIn TLS the use of the HRR is a rare occurrence since it is really only used when the server finds an acceptable set of parameters but the ClientHello does not contain sufficient information to proceed with the handshake. For example, the client does not provide a key_share appropriate for the use by the server. \r\n\r\nIn DTLS, however, the use of a HelloRetryRequest will be more common since it replaces the return routability check. Hence, when a HRR is sent the resulting exchange leads to two round trips before the client can send application data. With the use of early data following the HRR message the client cut down the exchange to one round trip. \r\n\r\nThe TLS specification does not give a justification why this constraint has been added. \r\n\r\nIt is possible to relax this requirement in the DTLS 1.3 specification where the scenario is problemantic or to also address it in the TLS 1.3 spec. \r\n\r\nPS: Thanks to Mark Dunn in his review https://www.ietf.org/mail-archive/web/tls/current/msg22947.html for making this observation.\r\n",
      "createdAt": "2017-04-20T05:53:22Z",
      "updatedAt": "2017-04-27T20:34:45Z",
      "closedAt": "2017-04-27T20:34:45Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It is possible to relax the requirement in DTLS 1.3 (in which case, this issue moves over there).  However, I think that it might be an optimization and complication we can avoid.\r\n\r\nIn practice, implementing two bites at 0-RTT is difficult, especially for DTLS.  If both initial ClientHello and second ClientHello are followed by early data, then you have two lots of early data with different keys and the same epoch.  That's sort-of OK because the datagrams you don't want get discarded when they don't decrypt, but it is messy.  There is also a bunch of logic that is simplified by only having one attempt at sending early data.\r\n\r\nThe technique that QUIC uses here is to bind source address validation into the session ticket.  If you do that, and conditions haven't changed very much, you can avoid sending an HRR for address validation sometimes.  And if the primary reason for doing address validation is amplification attack, early data actually reduces the problem by giving the server lots more inbound data: more inbound data allows the server to send more data in response without worrying about an increased amplification factor.\r\n\r\nThe other reason you send HRR is to avoid commitment of processing resources based on unvalidated traffic.  In that case, you shouldn't accept 0-RTT.",
          "createdAt": "2017-04-20T06:20:05Z",
          "updatedAt": "2017-04-20T06:20:05Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I was actually thinking about doing a normal ClientHello, which will result in the HRR exchange. Then, the client uses a 0-RTT exchange. So, there wouldn't be two early data payloads send around. I agree that would be ugly. \r\n\r\nBut you raise an interesting point: The HRR was really designed for TLS and does not necessarily focus on the return-routability check concept (which can even be seen from the description in Section 4.1.4). \r\n\r\nSince the HRR message will be quite common for connectionless transports and the client and server are most likely aware of groups the two peers support I am wondering whether we could design the following exchange in DTLS 1.3 to avoid sending key shares and other information twice. The return-routability extension is an extension that hints to the server that the initial ClientHello is really only used for return-routability checking. \r\n\r\n         Client                                               Server\r\n\r\n         ClientHello\r\n         + return-routability             -------->\r\n                                          <--------         HelloRetryRequest\r\n                                                            + cookie\r\n\r\nThen, with the second ClientHello the client provides all the necessary information to proceed with the exchange. \r\n\r\n         ClientHello\r\n         + supported_groups\r\n         + signature_algorithms\r\n         + cookie\r\n         + key_share             -------->\r\n\r\nHow does that sound? ",
          "createdAt": "2017-04-20T06:40:46Z",
          "updatedAt": "2017-04-20T06:40:46Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've proposed using cookie for return routeability.  No need for anything more complicated.",
          "createdAt": "2017-04-20T07:02:56Z",
          "updatedAt": "2017-04-20T07:02:56Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The cookie for return-routability is fine. The problem is only that you are essentially in DTLS sending data twice, once with the initial ClientHello and then again with the retransmitted ClientHello that is sent in response to the HRR from the server. \r\n\r\nDo you see my problem?\r\n",
          "createdAt": "2017-04-20T07:32:28Z",
          "updatedAt": "2017-04-20T07:32:28Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The cost of constructing a ClientHello in that case isn't that high, and the size of the message isn't too bad either.  The biggest costs you can avoid by not including key shares.  The handshake requires that you provide PSK binders, but the cost of calculating and sending that isn't so high.",
          "createdAt": "2017-04-20T09:50:57Z",
          "updatedAt": "2017-04-20T09:50:57Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There are two issues: \r\n\r\nFirst, a device that starts with a public key based authentication in DTLS will have to send the parameters twice. Useless data transmission for no good purpose. \r\n\r\nSecond, TLS 1.3 currently does not allow a client to allow a 0-RTT exchange following an HRR. \r\n\r\nFor devices that use DTLS 1.3 that's not a good situation considering that some of the radio technologies have very small MTU sizes, see https://tools.ietf.org/html/draft-ietf-lpwan-overview-01 ",
          "createdAt": "2017-04-20T18:44:12Z",
          "updatedAt": "2017-04-20T18:44:12Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not following the concern here: you can only provide 0-RTT when you have a PSK, in which case the PSK label should contain whatever authenticator you need for the return routability check. Obviously, you could be mobile and want to retroactively bless the data you sent in 0-RTT but that seems like an edge case. I'd rather fix this by revising the DTLS advice to say that you probably don't need the cookie exchange if you are doing PSK and stuff an address token in the label. Note that this will also improve DTLS performance.",
          "createdAt": "2017-04-21T10:53:27Z",
          "updatedAt": "2017-04-21T10:53:42Z"
        }
      ]
    },
    {
      "number": 973,
      "id": "MDU6SXNzdWUyMjMyMTcxODI=",
      "title": "Table of key derivation labels",
      "url": "https://github.com/tlswg/tls13-spec/issues/973",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "Looking through the minutes from Chicago, there was mention of having a table for the various labels used in key derivation.  Did we want that in this document, or should we shunt it off to something of broader scope?",
      "createdAt": "2017-04-20T22:16:41Z",
      "updatedAt": "2017-04-27T20:34:45Z",
      "closedAt": "2017-04-27T20:34:45Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not opposed to it, but it's not clear to me how it would help either. Does someone want to propose something so I can see what it would look like?",
          "createdAt": "2017-04-21T11:39:20Z",
          "updatedAt": "2017-04-21T11:39:20Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think this is ultimately necessary, so marking it parked, soon to be closed.",
          "createdAt": "2017-04-26T16:01:55Z",
          "updatedAt": "2017-04-26T16:01:55Z"
        }
      ]
    },
    {
      "number": 982,
      "id": "MDU6SXNzdWUyMjQ4NDQwMjY=",
      "title": "Discussion of updated and obsoleted RFCs inIntroduction",
      "url": "https://github.com/tlswg/tls13-spec/issues/982",
      "state": "CLOSED",
      "author": "jsalowey",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "ID-nits complains that we do not include this in the abstract.  We should include in the abstract or introduction. ",
      "createdAt": "2017-04-27T16:36:43Z",
      "updatedAt": "2017-04-27T20:36:27Z",
      "closedAt": "2017-04-27T20:32:43Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Somehow I thought it was abstract *and* introduction.",
          "createdAt": "2017-04-27T17:05:03Z",
          "updatedAt": "2017-04-27T17:05:03Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The IESG was at one time adamant that it be in the abstract and the Shepherd write-up says:\r\n\r\n    Are those RFCs listed on the title page header, listed\r\n    in the abstract, and discussed in the introduction?\r\n\r\nI'm unsure this is still the case, but simply including \"This document obsoletes RFCs 5077 and 5246 and updates RFCs 4492, 5705, 6066 and 6961\" should appease them.  I'm unsure if the ID Nits will like that or if it wants RFC 5077, RFC 5246, etc. but if the list is there there's should be no complaints from the IESG.\r\n\r\nBut, I could also see not doing this because s1 clearly says what's what wrt those 6 RFCs.",
          "createdAt": "2017-04-27T20:23:09Z",
          "updatedAt": "2017-04-27T20:27:27Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Abstract is stupid. Let's let IESG push back\r\n",
          "createdAt": "2017-04-27T20:32:37Z",
          "updatedAt": "2017-04-27T20:32:37Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed \ud83d\udcaf I much prefer the new shorter and sweeter abstract.",
          "createdAt": "2017-04-27T20:36:27Z",
          "updatedAt": "2017-04-27T20:36:27Z"
        }
      ]
    },
    {
      "number": 984,
      "id": "MDU6SXNzdWUyMjQ4NTM2Mzg=",
      "title": "Unused references",
      "url": "https://github.com/tlswg/tls13-spec/issues/984",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "ID nits complains of the following unused references:\r\n\r\n  == Unused Reference: 'AES' is defined on line 4147, but no explicit\r\n     reference was found in the text\r\n\r\n  == Unused Reference: 'GCM' is defined on line 4305, but no explicit\r\n     reference was found in the text\r\n\r\n  == Unused Reference: 'PKCS6' is defined on line 4339, but no explicit\r\n     reference was found in the text\r\n\r\n  == Unused Reference: 'PKCS7' is defined on line 4342, but no explicit\r\n     reference was found in the text\r\n\r\n  == Unused Reference: 'RFC4279' is defined on line 4371, but no explicit\r\n     reference was found in the text\r\n\r\n  == Unused Reference: 'RFC4507' is defined on line 4392, but no explicit\r\n     reference was found in the text\r\n\r\n  == Unused Reference: 'RFC5054' is defined on line 4401, but no explicit\r\n     reference was found in the text\r\n\r\n  == Unused Reference: 'RFC5746' is defined on line 4425, but no explicit\r\n     reference was found in the text\r\n\r\n  == Unused Reference: 'RFC5878' is defined on line 4436, but no explicit\r\n     reference was found in the text\r\n\r\n  == Unused Reference: 'RFC7366' is defined on line 4479, but no explicit\r\n     reference was found in the text",
      "createdAt": "2017-04-27T17:14:06Z",
      "updatedAt": "2017-04-27T18:20:47Z",
      "closedAt": "2017-04-27T18:20:47Z",
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looking at the editor's copy only AES and GCM remain.  I think we can safely remove both because those references are picked up but the cipher suite definitions.",
          "createdAt": "2017-04-27T17:49:21Z",
          "updatedAt": "2017-04-27T17:49:21Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Strike that since we're defining some suites we need to include GCM and move it normative.  We can drop the AES reference because it's picked up by the GCM reference.",
          "createdAt": "2017-04-27T18:07:38Z",
          "updatedAt": "2017-04-27T18:07:38Z"
        }
      ]
    },
    {
      "number": 986,
      "id": "MDU6SXNzdWUyMjQ4NjkwMjU=",
      "title": "obsolete informational references",
      "url": "https://github.com/tlswg/tls13-spec/issues/986",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "wontfix",
        "editorial"
      ],
      "body": "ID nits complains about the following:\r\n\r\n  -- Obsolete informational reference (is this intentional?): RFC 4346\r\n     (Obsoleted by RFC 5246)\r\n\r\n  -- Obsolete informational reference (is this intentional?): RFC 4366\r\n     (Obsoleted by RFC 5246, RFC 6066)\r\n\r\n  -- Obsolete informational reference (is this intentional?): RFC 4507\r\n     (Obsoleted by RFC 5077)\r\n\r\n  -- Obsolete informational reference (is this intentional?): RFC 5081\r\n     (Obsoleted by RFC 6091)\r\n",
      "createdAt": "2017-04-27T18:14:30Z",
      "updatedAt": "2017-04-27T20:34:45Z",
      "closedAt": "2017-04-27T20:34:45Z",
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The reference to 4346 looks okay to me because it says \"originally defined in [RFC4346]\" and that is a true statement.  It is irrelevant that 5246 later asked for the registry to point to 5246 instead of 4346.\r\n\r\nDitto for the 4366 reference.\r\n\r\n4507 and 5081 aren't in the editor's copy so they've been addressed.",
          "createdAt": "2017-04-27T18:19:18Z",
          "updatedAt": "2017-04-27T18:19:18Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To be clear, I think we can safely close this issue.",
          "createdAt": "2017-04-27T18:27:38Z",
          "updatedAt": "2017-04-27T18:27:38Z"
        }
      ]
    },
    {
      "number": 987,
      "id": "MDU6SXNzdWUyMjQ4NzA4MTQ=",
      "title": "obsolete normative reference",
      "url": "https://github.com/tlswg/tls13-spec/issues/987",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "ID nits complains about:\r\n\r\n** Obsolete normative reference: RFC 3447",
      "createdAt": "2017-04-27T18:21:07Z",
      "updatedAt": "2017-04-27T18:36:39Z",
      "closedAt": "2017-04-27T18:36:39Z",
      "comments": []
    },
    {
      "number": 991,
      "id": "MDU6SXNzdWUyMjQ5MDA2MDI=",
      "title": "Reserved values for HashAlgorithm and SignatureAlgorithm registries",
      "url": "https://github.com/tlswg/tls13-spec/issues/991",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Is it strictly necessary to include the following in the TLS1.3 draft:\r\n\r\n    Finally, this document obsoletes the TLS HashAlgorithm\r\n    Registry and the TLS SignatureAlgorithm Registry, both\r\n    originally created in [RFC5246]. IANA [SHALL update/has\r\n    updated] the TLS HashAlgorithm Registry to list values\r\n    7-223 as \u201cReserved\u201d and the TLS SignatureAlgorithm\r\n    Registry to list values 4-223 as \u201cReserved\u201d.\r\n\r\nIf this text wasn't in the TLS1.3 draft everything would be fine right?  If that's the case, then this text from s10 should be moved to [draft-ietf-tls-iana-registry-updates](https://github.com/tlswg/draft-ietf-tls-iana-registry-updates).",
      "createdAt": "2017-04-27T20:16:15Z",
      "updatedAt": "2017-04-27T22:30:47Z",
      "closedAt": "2017-04-27T22:30:47Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I'm not following the issue. I'm happy to move it out, though.",
          "createdAt": "2017-04-27T20:34:28Z",
          "updatedAt": "2017-04-27T20:34:28Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It kind of seems like the move of registries should be done atomically, which is ~guaranteed by doing it in the same document, but could still be done atomically if the two documents are advanced at the same time.\r\n(I, like ekr, am not really clear on what the issue is, though.)",
          "createdAt": "2017-04-27T20:41:35Z",
          "updatedAt": "2017-04-27T20:41:35Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I guess I see reserving the remaining values as essentially slamming the door on future assignments.  Was that the intent?\n\nspt\n\n> On Apr 27, 2017, at 16:41, kaduk <notifications@github.com> wrote:\n> \n> It kind of seems like the move of registries should be done atomically, which is ~guaranteed by doing it in the same document, but could still be done atomically if the two documents are advanced at the same time.\n> (I, like ekr, am not really clear on what the issue is, though.)\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n\n",
          "createdAt": "2017-04-27T20:54:54Z",
          "updatedAt": "2017-04-27T20:54:54Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I should have also added that https://github.com/tlswg/draft-ietf-tls-iana-registry-updates already includes a paragraph indicating that Compression Method Identifiers, HashAlgorithm, and SignatureAlgorithm are obsoleted by TLS1.3; adds a note to the registries indicating as much.\n\nspt\n\n> On Apr 27, 2017, at 16:41, kaduk <notifications@github.com> wrote:\n> \n> It kind of seems like the move of registries should be done atomically, which is ~guaranteed by doing it in the same document, but could still be done atomically if the two documents are advanced at the same time.\n> (I, like ekr, am not really clear on what the issue is, though.)\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n\n",
          "createdAt": "2017-04-27T20:58:49Z",
          "updatedAt": "2017-04-27T20:58:49Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My understanding was that yes, \"don't look here, go look over there\" was the idea.  Any new allocation would need to go in the SignatureScheme registry, regardless of whether it also ended up in the HashAlgorithm or SignatureAlgorithm registry as well for someone's convenience.  Since you have to go to the new registry anyway, it doesn't seem like there would be value in also adding it to the old/deprecated registry.",
          "createdAt": "2017-04-27T21:04:26Z",
          "updatedAt": "2017-04-27T21:04:26Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Okay that makes sense and it explains why the values in the Compression Method Identifiers isn\u2019t also \u201creserved\u201d.\n\nI guess I\u2019m off the mind that this para could safely be move to the IANA draft.",
          "createdAt": "2017-04-27T21:57:00Z",
          "updatedAt": "2017-04-27T21:57:00Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Specially move the text to s13 of [draft-ietf-tls-iana-registry-updates](https://tlswg.github.io/draft-ietf-tls-iana-registry-updates/#rfc.section.13).",
          "createdAt": "2017-04-27T22:01:29Z",
          "updatedAt": "2017-04-27T22:01:29Z"
        }
      ]
    },
    {
      "number": 1001,
      "id": "MDU6SXNzdWUyMjU3MTc2Mjk=",
      "title": "Security Review of TLS1.3 0-RTT",
      "url": "https://github.com/tlswg/tls13-spec/issues/1001",
      "state": "CLOSED",
      "author": "colmmacc",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "# Introduction \r\n\r\nAt the Eurocrypt/IACR TLS:DIV workshop on 2017-04-30, kindly facilitated by the Everest team, I presented the results of a security review of the TLS 1.3 0-RTT section. The security review was performed as part of the process of implementing TLS1.3 in [s2n](https://github.com/awslabs/s2n).  \r\n\r\nThe review focused on two known-issues: the absence of forward secrecy for all data, and the replayability of 0-RTT data. As it turns out, these issues can be worked around, and it is possible to to provide 0RTT, Forward Secrecy and anti-replayability (save for the Gilmor downgrade attack case) at the same time. Many thanks to Eric Rescorla for identifying how the work around can be integrated with the existing TLS1.3 scheme, modulo a neat optimization that Eric also came up with.  \r\n\r\nHowever TLS1.3 0-RTT is insecure by default, and based on the current draft, it is likely that TLS implementations not using work arounds will create real-world vulnerabilities. I believe that the attacks enabled by these vulnerabilities are more practical, and more serious, than is generally appreciated. Each attack enabled is more severe than other vulnerabilities that have been considered \"must upgrade\" for TLS implementations. \r\n\r\nThis issue is intended as a summary of the attacks, their implications, and the mitigations that an implementation may perform, as well as suggested changes to the specification that would reduce the risk related to these issues.\r\n\r\nThe most serious issues concern replays, and this summary includes five practical real-world attacks against applications using TLS1.3 as described in the draft. However before discussing replays, it is helpful to understand how TLS1.3 and tickets interact. \r\n\r\n## TLS1.3 and tickets: STEKs remain a weakness in TLS\r\n\r\nTo support TLS resumption and 0-RTT a server must know the session parameters to be resumed (PSK, authentication, etc ...). The most common implementations of TLS tickets have the server using Session Ticket Encryption Keys (STEKs) to create an encrypted copy of the session parameters which is then stored by the client. When the client resumes, it supplies this encrypted copy, the server decrypts it, and has the parameters it needs to resume. The server need only remember the STEK. \r\n\r\nIf a STEK is disclosed to an adversary, then all of the data encrypted by sessions protected by the STEK may be decrypted by an adversary. STEKs are therefore a weak spot in the over-all design of TLS; disclosure of a single small key can result in compromising an unbounded amount of data. While it is never possible to secure data that is transmitted during a compromise, it is a regression from forward secrecy that historical data transmitted prior to the compromise is not protected. \r\n\r\nSTEKs must be synchronized across large number of hosts. The Akamai CDN, for example, consists of over [200,000 hosts](https://blogs.akamai.com/2016/01/winning-web-performance-part-3---increasing-self-serviceability-simplifying-web-operations-with-akam.html). To be most effective for resumption, a STEK must be accessible on the subset of these the hosts responsible for handling a domain. This subset is measurable as at least tens to hundreds of thousands of hosts based on DNS queries and host finger-printing. In the case of some operators, hosts may also have the STEKs on-disk, subject to risk of physical theft or seizure, depending on the architecture of the provider (though generally large providers such as Akamai do not store keys on disk). \r\n\r\nThis scope presents a large surface area to attackers. A single vulnerable host, or a vulnerability in how STEKs are synchronized, can lead to STEK disclosure. For the most part these security challenges are handled out of view of public audit, and it is difficult to capture how well best practices are applied. There has been some recent work by Springall, Durumeric, Halderman on [Measuring the Security Harm of TLS Crypto Shortcuts](https://jhalderm.com/pub/papers/forward-secrecy-imc16.pdf) which quantifies the use of overly-longlasting STEKs.\r\n\r\nSeperate from traditional host security risk, there is also a cryptographic risk. Attackers may record and replay a ticket to a server at will, and tickets are commonly encrypted using AES, and algorithm that is [vulnerable to side-channel analysis in some situations](https://cr.yp.to/antiforgery/cachetiming-20050414.pdf). For example, if an attacker can gain a vantage point \"close\" enough to a non-constant-time non-contant-memory-access implementation of AES (e.g. software encryption on an old host that does not support hardware AES acceleration) then they may be able to discover the STEK through side-channel analysis. At a minimum, server implementations of TLS would be wise to use an algorithm designed for side-channel resistance for ticket encryption, regardless of the encryption algorithm intended for the session itself. \r\n\r\n## TLS1.3 is much better, but critical data still lacks forward secrecy\r\n\r\nTLS1.3 makes huge strides in improving these security risks. Tickets are now related with Resumption Pre-Shared Keys (RPSKs) which are not the same as the keys encrypting the original session. Additionally, upon resumption, TLS1.3 supports a key schedule that means the only user data protected by the RPSK is 0-RTT data, which is optional. \r\n\r\nWhile 0-RTT is intended for a relatively small volume of data at the beginning of a connection, it is unfortunately very likely that this section of data will contain critical credentials: credit card numbers, passwords, cookies and other bearer tokens. Typically these requests, if compromised, can be used to generate the entire response. Thus, with TLS1.3, it remains that a large volume of critical user data remains secured ultimately by STEKs - which as we've seen are a weak spot. In practise, meaningful forward secrecy is not provided with 0-RTT is enabled.\r\n\r\n## Suggested mitigation: Support Forward Secrecy for 0-RTT data\r\n\r\nAn alternative to using STEKs and encrypted tickets is to use tickets as keys for a single-use session cache. When a server issues a ticket, it can store the session parameters in a cache. When a server receives a ticket for use, it looks up this ticket in the cache, which supports an atomic retrieve-and-delete operation.\r\n\r\nThis arrangement provides Forward Secrecy for all sessions successfully retrieved from the cache. If the server, or cache, is compromised then generally only data pertaining to future, yet-to-be-used, sessions is disclosed. Conveniently, operational and application errors favor security; for example downtime, crashes, and so on generally result in key erasure.  Economic incentives also favor deleting keys (to make room for new ones) over keeping keys (as with STEKs, where a more long lived key is operationally cheaper). \r\n\r\nThe transactional requirements for a single-use cache and strike registers (an anti-replay mechanism) are also different. With strike registers, it is critical to know when a strike register was available and unavailable, to discard tickets from any period the strike register may not have recorded observations durably. To perform this all updates to a strike register must be sequential relative to a global checkpoint (i.e. all updates arriving prior to the checkpoint must be commited). A single-use cache is free to make concurrent updates that are unsequenced relative to each other or any checkpoint (but updates and reads to any single key must be sequenced). \r\n\r\nIf forward secrecy can be provided in this manner, why is this arrangement not common today? The easy answer is that mode is not efficient in current versions of TLS, where tickets are intended for multiple uses. This arrangement also comes at a cost: a server must operate the cache. At least in my view, the operational costs are worth the security benefit of meaningful Forward Secrecy. The cost of memory has lowered considerably since the inception of tickets. For example, an AWS Elasticache Redis instance capable of caching millions of sessions costs as little as [$0.017 cents / hour](https://aws.amazon.com/elasticache/pricing/). A custom cache with a dedicated design can be implemented considerably cheaper again. \r\n\r\nThe second cost is latency; performing a lookup costs time. Within the data-center, this cost too is no longer significant. For example within the AWS EC2 VPC network it is possible to achieve look up times measured in tens of microseconds. This time is not significant in the context of a TLS connection that would benefit from 0-RTT optimization, where latencies are usually over three orders of magnitude greater at tens to hundreds of milliseconds.\r\n\r\nThe third cost is that it is not feasible to share state across data centers or a wide geographic area (e.g. a global CDN). A ticket issued from a CDN node in one city would not help a user resume a connection if they are later routed to a different city. In my view (having built two CDNs), this is not a significant problem.  In practice, when users are routed to different locations it is common for cache misses to occur, and for the related TCP Fast Open optimization (it also speeds up connections) to fail (due to different IP addresses when not using IP any cast). Operators already work hard to maximize user affinity to locations, and any cache misses at the TLS level can be very quickly repaired. \r\n\r\nNote also that one of the implications of Krawczyk's 2005 paper on [Perfect Forward Secrecy](http://link.springer.com/referenceworkentry/10.1007%2F0-387-23483-7_298) is that some transactionally mutable server side state is required to provide Forward Secrecy for 0-RTT-like message (prior to any handshake). For example, puncturable encryption, another technique aimed at providing 0-RTT forward secrecy, requires transactionally mutable server-side state. In the case where a 0-RTT section arrives on the other side of the globe from wherever the store is located, it takes hundreds of milliseconds to complete a transaction, defeating the point of the 0-RTT feature. Forward secrecy and global resumption are likely mutually incompatible in any scheme. We should favor the security of forward secrecy. \r\n\r\n### Suggested changes to TLS1.3 draft\r\n\r\n**Make multiple tickets from the same connection cryptographically independent**\r\n\r\nIn today's TLS1.3 draft a server may issue multiple tickets on a connection, but these tickets are not cryptographically independent. Unfortunately this makes it impossible to for a single-use session cache to distinguish between a ticket issued pre and post authentication, and it prevents servers from issuing meaningfully different tickets in order for a client to build up a pool of tickets. \r\n\r\nWith https://github.com/tlswg/tls13-spec/pull/998 , Eric Rescorla has suggested an easy fix for this. I strongly support adopting this change, and thank Eric for the suggestion. \r\n\r\n**Change clients \"SHOULD\" use tickets once to \"MUST\"**\r\n\r\nThe TLS 1.3 draft-20 specifies that:\r\n\r\n> Clients SHOULD attempt to use each ticket no more than once, with more recent tickets being used first.\r\n\r\nTo provide meaningful forward secrecy on client side, clients \"MUST\" use each ticket no more than once, and \"MUST\" delete any session parameters stored with the session. \r\n\r\nThere is also another reason for this \"MUST\": any client that attempts to use a ticket multiple times will also likely leak the *obfuscated_ticket_age* value, which is intended to be secret. \r\n\r\n**Designate or Discern STEK-less tickets**\r\n\r\nWhile today STEKs are a common practice, and many operators do have reasonable implementations in place, over time their presence as a weak spot may (hopefully!) lead to their eradication, similar to how non-PFS key agreement has been greatly diminished through tools such as the [ssllabs.com](https://ssllabs.com/) ratings. \r\n\r\nIt is possible for a client (or eventually an ssllabs.com) to validate that a ticket cannot have used a STEK: if the size of the ticket data is smaller than the RPSK, however today it is not possible for clients to ask for such a ticket, only to reject them. \r\n\r\nIn practice it would be useful for clients to advertise or encourage support for STEK-less tickets by advertising a maximum ticket size supported, or by having a designated \"STEK-free\" ticket type. At a minimum, this prevent servers STEK-dependent from generating tickets that clients have no desire to keep. \r\n\r\n## Replay is a big problem, Replay is a big problem\r\n\r\nA delete-on-use session-cache robustly prevents any replay of a ticket (and hence replay of an associated 0-RTT data section) however that is neither common nor required for tickets in TLS 1.3. To the contrary, the draft specification calls out that replay is expected:\r\n\r\n> There are no guarantees of non-replay between connections. Unless the server takes special measures outside those provided by TLS, the server has no guarantee that the same 0-RTT data was not transmitted on multiple 0-RTT connections (see {{replay-time}} for more details).\r\n\r\nThis is unworkably insecure and will lead to many practical real-world security issues. As also noted in the draft:\r\n\r\n> TLS provides a limited mechanism for replay protection for data sent by the client in the first flight. \r\n\r\nThis suggested mechanism is to validate the ticket age presented by a client. The ticket age presented should correspond to the time since the ticket was issued by the server plus the round-trip time between the client and server. \r\n\r\nThere are three problems with this mechanism. The first problem is that the maximum bound for a round-trip-time is quite high. RTTs of 500ms are not unusual for satellite internet, or rural broadband schemes, and these are the very use-cases 0-RTT most benefits. In a 500ms window an attacker can easily send tens of thousands of replays. \r\n\r\nThe second problem is that in the real world there is clock skew. Clocks and timers can drift based on factors such as temperature, CPU power saving, system hibernation and more. This is particularly true of low-power devices which are increasingly prevalent. Indeed the TLS1.3 draft suggests tolerating up to 10 seconds. In the real-world, providers may go higher. The maximum life time for a ticket is 7 days. My own private experiment based on requests from low power devices showed that over 7 days that the 99th percentile window clock drift was around 2 seconds, but that the 99.9th percentile window around 40 seconds. A provider therefore has a natural and strong incentive to increase the window of tolerance, in order to permit more clients to resume and use 0-RTT. Regardless, even with a 10 second window, an attacker can send millions of replays.\r\n\r\nThe third problem is that both of these cases so far are per-single-destination. If many servers share a STEK, as is common, then it is possible to replay at these rates to *each* server. With CDNs consisting of hundreds of thousands of nodes, it is likely that the attackers ability to generate replays is bounded only by the availability of bandwidth. In short: millions to billions of replays are possible within the scheme outlined by the TLS1.3 draft. \r\n\r\nIn practise, millions of replays is sufficient to exploit measureable cryptographic side-channels, if the underlying implementation is to vulnerable to any. As we'll see it also enables at least five types of serious attack. \r\n\r\n### Attack 1: HTTP is not replay tolerant\r\n\r\nIn the evolution of the TLS1.3 specification, it has been stated that web requests must already be replay tolerant, as browsers will retry interrupted connections. While the latter is true, it does not imply the former. \r\n\r\nFirstly, not all use of TLS is for HTTP, and users of protocols other than HTTP are likely to desire and enable the benefits of 0-RTT. Secondly, not all HTTP requests are made by web browsers. In fact, to render a single browser request for amazon.com, Facebook, or a Google search often requires hundreds of \"behind the scenes\" HTTP requests to internal micro-services. These requests sometimes span data centers and can benefit from 0-RTT optimization. As the \"Internet of things\" develops, these same types of requests are now also common between industrial and home settings and cloud servers accessed via the WAN. These settings include networks that are not well-secured and are subject to relatively easy eavesdropping.\r\n\r\nMany clients for these services do **not** retry by default, or pay tedious attention to how retries are implemented. This is especially true of requests that implement transactional applications. In some asynchronous transaction schemes, clients need to be careful to provide each commit attempt a unique ID, separate from the unique ID for the commit itself. These applications are often careful to preserve an order between related requests to resolve dead-locks and ties. \r\n\r\nMore common still is clients that form a \"Try, Wait, Read, Retry-if-not-there\" cycle to avoid creating duplicate entries. For example a client may try a request, and if that request times out, it may wait a fixed time period, poll for success of the previous request (maybe it did succeed) and only then try it again. Applications such as these are generally not tolerant of even a single uncontrolled replay. Other applications eliminate retries entirely, and make requests at a fixed constant rate as an important measure designed to reduce the risk of overload or cascade outages during partial failure events.   \r\n\r\nIn 2015, Daniel Kahn Gillmor discovered a combined replay and downgrade attack against 0-RTT sections: if an active attacker can block server responses to a 0-RTT request, while also disabling the server's record (strike register) of observed 0-RTT sections (A DOS attack may achieve this), then the server may be forced to refuse 0-RTT data on the subsequent retry. This will force the client to downgrade and repeat the request as regular non-0-RTT data. \r\n\r\nIn fact, as noted earlier, it is never safe for clients to repeat a ticket if one is concerned about keeping the secrecy of the obfuscated ticket age. So reasonable clients may always retry with a non-0-RTT attempt, or a use a different ticket if it is available to them. Although a provider may hash the entire 0-RTT section to derive a key for use with a strike register, this requires buffering, and it is more common to use a key derived from the ticket. Both of these factors make the makes the Gillmor attack even more practical; the strike register is probably irrelevant anyway. \r\n\r\nA single-use cache does not mitigate this attack, but notice that in the Gillmor attack the client is made aware of the original failure, and can control the nature of the retry. The client knows that the request may have failed, or may have succeeded. And so careful clients may enforce their retry requirements. Without an anti 0-RTT anti-replay mechanism a request may be silently replayed millions of times without any knowledge to the client. That is a materially different kind of attack that breaks existing systems in unexpected ways. \r\n\r\n### Attack 2: Exhausting tolerances\r\n\r\nMany applications also fail to take into account fully correct REST design patterns, and implement non-idempotent GET requests. Cloudflare provide a great example in their [blog post on Zero-RTT](https://blog.cloudflare.com/introducing-0-rtt/). \r\n\r\n> For example, HTTP requests can trigger transfers of money. If someone makes a request to their bank to \u201cpay $1000 to Craig\u201d and that request is replayed, it could cause Craig to be paid multiple times. A good deal if you\u2019re Craig.\r\n\r\nWhile it is true that browsers may retry a request like this today, as we've seen in attack 1, it not true that only browsers make such requests. \r\n\r\nMore important is that while an attacker may cause a browser to retry this type of request perhaps tens to hundreds of times, that kind of attack is active and consumes the users bandwidth and CPU and must pass through the user's firewalls and other controls. \r\n\r\nA 0-RTT replay attack, as we've seen, can be performed up to millions of times, and mostly out of band using the attacker's resources (though the attacker must also be passively in-band, to copy the original 0-RTT section). Repeating a request once, as the Gillmor attack permits may ocasionally trigger a manual refund process. Repeating the request millions of times may bankrupt a business. This is a materially different kind of risk.\r\n\r\n### How practical is it for applications to mitigate attacks 1 and 2?\r\n\r\nFor the purposes of attacks 1 and 2, consider what is neccessary on the application's side to mitigate this kind of issue; it must make the requests themselves replay-safe. One popular approach is to make the request itself idempotent by adding an explicit, or synthesized, idempotency key that represents the invokation. See the [Stripe blog post](https://stripe.com/blog/idempotency) on just this topic. The key must be commited to a data store that can provide an atomic uniqueness guarantee, and since this commit must be concurrent to the operation itself, it must generally occur in the data store the application is mutating. \r\n\r\nOne immediate problem is that not all applications use such data stores. An eventually consistent data store does not provide these kinds of guarantees, though may provide a guarantee around when \"eventually\" the store is consistent. This is why some clients perform the \"Try, poll, Try again\" cycle. \r\n\r\nIt can be tempting to suggest that idempotency could be provided by a logically-seperate component, responsible only for preventing re-occurences. As it turns out, it is not possible to effectively guarantee uniqueness from \"outside\" of the application's central data store. Consider a theoritical micro-service designed to provide \"idempotency as a service\", it could accept idempotency keys and commit them on behalf of the application while refusing duplicates. This naive arrangment breaks when the the micro-service accepts and commits the key, but the application's own update to its data store fails. Then the user's operation fails but cannot ever be repeated. To resolve this the micro-service and the application service must use a coupled and distributed transaction protocol and things get complicated quickly. \r\n\r\nTo underscore how subtle and hard a problem this area of idemptency can be it is worth looking at one of CloudFlare's 0-RTT anti-replay mechanisms. To make things easier for applications, CloudFlare [adds a HTTP header](https://blog.cloudflare.com/introducing-0-rtt/) to outgoing, proxied, requests that originated in 0-RTT sections:\r\n\r\n> Cf-0rtt-Unique: 37033bcb6b42d2bcf08af3b8dbae305a  \r\n> \r\n> The hexadecimal value is derived from a piece of data called a PSK binder, which is unique per 0-RTT request.\r\n\r\nAn application can use this value as a convenient uniqueness key, to mitigate 0-RTT replay. However, this isn't quite sufficient. A retry request triggered by the Gillmor attack will not be associated with the the same PSK binder, and so application level idempotency is required *anyway*. Of course an application designer who has no idempotency key available to them may decide to use the CloudFlare-provided key pragmatically; at least they are now defended againdt 0-RTT mass-replays, and this is a sensible use of the neat feature. However since applications often evolve to eventually include idempotency keys, an application may be left with a transition period where both uniqueness keys are required. Many NoSQL datastores are limited to a single index and do not provide for enforcing multiple uniqueness constraints. \r\n\r\n### Attack 3: Compromising secrecy with TLS1.3 0-RTT\r\n\r\nTo provide the security guarantee of secrecy, it is not sufficient that requests are idempotent and replay-tolerant. The requests must also be handled in a manner that is free of any observable side-effects. This is extremely difficult to achieve. This is a core focus of strong cryptography, where side-effect free programming errors are an area of constant research and frequent vulnerabilities. Higher level applications are generally not concerned with this challenge at all, and are poorly prepared for the implications of replays.\r\n\r\nTake for example a simple side effect; caching. A read-only request is by definition idempotent, but if a cache is present this cache can effect observable timings and response-headers that defeat the secrecy of the request. \r\n\r\nSuppose a user fetches a piece of content from a CDN using a 0-RTT request, and that piece of content is prohibited and contrary to the principles of a totalitarian regime. Ordinarily only the size of the download of the content is disclosed to a man-in-the-middle attacker, and as we'll see later, TLS1.3 includes support for measures designed to help defeat traffic-analysis attacks that can use this size to identify the content. \r\n\r\nBut with replays it is now feasible to probe the CDN caches to determine what the content was. First the attacker copies the zero-RTT section and then replays it to a series of CDN nodes. The attacker can choose CDN nodes that are unlikely to have the content already (e.g. in different geographic regions), and replay the request. The CDN will then fetch, and cache, the content. \r\n\r\nThe attacker can then make probe requests for suspected illicit content and determine if it was cached or not (if it loads quickly, or slowly, or if a cache max-age header lines up with the replayed request). Note that the attacker can take their time with the probes and can spread probe requests over a relatively long time period. Any noise or uncertainty in the process can be countered by using additional replays to more nodes to increase confidence. \r\n\r\nThis is just one basic example using a typical CDN cache, but applications use caches at many other layers. It is likely that all of these caches can be probed in some way to reveal details of encrypted requests. \r\n\r\n### Attack 4: Exhausting throttles with TLS1.3 0-RTT\r\n\r\nIt is a common operational and security measure to throttle application requests. For example, a given customer may be permitted to perform as many as 10,000 requests/second but no more. \r\n\r\nTo avoid simple spoofing risks, many such systems perform throttling post-authentication. For example the request may be signed cryptographically (see the [AWS SIGv4 signing protocol](http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html) or the [OATH signing process](https://oauth.net/core/1.0/#signing_process)), that signature is verified prior to throttling. This post-authentication property is one reason why such protocols are designed to be extremely fast to verify, which often means as much cryptography as possible must be pre-computed, making random nonces infeasible in many cases. \r\n\r\nFor such systems, 0-RTT data means that legitimately signed requests that were previously considered to be secret and non-spoofable are now re-playable by attackers. This enables a new and realistic denial of service vulnerability capable of locking customers out of their accounts. \r\n\r\n### Attack 5: Enabling easier Traffic Analysis with TLS1.3 0-RTT\r\n\r\nWith traffic analysis it is often possible for a passive attacker to decloak what content an encrypted session handled. For example when a user browses Wikipedia an attacker may be able to determine which page the user is viewing because the combination of html, image and CSS sizes on a particular Wikipedia page is highly likely to be unique and even though the content is encrypted, the attacker can observe the sizes. This type of attack has become slightly easier with the recent adoption of stream ciphersuites such as AES-GCM and ChaCha20-Poly1305 that do not mask content-length to at least a block size. \r\n\r\nTLS1.3 includes a record layer padding mechanism, designed to make these kinds of attacks more difficult. However 0-RTT replay also enables a new kind of traffic analsys attack. Today, traffic analysis is most effective against fixed-size responses, as in the Wikipedia example. With 0-RTT data an attacker can repeat a request millions to billions of times, and by observing variability in response size and response times can gain additional information that may enable the attacker to decloak data. \r\n\r\n### Violation of layers and seperation of actors\r\n\r\nAs we've seen, the problems of replay tolerance are resolveable only at application layer, but solutions can be subtle and hard to reason through and test.In my experience, deliberately replaying requests will uncover surprising issues in many systems. Indeed there are race detectors, trashers and other testing tools for a variety of languages that have evolved to find these kinds of issues. But these bugs remain common, and many systems make the fair assumption that TLS provides anti-replay properties for their messaging/transport layer. \r\n\r\nThe approach with the TLS1.3 draft is to say that 0-RTT data is optional, that it should not be enabled without a careful analysis and that the application must be made aware that data was potentially replayed. In my view, in light of the above attacks, this advice is unworkable. It is not simple, or maybe even possible, to secure all applications against replay and measurable side effects such as cache timing and throttling. Fully-correct idempotency is very difficult and vanishingly rare.\r\n\r\nBut beyond that, let's examine the advice given: \r\n\r\n> Protocols MUST NOT use 0-RTT data without a profile that defines its use. That profile needs to identify which messages or interactions are safe to use with 0-RTT. In addition, to avoid accidental misuse, implementations SHOULD NOT enable 0-RTT unless specifically requested. Implementations SHOULD provide special functions for 0-RTT data to ensure that an application is always aware that it is sending or receiving data that might be replayed.\r\n\r\nThere are also several reasons to believe that even this advice will not always be taken, indeed some existing experimental deployments do not follow it. \r\n\r\nThe first and strongest reason is that the benefits of 0-RTT are considerable, immediate, and measurable. By turning on 0-RTT a provider can save 100s of milliseconds, and it's been reported that [savings of 100ms can impact revenue by as much as 1%](https://news.ycombinator.com/item?id=273900). Providers also exist in a competitive landscape and are constantly trying to beat each other on every conceivable metric. At the same time, the security risks are non-obvious (indeed, this write up is coming very late in the TLS draft process) and hard to test for. In other words; providers have an extremely large incentive to turn on 0-RTT on, de-prioritizing harder to measure security concerns. \r\n\r\nThe second practical problem is that the world of application authors, writing high level code for websites and applications is very seperate from the worlds of TLS implementors and server administrators. It is predictable that site administrators will enable 0-RTT without an appreciation for the risk to the application, whose authors are likely not even aware of a change. Indeed acceleration providers are already making this easy in the current experimental deployments of TLS1.3, where 0-RTT support is being offered to websites and applications in a backwards compatible way as a single stream of data towards their own servers. \r\n\r\nIf providers are to render the advice of the TLS draft moot, and to provide a single-stream of data anyway, then arguably it would be better if the TLS1.3 RFC defined that as the default mode of operation. Maintaining seperate \"may be replayed\" and \"can't be replayed\" sections is complexity that can clutter applications and increase risks of application-level state machine bugs. \r\n\r\nEven a fully-aware and conscienscous site administrator faces a practical difficulty: applications are often made up of many URLs and request paths. Some may be replay be safe, and others not. But 0-RTT is enabled at a protocol level, for all requests. There are also \"Layer 4\" TLS proxies which accelerate TLS by terminating it at edge sites (similar to a CDN), or provide security benefits by handling certificate management, but are completely agnostic to the protocol being handled by TLS. Will administrators and providers in these situations resist the temptation the accelerate TLS with 0-RTT mode?\r\n\r\nFurthermore the expectations and guarantees provided by layers are expected to be consistent across providers. A customer may legimately use an API proxy offered by one provider, in combination with a load balancer offered by another, together with a CDN or edge-accelerator offered by another. A change in 0-RTT behavior on the part of any one provider can impact the security assumptions of the others. For example, the CDN layer administrator might enable 0-RTT for what appears to be an idempotent request pattern, without being aware that the the API proxy implements request-level throttles. Now an attacker who happens to grab a single 0-RTT data request from an unsecured WiFi network can turn this into a broad denial-of-service attack that may lock the caller out in all locations. \r\n\r\nAt the core of this problem is that the proposed change with TLS1.3 violates the established layering boundaries of applications and transport protocols, and violates the principle of least surprise. This is somewhat ironic, as TLS itself benefits from important guarantees from its underlying protocol, TCP. For example the Lucky13 vulnerability was practical against DTLS, but not TLS. This is because UDP-based DTLS tolerates a certain amount of replays, while TLS does not, due to the reliable-transmission guarantees provided by TCP. Suppose that the TCP protocol WG were to decide that TCP would sometimes no longer provide reliable tranmission, and that data may be missing or duplicated in a stream, would we be happy with that as TLS maintainers? \r\n\r\n### Suggested changes to TLS1.3 draft\r\n\r\n**Require implementations to robustly prevent Ticket re-use for 0-RTT**\r\n\r\nTLS1.3 should require that TLS implementions handling 0-RTT \"MUST\" provide a mechanism to prevent duplicate tickets from being used for 0-RTT data. Implementations could use strike-registers, single-use caches, or other mechanisms such as puncturable encryption, to achieve this effect; rejecting 0-RTT sections when uncertain of replay. \r\n\r\nWhile this does leave open the small window of Gillmor-style attacks, these attacks are different in magnitude, consequence, and can be handled reasonably by clients in a manner that existing clients are used to. \r\n\r\nAdditionally, if TLS implementations are to provide replay protection as a built-in property, it is simpler for applications to expose all TLS plaintext data as a single stream. This appears to be what applications are doing anyway. \r\n\r\n**Partial mitigation for Gilmor attacks: deliberately duplicate 0-RTT data**\r\n\r\nIf 0-RTT data and regular data are to remain seperate streams, then another way to address Gilmor attacks is to intentionally duplicate 0-RTT sections. If 0-RTT sections are to be replayable, it is better that they should be replayed as an ordinary event. TLS implementations should ocasionally *intentionally* duplicate zero-RTT data torwads the application. This helps \"innoculate\" applications against idempotency bugs, triggering them early in a controlled way, before attackers do in an uncontrolled way.  \r\n\r\n**Require TLS proxies to operate 0-RTT transitively**\r\n\r\nSome, though not all, of the attacks outlined can be lessened by passing full knowledge of 0-RTT state end-to-end to applications. For example, a CDN or TLS accelerator could accept a 0-RTT data request only if the origin also supports 0-RTT. It could then match byte-for-byte the plaintext of the incoming 0-RTT section with an outgoing 0-RTT section. Rather than emulating a single stream, this would allow end applications to reason more precisely about exactly which data was originally replayable. \r\n\r\n# Conclusion\r\n\r\nTLS 1.3 0-RTT is not secure by default, but it is possible to provide both anti-replay and forward-secrecy properties for 0-RTT data with workarounds. As long as TLS 1.3 is not secure by default it is likely to lead to exploitable vulnerabilities that can only be fixed at the application level, distant from the cause. In general, it is also very challenging to fix applications to be idempotent and side-effect free. \r\n\r\nInstead of shifting the problem to applications, we should strongly consider modifying the TLS 1.3 draft to make TLS 0-RTT secure by default, at least against replays. While Gillmor-style retry attacks will persist, these attacks may be mitigated with reasonable client behavior, and in many cases the existing client behavior is already fault tolerant. \r\n\r\nLastly, to end on a positive note, in general; TLS1.3 is still a welcome and vast simplification over prior versions of TLS and improves the security posture of TLS generally, including much better forward-secrecy for all non-0-RTT data. ",
      "createdAt": "2017-05-02T14:43:32Z",
      "updatedAt": "2017-07-03T20:36:12Z",
      "closedAt": "2017-07-03T20:36:12Z",
      "comments": [
        {
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Viktor Dukhovni points out that some applications want to re-use tickets for several resumptions. In this case, there are two things worth noting:\r\n\r\n* This seems to be fundamentally at odds with the desire to keep obfuscated_ticket_age secret, it is impossible to do both. \r\n* This does not rule out that tickets should be single-use as they pertain to 0-RTT data. Or that 0-RTT data should be un-replayable. One way to do only the latter is to buffer and fingerprint 0-RTT data plaintexts and to use a strike register approach to deduping. However this seems extremely cumbersome in comparison to the ticket itself being single-use (when used for 0-RTT). ",
          "createdAt": "2017-05-02T18:02:53Z",
          "updatedAt": "2017-05-02T18:02:53Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@colmmacc: please provide a PR adding yourself to the Acknowledgements.",
          "createdAt": "2017-05-04T21:03:21Z",
          "updatedAt": "2017-05-04T21:03:21Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Added new section on anti-replay",
          "createdAt": "2017-07-03T20:36:12Z",
          "updatedAt": "2017-07-03T20:36:12Z"
        }
      ]
    },
    {
      "number": 1012,
      "id": "MDU6SXNzdWUyMjc4NDkyOTk=",
      "title": "move client_certificate_type into CertificateRequest + Certificate?",
      "url": "https://github.com/tlswg/tls13-spec/issues/1012",
      "state": "CLOSED",
      "author": "isonmad",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "a6d173f0f8ca99ad99d07d09a26b6bb6ef504c13 was a mistake, but is there a reason why client_certificate_type should stay in the unencrypted ClientHello at all?\r\n\r\nAlthough moving CCT out of the ClientHello would also remove the need for client_certificate_type and server_certificate_type to have different code points at all.",
      "createdAt": "2017-05-11T00:50:01Z",
      "updatedAt": "2017-11-24T18:27:14Z",
      "closedAt": "2017-11-24T18:27:14Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A single certificate_type extension would be preferable.",
          "createdAt": "2017-05-11T00:53:01Z",
          "updatedAt": "2017-05-11T00:53:01Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We lose backwards compatibility to 1.2 and below if we move it.  Also it moves away from client-offer-server-pick negotiation, but I'm fine with that (and we're doing that a little already).",
          "createdAt": "2017-05-11T15:04:18Z",
          "updatedAt": "2017-05-11T15:04:18Z"
        }
      ]
    },
    {
      "number": 1014,
      "id": "MDU6SXNzdWUyMjg0ODg1MTE=",
      "title": "Suggest logging alerts and errors.",
      "url": "https://github.com/tlswg/tls13-spec/issues/1014",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per Kathleen's AD review\r\n\r\n``` \r\nIn addition to sending the error, I don't see any mention of the error\r\nbeing logged on the server side, shouldn't that be specified?  Logging\r\nerrors (at least in debug modes when needed) provides valuable\r\ntroubleshooting information and many applications don't do an adequate\r\njob of logging, so I think it's important to call that out here as a\r\nrecommendation.\r\n```\r\n",
      "createdAt": "2017-05-13T17:46:09Z",
      "updatedAt": "2017-05-20T07:11:16Z",
      "closedAt": "2017-05-20T07:11:16Z",
      "comments": []
    },
    {
      "number": 1015,
      "id": "MDU6SXNzdWUyMjg0ODk3ODA=",
      "title": "Note that we updated references in the change log.",
      "url": "https://github.com/tlswg/tls13-spec/issues/1015",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-05-13T18:06:02Z",
      "updatedAt": "2017-05-17T11:22:36Z",
      "closedAt": "2017-05-17T11:22:36Z",
      "comments": []
    },
    {
      "number": 1016,
      "id": "MDU6SXNzdWUyMjg0ODk5Mjg=",
      "title": "Remove DISCLAIMER at the top",
      "url": "https://github.com/tlswg/tls13-spec/issues/1016",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "From Kathleen's review.",
      "createdAt": "2017-05-13T18:08:36Z",
      "updatedAt": "2017-07-03T21:28:17Z",
      "closedAt": "2017-07-03T21:28:17Z",
      "comments": []
    },
    {
      "number": 1023,
      "id": "MDU6SXNzdWUyMzA1Mzk4OTU=",
      "title": "Clarify the prohibition on old hashes",
      "url": "https://github.com/tlswg/tls13-spec/issues/1023",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per the mailing list discussion, make clear that you just can't accept signatures using the bad algorithms, but it's fine if they are floating around in self-signed certs, etc. if you don't use them to verify",
      "createdAt": "2017-05-22T22:44:50Z",
      "updatedAt": "2017-07-03T21:31:55Z",
      "closedAt": "2017-07-03T21:31:55Z",
      "comments": []
    },
    {
      "number": 1029,
      "id": "MDU6SXNzdWUyMzYxNTU3MjE=",
      "title": "Inconsistency in Signature Algorithms/Schemes",
      "url": "https://github.com/tlswg/tls13-spec/issues/1029",
      "state": "CLOSED",
      "author": "jurajsomorovsky",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This is a minor editorial issue, found by implementing TLS1.3, with @ic0ns and @NErinola.\r\n\r\nSection 4.2.3 of the current draft provides a list of Signature Algorithms / Signature Schemes: https://tlswg.github.io/tls13-spec/#rfc.section.4.2.3\r\n\r\nThe enums are created by two values (hash,signature), e.g.:\r\n       /* RSASSA-PKCS1-v1_5 algorithms */\r\n       rsa_pkcs1_sha256(0x0401),\r\n       rsa_pkcs1_sha384(0x0501),\r\n       rsa_pkcs1_sha512(0x0601),\r\n\r\nThe enums for RSA-PSS algorithms are inconsistent, their values are constructed as (signature, hash):\r\n      /* RSASSA-PSS algorithms */\r\n       rsa_pss_sha256(0x0804),\r\n       rsa_pss_sha384(0x0805),\r\n       rsa_pss_sha512(0x0806),`\r\n\r\nIt should be:\r\n       /* RSASSA-PSS algorithms */\r\n       rsa_pss_sha256(0x0408),\r\n       rsa_pss_sha384(0x0508),\r\n       rsa_pss_sha512(0x0608),\r\n",
      "createdAt": "2017-06-15T11:14:13Z",
      "updatedAt": "2017-06-15T12:28:02Z",
      "closedAt": "2017-06-15T12:28:02Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, this is intentional. We are no longer using that construction. Its coincidental that they are inverted like this.",
          "createdAt": "2017-06-15T11:23:33Z",
          "updatedAt": "2017-06-15T11:23:33Z"
        },
        {
          "author": "jurajsomorovsky",
          "authorAssociation": "NONE",
          "body": "Ok, thank you for the clarification",
          "createdAt": "2017-06-15T12:28:02Z",
          "updatedAt": "2017-06-15T12:28:02Z"
        }
      ]
    },
    {
      "number": 1030,
      "id": "MDU6SXNzdWUyMzY3NTQzNjQ=",
      "title": "Editorial: Move the reference for ALPN earlier in the document",
      "url": "https://github.com/tlswg/tls13-spec/issues/1030",
      "state": "CLOSED",
      "author": "paulehoffman",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The reference to [RFC7301] is after the third mention of ALPN. It should instead be at the first reference to ALPN.",
      "createdAt": "2017-06-19T00:05:53Z",
      "updatedAt": "2017-06-19T01:03:20Z",
      "closedAt": "2017-06-19T01:03:20Z",
      "comments": []
    },
    {
      "number": 1033,
      "id": "MDU6SXNzdWUyMzc0MDA2Nzg=",
      "title": "still two mentions of certificate_extensions",
      "url": "https://github.com/tlswg/tls13-spec/issues/1033",
      "state": "CLOSED",
      "author": "isonmad",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "But it was replaced by `oid_filters` in 7b0d71d8aa4e3e6d73f5e8a060f35c53f1ef03d7.",
      "createdAt": "2017-06-21T02:53:00Z",
      "updatedAt": "2017-07-03T21:34:50Z",
      "closedAt": "2017-07-03T21:34:50Z",
      "comments": []
    },
    {
      "number": 1035,
      "id": "MDU6SXNzdWUyMzg3MzY2MjA=",
      "title": "Overlap of signature algorithms with different semantics",
      "url": "https://github.com/tlswg/tls13-spec/issues/1035",
      "state": "CLOSED",
      "author": "nmav",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "TLS 1.3 section 4.2.3.  Signature Algorithms contains:\r\n```\r\n          /* ECDSA algorithms */\r\n          ecdsa_secp256r1_sha256(0x0403),\r\n          ecdsa_secp384r1_sha384(0x0503),\r\n          ecdsa_secp521r1_sha512(0x0603),\r\n```\r\nThese overlap with sha256(4), sha384(5), sha512(6) with ecdsa(3) from RFC5246, though they have different semantics to the level they can be considered different algorithms.\r\n\r\nTo overcome that inconsistency TLS 1.3 includes that text:\r\n\r\n> If TLS 1.2 is negotiated, implementations MUST be prepared\r\n> to accept a signature that uses any curve that they advertised in\r\n> the \"supported_groups\" extension.\r\n\r\nSo the interpretation of this extension data can only happen after the TLS version is negotiated, because that's necessary to translate the code points to their actual meaning. Given that negotiation of TLS version is also done with an extension which can be present after the signature algorithms extension, that re-use feels like an unnecessary complication.\r\n\r\nIs there a particular advantage of re-using the code points for the new signature algorithms in TLS 1.3? Wouldn't it make more sense to assign new code points to the new algorithms similarly to what it was done for RSA-PSS and thus eliminate any ambiguity?\r\n",
      "createdAt": "2017-06-27T04:51:10Z",
      "updatedAt": "2017-07-03T21:36:14Z",
      "closedAt": "2017-07-03T21:36:14Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There was consensus to do this, so you'll need to get consensus on the list to change it.",
          "createdAt": "2017-07-03T21:36:14Z",
          "updatedAt": "2017-07-03T21:36:14Z"
        }
      ]
    },
    {
      "number": 1037,
      "id": "MDU6SXNzdWUyNDAyODUyMDA=",
      "title": "tag for draft 21",
      "url": "https://github.com/tlswg/tls13-spec/issues/1037",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@ekr Please don't forget to push the tag for draft 21.",
      "createdAt": "2017-07-04T00:22:55Z",
      "updatedAt": "2017-07-06T05:48:13Z",
      "closedAt": "2017-07-04T13:10:14Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is done",
          "createdAt": "2017-07-04T13:10:14Z",
          "updatedAt": "2017-07-04T13:10:14Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks. But I don't see the tag yet...",
          "createdAt": "2017-07-04T22:15:18Z",
          "updatedAt": "2017-07-04T22:15:18Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Try now\n\nOn Tue, Jul 4, 2017 at 3:15 PM, Kazu Yamamoto <notifications@github.com>\nwrote:\n\n> Thanks. But I don't see the tag yet...\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/issues/1037#issuecomment-312961419>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oUpjyNDBO8-3R8X_YF_Y778ANP1fks5sKrl6gaJpZM4OMxaU>\n> .\n>\n",
          "createdAt": "2017-07-04T22:41:59Z",
          "updatedAt": "2017-07-04T22:41:59Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry but I cannot see the `draft-ietf-tls-tls13-21` yet.",
          "createdAt": "2017-07-06T05:21:49Z",
          "updatedAt": "2017-07-06T05:21:49Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's there now.",
          "createdAt": "2017-07-06T05:28:25Z",
          "updatedAt": "2017-07-06T05:28:25Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I got that. Thank you!",
          "createdAt": "2017-07-06T05:48:13Z",
          "updatedAt": "2017-07-06T05:48:13Z"
        }
      ]
    },
    {
      "number": 1040,
      "id": "MDU6SXNzdWUyNDAzMDYyNTA=",
      "title": "resumption validation",
      "url": "https://github.com/tlswg/tls13-spec/issues/1040",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "2.3.  Zero-RTT Data says:\r\n\r\n> -  The TLS version number for use with this PSK\r\n> \r\n> -  The cipher suite for use with this PSK\r\n> \r\n> -  The Application-Layer Protocol Negotiation (ALPN) protocol [RFC7301], if any is to be used\r\n> \r\n> -  The Server Name Indication (SNI), if any is to be used\r\n\r\nBut 4.6.1.  New Session Ticket Message says:\r\n\r\n> Any ticket MUST only be resumed with a cipher suite that has the same\r\n> KDF hash algorithm as that used to establish the original connection,\r\n> and only if the client provides the same SNI value as in the original\r\n> connection, as described in Section 3 of [RFC6066].\r\n\r\nFor consistency, I would like to have the latter in Section 2.2 with the same style.\r\n\r\nMoreover, I would like to know where this differences of requirements come from.",
      "createdAt": "2017-07-04T04:04:10Z",
      "updatedAt": "2017-11-14T00:46:22Z",
      "closedAt": "2017-11-13T22:05:52Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think 4.2.10 may be more appropriate than 2.2, as it is closer to where the server is doing the relevant processing.",
          "createdAt": "2017-07-21T17:33:17Z",
          "updatedAt": "2017-07-21T17:33:17Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Now 4.2.10 has clear requirements. So, why don't we remove the same requirement from 2.3?\r\n\r\n> When clients use a PSK obtained externally to send early data, then the following\r\nadditional information MUST be provisioned to both parties:\r\n>\r\n> -  The TLS version number for use with this PSK\r\n> \r\n> -  The cipher suite for use with this PSK\r\n> \r\n> -  The Application-Layer Protocol Negotiation (ALPN) protocol [RFC7301], if any is to be used\r\n> \r\n> -  The Server Name Indication (SNI), if any is to be used",
          "createdAt": "2017-11-14T00:46:22Z",
          "updatedAt": "2017-11-14T00:46:22Z"
        }
      ]
    },
    {
      "number": 1042,
      "id": "MDU6SXNzdWUyNDAzMzc4Mzk=",
      "title": "minor wordings",
      "url": "https://github.com/tlswg/tls13-spec/issues/1042",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, the following words are used:\r\n\r\n- Zero RTT\r\n- 0-RTT\r\n- 0RTT\r\n\r\nIt would be nice if they were uniformed.",
      "createdAt": "2017-07-04T07:42:57Z",
      "updatedAt": "2017-11-24T19:12:54Z",
      "closedAt": "2017-11-24T19:12:54Z",
      "comments": []
    },
    {
      "number": 1043,
      "id": "MDU6SXNzdWUyNDA2NDExMzA=",
      "title": "Early data with external PSK",
      "url": "https://github.com/tlswg/tls13-spec/issues/1043",
      "state": "CLOSED",
      "author": "mattcaswell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The Early Data Indication section contains this sentence:\r\n\r\n    The parameters for the 0-RTT data (symmetric cipher suite, ALPN\r\n    protocol, etc.) are the same as those which were negotiated in the\r\n    connection which established the PSK.\r\n\r\nThis implies to me that you can only do 0-RTT where the PSK was established via an earlier connection. In external PSK this is not the case. I don't think this interpretation was the intention.",
      "createdAt": "2017-07-05T12:53:42Z",
      "updatedAt": "2017-11-13T22:05:52Z",
      "closedAt": "2017-11-13T22:05:52Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is stale text from before we allowed 0-RTT with external PSK, IIRC.",
          "createdAt": "2017-07-05T16:13:37Z",
          "updatedAt": "2017-07-05T16:13:37Z"
        }
      ]
    },
    {
      "number": 1060,
      "id": "MDU6SXNzdWUyNDQyMzU3MTg=",
      "title": "TLS-Exporter",
      "url": "https://github.com/tlswg/tls13-spec/issues/1060",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The quic tls draft uses the `TLS-Exporter` function but it is not defined anywhere.\r\nSection 7.5 should define `TLS-Exporter` as follows:\r\n\r\n```\r\nTLS-Exporter(label, context_value, key_length) =\r\n    HKDF-Expand-Label(Derive-Secret(Secret, label, \"\"),\r\n                         \"exporter\", Hash(context_value), key_length)\r\n```",
      "createdAt": "2017-07-20T03:30:26Z",
      "updatedAt": "2017-11-24T18:55:14Z",
      "closedAt": "2017-11-24T18:55:14Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The exporter interface remains the same.\r\n\r\nI'm not convinced we need to duplicate this line from RFC 5705.",
          "createdAt": "2017-07-20T18:26:21Z",
          "updatedAt": "2017-07-20T18:26:21Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "RFC 5705 does not define `TLS-Exprter` explicitly, either.\r\nSo, the quic tls draft refers to a undefined function name.",
          "createdAt": "2017-07-21T00:34:32Z",
          "updatedAt": "2017-07-21T00:34:32Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The current version of ietf-quic-tls-07 (https://tools.ietf.org/html/draft-ietf-quic-tls-07#section-5.2) refers to 7.5 of ietf-tls-tls13-21. I would support adding the extra line to the TLS 1.3 draft as suggested by @kazu-yamamoto. At first I was also confused about the meaning of the (undefined) TLS-Exporter function until I started reading the preceding section more closely.",
          "createdAt": "2017-10-24T23:30:23Z",
          "updatedAt": "2017-10-24T23:30:23Z"
        }
      ]
    },
    {
      "number": 1062,
      "id": "MDU6SXNzdWUyNDUwNzQwMzk=",
      "title": "clarify role of TLS vs PKI library",
      "url": "https://github.com/tlswg/tls13-spec/issues/1062",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hubert says on the list:\r\n\r\n> that disjoint between \"stuff that TLS library is supposed to do\" and \r\n\"stuff that PKI library is supposed to do\" could be spelled out more \r\nexplicitly in the RFC though",
      "createdAt": "2017-07-24T13:07:38Z",
      "updatedAt": "2017-08-28T13:36:30Z",
      "closedAt": "2017-08-26T19:16:39Z",
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In particular, because of the way signature_schemes work, the PKI library must support a superset of signature algorithms of the TLS library",
          "createdAt": "2017-07-24T17:25:40Z",
          "updatedAt": "2017-07-24T17:25:40Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is clear enough.",
          "createdAt": "2017-08-26T19:16:39Z",
          "updatedAt": "2017-08-26T19:16:39Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Moreover, it's not our job to specify how implementations are constructed.",
          "createdAt": "2017-08-26T19:17:12Z",
          "updatedAt": "2017-08-26T19:17:12Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "But it is our job to point out when there are possible integration or interoperability issues and which parts are necessary to get a secure implementation (see the whole appendix D or E).",
          "createdAt": "2017-08-28T13:36:30Z",
          "updatedAt": "2017-08-28T13:36:30Z"
        }
      ]
    },
    {
      "number": 1077,
      "id": "MDU6SXNzdWUyNTM3NjUwOTE=",
      "title": "more formal definition of truncated ClientHello",
      "url": "https://github.com/tlswg/tls13-spec/issues/1077",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "From the thread at https://www.ietf.org/mail-archive/web/tls/current/msg24332.html, e.g.,\r\n\r\n> > something like this:\r\n> >    ClientHello1 is the initial ClientHello and ClientHello2 is the\r\n> >    ClientHello\r\n> >    send by client as a response to HelloRetryRequest. For both of those\r\n> >    \r\n> >    messages, the binder value will be computer over:\r\n> >      truncated = Handshake.length - length(Extension.extension_data)\r\n> >      Transcript-Hash(ClientHello1[truncated])\r\n> >   \r\n> >   Given Handshake message that contains the ClientHello message and the\r\n> >   Extension that contains the PreSharedKeyExtension.\r\n> \r\n> I think that what you want is\r\n> \r\n> ClientHello1_truncated - ClientHello1.length -\r\n> PreSharedKeyExtension.binders.length\r\n> \r\n> And you need to point out that the length of the binders is included, i.e.,\r\n> \r\n> PreSharedKeyExtension.binders.length = 2 +\r\n> sum(PreSharedKeyExtension.binders[i].length)\r\n\r\naah, yes, on second reading I noticed that identities are not supposed to be \r\nremoved, so yes it's without binders.length, not extension.length.\r\n\r\nI went for the generic ClientHello instead of ClientHello1 as it applies both \r\nto initial and the one that is a response to Hello Retry Request, but the PSK \r\nextension is the same in both cases so explicit name of it would probably be \r\nbetter.\r\n\r\nThere's a slight problem with the syntax of \r\n  PreSharedKeyExtension.binders[i]\r\nas [] are used to define a length of a vector, and in that is contrary to the \r\nmeaning of\r\n   ClientHello1[truncated]\r\n\r\nI think it would be cleaner to include that \"2\" in original and explain where \r\nit comes from rather than defining `length` different ways for the `binders` \r\nvector and for the  PSKIdentity struct.",
      "createdAt": "2017-08-29T18:46:43Z",
      "updatedAt": "2017-11-24T19:10:51Z",
      "closedAt": "2017-11-24T19:10:51Z",
      "comments": []
    },
    {
      "number": 1079,
      "id": "MDU6SXNzdWUyNTc0MzM4NDA=",
      "title": "Note that TLS 1.3 cookies don't prevent on-path retransmit",
      "url": "https://github.com/tlswg/tls13-spec/issues/1079",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-09-13T15:57:29Z",
      "updatedAt": "2017-11-24T18:49:52Z",
      "closedAt": "2017-11-24T18:49:52Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From discussion:\r\n>> I am also unclear what protects against cookies being replayed. If an\r\n>> attacker wishes to perform an amplification attack on a particular IP\r\n>> it awaits a legitimate ClientHello with a cookie coming from that IP\r\n>> and records it. It then replays that ClientHello with cookie to the\r\n>> server many times. The cookie looks valid to the server and it\r\n>> responds with its ServerHello, full Certificate chain etc back to the\r\n>> original IP. What have I missed here?\r\n>\r\n>\r\n> Yes. Cookies aren't generally intended to stop that kind of amplification,\r\n> they're just designed to prevent blind attacks on IPs you're not on-path\r\n> for. Note that QUIC has an additional defense here of requiring that\r\n> that ClientInitial be a certain minimum size. Note that if you are on-path\r\n> you can still get a lot of amplification even with TCP at the cost of\r\n> sending SYN, ACK, ClientHello...\r\n",
          "createdAt": "2017-09-13T15:57:42Z",
          "updatedAt": "2017-09-13T15:57:42Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In retrospect, this seems like a DTLS issue.",
          "createdAt": "2017-11-24T18:49:52Z",
          "updatedAt": "2017-11-24T18:49:52Z"
        }
      ]
    },
    {
      "number": 1081,
      "id": "MDU6SXNzdWUyNjE2NzQxODA=",
      "title": "refer to [this document] for signature_algorithms",
      "url": "https://github.com/tlswg/tls13-spec/issues/1081",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Though signature_algorithms was defined in RFC5246, because this document is obsoleting RFC5246 it's probably best to refer to this document for its definition.  That is:\r\n\r\n    signature_algorithms(13),                   /* RFC 5246 */\r\n\r\nshould probably be:\r\n\r\n    signature_algorithms(13),                   /* [[this document]] */",
      "createdAt": "2017-09-29T15:11:53Z",
      "updatedAt": "2017-10-06T00:54:34Z",
      "closedAt": "2017-10-06T00:54:34Z",
      "comments": []
    },
    {
      "number": 1084,
      "id": "MDU6SXNzdWUyNjQxMjU0MzM=",
      "title": "Certificate message description doesn't define client behavior on unknown extensions",
      "url": "https://github.com/tlswg/tls13-spec/issues/1084",
      "state": "CLOSED",
      "author": "nmav",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The section `4.4.2.  Certificate`, says about extensions:\r\n```\r\nAn extension MUST only be present in a Certificate message if the\r\ncorresponding ClientHello extension was presented in the initial handshake.\r\n```\r\n\r\nHowever it does not define what a client (or server) should do if they encounter an unknown extension from the peer. A common pattern across the other message extensions is to ignore it, though according to the text above one could also reject the message (but no alert message is specified for that).\r\n",
      "createdAt": "2017-10-10T07:31:45Z",
      "updatedAt": "2017-10-11T06:06:39Z",
      "closedAt": "2017-10-11T06:05:34Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A client receiving a Certificate message with an extension that was not in the ClientHello ought to terminate the connection -- unknown extensions have unknown semantics.\r\n\r\nThe text should probably be tightened up for what extensions are allowed in a Certificate message from the client.",
          "createdAt": "2017-10-10T22:02:09Z",
          "updatedAt": "2017-10-10T22:02:09Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There is text common to all extension processing in 4.2:\r\nhttps://tlswg.github.io/tls13-spec/draft-ietf-tls-tls13.html#rfc.section.4.2",
          "createdAt": "2017-10-10T22:09:06Z",
          "updatedAt": "2017-10-10T22:09:06Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "Thanks @davidben then, I think the text:\r\n```\r\nImplementations MUST NOT send extension responses if the remote endpoint did not send the \r\ncorresponding extension requests, with the exception of the \u201ccookie\u201d extension in HelloRetryRequest. \r\nUpon receiving such an extension, an endpoint MUST abort the handshake with an \r\n\u201cunsupported_extension\u201d alert.\r\n```\r\nclarifies that. A minor suggestion for text clarity would be for the Certificate section to refer to extension processing for extension handling rules rather than re-defining a small part of them. I'm closing this issue as it is addressed.",
          "createdAt": "2017-10-11T06:05:34Z",
          "updatedAt": "2017-10-11T06:06:39Z"
        }
      ]
    },
    {
      "number": 1087,
      "id": "MDU6SXNzdWUyNjc5MDEzOTU=",
      "title": "Off-by-one error on the maximum record size",
      "url": "https://github.com/tlswg/tls13-spec/issues/1087",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I had been using the text in [Section 5.4](https://tlswg.github.io/tls13-spec/draft-ietf-tls-tls13.html#record-padding):\r\n\r\n> The presence of padding does not change the overall record size limitations - the full encoded TLSInnerPlaintext MUST not exceed 2^14 octets. \r\n\r\nBut the text in the very last sentence of [Section 5.2](https://tlswg.github.io/tls13-spec/draft-ietf-tls-tls13.html#record-payload-protection) says:\r\n\r\n>  This limit is derived from the maximum TLSPlaintext length of 2^14 octets + 1 octet for ContentType + the maximum AEAD expansion of 255 octets.\r\n\r\nWhich doesn't really make sense.  TLSPlaintext includes the record header as well as the encrypted data.  I suppose that this is accurate if it means `TLSPlaintext.length`, but I misread this as the entire length of the structure.  That's a minor point.\r\n\r\nTLSInnerPlaintext can be at most 2^14 (as defined in Section 5.4), which leads to a different limit of 2^14-1 for TLSPlaintext.length.  Should we instead say that 2^14+256 is the limit and the AEAD expansion is 256 octets instead of 255?\r\n\r\nLeading me to think that something along these lines is what should go in Section 5.2:\r\n\r\n> An AEAD algorithm used in TLS 1.3 MUST NOT produce an expansion greater than 256 octets. An endpoint that receives a record from its peer with TLSCiphertext.length larger than 2^14 + 256 octets MUST terminate the connection with a \u201crecord_overflow\u201d alert.  Similarly, an endpoint that receives a TLSInnerPlaintext that is more than 2^14 octets in total length MUST terminate the connection with a \u201crecord_overflow\u201d alert.  This implies an upper limit of 2^14-1 on the value of TLSPlaintext.length.\r\n\r\nOr something like that.",
      "createdAt": "2017-10-24T05:22:58Z",
      "updatedAt": "2017-11-14T06:55:34Z",
      "closedAt": "2017-11-14T06:55:34Z",
      "comments": [
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See #1083",
          "createdAt": "2017-10-24T23:23:42Z",
          "updatedAt": "2017-10-24T23:23:42Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed",
          "createdAt": "2017-11-14T06:55:34Z",
          "updatedAt": "2017-11-14T06:55:34Z"
        }
      ]
    },
    {
      "number": 1088,
      "id": "MDU6SXNzdWUyNjk1OTQ5MDU=",
      "title": "Make client_certificate_type match 6962",
      "url": "https://github.com/tlswg/tls13-spec/issues/1088",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See WG minutes and discussion in SIN",
      "createdAt": "2017-10-30T13:14:17Z",
      "updatedAt": "2017-11-14T06:55:49Z",
      "closedAt": "2017-11-14T06:55:49Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This was actually server_certificate_type.",
          "createdAt": "2017-11-14T06:55:49Z",
          "updatedAt": "2017-11-14T06:55:49Z"
        }
      ]
    },
    {
      "number": 1089,
      "id": "MDU6SXNzdWUyNzEzMzUxNzI=",
      "title": "post_handshake_auth",
      "url": "https://github.com/tlswg/tls13-spec/issues/1089",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The structure of `post_handshake_auth` is missing.",
      "createdAt": "2017-11-06T01:32:18Z",
      "updatedAt": "2017-11-24T19:23:52Z",
      "closedAt": "2017-11-24T18:57:49Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The \"extension_data\" field of the \"post_handshake_auth\" extension is zero\r\nlength.",
          "createdAt": "2017-11-06T03:58:57Z",
          "updatedAt": "2017-11-06T03:58:57Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK. So, I would like to have either\r\n\r\n```\r\nEmpty PostHandShakeAuth;\r\n```\r\n\r\nor \r\n\r\n```\r\nstruct {} PostHandShakeAuth;\r\n```\r\nexplicitly.",
          "createdAt": "2017-11-06T06:09:44Z",
          "updatedAt": "2017-11-06T06:09:44Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr not sure if you are getting notifications for the comments to commits, but as a nitpick:\r\n\r\n> PostHand**s**hakeAuth\r\n\r\n(Handshake is a single word)",
          "createdAt": "2017-11-24T19:23:52Z",
          "updatedAt": "2017-11-24T19:23:52Z"
        }
      ]
    },
    {
      "number": 1090,
      "id": "MDU6SXNzdWUyNzEzMzU5ODU=",
      "title": "CertificateType",
      "url": "https://github.com/tlswg/tls13-spec/issues/1090",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "`CertificateType` is defined in RFC 7250 but it just refers to the IANA registry.\r\nIt would be nice if we have the following clear definition:\r\n\r\n```\r\nenum {\r\n    x509(0),\r\n    openpgp_RESERVED(1),\r\n    rawpublickey(2),\r\n    (255)\r\n} CertificateType;\r\n```\r\n",
      "createdAt": "2017-11-06T01:39:50Z",
      "updatedAt": "2017-11-24T18:51:47Z",
      "closedAt": "2017-11-24T18:51:47Z",
      "comments": []
    },
    {
      "number": 1097,
      "id": "MDU6SXNzdWUyNzUxMTg1MTU=",
      "title": "Harmonize citations for DH",
      "url": "https://github.com/tlswg/tls13-spec/issues/1097",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": " IEEE1363  versus X9.62",
      "createdAt": "2017-11-18T23:30:45Z",
      "updatedAt": "2017-11-24T18:59:03Z",
      "closedAt": "2017-11-24T18:59:03Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think I can live with this.",
          "createdAt": "2017-11-24T18:59:01Z",
          "updatedAt": "2017-11-24T18:59:01Z"
        }
      ]
    },
    {
      "number": 1101,
      "id": "MDU6SXNzdWUyNzY3NzQxMTM=",
      "title": "hello_retry_request vs hello_retry_request_RESERVED",
      "url": "https://github.com/tlswg/tls13-spec/issues/1101",
      "state": "CLOSED",
      "author": "Lekensteyn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The text refers to hello_retry_request (e.g. in IANA considerations), but the HandshakeType enum refers to hello_retry_request_RESERVED.\r\n\r\nShould something be said about Server Hello being able to modify `Handshake.msg_type`?\r\nShould something be said about rejecting handshake messages with `msg_type=6`? (The current `switch (Handshake.msg_type)` seems to suggest that the wire can really contain 6.)",
      "createdAt": "2017-11-25T20:06:08Z",
      "updatedAt": "2017-11-29T14:08:56Z",
      "closedAt": "2017-11-29T14:08:56Z",
      "comments": [
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My syntax validator also detects this error. We need to fix this.",
          "createdAt": "2017-11-27T03:29:00Z",
          "updatedAt": "2017-11-27T03:29:00Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I guess that it is hard to express a nested `select`. So, it seems to me that a comment is reasonable:\r\n\r\n```\r\n       struct {\r\n           select (Handshake.msg_type) {\r\n               case client_hello:\r\n                   KeyShareEntry client_shares<0..2^16-1>;\r\n                /* NamedGroup selected_group; in the case of Hello Retry Request*/\r\n\r\n               case server_hello:\r\n                   KeyShareEntry server_share;\r\n           };\r\n       } KeyShare;\r\n```",
          "createdAt": "2017-11-27T03:33:19Z",
          "updatedAt": "2017-11-28T12:06:29Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That comment is not easy to parse for a machine :/\r\n(btw, the comment is for the server_hello case, not client_hello).\r\n\r\n`select` is only defined for enumerations, so we cannot do something like:\r\n```\r\nstruct {\r\n    select (Handshake.msg_type) {\r\n        case client_hello:\r\n            KeyShareEntry client_shares<0..2^16-1>;\r\n\r\n        case server_hello:\r\n            select (ServerHello.random) {\r\n                case hello_retry_request_magic:\r\n                    NamedGroup selected_group;\r\n                default:\r\n                    KeyShareEntry server_share;\r\n            };\r\n    };\r\n} KeyShare;\r\n```\r\n(and even the above is not accurate since interpretation of random depends on the supported_extensions value.)\r\n\r\nMaybe something like:\r\n```\r\nstruct {\r\n    HandshakeType msg_type;\r\n    ProtocolVersion real_version;\r\n} HelloParameters;\r\n\r\nstruct {\r\n    select (Handshake.msg_type) {\r\n        case client_hello:\r\n            KeyShareEntry client_shares<0..2^16-1>;\r\n\r\n        case server_hello:\r\n            select (ServerHelloParameters.msg_type) {\r\n                case server_hello:\r\n                    KeyShareEntry server_share;\r\n                case hello_retry_request:\r\n                    NamedGroup selected_group;\r\n            };\r\n    };\r\n} KeyShare;\r\n```\r\n\r\nwith the intention that ServerHelloParameters is populated while preparsing the SH message (prescan for supported_versions, detect HRR vs normal SH based on Random). This is inspired by the SecurityParameters type in RFC 5246.",
          "createdAt": "2017-11-27T15:04:53Z",
          "updatedAt": "2017-11-27T15:04:53Z"
        }
      ]
    },
    {
      "number": 1104,
      "id": "MDU6SXNzdWUyNzczNzkxMDY=",
      "title": "supported_versions Extension Not Listed In \"Mandatory-to-Implement\" Section For ServerHello and HelloRetryRequest",
      "url": "https://github.com/tlswg/tls13-spec/issues/1104",
      "state": "CLOSED",
      "author": "iluxonchik",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the `Supported Versions` section it states:\r\n\r\n> A server which negotiates TLS 1.3 MUST respond by sending a \"supported_versions\" extension containing the selected version value (0x0304).\r\n\r\nIn the `Hello Retry Request` section we have:\r\n\r\n> The server's extensions MUST contain \"supported_versions\".\r\n\r\nHowever, this is not mentioned in the \"Mandatory-to-Implement\" extensions section.",
      "createdAt": "2017-11-28T13:10:53Z",
      "updatedAt": "2017-11-29T00:13:17Z",
      "closedAt": "2017-11-29T00:13:17Z",
      "comments": []
    },
    {
      "number": 1107,
      "id": "MDU6SXNzdWUyNzczOTQ1NDg=",
      "title": "Protocol Overview Handshake Section Does Not Have supported_versions Extension",
      "url": "https://github.com/tlswg/tls13-spec/issues/1107",
      "state": "CLOSED",
      "author": "iluxonchik",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Maybe I'm missing something here, but why don't the handshakes in the `ProtocolOverview` section have the `+ supported_versions` extension, since throughout the document its stated that it's *REQUIRED*.\r\n\r\nFor example, shouldn't this:\r\n\r\n```\r\nKey  ^ ClientHello\r\nExch | + key_share*\r\n     | + signature_algorithms*\r\n     | + psk_key_exchange_modes*\r\n     v + pre_shared_key*         -------->\r\n                                                       ServerHello  ^ Key\r\n                                                      + key_share*  | Exch\r\n                                                 + pre_shared_key*  v\r\n                                             {EncryptedExtensions}  ^  Server\r\n                                             {CertificateRequest*}  v  Params\r\n                                                    {Certificate*}  ^\r\n                                              {CertificateVerify*}  | Auth\r\n                                                        {Finished}  v\r\n                                 <--------     [Application Data*]\r\n     ^ {Certificate*}\r\nAuth | {CertificateVerify*}\r\n     v {Finished}                -------->\r\n       [Application Data]        <------->      [Application Data]\r\n```\r\n\r\nbe this:\r\n\r\n```\r\nKey  ^ ClientHello\r\n     | + supported_versions\r\nExch | + key_share*\r\n     | + signature_algorithms*\r\n     | + psk_key_exchange_modes*\r\n     v + pre_shared_key*         -------->\r\n                                                       ServerHello  ^ Key\r\n                                               + supported_versions |\r\n                                                      + key_share*  | Exch\r\n                                                 + pre_shared_key*  v\r\n                                             {EncryptedExtensions}  ^  Server\r\n                                             {CertificateRequest*}  v  Params\r\n                                                    {Certificate*}  ^\r\n                                              {CertificateVerify*}  | Auth\r\n                                                        {Finished}  v\r\n                                 <--------     [Application Data*]\r\n     ^ {Certificate*}\r\nAuth | {CertificateVerify*}\r\n     v {Finished}                -------->\r\n       [Application Data]        <------->      [Application Data]\r\n```\r\n\r\nor is `+ supported_versions` extension omitted there on purpose?",
      "createdAt": "2017-11-28T14:00:12Z",
      "updatedAt": "2017-11-29T00:12:27Z",
      "closedAt": "2017-11-29T00:12:17Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It was omitted because the diagrams were getting crowded and we decided it\ndidn't aid comprehension\n\nOn Tue, Nov 28, 2017 at 6:00 AM, ILLYA Gerasymchuk <notifications@github.com\n> wrote:\n\n> Maybe I'm missing something here, but why don't the handshakes in the\n> ProtocolOverview section have the + supported_versions extension, since\n> throughout the document its stated that it's *REQUIRED*.\n>\n> For example, shouldn't this:\n>\n> Key  ^ ClientHello\n> Exch | + key_share*\n>      | + signature_algorithms*\n>      | + psk_key_exchange_modes*\n>      v + pre_shared_key*         -------->\n>                                                        ServerHello  ^ Key\n>                                                       + key_share*  | Exch\n>                                                  + pre_shared_key*  v\n>                                              {EncryptedExtensions}  ^  Server\n>                                              {CertificateRequest*}  v  Params\n>                                                     {Certificate*}  ^\n>                                               {CertificateVerify*}  | Auth\n>                                                         {Finished}  v\n>                                  <--------     [Application Data*]\n>      ^ {Certificate*}\n> Auth | {CertificateVerify*}\n>      v {Finished}                -------->\n>        [Application Data]        <------->      [Application Data]\n>\n> be this:\n>\n> Key  ^ ClientHello\n>      | + supported_versions\n> Exch | + key_share*\n>      | + signature_algorithms*\n>      | + psk_key_exchange_modes*\n>      v + pre_shared_key*         -------->\n>                                                        ServerHello  ^ Key\n>                                                + supported_versions |\n>                                                       + key_share*  | Exch\n>                                                  + pre_shared_key*  v\n>                                              {EncryptedExtensions}  ^  Server\n>                                              {CertificateRequest*}  v  Params\n>                                                     {Certificate*}  ^\n>                                               {CertificateVerify*}  | Auth\n>                                                         {Finished}  v\n>                                  <--------     [Application Data*]\n>      ^ {Certificate*}\n> Auth | {CertificateVerify*}\n>      v {Finished}                -------->\n>        [Application Data]        <------->      [Application Data]\n>\n> or is + supported_versions extension omitted there on purpose?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/issues/1107>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1ofMunbZePuC3zXSBAeeOarLbfScHks5s7BHtgaJpZM4QtR9O>\n> .\n>\n",
          "createdAt": "2017-11-28T14:05:44Z",
          "updatedAt": "2017-11-28T14:05:44Z"
        },
        {
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Okay, thank you. Isn't it a good idea to mention this somewhere in the introduction? I think it's a little confusing without any explicit mention of that.",
          "createdAt": "2017-11-28T14:29:28Z",
          "updatedAt": "2017-11-28T14:29:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not overly worried about this.",
          "createdAt": "2017-11-29T00:12:27Z",
          "updatedAt": "2017-11-29T00:12:27Z"
        }
      ]
    },
    {
      "number": 1111,
      "id": "MDU6SXNzdWUyNzc4MzA4ODg=",
      "title": "Client Certificate extensions: SCT, OCSP Stapling",
      "url": "https://github.com/tlswg/tls13-spec/issues/1111",
      "state": "CLOSED",
      "author": "Lekensteyn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "status_request and signed_certificate_status timestamps are allowed in the CertificateRequest message according to https://tools.ietf.org/html/draft-ietf-tls-tls13-22#page-41\r\n\r\nCertificate extensions (https://tools.ietf.org/html/draft-ietf-tls-tls13-22#page-66) however say:\r\n\r\n>  An extension MUST only\r\n>  be present in a Certificate message if the corresponding\r\n>  ClientHello extension was presented in the initial handshake.\r\n\r\nIs this also the intended behavior for client certificates, or should it instead require extensions to be advertised in CertificateRequest? (This is relevant for future extensions.)\r\n\r\nNo idea why a client would bother sending SCT or status_request extensions, but that is not forbidden by the TLS 1.3 spec. The status_request (RFC 6066) and [SCT](https://tools.ietf.org/html/rfc6962#section-3.3.1) extensions are written such that it seems unusable in client certs though.",
      "createdAt": "2017-11-29T16:58:31Z",
      "updatedAt": "2017-12-05T00:45:44Z",
      "closedAt": "2017-12-05T00:45:44Z",
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd say it's both - for those extensions to be in client side Certificate message they need to be both in Client Hello and in Certificate Request.\r\n\r\nThat's because any extensions in Certificate Request must have been first advertised in Client Hello",
          "createdAt": "2017-11-29T19:27:41Z",
          "updatedAt": "2017-11-29T19:27:41Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's not correct. You can advertise stuff in CR that's not in CH (e.g.,\nX.509 OIDs). Peter, good catch. PR welcome.\n\n\nOn Wed, Nov 29, 2017 at 11:27 AM, Hubert Kario <notifications@github.com>\nwrote:\n\n> I'd say it's both - for those extensions to be in client side Certificate\n> message they need to be both in Client Hello and in Certificate Request.\n>\n> That's because any extensions in Certificate Request must have been first\n> advertised in Client Hello\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/issues/1111#issuecomment-347969231>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1ocZdOwIAvGbuIZp6emtELcLgRkDLks5s7bAvgaJpZM4QvS6k>\n> .\n>\n",
          "createdAt": "2017-11-29T19:39:29Z",
          "updatedAt": "2017-11-29T19:39:29Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr that's rather ugly - to this point only the cookie extension was of a \"you support it even if you don't advertise it\", I don't like adding more exceptions to that rule...",
          "createdAt": "2017-11-30T11:55:36Z",
          "updatedAt": "2017-11-30T11:56:50Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's been this way for some time. https://tlswg.github.io/tls13-spec/draft-ietf-tls-tls13.html#extensions\r\n\r\n> Extensions are generally structured in a request/response fashion, though some extensions are just indications with no corresponding response. The client sends its extension requests in the ClientHello message and the server sends its extension responses in the ServerHello, EncryptedExtensions, HelloRetryRequest and Certificate messages. The server sends extension requests in the CertificateRequest message which a client MAY respond to with a Certificate message. The server MAY also send unsolicited extensions in the NewSessionTicket, though the client does not respond directly to these.",
          "createdAt": "2017-11-30T12:55:26Z",
          "updatedAt": "2017-11-30T12:56:04Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's much simpler this way. As in the text EKR pointed to, extensions come in request/response pairs, so there is only one kind of flow to worry about. In your version, client certificate extensions have this weird three-phase bit which ends up meaning extra logic in implementations.\r\n\r\nThis additionally is more flexible. Suppose I am willing to send an SCT on my client certificate, but I don't have anything useful to do with the server one. (The inverse is more likely for SCTs but consider a future bit of certificate metadata.) In your version, there is no way to distinguish \"I want an SCT\" from \"I won't explode if you request one of me\".",
          "createdAt": "2017-11-30T15:22:12Z",
          "updatedAt": "2017-11-30T15:22:12Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The server sends extension requests in the CertificateRequest message which a client MAY respond to with a Certificate message. The server MAY also send unsolicited extensions in the NewSessionTicket, though the client does not respond directly to these.\r\n\r\nThat's what I meant - the Certificate Request ones are not described as \"unsolicited\".\r\n\r\n> In your version, there is no way to distinguish \"I want an SCT\" from \"I won't explode if you request one of me\".\r\n\r\nI don't think this is a useful ~~extension~~ distinction to make. But I digress.\r\n\r\nIf we make all Certificate Request extensions unsolicited, that's fine by me. But I think that it's a significant change from TLS 1.2, and should be documented as such.",
          "createdAt": "2017-11-30T18:10:03Z",
          "updatedAt": "2017-12-01T13:08:52Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "TLS 1.2 had no extension mechanism for CertificateRequest: https://tools.ietf.org/html/rfc5246#section-7.4.4",
          "createdAt": "2017-11-30T18:20:09Z",
          "updatedAt": "2017-11-30T18:20:09Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "CertificateRequest extensions were intended to be unsolicited, yeah.",
          "createdAt": "2017-11-30T23:23:51Z",
          "updatedAt": "2017-11-30T23:23:51Z"
        }
      ]
    },
    {
      "number": 1121,
      "id": "MDU6SXNzdWUyODA4MDc0OTQ=",
      "title": "Confusing Paragraph In Backward Compatibility Section",
      "url": "https://github.com/tlswg/tls13-spec/issues/1121",
      "state": "CLOSED",
      "author": "iluxonchik",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the `Appendix D. Backward Compatibility` section, you have the following paragraph:\r\n\r\n> TLS 1.x and SSL 3.0 use compatible ClientHello messages.  Servers can\r\n   also handle clients trying to use future versions of TLS as long as\r\n   the ClientHello format remains compatible and the client supports the\r\n   highest protocol version available in the server.\r\n\r\nThis sounds confusing. Saying that servers can handle clients negotiating future versions, as long as \"the client supports the highest protocol version available in the server\" doesn't seem to make a lot of sense for that purpose (also, why only the highest protocol version?). In my opinion, something like the following version is a lot clearer:\r\n\r\n> TLS 1.x and SSL 3.0 use compatible ClientHello messages.  Servers can\r\n   also handle clients trying to use future versions of TLS as long as\r\n   the ClientHello format remains compatible and there is at lest one protocol version that both the client and the server support.\r\n\r\nThis doesn't specify if the supported version must be that \"future version\" or some other version that both support, so this covers both of the cases.\r\n\r\nI will submit a pull request shortly.",
      "createdAt": "2017-12-10T12:59:54Z",
      "updatedAt": "2017-12-22T21:08:53Z",
      "closedAt": "2017-12-22T21:08:53Z",
      "comments": []
    },
    {
      "number": 1127,
      "id": "MDU6SXNzdWUyODQzNDE5NzY=",
      "title": "Clarification: outer record type checking",
      "url": "https://github.com/tlswg/tls13-spec/issues/1127",
      "state": "CLOSED",
      "author": "tmthrgd",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In cloudflare/tls-tris#47 the question of whether the `opaque_type` field should be validated was raised.\r\n> It has no MUST requirement on the receiver, so not sure if we should check it or not.\r\n\r\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-22#section-5.2 says:\r\n> opaque_type\r\n>    The outer opaque_type field of a TLSCiphertext record is always set to the value 23 (application_data) for outward compatibility with middleboxes accustomed to parsing previous versions of TLS. The actual content type of the record is found in TLSInnerPlaintext.type after decryption.\r\n\r\nCurrently the draft implementation in BoringSSL [aborts the connection with a decode_error alert](https://github.com/google/boringssl/blob/0a54e998481b0b5a8abd9717c5f7301a3b18b628/ssl/tls_record.cc#L326-L331) if the type is not application_data. While the draft implementation in cloudflare/tls-tris simply [ignores the outer record type](https://github.com/cloudflare/tls-tris/blob/8db472667bf6426b18b528f0225fa58ec5e16a6f/conn.go#L754-L772) without checking it.\r\n\r\nThis seems like a small point the specification should be clearer on. I'd suggest explicitly stating whether opaque_type must be checked (as per BoringSSL) or must be ignored (as per tls-tris).\r\n\r\n/cc @Lekensteyn",
      "createdAt": "2017-12-24T04:21:47Z",
      "updatedAt": "2017-12-24T07:10:27Z",
      "closedAt": "2017-12-24T07:10:27Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This sort of question tends to fall into a category where only a pragmatic answer is reasonable, namely that we can only enforce strict requirements once it is known that TLS 1.3 is definitively in use, which is the case here.  But I am not entirely convinced that there is value in having a normative behavior in the spec; one could make reasonable arguments for a given implementation to go either way, and the question is irrelevant for the question of whether two compliant implementations will interoprate, so it seems just to be a venue for potential disagreement with no real upside.",
          "createdAt": "2017-12-24T05:16:49Z",
          "updatedAt": "2017-12-24T05:16:49Z"
        },
        {
          "author": "tmthrgd",
          "authorAssociation": "NONE",
          "body": "@kaduk Easy, thanks for the prompt reply. This can be considered closed then.",
          "createdAt": "2017-12-24T07:10:27Z",
          "updatedAt": "2017-12-24T07:10:27Z"
        }
      ]
    },
    {
      "number": 1140,
      "id": "MDU6SXNzdWUyODc2OTcxNTI=",
      "title": "Draft Status",
      "url": "https://github.com/tlswg/tls13-spec/issues/1140",
      "state": "CLOSED",
      "author": "geraldsnm",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Is there a target date for when TLS1.3 will be a formalized protocol? It seems it's been in draft forever, and there were comments on the OpenSSL forums that they were targetting TLS1.3 support in the 2nd quarter of 2017 (I believe they were looking at adding TLS1.3 to OpenSSL 1.1 but the one caveat is they were expecting it to be out of draft by that time otherwise they were still putting off including support.\r\n\r\nSo is there a target date for a completed TLS 1.3 or at least a release candidate?\r\n\r\n",
      "createdAt": "2018-01-11T08:12:37Z",
      "updatedAt": "2018-02-15T13:57:30Z",
      "closedAt": "2018-02-15T13:56:28Z",
      "comments": [
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The spec is going through its third WGLC, and unless there is a major issue, it should be finalized soon.\r\n\r\nhttps://www.ietf.org/mail-archive/web/tls/current/msg25263.html\r\n\r\n(I guess you can consider all WGLCs as \"release candidate\", but of course it is not identical to a final RFC.)",
          "createdAt": "2018-01-19T11:18:19Z",
          "updatedAt": "2018-01-19T11:18:19Z"
        },
        {
          "author": "high3eam",
          "authorAssociation": "NONE",
          "body": "Any update since the meeting on the 26th?",
          "createdAt": "2018-01-29T13:51:23Z",
          "updatedAt": "2018-01-29T13:51:23Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The draft has completed its 3rd WGLC.  -24 was just published and I've moved it to Publication Requested.  This means that it'll now enter the IETF LC process.",
          "createdAt": "2018-02-15T13:57:30Z",
          "updatedAt": "2018-02-15T13:57:30Z"
        }
      ]
    },
    {
      "number": 1145,
      "id": "MDU6SXNzdWUyOTYxNDA1Mzc=",
      "title": "Require checking CT in encrypted data",
      "url": "https://github.com/tlswg/tls13-spec/issues/1145",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We don't require checking the TLSCipherText version and we don't say anything about the CT.",
      "createdAt": "2018-02-10T22:35:27Z",
      "updatedAt": "2018-03-03T00:29:21Z",
      "closedAt": "2018-03-03T00:29:21Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not 100% sure I understand the intent, but I do remember some previous discussions where the conclusion seemed to be that\r\n```\r\nProtocolVersion legacy_record_version = 0x0303; /* TLS v1.2 */\r\n```\r\nimplies that it is permitted for a peer receiving the structure to enforce that value, but not required for it to do so.  And that there were valid reasons why different implementors might want to go one way or the other.",
          "createdAt": "2018-02-10T23:21:33Z",
          "updatedAt": "2018-02-10T23:21:33Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Enforcing it on the content type might be worth requiring since it's somewhat semantically meaningful, when doing the trial \"decryption\" step for 0-RTT reject with HRR.",
          "createdAt": "2018-02-11T00:15:16Z",
          "updatedAt": "2018-02-11T00:15:16Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The need to enforce checking the values of _opaque_type_ and _legacy_record_version_ arises in \r\na stronger-than-usual security model [1]. Allow me to explain.\r\n\r\nLet's call the _ciphertext stream_ the sequence of bytes read from the socket. (So we're abstracting the transport layer protocol.). TLS specifies a mechanism for parsing the ciphertext stream into a sequence of ciphertexts. Specifically, each ciphertext is _delimited_ by a string (23, 0x0303, _length_), where _length_ is the number of bytes of the next ciphertext. The process by which the stream is parsed into discrete ciphertexts is usually ignored by cryptographers; the proofs, say, for AES-GCM, say nothing about how this process affects security of the protocol that uses it. Recent papers (e.g. [1,2] ) have sought to bridge this gap by accounting for parsing of the ciphertext stream in the security model. The adversary controls delivery of the ciphertext stream; It may deliver the stream in pieces (bit by bit if it likes) or out-of-order, or it may attempt to mangle a ciphertext, or just the delimiter bits, inject a ciphertext, etc.\r\n\r\nI recently finished an analysis of the TLS 1.3 record layer (draft 23). The paper is in submission, so I'm not sure how much I can say about it without violating anonymity. But one thing we show is that the precise details of how the stream is parsed into discrete ciphertexts is irrelevant for security _as long as the delimiter bits are treated as associated data for AEAD encryption/decryption_. Otherwise, security crucially depends on the details of this mechanism. Authenticating the _opaque_type_, _legacy_record_version_, and _length_ fields would allow for appealing to our general result for the record layer. However, discussions with @ekr have pointed out that this means the length of the plaintext needs to be known before encrypting, and that this may be a problem for some implementations. Since mangling the _length_ bits necessarily leads to different inputs to AEAD decryption (and thus an inauthentic ciphertext), we recommend the following:\r\n- **Option 1:** Revise Section 5.2 so that the _opaque_type_ and _legacy_record_version_ fields of _TLSCiphertext_ are used as associated data by the record protection function.\r\n\r\nHowever, we also show that, if one leaves the associated data as is (empty), then it suffices to check that the _opaque_type_ and _legacy_record_version_ fields match the values mandated by the spec (23 and 0x0303 respectively). Currently, checking the latter is optional, and the spec is silent about checking the former. This leads to another option:\r\n- **Option 2.** Revise Section 5.2 so that the receiver MUST check these fields and abort the connection if the check fails.\r\n\r\nI'm not sure what the right language is for option (2). Essentially, mangling these fields should be treated as an inauthentic ciphertext.\r\n\r\nBarring a compelling reason _not to_ authenticate one or both of these fields, we recommend option (1) being adopted. It makes the record layer more flexible and robust to changes to the spec. This permits a certain amount of \"future-proofing\" and resilience to \"creative\" implementations. More fundamentally, this is the security conservative choice, since these fields are, semantically, associated data [3]. However, option (2) should be adopted at a minimum.\r\n\r\n1. A. Boldyreva, J.P. Degabriele, K. Paterson, and M. Stam, 2013. _Security of Symmetric Encryption in the Presence of Ciphertext Fragmentation_. [(link)](https://ia.cr/2015/059)\r\n2.  M. Fischlin, F. G\u00fcnther, G.A. Marson, and K. Paterson, 2017. _Data Is a Stream: Security of Stream-Based Channels_. [(link)](https://ia.cr/2017/1191)\r\n3. P. Rogaway, 2002. _Authenticated-Encryption with Associated-Data_. [(link)](http://web.cs.ucdavis.edu/~rogaway/papers/ad.pdf)\r\n",
          "createdAt": "2018-02-15T17:09:00Z",
          "updatedAt": "2018-02-15T18:40:47Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe that option 2 is in fact fairly common.  It saves a little in complexity and allows us to do things to the record header that would be difficult otherwise (see DTLS 1.3 here for the variations on record header).\r\n\r\nI look forward to seeing the paper.  I'm interested in whether it addresses the problem for DTLS, where failure to remove protection results in discard and not connection termination.",
          "createdAt": "2018-02-15T23:12:15Z",
          "updatedAt": "2018-02-15T23:12:15Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm generally in favor of checking things on principle, and our implementation does indeed check, but this security model is puzzling to me. Is the issue that something concretely goes wrong when the value is not checked (but is ignored) or just that your security models and tools have a hard time with ignored fields.\r\n\r\n(Not that we shouldn't try to ease verification. Like I said, I'm generally in favor of checking fields anyway. But I wish to understand your motivation clearly.)",
          "createdAt": "2018-02-15T23:36:15Z",
          "updatedAt": "2018-02-15T23:36:15Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd also like to better understand the motivation.  Option 2 feels a little more natural to me if we do opt to adopt one of these proposals, but they do seem \"equivalent\" in an intuitive sense.",
          "createdAt": "2018-02-16T01:07:30Z",
          "updatedAt": "2018-02-16T01:07:30Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson, the conventional wisdom in this line of research is that the receiver should close the connection as soon as an attack is detected. Loosely speaking, our definition of ciphertext stream integrity demands that as soon as the receiver consumes a record that was _not_ sent by the peer, it should never output a valid plaintext. However, I think that our syntax is flexible enough to account for the packet dropping semantics of DTLS, but we didn't study this. Seems interesting ... I will look into it.",
          "createdAt": "2018-02-16T14:13:52Z",
          "updatedAt": "2018-02-16T14:13:52Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben and @kaduk, the attack is, in a sense, an artifact of the model. To define ciphertext stream integrity, one defines the channel as being _in sync_ if, loosely, the sequence of bits consumed by the receiver is a _prefix_ of the sequence of bits produced by the sender. The adversary wins if the channel goes _out of sync_ and the receiver ever outputs a plaintext thereafter. The attack is as follows. Say the sender outputs a string A || Y, where A = (23, 0x303, |Y|), where \"||\" means string concatenation, and |Y| denotes the length of Y. The adversary transmits A' || Y to the receiver where A' = (22, 0x303, |Y|). Since A' and A differ by a bit, the channel will be deemed out-of-sync, but Y will be decrypted as normal and the receiver will output a plaintext.\r\n\r\nWhether this constitutes a \"real\" attack is debatable; mangling the delimiter bits does not affect decryption, and so doesn't seem to violate integrity or privacy in an intuitive sense. But this is true only if down stream processing of the plaintext is independent of these values. Whether this holds or not depends on the implementation, and since this behavior is out-of-scope of the spec, it seems to me that this is a danger that should be considered.",
          "createdAt": "2018-02-16T14:36:58Z",
          "updatedAt": "2018-02-16T15:03:27Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm actually starting to warm to option 1. DTLS, unlike TLS, has diversity\nof headers, and so an attacker could for instance, switch between the short\nand long headers. I don't know of an attack on that, but it seems like it\nwould be good to defend against it. Is there a reason other than\nelegance/minimal change that people would prefer #2?\n\n\nOn Fri, Feb 16, 2018 at 6:38 AM, Christopher Patton <\nnotifications@github.com> wrote:\n\n> That being said, it seems to me that folks are in favor of option (2).\n> With your permission, I'd like to put together a pull request and implement\n> this change.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/issues/1145#issuecomment-366252443>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oa0OnqpK_6ULBZzmgbMVLdwJeEnAks5tVZLKgaJpZM4SBHHj>\n> .\n>\n",
          "createdAt": "2018-02-16T14:50:26Z",
          "updatedAt": "2018-02-16T14:50:26Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm basically ambivalent and only talked about (2) since I assumed (1) was already rejected due to the length issue. On a reread, I misread and missed that option (1) specifically excludes the length from there.\r\n\r\nEven including the length would not be catastrophic. We don't actually have variable-overhead AEADs we care about, and if we use the actual record header rather than the simulated plaintext record header as in TLS 1.2 (i.e. the length of the ciphertext, not the plaintext), I find it hard to imagine it blocking even a hypothetical future variable-overhead AEAD. Such a scheme presumably would still size the output length purely as a function of input lengths and not the contents.\r\n\r\nThough I suppose (2) means BoringSSL doesn't have to do anything because we already enforce those fields... :-)",
          "createdAt": "2018-02-16T18:11:57Z",
          "updatedAt": "2018-02-16T18:12:45Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The bigger (potential) issue is if the plaintext length isn't known prior to calling the AEAD encryption function. But perhaps this isn't actually a problem? If it isn't (and barring any other issues), I would favor authenticating all three.",
          "createdAt": "2018-02-16T19:20:29Z",
          "updatedAt": "2018-02-16T19:20:29Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Is there a reason other than\r\nelegance/minimal change that people would prefer #2?\r\n\r\nNope.  And I was thinking only of TLS and not DTLS when I formed my opinion...",
          "createdAt": "2018-02-16T19:35:37Z",
          "updatedAt": "2018-02-16T19:35:37Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If you want the plaintext length, that's probably sufficiently a nuisance that I don't think it justifies working around a limitation of the model. It's not available in, say CBC, and then you need to worry about underflow on your subtraction and everything.",
          "createdAt": "2018-02-16T19:43:07Z",
          "updatedAt": "2018-02-16T19:43:07Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "FWIW, I would vote for option #1, despite #2 being an \"easier\" path forward.",
          "createdAt": "2018-02-16T19:59:13Z",
          "updatedAt": "2018-02-16T19:59:13Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Could you clarify, @davidben? I think you mean that the implementation SHOULD know the length of the plaintext before encrypting, so authenticating the _length_ field is actually not a problem. Did I understand you right?\r\n",
          "createdAt": "2018-02-16T20:06:54Z",
          "updatedAt": "2018-02-16T20:06:54Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No, when encrypting, the implementation of course knows the length of the plaintext. When decrypting, recovering the length of the plaintext is a nuisance if one ever adds an AEAD that, say, rounds inputs up to some block size.",
          "createdAt": "2018-02-16T20:24:57Z",
          "updatedAt": "2018-02-16T20:24:57Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh I see what you're getting at. The problem we discussed with @ekr was more about encryption. Let me state the original proposal as a third option:\r\n- **Option 3.**  Revise Section 5.2 so that the _opaque_type_, _legacy_record_version_, **and** _length_ fields of _TLSCiphertext_ are used as associated data by the record protection function.\r\n\r\nThe problem is that one would need to know _length_ before calling AEAD encryption, since _length_ is one of its inputs; hence, one would need to know how much plaintext is being encrypted before beginning to encrypt. I can imagine option (1) would be useful if the plaintext were huge, and keeping it all in memory were impossible. But TLS records are short (2^14), so perhaps this particular use case may be ignored.",
          "createdAt": "2018-02-16T20:34:35Z",
          "updatedAt": "2018-02-16T21:29:20Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "CONTRIBUTOR",
          "body": "With option (1) some implementation could just do something like (since the AD is always fixed):\r\n\r\n`let ciphertext_size = self.key.encrypt2(&_iv, &[23,3,3], InputOutputBuffer::Single(&mut buf[range.start..], opktsize + 1), 0).map_err(|_|())?;`\r\n\r\nAnd:\r\n\r\n`self.key.decrypt2(&_iv, &[23,3,3], InputOutputBuffer::Single(buffer, bufferlen)).map_err(|_|())?`\r\n\r\nWhich obviously does nothing useful for security...",
          "createdAt": "2018-02-17T14:03:23Z",
          "updatedAt": "2018-02-17T14:03:23Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It sounds like folks would go for either option (1) or (3). I don't see a compelling reason to not authenticate the _length_ field, especially in light of @davidben's points. Unless there are objections (let me know if there are!), I'll be putting together a PR for option (3). It'll be up on Friday.",
          "createdAt": "2018-02-19T20:08:34Z",
          "updatedAt": "2018-02-19T20:08:34Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It sounds like we are trading off a trivial but mildly annoying piece of implementation complexity to reduce what seems to be a fairly equally trivial but mildly annoying piece of analysis complexity, right? If something this irrelevant is actually a huge analysis problem, it honestly seems to me like the analysis tools here are still immature. We seem to all agree that \"obviously\" irrelevant bits of framing are indeed irrelevant, and we do indeed act on that belief everywhere else. For instance, there's TCP framing that's not authenticated. When TLS is embedded in QUIC, we don't authenticate QUIC framing within TLS. But because this framing happens to be specified in the TLS document, the requirements change?\r\n\r\nThey're both trivial, but it seems to me the multiplicative cost to implementation complexity is higher than the analysis complexity. There are many implementations of a protocol and that code must continue to be modified and worked on in the future.",
          "createdAt": "2018-02-19T20:22:48Z",
          "updatedAt": "2018-02-19T20:27:23Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "More explicitly: I am not in favor of (1) or (3). It's not a strong preference, but I think I favor do nothing over them, and I don't hugely care between (2) and doing nothing.",
          "createdAt": "2018-02-19T20:23:53Z",
          "updatedAt": "2018-02-19T20:23:53Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Noted, thanks for clarifying :) I wouldn't characterize this has a \"huge analysis problem;\" something needs to be done, but option (2) suffices, and I would definitely go for minimizing implementation complexity. ",
          "createdAt": "2018-02-19T20:49:23Z",
          "updatedAt": "2018-02-19T20:49:23Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Incidentally, AES-GCM, ChaCha20-Poly1305, and AES-CCM already encode the input length into the authenticated portion anyway. :-)",
          "createdAt": "2018-02-19T20:52:58Z",
          "updatedAt": "2018-02-19T20:52:58Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think I'm still leaning towards (1), because it probably is useful to be\nable to check non-tampering with the DTLS framing and DTLS and TLS should\nbe the same. It's a pretty small amount of implementation complexity IMO.\n\nOn Mon, Feb 19, 2018 at 12:52 PM, David Benjamin <notifications@github.com>\nwrote:\n\n> Incidentally, AES-GCM, ChaCha20-Poly1305, and AES-CCM already encode the\n> input length into the authenticated portion anyway. :-)\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/issues/1145#issuecomment-366800169>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oToQNKi4hW5p4_E8Y1GZhEDIF5k3ks5tWd8rgaJpZM4SBHHj>\n> .\n>\n",
          "createdAt": "2018-02-19T21:17:00Z",
          "updatedAt": "2018-02-19T21:17:00Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr, you mean (3), right?  (1) doesn't add the length into the AAD, and it seems like if we are adding some AD, we might as well include the entire record header.",
          "createdAt": "2018-02-19T23:45:28Z",
          "updatedAt": "2018-02-19T23:45:28Z"
        }
      ]
    },
    {
      "number": 1148,
      "id": "MDU6SXNzdWUyOTcyMjA4ODY=",
      "title": "CH2 should have version 0303",
      "url": "https://github.com/tlswg/tls13-spec/issues/1148",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-02-14T19:42:26Z",
      "updatedAt": "2018-02-15T13:56:28Z",
      "closedAt": "2018-02-15T13:56:28Z",
      "comments": []
    },
    {
      "number": 1168,
      "id": "MDU6SXNzdWUzMDMxMTMwNzU=",
      "title": "Include signature_algorithms_cert in  S 1.4",
      "url": "https://github.com/tlswg/tls13-spec/issues/1168",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-07T14:11:00Z",
      "updatedAt": "2018-03-09T21:35:59Z",
      "closedAt": "2018-03-09T21:35:59Z",
      "comments": []
    },
    {
      "number": 1179,
      "id": "MDU6SXNzdWUzMDM5ODQyNTM=",
      "title": "Specify semantics for duplicate oid_filters oids",
      "url": "https://github.com/tlswg/tls13-spec/issues/1179",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We should say something about whether the same OID is allowed to appear multiple times in the oid_filters extension (and if it is, what the semantics are).\r\n\r\nExtracted from #1166 ",
      "createdAt": "2018-03-09T21:22:06Z",
      "updatedAt": "2018-03-12T23:06:54Z",
      "closedAt": "2018-03-12T23:06:54Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As noted in my comments, there is a natural semantic for multiple, but it seems a bit silly. I think it would be fine to forbid them, though.",
          "createdAt": "2018-03-09T21:34:00Z",
          "updatedAt": "2018-03-09T21:34:00Z"
        },
        {
          "author": "Andrei-Popov",
          "authorAssociation": "NONE",
          "body": "I think it's OK to limit to one appearance of a given OID in the oid_filters.\r\n(It probably does not matter much in terms of code complexity either way.)",
          "createdAt": "2018-03-11T16:50:22Z",
          "updatedAt": "2018-03-11T16:50:22Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm inclined to limit to one appearance of a given OID in oid_filters.",
          "createdAt": "2018-03-11T20:52:10Z",
          "updatedAt": "2018-03-11T20:52:10Z"
        }
      ]
    },
    {
      "number": 1180,
      "id": "MDU6SXNzdWUzMDM5ODUyODk=",
      "title": "(Lack of) justification for separate API for early exporter",
      "url": "https://github.com/tlswg/tls13-spec/issues/1180",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We currently have\r\n\r\n> A separate interface for the early exporter is RECOMMENDED, especially\r\n> on a server where a single interface can make the early exporter\r\n> inaccessible.\r\n\r\nwhich is a little confusing, since it doesn't note that the server has the non-early exporter available once it has generated its first flight, and doubly so since the actual motivation for separate interfaces is for security reasons of not accidentally using the early exporter when the main one is needed.\r\n\r\n(Split out from #1166)",
      "createdAt": "2018-03-09T21:26:00Z",
      "updatedAt": "2018-03-09T22:20:39Z",
      "closedAt": "2018-03-09T22:20:39Z",
      "comments": []
    },
    {
      "number": 1195,
      "id": "MDU6SXNzdWUzNDcyMzg4OTc=",
      "title": "CertificateType is specified but does not appear anywhere in the procol",
      "url": "https://github.com/tlswg/tls13-spec/issues/1195",
      "state": "CLOSED",
      "author": "shawnl",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "AFAICT there are no current implementations of Raw Public Key (RFC 7250) for TLS 1.3. \r\n\r\nThe spec is not clear how to specify that RawPublicKey is being used, as CertificateType (a uint8) does not appear in the protocol. Where can I fit this byte (preferrably) both for server certificate requests, and client certificates, or bit?\r\n\r\nsee  #722",
      "createdAt": "2018-08-03T02:39:38Z",
      "updatedAt": "2018-08-03T03:00:44Z",
      "closedAt": "2018-08-03T03:00:44Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The way this works is that you negotiate it in the client_certificate_type\nand server_certificate_type extensions, and then that tells you what is in\nthe Certtficate.\n\n\nOn Thu, Aug 2, 2018 at 7:39 PM, Shawn Landden <notifications@github.com>\nwrote:\n\n> There are no current implementations of Raw Public Key (RFC 7250) AFAICT\n> and TLS 1.3.\n>\n> The spec is not clear how to specify that RawPublicKey is being used, as\n> CertificateType (a uint8) does not appear in the protocol. Where can I fit\n> this byte (preferrably) both for server certificate requests, and client\n> certificates, or bit?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/issues/1195>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1odXyPS9vQr9k7eFc3oWmOSoS2wgzks5uM7fsgaJpZM4VtSWB>\n> .\n>\n",
          "createdAt": "2018-08-03T02:59:35Z",
          "updatedAt": "2018-08-03T02:59:35Z"
        },
        {
          "author": "shawnl",
          "authorAssociation": "NONE",
          "body": "OK thanks.",
          "createdAt": "2018-08-03T03:00:44Z",
          "updatedAt": "2018-08-03T03:00:44Z"
        }
      ]
    },
    {
      "number": 1196,
      "id": "MDU6SXNzdWUzODA5NTQ0MTU=",
      "title": "handshake protocol and record protocol are not orthogonal",
      "url": "https://github.com/tlswg/tls13-spec/issues/1196",
      "state": "CLOSED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is mostly to check my own understanding. But the \"1. Introduction\" says:\r\n\r\n> TLS consists of two primary components:\r\n\r\n> - A handshake protocol [...]\r\n\r\n> - A record protocol [...] that uses the parameters established by the handshake protocol to protect traffic between the communicating peers. [...]\r\n\r\nThis makes it sound like the record protocol does not exist before the handshake has terminated. This seems to contradict the previous TLS specs and \"5. Record Protocol\" of the TLS 1.3 spec.",
      "createdAt": "2018-11-15T01:00:38Z",
      "updatedAt": "2018-12-28T04:21:46Z",
      "closedAt": "2018-12-28T04:21:46Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The record protocol exists the whole time. I don't think the text necessarily implies there is an ordering here. It says that the record protocol *uses* outputs of the handshake. It doesn't say the record protocol *is initialized by* outputs of the handshake.",
          "createdAt": "2018-11-15T01:22:57Z",
          "updatedAt": "2018-11-15T01:22:57Z"
        }
      ]
    },
    {
      "number": 1200,
      "id": "MDU6SXNzdWU3MTUyNDEzMDk=",
      "title": "Even shorter secret names?",
      "url": "https://github.com/tlswg/tls13-spec/issues/1200",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "exporter_main_secret and resumption_main_secret strike me as not needing an adjective in the middle at all. Perhaps exporter_secret and resumption_secret?\r\n\r\nFor the exporter secret, dropping \"main\" avoids the acronym collision with the EMS extension, and there are no other secrets associated with exporters, so there's no use in designating this as the main one.\r\n\r\nFor the resumption secret, there is a potential confusion between resumption_[main_]secret and the derived PSK associated with the ticket (section {#NSTMessage}), but we don't seem to give the latter a name in the first place so I think that's fine.\r\n\r\nThis also gives us nice short KDF labels when we're able to change those: \"exporter\" and \"resumption\". (Or perhaps even \"export\" and \"resume\" if those don't fit in a hash block.)",
      "createdAt": "2020-10-06T00:05:59Z",
      "updatedAt": "2021-02-19T18:29:14Z",
      "closedAt": "2021-02-19T18:29:14Z",
      "comments": []
    },
    {
      "number": 1201,
      "id": "MDU6SXNzdWU3NDA4ODE0MzY=",
      "title": "Discuss tracking implications of session resumption",
      "url": "https://github.com/tlswg/tls13-spec/issues/1201",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In WG discussion of draft-vvv-tls-cross-sni-resumption-00, tracking implications came up. While that draft does expand the set of servers that can cross-resume, it's not a new issue. For instance, on the Web, if https://a.example and https://b.example both include a subresource to a common https://tracker.example, TLS session resumption may be used to correlate activity across the two sites.\r\n\r\nWe should have some text in mentioning that servers can correlate connections that resume, and recommend clients partitioning their session caches to align with their desired correlation boundaries.",
      "createdAt": "2020-11-11T16:03:21Z",
      "updatedAt": "2021-02-19T18:15:33Z",
      "closedAt": "2021-02-19T18:15:33Z",
      "comments": []
    },
    {
      "number": 1203,
      "id": "MDU6SXNzdWU3NDI4MzQ1NjU=",
      "title": "Handle remaining TLS 1.2 names",
      "url": "https://github.com/tlswg/tls13-spec/issues/1203",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Implementations of TLS 1.2 will remain for some time. The document renames \"master secret\" to \"main secret\", but TLS 1.2 has some naming variations that aren't in TLS 1.3. Perhaps a section in the document somewhere (maybe under Backward Compatibility since that talks about older versions) that describes some additional deltas:\r\n\r\n* \"master secret\" => \"main secret\", to align this this document\r\n* \"premaster secret\" => \"preliminary secret\" (\"pre-main secret\" sounds weird to me)\r\n* \"extended master secret\" => \"extended main secret\" (probably move rfc7627 from informative to normative and then also add to the updates line)\r\n* Also cover the variations like \"EncryptedPreMasterSecret\" and \"master_secret\", but not the KDF labels since those can't change.\r\n\r\nAnd then IANA considerations to rename extended_master_secret to extended_main_secret in the registries.",
      "createdAt": "2020-11-13T22:48:08Z",
      "updatedAt": "2021-02-19T18:20:37Z",
      "closedAt": "2021-02-19T18:20:37Z",
      "comments": []
    },
    {
      "number": 1206,
      "id": "MDU6SXNzdWU3NTgwNTcyOTk=",
      "title": "More clarity on what should be in the cookies.",
      "url": "https://github.com/tlswg/tls13-spec/issues/1206",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "propose-close"
      ],
      "body": "@kaduk writes\r\n\r\n> Do we want to add any discussion of what is stored in the cookie (other\r\n> than the RFC 2522-like address+ports and the ClientHello1 hash that\r\n> [TLS13] mentions), as mentioned in the thread at\r\n> https://mailarchive.ietf.org/arch/msg/tls/QbteFvnk1H2K9OjfHGosuG9e9Rk/ ?\r\n> I am somewhat amenable to the stance that it's more appropriately done\r\n> in 8446bis.\r\n",
      "createdAt": "2020-12-06T23:59:04Z",
      "updatedAt": "2022-03-23T09:36:40Z",
      "closedAt": "2022-03-23T09:36:40Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not aware of any changes needed here. If someone wants to advocate for these, please raise that now. I plan to close after Vinnea.",
          "createdAt": "2022-03-07T18:26:16Z",
          "updatedAt": "2022-03-07T18:26:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Discussed in Vienna. Closed.",
          "createdAt": "2022-03-23T09:36:40Z",
          "updatedAt": "2022-03-23T09:36:40Z"
        }
      ]
    },
    {
      "number": 1207,
      "id": "MDU6SXNzdWU3ODYzNTYwMTE=",
      "title": "Clarify requirements for HkdfLabel ",
      "url": "https://github.com/tlswg/tls13-spec/issues/1207",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "propose-close"
      ],
      "body": "Over in [OPAQUE](https://github.com/cfrg/draft-irtf-cfrg-opaque/issues/112), @crockeea asks the following in reference to the HkdfLabel \"Label\" field:\r\n\r\n   \"Is Label required to be non-null, or is the string required to be null-terminated?\"\r\n\r\nI couldn't find the answer immediately in RFC8446, so I felt an issue here would be useful just in case we need to clarify things.",
      "createdAt": "2021-01-14T21:33:47Z",
      "updatedAt": "2022-10-21T19:36:24Z",
      "closedAt": "2022-10-21T19:36:24Z",
      "comments": [
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If you look at the registry, https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml, you get pointed to https://tools.ietf.org/html/rfc5705 because the interface/API is the same.  Skimming that, the label is NOT \\0 terminated and it's implied that they are not NULL.  See the end of Section 4.",
          "createdAt": "2021-01-14T22:10:29Z",
          "updatedAt": "2021-01-14T22:10:29Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks! Perhaps we can add that as a note here? ",
          "createdAt": "2021-01-14T22:33:49Z",
          "updatedAt": "2021-01-14T22:33:59Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Re RFC5705, I think there's a few different things going on here. RFC5705 is the TLS exporter interface, while HkdfLabel is part of the lower-level TLS 1.3 HKDF-Expand-Label function. HKDF-Expand-Label doesn't need to mess with NUL-termination or embedded NULs to maintain injectivity. The HkdfLabel structure already has an embedded length prefix.\r\n\r\nRFC8446's implementation of the RFC5705 interface uses HKDF-Expand-Label and passes the label in directly. RFC8446 imposes no requirements on the label, so that works out fine.\r\n\r\nRFC5705 was originally specified for TLS 1.2 actually messed up and *does* have potential injectivity problems because the construction ultimately concatenates a variable-length label with a variable-length randoms + context string. RFC5705 papers over this by requiring that \"IANA MUST also verify that one label is not a prefix of any other label\". This requirement doesn't apply to HKDF-Expand-Label itself, since that's lower-level than exporters, and it needn't apply since HKDF-Expand-Label's construction doesn't have this problem. (Though I guess it does apply to the exporter interface in RFC8446 by way of using the same registry.)",
          "createdAt": "2021-01-14T22:45:31Z",
          "updatedAt": "2021-01-14T22:45:31Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood do you think anything is still required here? If so, can you propose a PR.",
          "createdAt": "2022-03-22T10:24:05Z",
          "updatedAt": "2022-03-22T10:24:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood can I close this?",
          "createdAt": "2022-07-11T22:47:49Z",
          "updatedAt": "2022-07-11T22:47:49Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm closing this.",
          "createdAt": "2022-10-21T19:36:24Z",
          "updatedAt": "2022-10-21T19:36:24Z"
        }
      ]
    },
    {
      "number": 1208,
      "id": "MDU6SXNzdWU3OTY5NDA0ODI=",
      "title": "Contradition around user_cancelled",
      "url": "https://github.com/tlswg/tls13-spec/issues/1208",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "John Mattsson writes:\r\n\r\nI think Section 6.1 Closure Alerts is a bit unclear:\r\n\r\n> First it is stated the user_canceled SHOULD be followed by close_notify\r\n> \r\n>    \"This alert SHOULD be followed by a \"close_notify\".\"\r\n> \r\n> Then it is stated that it MUST be followed by close_notify\r\n> \r\n>    \"Each party MUST send a \"close_notify\" alert before closing its write side of the connection,\r\n>    unless it has already sent some error alert.\"\r\n> \r\n> And in the same section is is stated that any data folloing user_canceled MUST be ignored.\r\n> \r\n>    \"Any data received after a closure alert has been received MUST be ignored.\"\r\n> \r\n> This seems quite contradicting to me. I don't know what the correct behavior would be,\r\n> but unless I misunderstood something, it looks like it should be addressed in rfc8446bis.\r\n\r\nI think this is a remnant of when we transitioned alerts to error by default. ",
      "createdAt": "2021-01-29T14:47:50Z",
      "updatedAt": "2022-10-24T19:43:34Z",
      "closedAt": "2022-10-24T19:43:34Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We ended up having to ignore user_cancelled alerts as if they were warning alerts (despite warning alerts being nominally removed) because JDK in TLS 1.3 sometimes sends them right before close_notify. I forget the details now, but I think it was some ad-hoc signaling of full-duplex vs. unidirectional close?\r\n\r\n(I think NSS and OpenSSL also ignore them, though it looked like that was less in reaction to someone sending them and more a holdover from warning alert handling.)",
          "createdAt": "2021-01-29T16:14:39Z",
          "updatedAt": "2021-01-29T16:14:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Going on memory only, I believe that we did treat them as fatal for some time, but were forced to remove that for compatibility reasons similar to the ones that @davidben talks about.",
          "createdAt": "2021-02-01T00:38:48Z",
          "updatedAt": "2021-02-01T00:38:48Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben So are you saying that JDK just sends them at some inappropriate point rather than in the handshake?",
          "createdAt": "2021-02-19T21:49:44Z",
          "updatedAt": "2021-02-19T21:49:44Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Following up, what if we were to just treat this as an alias for close_notify?",
          "createdAt": "2021-02-19T21:51:28Z",
          "updatedAt": "2021-02-19T21:51:28Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "IIRC, they send user_cancelled followed by close_notify, as a non-standard signal to JDKs on the other side to do bidirectional close instead of unidirectional close? But I could be misremembering.\r\n\r\nI think that means ignoring it is probably the right plan.",
          "createdAt": "2021-02-19T22:44:55Z",
          "updatedAt": "2021-02-19T22:44:55Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Discussed in 110: Preference is to ignore this.",
          "createdAt": "2021-03-08T17:15:32Z",
          "updatedAt": "2021-03-08T17:15:32Z"
        }
      ]
    },
    {
      "number": 1209,
      "id": "MDU6SXNzdWU4MDI2MDQzODc=",
      "title": "\"client authentication\" -> \"certificate-based client authentication\"",
      "url": "https://github.com/tlswg/tls13-spec/issues/1209",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The document use the term \"client authentication\" in some places where is means \"certificate-based client authentication\" and not PSK-based authentication.\r\n\r\nI think it would be good to spell out when the text only means \"certificate-based client authentication\". I think people can misunderstand. ",
      "createdAt": "2021-02-06T04:12:21Z",
      "updatedAt": "2021-02-19T18:56:04Z",
      "closedAt": "2021-02-19T18:56:04Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "fixed.",
          "createdAt": "2021-02-19T18:55:29Z",
          "updatedAt": "2021-02-19T18:55:29Z"
        }
      ]
    },
    {
      "number": 1212,
      "id": "MDU6SXNzdWU4MDY4NjIxNDI=",
      "title": "general alert",
      "url": "https://github.com/tlswg/tls13-spec/issues/1212",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "New PR needed"
      ],
      "body": "Some other protocols have a rule to override a specific error with a generic error. It would be nice to define such a rule for TLS 1.3. For instance, `internal_error` MAY be used on any cases where a specific alert is sent.",
      "createdAt": "2021-02-12T00:47:55Z",
      "updatedAt": "2022-07-11T23:06:55Z",
      "closedAt": "2022-07-11T23:06:55Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "internal_error is may not a great generic one, since it means something went wrong on the server's end. Though I do think we have too many alerts and can probably stand to merge some. illegal_parameter, decode_error, decrypt_error, unexpected_message, bad_record_mac, record_overflow, missing_extension, unsupported_extension all mean variations on the same thing (peer sent something invalid).",
          "createdAt": "2021-02-12T01:44:04Z",
          "updatedAt": "2021-02-12T01:44:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Isn't that the only thing that you ever expect to have happen?  The peer is busted?  Sure, our code has a few internal_error instances scattered around, but they are all adjacent to an assertion that crashes a debug build.\r\n\r\nThe purpose of having different types of alerts is to inform, or to at least give the recipient a clue as to where they might have gone wrong.  I don't like hard rules, because if everything were correct, we wouldn't need these alerts.  Let implementations use their own judgment in what they report and how they report it.",
          "createdAt": "2021-02-12T02:32:42Z",
          "updatedAt": "2021-02-12T02:32:42Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm against reducing the number of alerts, they are too useful in debugging interoperability issues and testing implementations for that.\r\n\r\nA wrong alert sent for specific errors in a message suggest a bug in the implementation; sometimes the bug is just \"the wrong alert is being sent\" but other times it is \"a necessary check is missing\". That missing check may or may not cause the implementation to be vulnerable, but it definitely requires deeper inspection.\r\n\r\nthe `internal_error` in practice should happen only in three situations: the hardware is failing (or it experienced a cosmic ray), the code is buggy but a self check detected it, or an earlier in code a necessary check is missing; neither of which is similar to any other alert",
          "createdAt": "2021-02-12T11:51:07Z",
          "updatedAt": "2021-02-12T11:51:07Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Having specific alerts also brings drawbacks: it constrains implementations and it can provide information to an attacker.  I'm not arguing one way or the other, just mentioning the tension.",
          "createdAt": "2021-02-12T15:25:16Z",
          "updatedAt": "2021-02-12T15:25:16Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Isn't that the only thing that you ever expect to have happen? The peer is busted?\r\n\r\nNo, not all alerts are problems in the peer. Alerts like handshake_failure, bad_certificate, etc., are not protocol errors in the peer, but cases where the two sides' preferences do not overlap. Those are worth distinguishing: they may tell administrators about a misconfiguration, or they may tell clients about a bad client certificate decision and trigger reprompts or clearing of entries in caches.\r\n\r\ninternal_error likewise is more than just debug assertions. It may happen if, say, the server is under load and wasn't able to service some signing operation. After all, HTTP 500 errors do not only happen in debug builds.\r\n\r\nIn contrast, the \"peer did something wrong\" alerts are much more ambiguous and much less useful. In my experience as an implementor, which to use is mostly random and up to interpretation. In particular, decode_error and illegal_parameter are essentially the same thing. RFC8446's formal syntax vs. invalid value distinction only came about after EKR and I tried to artificially construct a reason for them both to exist. In hindsight, that was a mistake and we should have merged them.\r\n\r\nThey're also very sensitive to particular implementation strategies. (Do you parse the message or check the message type first? How much is in the \"parser\" and how much is checked afterwards?) Because of these ambiguities, implementations, as you say, use their judgement in picking alerts. We get the worst of both worlds: the values are too coarse to usefully identify the error condition in testing or debugging, but they're fine-grained enough to still add complexity implementations and fingerprinting surface.",
          "createdAt": "2021-02-12T16:11:25Z",
          "updatedAt": "2021-02-12T16:11:25Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > Isn't that the only thing that you ever expect to have happen? The peer is busted?\r\n> \r\n> In contrast, the \"peer did something wrong\" alerts are much more ambiguous and much less useful. In my experience as an implementor, which to use is mostly random and up to interpretation. In particular, decode_error and illegal_parameter are essentially the same thing. RFC8446's formal syntax vs. invalid value distinction only came about after EKR and I tried to artificially construct a reason for them both to exist. In hindsight, that was a mistake and we should have merged them.\r\n\r\nI respectfully disagree. \r\n1. as a writer of a TLS test suite, I don't consider selected alerts to be \"mostly random\", if RFCs specify alerts, they are usually used consistently, there is also very little room for interpretation if you expect consistent behaviour\r\n2. no, `decode_error` and `illegal_parameter` are not the same, they are fundamentally different. One says that the message could not be parsed according to the schema, the other says that the values in the message are invalid.\r\n3. it's not an RFC 8446 addition, both `decode_error` and `illegal_parameter` were defined with those meanings in RFC 2246, the only thing that 8446 did, was clarify more how they should be used\r\n\r\nwhile yes, which alert you'll get for a completely random message that came from a fuzzer or when through a blender depends on implementation strategy, for constructed messages, if the implementation actually implements the checks correctly, you can create messages that will consistently output one and only one alert for any implementation strategy",
          "createdAt": "2021-02-12T17:40:37Z",
          "updatedAt": "2021-02-12T17:40:37Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So, yes, some scenarios are unambiguous and you can coherently test those scenarios. Other scenarios are ambiguous, such as getting an EncryptedExtensions with a syntax error instead of ServerHello. (Is that unexpected_message or decode_error?) And, yes, you can write tests for the unambiguous cases and accept both on the ambiguous ones.\r\n\r\nThe question is what is this test actually capturing? We care the implementation correctly rejects such-and-such invalid inputs, because that's important to the protocol working. We also care that it correctly reports \"input was invalid\" rather than \"no ciphers in common\", because that distinction is useful *outside the context of the test*.\r\n\r\nBut why might we care about `decode_error` vs `illegal_parameter`? The distinction being useful for writing tests for the distinction is meaningless. The question whether it's useful for the protocol to have different errors for these cases. My experience is no. The categories are too coarse (which field in which message of my six-message flight upset the peer?) and the ambiguous cases too common that they aren't useful for debugging. Nor would any programmatic check on the receiver care about the difference.\r\n\r\nIf complexity provides no actual benefit, we should drop it.",
          "createdAt": "2021-02-12T19:11:33Z",
          "updatedAt": "2021-02-12T19:22:34Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Regarding RFC8446, the new text came about when NSS was trying to use BoringSSL's test suite. EKR and I found our implementations disagreed on this alert all over the place. (It was added to the draft in September 2016 and ssl/test/PORTING.md in BoringSSL was August 2016.) We clarified it in an attempt to come up with a well-defined criteria to preserve the two alerts. The RFC5246 definitions are:\r\n\r\n>   illegal_parameter\r\n>      A field in the handshake was out of range or inconsistent with\r\n>      other fields.  This message is always fatal.\r\n>\r\n>   decode_error\r\n>      A message could not be decoded because some field was out of the\r\n>      specified range or the length of the message was incorrect.  This\r\n>      message is always fatal and should never be observed in\r\n>      communication between proper implementations (except when messages\r\n>      were corrupted in the network).\r\n\r\nNote that fields being out of range is captured in both. If you had to reverse-engineer a distinction between them, you'd end up with the RFC8446 criteria. (But of course I'd think that, as I had a hand in the RFC8446 text. :-) ) But it was somewhat ambiguous before then. More importantly, it's not really useful. There are two alerts only because we tried to preserve the existence of two alerts.",
          "createdAt": "2021-02-12T19:20:02Z",
          "updatedAt": "2021-02-12T19:20:02Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> So, yes, some scenarios are unambiguous and you can coherently test those scenarios. Other scenarios are ambiguous, such as getting an EncryptedExtensions with a syntax error instead of ServerHello. (Is that unexpected_message or decode_error?) And, yes, you can write tests for the unambiguous cases and accept both on the ambiguous ones.\r\n>\r\n> The question is what is this test actually capturing? We care the implementation correctly rejects such-and-such invalid inputs, because that's important to the protocol working. We also care that it correctly reports \"input was invalid\" rather than \"no ciphers in common\", because that distinction is useful _outside the context of the test_.\r\n\r\nAll depends on how you define \"protocol working\"\r\n\r\nIf you ask users, what they care for in a working implementation of TLS, they will tell you that they want it to be secure (though for majority you will most likely need to ask them what they think the lock icon represents)\r\n\r\nNow, I think we can both agree that a \"secure implementation\" means one that has no vulnerabilities; one that the attacker cannot make to reveal secret data, modify secret data, refuse service to legitimate users, and can't use to elevate their privileges.\r\n\r\nOn the code level that translates to code that is _correct._ Not only code that can handle well-formed messages in expected order, one that can decrypt received messages, but one that also _correctly handles error conditions._ When we have multiple distinct error conditions, they need to be implemented as multiple separate checks. Sure, you can write them in a single `if`, but the condition will have multiple checks, not one. If as a tester I can see distinct behaviour for those checks, and I see that they behave correctly on the boundary condition, I can be reasonably sure that that check is implemented correctly. Then I can test each such check in isolation and have high confidence that the combination of all of them will behave well enough that it won't be vulnerable.\r\n\r\n> But why might we care about `decode_error` vs `illegal_parameter`? The distinction being useful for writing tests for the distinction is meaningless. The question whether it's useful for the protocol to have different errors for these cases. My experience is no. The categories are too coarse (which field in which message of my six-message flight upset the peer?) and the ambiguous cases too common that they aren't useful for debugging. Nor would any programmatic check on the receiver care about the difference.\r\n\r\nDoes it help for interoperability? No. Does it help for debugging? Also usually no. Does it help in ensuring that the _implementations_ are secure? Yes.\r\n\r\nWhile you can argue that security of implementations is not something that standards should care about. How easy it is to implement _and verify_ that an implementation is secure is something that end users of those standards care about. Thirty years of RSA PKCS#1 vulnerabilities show what happens if that is not a consideration.\r\n\r\n(side note: I don't think fully parsing a message and only then checking if the type of it matches the expected type is a good idea, I can see it helping the attacker exploit bugs in parsers, especially for features that must be negotiated or manually enabled)",
          "createdAt": "2021-02-15T13:54:05Z",
          "updatedAt": "2021-02-15T13:54:05Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There's no need to act like I don't know about testing or error conditions. Between tlsfuzzer and BoringSSL's test suite, I think you and I have both spent plenty of time thinking about testing TLS. :-)\r\n\r\nOf course the way to test security-critical error conditions is by isolating it in a test. But the alert isn't part of the security requirement, and, when testing, the alert doesn't isolate the error: TLS's alert codes match large classes of errors. The way to isolate it is for the test input to only include one error, with other properties correct. If you've done that, you've isolated it. If you haven't, there is a bug in the test.\r\n\r\nAlerts and implementation-specific error codes _are_ useful to check that you've successfully constructed the test, and indeed we assert on both in BoringSSL's test suite. But this is merely a _rough_ check of the correctness of the _test_. It's not about the implementation, nor is it the only way to get confidence in your test. (You can have a control run without the error that should succeed. You can temporarily intentionally break an implementation and make sure your test notices. You can test the output of your testing framework to make sure it doesn't change unexpectedly.)\r\n\r\nThat means this should be an opportunistic thing, not a requirement: if it's otherwise harmless, sure, use different errors and tests can get a marginal confidence boost. But this one's not harmless. It adds complexity to implementations who need to use different codepaths for some encoding errors vs. others. It more ambiguous cases to the specification, since sometimes multiple alerts apply. It adds fingerprinting vectors because there are now multiple ways to resolve an ambiguity. (Analogously, it would be convenient for testing if error cases in PKCS#1 padding had different error codes. But there are security requirements not to do that. Yet we still can and do isolate parts of PKCS#1 padding in tests.)\r\n\r\nThis is also our strategy with BoringSSL's test suite. We'll happily assert on the internal error code, which are even more fine-grained than alerts. But if we end up folding error codes together or shifting them around, we update the test without a second thought because they're not the important part.",
          "createdAt": "2021-02-17T21:38:08Z",
          "updatedAt": "2021-02-17T21:38:08Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fine-grained alerts can help with showing the code is correct, but it's outweighed by:\r\n- Fuzzers\r\n- The fact that they constrain the implementation\r\n",
          "createdAt": "2021-02-17T22:38:35Z",
          "updatedAt": "2021-02-17T22:38:35Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben I can only say that it's not my experience, I find that specific errors help in correctness of both implementation and test cases, not just as a \"rough check of the test\". While in many cases you can create complex reproducers that test all the corner cases without looking at alerts, without specific alerts it's _harder,_ not easier.\r\nYes, original handling of PKCS#1 errors was incorrect on protocol level, the later versions fixed that. So if you want to fix issues like ROBOT you need to strictly follow the alert requirements.\r\nI don't think that \"increasing the complexity of the implementation\" is a valid argument when the differences we talk about are semantically between\r\n```\r\nif not valid_format(msg, ENCRYPTED_EXTENSIONS) || not consistent_values(msg, client_hello, server_hello):\r\n   send_fatal_alert(GENERIC_ALERT)\r\n```\r\nand\r\n```\r\nif not valid_format(msg, ENCRYPTED_EXTENSIONS):\r\n   send_fatal_alert(DECODE_ERROR)\r\nif not consistent_values(msg, client_hello, server_hello):\r\n   send_fatal_alert(ILLEGAL_PARAMETER)\r\n```\r\n\r\n> @richsalz\r\n> Fine-grained alerts can help with showing the code is correct, but it's outweighed by:\r\n> \r\n>     * Fuzzers\r\n\r\nWhich fuzzers actually check the alerts sent by the other side of the connection? For which ones specific alerts are a problem, and why?\r\n\r\n>     * The fact that they constrain the implementation\r\n\r\nhow's that a bad thing? ",
          "createdAt": "2021-02-18T12:08:01Z",
          "updatedAt": "2021-02-18T12:08:01Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Which fuzzers actually check the alerts sent by the other side of the connection? For which ones specific alerts are a problem, and why?\r\n\r\nFuzzers are also good at showing the code works with bad input.  Checking for specific alerts does some of that, but in my view fuzzers are better at finding more instances of wrong input being handled.\r\n\r\nSpecific alerts also limits how the code is implemented.  That is an onerous burden, especially when you consider non-C/C++ languages. I see that as a bad thing, I guess you see it as not bad.  Shrug, it's a matter of opinion.  I guess my opinion is informed be seeing \"needless\" bug reports against OpenSSL because the \"wrong\" alert was sent.\r\n\r\nI could imagine an implementation that parsed and verified things in a streaming manner, and would just throw an exception if anything went wrong without caring about details.\r\n",
          "createdAt": "2021-02-18T15:20:09Z",
          "updatedAt": "2021-02-18T15:20:09Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > Which fuzzers actually check the alerts sent by the other side of the connection? For which ones specific alerts are a problem, and why?\r\n> \r\n> Fuzzers are also good at showing the code works with bad input. Checking for specific alerts does some of that, but in my view fuzzers are better at finding more instances of wrong input being handled.\r\n\r\nyou didn't say how that is problematic to fuzzers\r\n \r\n> Specific alerts also limits how the code is implemented. That is an onerous burden, especially when you consider non-C/C++ languages. I see that as a bad thing, I guess you see it as not bad. \r\n\r\nthen please explain why it's a burden\r\n\r\n> Shrug, it's a matter of opinion. I guess my opinion is informed be seeing \"needless\" bug reports against OpenSSL because the \"wrong\" alert was sent.\r\n\r\nand mine in informed by finding security issues; and by working regularly with 4 different implementations\r\nand from my point of view 20 \"needless\" bugs are a small price to pay for one CVE\r\nbut I guess I care too much about security of the TLS implementations and too little about having dozens upon dozens of TLS implementations\r\n\r\n> I could imagine an implementation that parsed and verified things in a streaming manner, and would just throw an exception if anything went wrong without caring about details.\r\n\r\nand I can't imagine how throwing a specific exception in such streaming implementation is an insurmountable burden",
          "createdAt": "2021-02-18T16:11:00Z",
          "updatedAt": "2021-02-18T16:11:00Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't have anything worthwhile to add.  We bring different sets of experiences; you like specfic alerts, I don't.",
          "createdAt": "2021-02-18T16:23:56Z",
          "updatedAt": "2021-02-18T16:23:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Discussed in 110: Encourage specificity, but allow a general alert.",
          "createdAt": "2021-03-08T17:15:59Z",
          "updatedAt": "2021-03-08T17:15:59Z"
        }
      ]
    },
    {
      "number": 1214,
      "id": "MDU6SXNzdWU4MTIyNjIyNTU=",
      "title": "Implication of Recommended/Not Recommended",
      "url": "https://github.com/tlswg/tls13-spec/issues/1214",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "propose-close"
      ],
      "body": "There has been a bunch of discussion about what we should do with the Recommended Column\r\n\r\nSee, especially:\r\nhttps://mailarchive.ietf.org/arch/msg/tls/_1fPsfy6kkQwFAtX3eKeIkRKK4E/\r\n\r\nThis is a placeholder issue to workshop an approach.\r\n",
      "createdAt": "2021-02-19T19:00:31Z",
      "updatedAt": "2022-03-23T09:36:27Z",
      "closedAt": "2022-03-23T09:36:27Z",
      "comments": [
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The initial impetus for 'recommended' was to allow national ciphers to register in IANA, but to not give them the imprimateur of officially-recommended status. That's still important and we shouldn't lose that.  One possibility is to say N unless it's standards-track and any s-t document must explicitly say what value it wants.\r\n",
          "createdAt": "2021-02-19T19:07:33Z",
          "updatedAt": "2021-02-19T19:07:33Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood ",
          "createdAt": "2021-02-19T19:09:47Z",
          "updatedAt": "2021-02-19T19:09:47Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My sense is that part of the impetus here now is to be able to express that certain algorithms that are disrecommended for general use (e.g., integrity only)",
          "createdAt": "2021-02-19T19:10:39Z",
          "updatedAt": "2021-02-19T19:10:39Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In addition to whether the WG \"officially\" recommends them, we probably need to say something about what properties TLS claims to provide, and what assumptions other documents can make. Things like:\r\n\r\n* Appendix E talks about protecting endpoint identities. Obviously that is only true in so far as the AEAD isn't secretly broken, but if the non-recommended cipher suite doesn't even try, I don't think that's Appendix E's problem.\r\n* Appendix C.4's tracking protections depend on confidentiality. Since confidentiality is part of RFC8446's guarantees, C.4 shouldn't have to qualify that with \"assuming you are not in a non-recommended mode that skips confidentiality\". Same with ECH.\r\n* Say some extension document says \"compute ABC by passing XYZ into the chosen cipher suite's AEAD\". If some non-recommended cipher suite isn't even based on AEADs, the document shouldn't need to qualify the instructions.\r\n\r\nIf we allow registrations for these sorts of things, we probably want a way to say the code points are suitably out of scope. (No opinions on whether that's recommended=N, or some new third state.)",
          "createdAt": "2021-02-19T20:43:58Z",
          "updatedAt": "2021-02-19T20:43:58Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would suggest that we have four categories (names TBD)\r\n\r\n- Recommended: The WG thinks this is good for general use.\r\n  (E.g., TLS_AES_128_GCM_SHA256). Requires a standards track\r\n  RFC.\r\n  \r\n- Conditionally Recommended: The WG thinks this is good for limited\r\n  scope, as with IoT (must come with some description of that scope)\r\n  (e.g., TLS_AES_128_CCM_8_SHA256). Requires a standards\r\n  track RFC.\r\n  \r\n- Not recommended: The WG expresses no opinion on this\r\n  (e.g., TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC)\r\n  \r\n- Discouraged (?): Known not to provide the rated TLS 1.3 security\r\n  guarantees (e.g., TLS_SHA256_SHA256)\r\n\r\nWhat do people think about this? I do worry about some slop between\r\n\"conditionally recommended\" and \"discouraged\" but I think the\r\nexperts/WG can sort it out.",
          "createdAt": "2021-02-19T21:37:58Z",
          "updatedAt": "2021-02-19T21:37:58Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Works for me. (Mechanically, this means that code point allocations still need to go through some cursory TLSWG consult to get a category?)",
          "createdAt": "2021-02-19T22:14:44Z",
          "updatedAt": "2021-02-19T22:14:44Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Where do you put integrity-only ciphers?\r\n\r\nMaybe discouraged is discouraged/obsolete?",
          "createdAt": "2021-02-19T22:21:19Z",
          "updatedAt": "2021-02-19T22:21:19Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would put integrity-only in \"Discouraged\"",
          "createdAt": "2021-02-19T22:55:26Z",
          "updatedAt": "2021-02-19T22:55:26Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How would a suite end up in that state? Known broken cipher? Integrity-only? What else?",
          "createdAt": "2021-02-20T22:17:28Z",
          "updatedAt": "2021-02-20T22:17:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Maybe known weak, e.g., a curve that had less than ~128 bits of security.",
          "createdAt": "2021-02-20T22:46:12Z",
          "updatedAt": "2021-02-20T22:46:12Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Say some extension document says \"compute ABC by passing XYZ into the chosen cipher suite's AEAD\". If some non-recommended cipher suite isn't even based on AEADs, the document shouldn't need to qualify the instructions.\r\n\r\n(We almost ended up with something like that for DTLS record protection schemes, but took a different route.)\r\n\r\nIn Ekr's proposal from https://github.com/tlswg/tls13-spec/issues/1214#issuecomment-782373964 there are four categories, two of which require standards-track RFCs and thus are fairly straightforward to figure out how to get classified into, procedurally wise.  For the other two categories, davidben rightly notes that some classification procedure is needed.  The most natural procedure is \"just let the DEs decide, but that lacks the imprimateur of the WG or the IETF as a whole.  One could perhaps say that the DEs have to consult the WG list, but it gets pretty awkward if we don't leave the decision in the hands of the DEs (which would include, say, having the WG chairs judge WG consensus).  I'm pretty wary of anything that puts more IETF process in the way of external registrations than the current specification-required review, due to the risk of being too high a bar to get used in practice.",
          "createdAt": "2021-02-23T06:24:12Z",
          "updatedAt": "2021-02-23T06:24:12Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Mon, Feb 22, 2021 at 10:24 PM kaduk <notifications@github.com> wrote:\n\n> Say some extension document says \"compute ABC by passing XYZ into the\n> chosen cipher suite's AEAD\". If some non-recommended cipher suite isn't\n> even based on AEADs, the document shouldn't need to qualify the\n> instructions.\n>\n> (We almost ended up with something like that for DTLS record protection\n> schemes, but took a different route.)\n>\n> In Ekr's proposal from #1214 (comment)\n> <https://github.com/tlswg/tls13-spec/issues/1214#issuecomment-782373964>\n> there are four categories, two of which require standards-track RFCs and\n> thus are fairly straightforward to figure out how to get classified into,\n> procedurally wise. For the other two categories, davidben rightly notes\n> that some classification procedure is needed. The most natural procedure is\n> \"just let the DEs decide, but that lacks the imprimateur of the WG or the\n> IETF as a whole. One could perhaps say that the DEs have to consult the WG\n> list, but it gets pretty awkward if we don't leave the decision in the\n> hands of the DEs (which would include, say, having the WG chairs judge WG\n> consensus). I'm pretty wary of anything that puts more IETF process in the\n> way of external registrations than the current specification-required\n> review, due to the risk of being too high a bar to get used in practice.\n>\nAgreed. However, note that it's possible to reclassify something, too. I\nwould suggest that we leave it in the hands of the DEs with the potential\nof appeal to the WG if you don't like that answer. You'd have your\nregistration in any case, so these could proceed in parallel.\n\n-Ekr\n",
          "createdAt": "2021-02-23T20:35:18Z",
          "updatedAt": "2021-02-23T20:35:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner confirming your comment during IETF 110: this is a problem for RFC8447, right?",
          "createdAt": "2021-03-08T17:18:23Z",
          "updatedAt": "2021-03-08T17:18:23Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Recommended/Not Recommended/Discouraged map neatly into implementation's client or server API:  recommended is enabled by default, implemented-but-not recommended can be enabled explicitly by the user of the API; and discouraged cannot be enabled at all (probably should not be included in any production implementation).\r\n\r\n\"conditionally recommended\" is problematic from an API perspective though, because the range of conditions could be so vast.\r\n\r\nIt's easy to imagine an implementer just lumping \"conditionally recommended\" in with \"recommended\", which would be a bad outcome because they should not be enabled by default.  A better outcome would be to have them lumped in with \"not recommended\".\r\n\r\nGiven that it's hard to see a functional difference, do we actually need the \"conditionally recommended\" status?  or can we just go with recommended/not recommended/discouraged?  that would result in a simpler IANA registry.",
          "createdAt": "2021-03-08T18:13:52Z",
          "updatedAt": "2021-03-08T18:16:26Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I like your mapping, @dkg.  I think \"conditionally\" is ifdef in the source.",
          "createdAt": "2021-03-08T18:26:30Z",
          "updatedAt": "2021-03-08T18:26:30Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@richsalz `ifdef` in the source sounds good to me for \"conditionally recommended\" -- but it's not sufficient.  if the `#define` is set, should the algorithm in question be enabled by default?  or should a runtime switch still be required?\r\n\r\nif the answer is that a runtime switch is still required, that puts \"conditionally recommended\" in some sense *below* \"not recommended\" -- because it needs to be explicitly enabled both at build and runtime, whereas not recommended might only need the runtime switch.  OTOH, if the answer is that no runtime switch is required, then you're going to have distributed binary TLS stacks that automatically enable things that might be inappropriate for their application.",
          "createdAt": "2021-03-08T19:51:58Z",
          "updatedAt": "2021-03-08T19:51:58Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm thinking like an OpenSSL developer, you're thinking like an application developer.  I think.",
          "createdAt": "2021-03-08T20:04:14Z",
          "updatedAt": "2021-03-08T20:04:14Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is going to be resolved in 8447-bis, I think, so I propose to close this,",
          "createdAt": "2022-03-07T17:55:10Z",
          "updatedAt": "2022-03-07T17:55:10Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Discussed in Vienna. Closed.",
          "createdAt": "2022-03-23T09:36:27Z",
          "updatedAt": "2022-03-23T09:36:27Z"
        }
      ]
    },
    {
      "number": 1216,
      "id": "MDU6SXNzdWU4MTIzNzM2MjE=",
      "title": "Double check issues filed in ekr/ repo.",
      "url": "https://github.com/tlswg/tls13-spec/issues/1216",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "This is a reminder to make sure all got closed or copied over.",
      "createdAt": "2021-02-19T21:43:59Z",
      "updatedAt": "2022-10-21T21:04:12Z",
      "closedAt": "2022-10-21T21:04:11Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done.",
          "createdAt": "2022-10-21T21:04:11Z",
          "updatedAt": "2022-10-21T21:04:11Z"
        }
      ]
    },
    {
      "number": 1219,
      "id": "MDU6SXNzdWU4MTQ5NjY2NDg=",
      "title": "Self-encoded lengths that don't match",
      "url": "https://github.com/tlswg/tls13-spec/issues/1219",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "As far as I can tell, there is no requirement in RFC 8446 for receiving endpoints to verify that the self-encoded length on outer headers corresponds to the self-encoded lengths of component items. Mangled extensions that do this kind of thing are likely going to end up with decoding errors, but if the outer length is too long many implementations might survive, assuming they support the extension.\r\n\r\nIf it's not too onerous on implementations, it would be good to require a fatal alert if receivers detect this condition, to make behavior more predictable and ease debugging.",
      "createdAt": "2021-02-24T00:53:12Z",
      "updatedAt": "2021-10-25T20:59:37Z",
      "closedAt": "2021-10-25T20:59:37Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Which lengths are you referring to? I can't think of any length prefixes in RFC8446 that receivers are allowed to ignore. Are you saying that, if the length prefix on `opaque extension_data<0..2^16-1>` is longer than the structure inside it, receivers are allowed to ignore trailing data? I'd consider any implementation that allowed this non-compliant. The spec often contains text like:\r\n\r\n>    The body of the \"certificate_authorities\" extension consists of a\r\n>   CertificateAuthoritiesExtension structure.\r\n\r\nIt doesn't say the body has a prefix of a CertificateAuthoritiesExtension structure.\r\n\r\n(And, of course, if the `extension_data` length prefix is too short, you'll hit the end of `extension_data` before you finish parsing the inner structure at all.)",
          "createdAt": "2021-02-24T01:00:21Z",
          "updatedAt": "2021-02-24T01:00:47Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "Obviously, bogus extension_data lengths are wrong, but there's no enforcement mechanism. If receivers MUST check that these match and abort if they don't, that would have the benefits described above. I think we're agreeing that ignoring trailing data would be wrong, but it's not actually written anywhere AFAICT.\r\n\r\nEqually obviously, this is not the end of the world and TLS has apparently operated fine like this for a long time. But it's also the kind of problem that QUIC has spent a fair amount of energy to avoid.\r\n\r\n",
          "createdAt": "2021-02-24T01:16:24Z",
          "updatedAt": "2021-02-24T01:16:24Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it is already the case that receivers MUST check this. Receivers that don't are non-compliant. It's written somewhat implicitly by way of saying the body \"consists of\" such-and-such structure, but I think the most reasonable interpretation of this would be that you don't allow trailing data.\r\n\r\nI'd support adding a sentence or two to the section 4.2 to clarify how extension definitions work in general. Though I've never heard of an implementation that misinterpreted this and did the wrong thing.",
          "createdAt": "2021-02-24T01:45:22Z",
          "updatedAt": "2021-02-24T01:45:22Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agree and @davidben, I don't know of any implementation that allows extending a field with arbitrary data and then ignoring it. They all do \"I have 'n' bytes and am expecting a CertificateList\" and if they finish with data left over it's a parse error.",
          "createdAt": "2021-02-24T15:51:41Z",
          "updatedAt": "2021-02-24T15:51:41Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "If the consensus is that this is a non-problem I am happy to have the editors close the issue.",
          "createdAt": "2021-02-24T16:22:51Z",
          "updatedAt": "2021-02-24T16:22:51Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "> I think it is already the case that receivers MUST check this. Receivers that don't are non-compliant. It's written somewhat implicitly by way of saying the body \"consists of\" such-and-such structure, but I think the most reasonable interpretation of this would be that you don't allow trailing data.\r\n\r\nIt's entirely possible that I missed a MUST in 8446 somewhere, but I couldn't find it.\r\n\r\n\r\n",
          "createdAt": "2021-02-24T16:24:00Z",
          "updatedAt": "2021-02-24T16:24:00Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think a sentence to make this clear would be harmful.\n\n\nOn Wed, Feb 24, 2021 at 8:24 AM martinduke <notifications@github.com> wrote:\n\n> I think it is already the case that receivers MUST check this. Receivers\n> that don't are non-compliant. It's written somewhat implicitly by way of\n> saying the body \"consists of\" such-and-such structure, but I think the most\n> reasonable interpretation of this would be that you don't allow trailing\n> data.\n>\n> It's entirely possible that I missed a MUST in 8446 somewhere, but I\n> couldn't find it.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/issues/1219#issuecomment-785196630>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAIPLIK6MXLLCO7EQRHI753TAUR3HANCNFSM4YDQDESQ>\n> .\n>\n",
          "createdAt": "2021-02-24T17:50:01Z",
          "updatedAt": "2021-02-24T17:50:01Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How's https://github.com/tlswg/tls13-spec/pull/1220?",
          "createdAt": "2021-02-24T19:18:22Z",
          "updatedAt": "2021-02-24T19:18:22Z"
        }
      ]
    },
    {
      "number": 1221,
      "id": "MDU6SXNzdWU4MjM3Nzc2MzI=",
      "title": "Unsolicited extensions",
      "url": "https://github.com/tlswg/tls13-spec/issues/1221",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per @kaduk:\r\nApparently Johnathan Hoyland thinks that the current text allows for unsolicited non-request-response extensions unless specifically forbidden (e.g., for HRR), but Ekr and I think they are forbidden. Perhaps this should be clarified.",
      "createdAt": "2021-03-06T23:24:40Z",
      "updatedAt": "2021-03-08T14:45:12Z",
      "closedAt": "2021-03-08T14:45:12Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This text seems pretty clear:\r\n```Implementations MUST NOT send extension responses\r\nif the remote endpoint did not send the corresponding extension requests,\r\nwith the exception of the \"cookie\" extension in the HelloRetryRequest.\r\nUpon receiving such an extension, an endpoint MUST abort the handshake with an\r\n\"unsupported_extension\" alert.\r\n```\r\n\r\nTrying and failing to recall the argument for why it's not.",
          "createdAt": "2021-03-06T23:32:13Z",
          "updatedAt": "2021-03-06T23:32:13Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "IIRC (noting that I'm not sure I ever fully understood it) the argument here is that for a one-way extension that has no response, there is no \"corresponding extension request\" and so the prohibition here does not apply.",
          "createdAt": "2021-03-06T23:55:29Z",
          "updatedAt": "2021-03-06T23:55:29Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I see. I don't think that's correct. @jhoyla?",
          "createdAt": "2021-03-07T00:48:32Z",
          "updatedAt": "2021-03-07T00:48:32Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I.e., we just don't allow those in the response messages, and if you want one, you need an empty extension in the request to allow it.",
          "createdAt": "2021-03-07T00:59:53Z",
          "updatedAt": "2021-03-07T00:59:53Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> and if you want one, you need an empty extension in the request to allow it.\r\n\r\ni agree.  I thought we had at least one of those (certstatus?) but I can't recall details without looking at the RFC.  I also think the 'bitmask\" doc from Yoav was intended to help address this kind of thing.",
          "createdAt": "2021-03-07T14:51:16Z",
          "updatedAt": "2021-03-07T14:51:16Z"
        },
        {
          "author": "jhoyla",
          "authorAssociation": "NONE",
          "body": "The text doesn't explicitly disallow extensions that don't follow a request / response pattern, so I don't think it's clear why someone couldn't define an extension that _only_ appears in the Encrypted Extensions say. The cookie extension, IIUC is a request / response style extension, so the exception text makes sense. It doesn't let you draw conclusions about strictly signalling extensions, for example. \r\nAnything that's not explicitly disallowed is, to my mind, valid. It doesn't make it a good idea, or likely to be adopted, but it's not prima facie invalid. ",
          "createdAt": "2021-03-07T23:30:35Z",
          "updatedAt": "2021-03-07T23:30:35Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK. I see how you get that out of the text, but I also don't think it is what was intended. Rather, indications are just requests without responses and so are subject to the same rules. Do you want to speak up for your interpretation as being good, or are you just arguing that the text isn't clear.\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-03-07T23:59:40Z",
          "updatedAt": "2021-03-08T00:00:23Z"
        },
        {
          "author": "jhoyla",
          "authorAssociation": "NONE",
          "body": "The latter, the text isn't clear. Not obvious to me why the restriction is necessary though. The client can just ignore extensions it doesn't understand, no?",
          "createdAt": "2021-03-08T14:07:54Z",
          "updatedAt": "2021-03-08T14:07:54Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It could, but that's just not how things are specified..\n\nOn Mon, Mar 8, 2021 at 6:08 AM jhoyla <notifications@github.com> wrote:\n\n> The latter, the text isn't clear. Not obvious to me why the restriction is\n> necessary though. The client can just ignore extensions it doesn't\n> understand, no?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/issues/1221#issuecomment-792779024>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAIPLIMVKOJGTDGRJNSP4OTTCTK4TANCNFSM4YXG3DTA>\n> .\n>\n",
          "createdAt": "2021-03-08T14:44:52Z",
          "updatedAt": "2021-03-08T14:44:52Z"
        }
      ]
    },
    {
      "number": 1223,
      "id": "MDU6SXNzdWU4MjQ3OTUxOTQ=",
      "title": "HRR consistency requirements are too strict",
      "url": "https://github.com/tlswg/tls13-spec/issues/1223",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "propose-close"
      ],
      "body": "We ran into this with ECH over in https://github.com/tlswg/draft-ietf-tls-esni/issues/358. RFC8446, section 4.1.2 says:\r\n\r\n> The client will also send a ClientHello when the server has responded to its ClientHello with a HelloRetryRequest. In that case, the client MUST send the same ClientHello without modification, except as follows:\r\n>\r\n> * If a \"key_share\" extension was supplied in the HelloRetryRequest, replacing the list of shares with a list containing a single KeyShareEntry from the indicated group.\r\n>\r\n> * Removing the \"early_data\" extension (Section 4.2.10) if one was present.  Early data is not permitted after a HelloRetryRequest.\r\n>\r\n> * Including a \"cookie\" extension if one was provided in the HelloRetryRequest.\r\n>\r\n> * Updating the \"pre_shared_key\" extension if present by recomputing the \"obfuscated_ticket_age\" and binder values and (optionally) removing any PSKs which are incompatible with the server's indicated cipher suite.\r\n>\r\n> * Optionally adding, removing, or changing the length of the \"padding\" extension [RFC7685].\r\n>\r\n> * Other modifications that may be allowed by an extension defined in the future *and present in the HelloRetryRequest*. [emphasis mine]\r\n\r\nhttps://tools.ietf.org/html/rfc8446#section-4.1.2\r\n\r\nI think this last rule was perhaps a little too strict. ECH as it is currently written violates this rule. If we adopt something like https://github.com/tlswg/draft-ietf-tls-esni/issues/374, we'll avoid this, but this text was perhaps too strict. It precludes us defining any other extension that needs to change on all HRRs. Indeed, it's a little telling that, of the five changeable extensions currently defined, only two (key_share and cookie) meet the text's own general rule!\r\n\r\nOne thing of note is that, while the text only includes rules for the client, not the server, at least one implementation (LibreSSL) interpreted this to mean they should enforce strict consistency. So if we change this, they'll need to be updated. (Relatedly, I think we under-describe HRR handling on the server in general, but I'll file a separate ticket to track that.)",
      "createdAt": "2021-03-08T17:40:43Z",
      "updatedAt": "2023-03-11T22:18:52Z",
      "closedAt": "2023-03-11T22:18:52Z",
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "the big problem with not requiring strict consistency between 1st and 2nd CH is that it then leaves up to implementation which CH is authoritative when the values don't match",
          "createdAt": "2021-03-09T13:59:21Z",
          "updatedAt": "2021-03-09T13:59:21Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So don't do that.  The second is the only one that matters.  The first only matters to the extent that the client might be induced to change what it sends in the second.",
          "createdAt": "2021-03-09T14:12:33Z",
          "updatedAt": "2021-03-09T14:12:33Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agree with Martin.\r\n",
          "createdAt": "2021-03-09T14:16:05Z",
          "updatedAt": "2021-03-09T14:16:05Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, it's a little trickier than that. See #1224. I'll expand in that bug on some scenarios where you can't use the second.\r\n\r\nEither way, the spec already *currently* it up to the implementation because it does not ask the server to enforce anything. Plus this bug is about the last bullet point, concerning unknown extensions, which the server would not be paying attention to in the first place. From the discussions in IETF 109, it seemed folks generally agreed this behavior was too strict. (It descends from an earlier, broken construction where stateless servers reconstructed CH1 from CH2.)",
          "createdAt": "2021-03-09T15:42:02Z",
          "updatedAt": "2021-03-09T15:42:02Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "while the standard doesn't require the server to enforce, it does permit the server to enforce it, and there are implementations that do enforce that",
          "createdAt": "2021-03-09T15:59:43Z",
          "updatedAt": "2021-03-09T15:59:43Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://www.bikeconnection.net/articles/bike-rentals-pg66.htm",
          "createdAt": "2022-11-10T09:49:11Z",
          "updatedAt": "2022-11-10T09:49:11Z"
        }
      ]
    },
    {
      "number": 1224,
      "id": "MDU6SXNzdWU4MjQ4MTMxMzk=",
      "title": "HRR server behavior is underspecified",
      "url": "https://github.com/tlswg/tls13-spec/issues/1224",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "propose-close"
      ],
      "body": "There's probably room here to describe HRR server behavior more specifically. Although the client is required to align the first and second ClientHello (see https://github.com/tlswg/tls13-spec/issues/1223), there is no text saying how the server. Even so, depending on how the server implements HRR, it may need to check some subset of consistency between the two.\r\n\r\nWhen you make each decision is also tricky. Do you look at the first ClientHello? The second? Both, checking that you came to the right answer? Which binders do you check? Depending on implementation properties (stateful vs. stateless, APIs to allow the caller to inspect the ClientHello, psk_ke linking the PSK and key_share decisions together, etc.), you may need to pick different options here.\r\n\r\nThis is probably worth some text to describe the space of valid implementation decisions.",
      "createdAt": "2021-03-08T18:02:10Z",
      "updatedAt": "2023-03-11T22:18:53Z",
      "closedAt": "2023-03-11T22:18:52Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since this came up in #1223, some scenarios where things get messy:\r\n\r\n---\r\n\r\n**server_name-dependent preferences**\r\n\r\nSuppose the server has different cipher suite or curve preferences based on server_name. That means it cannot make the HRR decision without looking at the server_name. Such a server must dispatch on the server_name. If it ignores or checks the second server_name, that's fine. But it cannot redispatch or risk getting itself in an inconsistent state.\r\n\r\n**psk_ke**\r\n\r\nSuppose the server implements psk_ke (please don't) and only implements X25519. Now suppose it gets the following ClientHello:\r\n* PSK: 12345\r\n* supported_groups: P-256, X25519\r\n* key_share: P-256\r\n\r\nIf the server does not resume, it must HRR to request a different curve. If it does resume, it must _not_ request a second curve. That means the server _must_ make and commit to the resumption decision on the first ClientHello.\r\n\r\n**ClientHello inspection**\r\n\r\nSuppose the server is stateful and offers the application a chance to [inspect the ClientHello](https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_client_hello_cb.html) and reconfigure the connection. There is an implicit promise to the application: the ClientHello you saw is the one that will be used. Such a server then has two choices:\r\n\r\n1. Make _all_ decisions on the first ClientHello. The second ClientHello is merely an inefficient ClientKeyExchange.\r\n2. Tell both ClientHellos to the application and hope it figures it out. This is fragile since HRRs are rare, so applications may not handle it. It also may is not backwards-compatible if the API predates TLS 1.3.\r\n\r\n**PSK binders**\r\n\r\nSuppose the server makes most decisions on the first ClientHello. Must it still re-check the second PSK binder? Probably, but I don't think we ever wrote it down anywhere.\r\n\r\n**Stateless**\r\n\r\nSuppose the server is stateless. Now some things are reversed and others aren't. The ClientHello inspection issue _now_ points to option (2) because a truly stateless HRR API will interpret the two ClientHellos as independent connections. Moreover, making decisions on or even looking at the first ClientHello is tricky because they must be pickled into the HRR cookie.)\r\n\r\nAt the same time, the protocol considerations still apply, so some decisions must be made on the first ClientHello. Those must be recomputed and rechecked on the second ClientHello. Note even a strict ClientHello consistency check is insufficient for a stateless server because a stateless server may have changed its configuration between the two connections.\r\n\r\n---\r\n\r\nThe specification doesn't go into any of this, so we're left with a wide space of HRR handling, some of which are more risky than others. I think we should decide more clearly what the HRR rules are and offer more concrete guidance here. (And then redo this for TLS 1.4 because I think this design was clearly too complex to manage. :-) )",
          "createdAt": "2021-03-09T16:04:40Z",
          "updatedAt": "2021-03-09T16:04:40Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben are you able to produce the minimum PR that clarifies what we agree and doesn't make anything worse?",
          "createdAt": "2022-07-11T23:10:17Z",
          "updatedAt": "2022-07-11T23:10:17Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have to admit, it's now been over a year since I last thought about this and don't remember any of what we decided to do here. I think I originally filed this after a bunch of mailing list threads or so where it was clear that HRR was confusing? But I don't remember anymore what, if anything, we concluded from that.",
          "createdAt": "2022-07-25T18:54:20Z",
          "updatedAt": "2022-07-25T18:54:20Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm tempted to just close this issue and 1223. The idea here was to just do whatever clarifications were easy, and I think we've now demonstrated this is not easy.",
          "createdAt": "2022-10-21T21:14:17Z",
          "updatedAt": "2022-10-21T21:14:17Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Per the discussion in LHR I plan to close this with the next draft.",
          "createdAt": "2022-11-10T09:49:02Z",
          "updatedAt": "2022-11-10T09:49:02Z"
        }
      ]
    },
    {
      "number": 1225,
      "id": "MDU6SXNzdWU4MzMxMTczMTI=",
      "title": "Cache timing warning",
      "url": "https://github.com/tlswg/tls13-spec/issues/1225",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [
        "PR Pending"
      ],
      "body": "Ben Schwartz writes:\r\n\r\n> RFC8446 (and bis) currently describe a \"cache timing\" attack on use of Early Data:\r\n>\r\n>   *  Exploiting cache timing behavior to discover the content of 0-RTT\r\n>     messages by replaying a 0-RTT message to a different cache node\r\n>      and then using a separate connection to measure request latency,\r\n>      to see if the two requests address the same resource.\r\n>\r\n> In fact, many users of TLS (e.g. HTTPS, DNS-over-TLS) are even more vulnerable to cache-based attacks:\r\n>* The attacker can probe the cache without triggering a cache fill (Cache-Control: only-if-cached, RD=0)\r\n>* The attacker can observe the remaining cache lifetime, which indicates when cache fill occurred (coincident with the > replay or not), and when a resource will expire out of the cache (best time to try the attack).\r\n>\r\n> I think we should probably broaden the attack description. e.g.\r\n>\r\n>      *  Exploiting cache behavior to discover the content of 0-RTT messages\r\n>         by locating a cache node that does not have a resource of interest\r\n>        cached, replaying a 0-RTT message to it, and then using a separate\r\n>         connection to check if the resource was added to the cache.\r\n>\r\n> I also wonder if we should strengthen the advice about replay defenses.",
      "createdAt": "2021-03-16T19:11:11Z",
      "updatedAt": "2022-10-24T19:47:16Z",
      "closedAt": "2022-10-24T19:47:16Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This isn't strictly specific to 0-RTT. A network attacker can already direct the client's connection to any one cache node and then observe side effects. The main thing enabled by replayability is trying the attack multiple times (up to allowed ticket_age skew) for more reliable signal.",
          "createdAt": "2021-03-16T19:16:26Z",
          "updatedAt": "2021-03-16T19:16:39Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "CONTRIBUTOR",
          "body": "True, and worth clarifying.  A really strong network attacker could even prevent all other access to that cache node, likely giving them several minutes to enumerate different resources, looking for the one the user requested before it expires.",
          "createdAt": "2021-03-16T19:23:18Z",
          "updatedAt": "2021-03-16T19:23:18Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I guess, conversely, a weak network attacker that can see the traffic, but not interfere with it, might not be able to redirect the client's connection, but 0-RTT would enable them to replay it elsewhere.",
          "createdAt": "2021-03-16T19:26:04Z",
          "updatedAt": "2021-03-16T19:26:04Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We're looking at incremental change here. @davidben do you have anything you want to add?",
          "createdAt": "2022-10-21T20:41:27Z",
          "updatedAt": "2022-10-21T20:41:27Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think past-me was just noting this isn't _really_ 0-RTT-specific. If a user's request has side effects you can observe later, you inherently can observe them. And if those side effects are more interesting if you target a particular server instance you use, a network attacker can always direct you traffic there. From what I can see, what's specific to 0-RTT is just:\r\n\r\n* Less capable network attackers may be able to mount this attack. (Redirecting traffic requires some ability to intercept traffic, while just replaying an extra copy only requires you to observe it.)\r\n* 0-RTT replay allows you to repeat the attack on the same input, which might refine any probabilistic aspects of the attack.\r\n\r\nNot sure what implications this has on text. Perhaps something like...\r\n\r\n> - Amplifying existing information leaks caused by side effects like\r\n> caching. An attacker could learn information about the content of a\r\n> 0-RTT message by replaying it to some cache node that has not cached\r\n> some resource of interest, and then using a separate connection to check\r\n> whether that resource has been added to the cache. This could be repeated\r\n> with different cache nodes as often as the 0-RTT message is replayable.",
          "createdAt": "2022-10-21T20:54:06Z",
          "updatedAt": "2022-10-21T20:54:06Z"
        }
      ]
    },
    {
      "number": 1226,
      "id": "MDU6SXNzdWU4NTg3MDQ5MDk=",
      "title": "Timing of sending NST from the server",
      "url": "https://github.com/tlswg/tls13-spec/issues/1226",
      "state": "CLOSED",
      "author": "ueno",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I came across this argument: while 4.6.1 currently says:\r\n\r\n> At any time after the server has received the client Finished message, it MAY send a NewSessionTicket message.\r\n\r\nit is possible that the server already has sufficient information to construct a session ticket, when it sends the server Finished message, and thus it could send NST along with the first Application Data without waiting for the client Finished message.\r\n\r\nI am wondering if this behavior has any security implication, or the above statement could be relaxed to:\r\n\r\n> At any time after the server has sent the server Finished message, it MAY send a NewSessionTicket message.\r\n\r\n?",
      "createdAt": "2021-04-15T09:48:15Z",
      "updatedAt": "2021-07-26T13:16:57Z",
      "closedAt": "2021-07-26T13:16:57Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good question.  We know that - absent extensions - some servers are able to predict the client Finished and therefore construct the necessary information needed to construct a ticket.  Servers that don't use state offload can even send tickets prior to receiving the client Finished even when they require client authentication.  In both cases, this uses 0.5-RTT data for sending the ticket and as 0.5-RTT is often under-utilized that can be a fairly large performance gain.  I'd support the proposed change.",
          "createdAt": "2021-04-19T04:21:39Z",
          "updatedAt": "2021-04-19T04:21:39Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this *precise* change is a little problematic because it leaves the implementor confused about whether this is possible.\r\n\r\nCombined with a description of the situation (an expanded version of what @martinthomson has here) I agree this would be valuable.\r\n",
          "createdAt": "2021-04-19T15:54:28Z",
          "updatedAt": "2021-04-19T15:54:28Z"
        },
        {
          "author": "ueno",
          "authorAssociation": "NONE",
          "body": "Sorry, I didn't realize that it is already covered by the Notes in the same section: \"Note: Although the resumption master secret depends on the client's second flight, a server which does not request client authentication MAY compute the remainder of the transcript independently and then send a NewSessionTicket immediately upon sending its Finished rather than waiting for the client Finished.\" I wonder if it is still worthwhile to mention the stateful case as pointed by @martinthomson.",
          "createdAt": "2021-07-11T14:42:59Z",
          "updatedAt": "2021-07-11T14:42:59Z"
        }
      ]
    },
    {
      "number": 1227,
      "id": "MDU6SXNzdWU5MDk5MzYwMjY=",
      "title": "PSK binder hash function is ambiguously-specified and potentially simplifiable",
      "url": "https://github.com/tlswg/tls13-spec/issues/1227",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "The `Transcript-Hash` function is defined using a function `Hash`.\r\nhttps://tlswg.org/tls13-spec/draft-ietf-tls-rfc8446bis.html#name-the-transcript-hash\r\n\r\nThis is presumably the KDF hash of the cipher suite, but this doesn't seem to be written down anywhere. The Key Schedule section says:\r\n\r\nhttps://tlswg.org/tls13-spec/draft-ietf-tls-rfc8446bis.html#name-key-schedule\r\n> The Hash function used by Transcript-Hash and HKDF is the cipher suite hash algorithm. \r\n\r\nI can't find corresponding text in the various other calls. We could define this globally in the Transcript Hash section, and indeed that fits with the claim that \"In general, implementations can implement the transcript by keeping a running transcript hash value based on the negotiated hash.\"\r\n\r\nBut then we have another problem...\r\n\r\nThe PSK binder is also defined in terms of Transcript-Hash. Like the other text, it does not define what Hash is.\r\nhttps://tlswg.org/tls13-spec/draft-ietf-tls-rfc8446bis.html#name-psk-binder\r\n\r\nBut the default definition doesn't work for the client, in two different ways:\r\n\r\n* At the first ClientHello, the cipher suite hash algorithm isn't even known yet, so we cannot possibly use that one.\r\n* At the second ClientHello, we have a cipher suite hash algorithm, but it may not necessarily match the PSK's one.\r\n\r\nTo keep all everything injective, both need to be the PSK hash. Though this results in another subtlety which, while not ambiguous, maybe we should change:\r\n\r\nAt the second ClientHello, there are two uses of Hash. There's the overall hash, which is stuck being the PSK one, and there's the funny [message_hash transformation](https://tlswg.org/tls13-spec/draft-ietf-tls-rfc8446bis.html#the-transcript-hash). That one being the PSK's hash breaks the whole notion of the transcript being this append-only thing and is a huge pain. To compensate, we allowed the second ClientHello to [drop any mismatched PSKs](https://tlswg.org/tls13-spec/draft-ietf-tls-rfc8446bis.html#name-client-hello).\r\n\r\nThat works, but it's a pretty weird edge case and easily a source of bugs. What if we changed it to be the negotiated hash? It won't affect interop, since this PSK is guaranteed not to be negotiated. The client may as well fill in all zeros for the binder. It's also still injective, as long as everyone agrees that's the one we use. The transcript includes an unhashed HelloRetryRequest immediately after message_hash, so that fixes the choice of hash. (Plus we only have two hashes right now and they're different sizes...)",
      "createdAt": "2021-06-02T22:32:29Z",
      "updatedAt": "2022-10-24T19:48:36Z",
      "closedAt": "2022-10-24T19:48:36Z",
      "comments": []
    },
    {
      "number": 1232,
      "id": "MDU6SXNzdWU5MTIxNzAyMTI=",
      "title": "Informal reference to RFC 8879 TLS Certificate Compression",
      "url": "https://github.com/tlswg/tls13-spec/issues/1232",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "I think it would be good with an informal reference to the new standard track document RFC 8879 \"TLS Certificate Compression\" just to inform the reader that this important mechanism exists.\r\n\r\nA reference could be inserted in one or more of these places:\r\n\r\n- Section 1.2. \"Major Differences from TLS 1.2\" where the document talks about the removal of compression.\r\n- Section 4.4.2. \"Certificate\" where the Certificate message is defined.\r\n- Appendix C.3. \"Implementation Pitfalls\" where the document states that \"Certificate and\r\n     CertificateRequest handshake messages can be large enough to require fragmentation.\"",
      "createdAt": "2021-06-05T09:18:56Z",
      "updatedAt": "2021-10-25T22:29:43Z",
      "closedAt": "2021-10-25T22:29:43Z",
      "comments": []
    },
    {
      "number": 1235,
      "id": "MDU6SXNzdWU5NTg1MDg2ODQ=",
      "title": "Not clear why 0-RTT doesn't provide perfect forward secrecy",
      "url": "https://github.com/tlswg/tls13-spec/issues/1235",
      "state": "CLOSED",
      "author": "cbartle891",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 2.3 states that \"This [0-RTT] data is not forward secret, as it is encrypted solely under keys derived using the offered PSK.\"\r\n\r\nHowever, Section 8.1 states \"If the tickets are not self-contained but rather are database keys, and the corresponding PSKs are deleted upon use, then connections established using PSKs enjoy forward secrecy. This improves security for all 0-RTT data.\"\r\n\r\nWhat does \"improves security\" mean here? Does it mean that the 0-RTT data is forward secret in this case? If not, why not?",
      "createdAt": "2021-08-02T21:08:08Z",
      "updatedAt": "2021-10-25T21:30:53Z",
      "closedAt": "2021-10-25T21:30:53Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Forward secrecy is something of a relative property; a given connection X gains forward secrecy with respect to future compromise of entity Y when secret Z is discarded.  There are further subtleties, such as if X is still active when Y is compromised then X might still actually be compromised even if Z has already been discarded, but considering all three of X, Y, and Z are necessary to make statements about forward secrecy with any precision.\r\nThe thing that we typically mean these days when we talk about \"forward secrecy\" without further precision is that an ephemeral (e.g., (EC)DH) key exchange mechanism is used, and we're implicitly picking one endpoint X as the subject of discussion, so that Y is the communications peer and Z is the peer's ephemeral DH value.  This requires some level of trust in the peer, since a malicious peer could fail to destroy Z or just retain the data in question in some other form.\r\n\r\n0-RTT data is protected by a PSK associated with a session ticket, and when the server is using stateless session tickets, the PSK itself is encrypted to the server using the STEK.  So the only forward secrecy available to such 0-RTT data is when the STEK is discarded, which we typically recommend to be on an hours to days timescale (but could in principle be much longer, and there are no doubt many sites that essentially never rotate their STEK); given the lack of knowledge of the peer/server behavior, clients should not assume that they have any forward secrecy guarantee for 0-RTT data they send in this case.\r\nWhen tickets are not stateless but rather are database keys, the server knowledge of the PSK used to protect the 0-RTT data is tied to the database entry for the ticket, and so the PSK can be discarded sooner than in the stateless-ticket case; in the single-use ticket case the server's copy of the PSK is expected to be destroyed when the resumed session is established, which would provide a similar timescale of forward secrecy for the client that a typical ECDH exchange would provide.  But the client still has little visibility into what strategy the server is using, and might be ill-advised to place much confidence in the forward secrecy of its offered 0-RTT data, absent out-of-band knowledge of the server's behavior.",
          "createdAt": "2021-08-15T20:38:42Z",
          "updatedAt": "2021-08-15T20:38:42Z"
        },
        {
          "author": "cbartle891",
          "authorAssociation": "NONE",
          "body": "Thanks! It's much clearer to me now.",
          "createdAt": "2021-08-16T16:50:53Z",
          "updatedAt": "2021-08-16T16:50:53Z"
        }
      ]
    },
    {
      "number": 1237,
      "id": "I_kwDOASA0os47hgiS",
      "title": "cached information extension in EE?",
      "url": "https://github.com/tlswg/tls13-spec/issues/1237",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "RFC 8446 mentions the cached-information extension from RFC 7924 in the context of the contents of the Certificate message, but does not list it in the ExtensionType enum or populate the \"TLS 1.3\" column in the registry.\r\nFrom first look, its information is not needed for the TLS 1.3 key exchange and thus it could go in EncryptedExtensions.\r\n\r\nIt seems inconsistent to mention the extension as possibly modifying the Certificate message structure when there's not actually a formally defined way to use the extension for TLS 1.3",
      "createdAt": "2021-09-16T21:06:52Z",
      "updatedAt": "2021-10-25T22:29:10Z",
      "closedAt": "2021-10-25T22:29:10Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems like a defect. I agree that it should go in EE.",
          "createdAt": "2021-10-25T22:17:17Z",
          "updatedAt": "2021-10-25T22:17:17Z"
        }
      ]
    },
    {
      "number": 1241,
      "id": "I_kwDOASA0os49unPE",
      "title": "Check that all valid extensions appear in the table",
      "url": "https://github.com/tlswg/tls13-spec/issues/1241",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ekr"
      ],
      "labels": [
        "Editor Ready"
      ],
      "body": "",
      "createdAt": "2021-10-25T22:27:45Z",
      "updatedAt": "2022-10-24T19:44:10Z",
      "closedAt": "2022-10-24T19:44:10Z",
      "comments": []
    },
    {
      "number": 1243,
      "id": "I_kwDOASA0os4-wT4c",
      "title": "Is resumption allowed before initial connection is closed?",
      "url": "https://github.com/tlswg/tls13-spec/issues/1243",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Resumption before the initial connection is closed does not seem to be forbidden but RFC 8446 does not really give any answers. Oxford dictionary defines resumption as \"the action of beginning something again after a pause or interruption.\" but I think \"resumption\" should just be seen as a slightly misleading name for the mechanism.\r\n\r\nRFC 8446 makes it clear that a connection can result in several tickets and that these tickets can be used in parallel with each other. My assumption would be that the tickets can also be used in parallel with the initial connection. If that is the case it would be good to state this. If not, it would be good to state that as well.\r\n\r\nThe question came up in RFC6083bis where the suggestion is to  set up parallel connections.\r\n\r\nI made a PR with the assumption that it\u2019s allowed. I don\u2019t see any reasons to forbid it, but I might miss something.",
      "createdAt": "2021-11-14T05:29:02Z",
      "updatedAt": "2021-11-14T20:34:32Z",
      "closedAt": "2021-11-14T20:34:32Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I concur that resumption should be permitted once the initial connection is established.\r\n\r\nI would prefer not to change the name, just because it's historically confusing not to.",
          "createdAt": "2021-11-14T20:34:17Z",
          "updatedAt": "2021-11-14T20:34:17Z"
        }
      ]
    },
    {
      "number": 1245,
      "id": "I_kwDOASA0os4-wZXT",
      "title": "Forward secrecy, long connections, and key exfiltration",
      "url": "https://github.com/tlswg/tls13-spec/issues/1245",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Discussions regarding the security properties of long connections (as well as associations consisting of several connections) have come up in TSVWG when discussing RFC6083bis (DTLS/SCTP), in UTA when discussing the (D)TLS IoT profile, and in SAAG when discussing the terms forward secrecy vs. PFS.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/saag/6ImeENhteXGdLsnaJHRoN6LW1zk/\r\nhttps://datatracker.ietf.org/doc/draft-ietf-tsvwg-dtls-over-sctp-bis/\r\nhttps://datatracker.ietf.org/doc/draft-ietf-uta-tls13-iot-profile/\r\n\r\nRFC 8446 discusses forward secrecy from EC(DHE), KeyUpdate, and tickets/resumption and how this limits the effect of key leakage in one direction (compromise at time T2 does not compromise keys at time T1 < T2). Protection in the other direction (compromise at time T1 does not compromise keys at time T2) can be achieved by rerunning EC(DHE). If an authentication key has been compromised, rerunning EC(DHE) gives protection against passive attackers. If a traffic key has been compromised, rerunning EC(DHE) gives protection against active attackers.\r\n\r\nUsing the terms in RFC 7624, forward secrecy without rerunning EC(DHE) still allows an attacker to do static key exfiltration. Rerunning EC(DHE) forces and attacker to dynamic key exfiltration (or content exfiltration). I think dynamic key exfiltration is important to mitigate pervasive monitoring.\r\n\r\nFrequently rerunning EC(DHE) is often recommended and used in long-term associations to limit the effects of key leakage. For IPsec, NIST SP 800-77r1 (2020) and ANSSI DAT-NT-003-EN (2015) recommends rerunning EC(DHE) every hour (if possible) and ANSSI also recommends every 100 GB of data.\r\n\r\nI made PR #1246 with considerations and recommendations. I think RFC8446 need some considerations on this. I think RFC8446 should have recommendations, but that could maybe be more controversial and maybe even out of scope for the current RFC8446bis update. Note that while some security properties in RFC 8446 are strictly linked to a single connection, RFC 8446 Appendix E already discusses forward secrecy and key leakage between connections.\r\n\r\nWhen it comes to long lived connections, considerations regarding exiery of authentication credentials and exporter_secret might also be good. Some application (at least RFC6083 DTLS/SCTP) relies on frequently exporting new secrets using the TLS-Exporter. I madea added a separate issue on the expiry of authentication credentials #1247",
      "createdAt": "2021-11-14T07:51:42Z",
      "updatedAt": "2022-03-07T18:18:35Z",
      "closedAt": "2022-03-07T18:18:35Z",
      "comments": []
    },
    {
      "number": 1247,
      "id": "I_kwDOASA0os4-wfd7",
      "title": "Lifetime, expiry, and validity of certificates and PSKs",
      "url": "https://github.com/tlswg/tls13-spec/issues/1247",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "3GPP has a lot of use cases with (D)TLS and they keep increasing. Most of them use X509 but there are a few uses of external PSKs. The external PSKs in 3GPP have a lifetime and after that they expire, exactly like a certificate. This is common also in other uses of TLS with external PSKs. When working on this we noted that RFC8446 does not say anything about what to do when the external PSK expire. There is also no way to signal the expiry with an alert similar to certificate_expired.\r\n\r\nWhen working on DTLS/SCRP for 3GPP we noted that TLS 1.3 does not have post-handshake server authentication. Mutually authenticated TLS is not used much on the Web but is very commonly used in a lot of other industries. Best practice for certificate lifetimes keeps changing towards shorter and shorter lifetimes. When working on this we noted that RFC8446 does not give any normative statement on what to do when a certificate expires. (Note that the currently suggestion in RFC6083bis is to set up new connections frequently instead so this is not a problem there).\r\n\r\nHow should the expiry of an external PSK be signaled with an alert? Would it be a new alert\r\n\r\n`external_psk_expired: The external PSK has expired or is not currently valid.`\r\n\r\nOr should certificate_expired be redefined?\r\n\r\n`certificate_expired: A credential used for authentication has expired or is not `\r\n\r\nI think TLS 1.3 also need to say something on what to do when the authentication credential expire. As far as I can see, the connection would have to be terminated unless there has been some post-handshake authentication. I would suggest something like this:\r\n\r\n`If the certificate or external PSK last used by a party  has expired, the other party MUST terminate the connection with a \"certificate_expired\" alert.`\r\n",
      "createdAt": "2021-11-14T10:07:29Z",
      "updatedAt": "2022-10-21T21:04:57Z",
      "closedAt": "2022-10-21T21:04:56Z",
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This area is definitely underspecified, I'd be for double duty of the `certificate_expired` alert as both the cause and the expected course of action is fundamentally the same.\r\n\r\nBut for X.509 there is another expiry date for the used credential: freshness of the revocation information (be it CRL or OCSP). I wonder if we couldn't add a new message to transmit up to date OCSP response for the certificate? Then reuse it for proof of possession of the updated PSK?",
          "createdAt": "2021-11-19T12:20:28Z",
          "updatedAt": "2021-11-19T12:20:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There were some good comments from Ilari Liusvaara and Viktor Dukhovni on the UTA list regarding responsibilities between TLS and the application as well as resumption PSKs. They point out that Certificate and PSK lifetimes is mostly the application's responsibility. Ilari points out that tickets also have lifetimes. TLS should probably have an alert indicating that the connection was closed because the ticket lifetime expired.\r\n\r\nTicket expiry should maybe be a new alert. A resumption connection could be closed because the ticket expire or the external PSK/certificate expire.\r\n\r\nCertificate and PSK lifetimes are the responsibility of the application using TLS so the normative text suggested above is likely to strong. Ticket lifetimes are strictly the responsibility of TLS. MUST terminate the connection might be too brutal, the application might want to show some warning to the user (but should have done so before the expiry).\r\n\r\nMaybe something like this would be reasonable:\r\n\r\n`If the ticket lifetime has expired, the server SHOULD terminate the connection with a \"ticket_expired\" alert. If the certificate or external PSK last used by a party has expired or is not currently valid, the application of the other party can terminate the connection with a \"certificate_expired\" alert. Continuing a connection when the key used for authentication has expired or is not valid is NOT RECOMMENDED. To avoid this, the parties should perform post-handshake authentication or set up a new connection before this happens.`\r\n\r\nRegarding updated OCSP, that is currently possible for the client, but only combined with reauthentication. I think TLS needs more work for long term connections. The only current solution is to set up new connections, but that may be complicated in some use cases.\r\n\r\nSome years ago TLS 1.2 had a 24 h recommended lifetime for session IDs and certificates often had lifetimes of many years. Today certificates are getting shorter and shorted lifetimes and more and more applications do revocation checking. Having short certificate lifetimes does not make much sense if the connections can last forever.  ",
          "createdAt": "2021-11-20T09:09:54Z",
          "updatedAt": "2021-11-20T10:22:11Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Viktor Dukhovni made a good point in UTA that this is an authorization problem. An alternative to terminating the connection is to consider the other party unauthenticated. That might be a better solution. An application that does not accept unauthorized parties would not send any application data, ask for post-handshake authentication, or close the connection.\r\n\r\nI agree with @tomato42 that this is an underspecified area. TLS can put some but not all responsibilities to the application. Considerations are needed and some mechanisms are missing.",
          "createdAt": "2021-11-20T10:51:37Z",
          "updatedAt": "2021-11-20T10:51:37Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> TLS should probably have an alert indicating that the connection was closed because the ticket lifetime expired.\r\n\r\nI would prefer we keep moving away from specific alerts.",
          "createdAt": "2021-11-20T14:20:28Z",
          "updatedAt": "2021-11-20T14:20:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Based on the comments from Hubert and Rich, I made a PR suggesting expanding the the duty of certificate_revoked, certificate_expired, certificate_unknown to PSKs (external and resumption).\r\n\r\n#1251",
          "createdAt": "2021-11-20T16:03:36Z",
          "updatedAt": "2021-11-20T16:03:36Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It turns out we already have \"unknown_psk_identity\"\r\n\r\n> unknown_psk_identity:\r\n: Sent by servers when PSK key establishment is desired but no\r\n acceptable PSK identity is provided by the client. Sending this alert\r\n is OPTIONAL; servers MAY instead choose to send a \"decrypt_error\"\r\n alert to merely indicate an invalid PSK identity.\r\n\r\nThis seems to fit the bill.\r\n",
          "createdAt": "2022-07-11T22:52:24Z",
          "updatedAt": "2022-07-11T22:52:24Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Aargh. I should have read my own comments. This is no change needed.\r\n",
          "createdAt": "2022-10-21T21:04:56Z",
          "updatedAt": "2022-10-21T21:04:56Z"
        }
      ]
    },
    {
      "number": 1248,
      "id": "I_kwDOASA0os4_E2vl",
      "title": "Clarifications on traffic key use",
      "url": "https://github.com/tlswg/tls13-spec/issues/1248",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "I cannot find any specification in RFC8446 of which key is used to encrypt an alert or heartbeat sent before Finished (I assume it is the application_traffic_secret). It is definitly possible that this information is somewhere in the document and that I just do not find it.\r\n\r\nThe document seems to treat \"record type\" and \"content type\" as synonyms. Are both terms needed?\r\n\r\nI would suggest updating table in section 7.3 to make it complete. Record type \"Application Data\" should probably be everything that is not a Handshake. It would be good to say something about post-handshake messages in section 7.3. Post-handshake messages have record type/content type Handshake but does not follow what the table in 7.3 says.",
      "createdAt": "2021-11-19T07:40:13Z",
      "updatedAt": "2022-03-07T22:00:22Z",
      "closedAt": "2022-03-07T22:00:22Z",
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The key is not specified as some errors can make it impossible for the peer to send an alert under specific key, so the used key is implicit\u2014the currently used one, whichever it happens to be, including plaintext.",
          "createdAt": "2021-11-19T12:24:23Z",
          "updatedAt": "2021-11-19T12:24:23Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "True, thank for reminding me. That is quite simple.\r\n\r\nGiven that, I think the table in Section 7.3 is confusing and and not even correct.\r\n\r\n- It claims to give the secret for each record type, but only lists 2. \"0-RTT Application\" is not a record type.....\r\n- It gives the idea that the secret follows from the record type, which is not correct.\r\n- It claims that record type Handshake is protected with [sender]_handshake_traffic_secret, but record type handshake is protected with all three secrets depending on the state.\r\n\r\nI think it would probably be better to remove the table in 7.3 than to keep the current version. Even better would be to replace 7.3 with a more correct description.\r\n\r\n```\r\n   [sender] denotes the sending side.  The value of Secret for each\r\n   record type is shown in the table below.\r\n\r\n       +-------------------+---------------------------------------+\r\n       | Record Type       | Secret                                |\r\n       +-------------------+---------------------------------------+\r\n       | 0-RTT Application | client_early_traffic_secret           |\r\n       |                   |                                       |\r\n       | Handshake         | [sender]_handshake_traffic_secret     |\r\n       |                   |                                       |\r\n       | Application Data  | [sender]_application_traffic_secret_N |\r\n       +-------------------+---------------------------------------+\r\n\r\n                     Table 1: Secrets for Traffic Keys\r\n```",
          "createdAt": "2021-11-20T07:59:35Z",
          "updatedAt": "2021-11-20T07:59:35Z"
        }
      ]
    },
    {
      "number": 1249,
      "id": "I_kwDOASA0os4_FnGf",
      "title": "AEAD integrity limits for 0-RTT data",
      "url": "https://github.com/tlswg/tls13-spec/issues/1249",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "DTLS 1.3 introduces integrity limits for the AEAD algorithms, which is good. TLS 1.3 does not have any AEAD integrity limits, probably because the assumption that only a single AEAD forgery can be attempted. My understanding is that this is not true for 0-RTT data which works more like DTLS and where an attacker can attempt any number of forgery attempts on a single AEAD key.\r\n\r\nRFC 8446 has relatively strong anti-replay protection:\r\n   \"The server MUST ensure that any instance of it (be it a machine, a thread, or any other\r\n    entity within the relevant serving infrastructure) would accept 0-RTT for the same 0-RTT\r\n    handshake at most once.\"\r\nbut this does not stop an attacker from attempting an unlimited number of forgeries.\r\n\r\nI think consideration / mitigation of this is missing from RFC8446. Some alternative suggestions:\r\n\r\n1. Should the 0-RTT requirement above be strengthen to:\r\n   \"The server MUST ensure that any instance of it (be it a machine, a thread, or any other\r\n    entity within the relevant serving infrastructure) would process a 0-RTT\r\n    handshake with the same PSK, ClientHello.random pair at most once.\"\r\n\r\n2. should RFC8446bis continue to ignore AEAD limits for 0-RTT? 0-RTT data already has lower security (weaker replay protection)? In this case I think some considerations should be added describing that the integrity protection of is weaker than for normal application data.\r\n\r\n3. should RFC8446bis introduce DTLS 1.3 type integrity limits for client_early_traffic_secret? This aligns the integrity limits of 0-RTT data in TLS with the normal application data in DTLS.\r\n",
      "createdAt": "2021-11-19T11:37:46Z",
      "updatedAt": "2022-03-07T22:00:02Z",
      "closedAt": "2022-03-07T22:00:02Z",
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> My understanding is that this is not true for 0-RTT data which works more like DTLS and where an attacker can attempt any number of forgery attempts on a single AEAD key.\r\n\r\nCould you say a bit more about how this would work in practice?  I did not consult the spec just now, but I had the impression that 0-RTT still had only a single attempt at forgery (at least, per replay cache instance/backend server).",
          "createdAt": "2021-11-29T03:07:14Z",
          "updatedAt": "2021-11-29T03:07:14Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah, the linked DTLS issue mentions long-lived **external** PSKs specifically.  I agree that our story for those is less well specified and probably not great.  Off the top of my head, I would suggest \"don't use 0-RTT with long-lived PSKs\".",
          "createdAt": "2021-12-08T00:24:43Z",
          "updatedAt": "2021-12-08T00:24:43Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "1. I think that the original is fine.  I don't think that there is any meaningful distinction between 0-RTT handshake and the (PSK, ClientHello.random) tuple, at least as far as the derived keys go.  Change the PSK, PSK identity, or random and you get a new key derivation.\r\n2. I had expected that early data was subject to the same constraints as later epochs.  The only caveat being that it is impossible to update early data keys using KeyUpdate.  The answer is to finish the handshake of course, so a hard error is fine.  We might advise servers to cap max_early_data_size to help avoid any issues of overrun, though with certain perverse padding arrangements, that might not provide any real guarantee.\r\n3. As above integrity limits should also apply.",
          "createdAt": "2021-12-08T01:18:29Z",
          "updatedAt": "2021-12-08T01:18:29Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/tlswg/tls13-spec/pull/1254 fixes (1)\r\n\r\nThe case for (3) is actually more subtle, as the problem is not client_early_traffic_secret but rather the trial decryption skipping phase. We might need to apply DTLS 1.3 like limits there.",
          "createdAt": "2022-03-07T18:52:39Z",
          "updatedAt": "2022-03-07T18:52:39Z"
        }
      ]
    },
    {
      "number": 1250,
      "id": "I_kwDOASA0os4_IO28",
      "title": "Multiple post-handshake authentications, identities, and tickets.",
      "url": "https://github.com/tlswg/tls13-spec/issues/1250",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "propose-close"
      ],
      "body": "RFC 8446 makes it clear that the client can recieve any number of CertificateRequests but RFC 8446 does not say anyhting about identities when the client authenticates several times. RFC 8446 does not seem to forbid the server to accept authentication with completely different identities each time. Is this a feature or a bug?\r\n\r\nI assume you could have a client first authenticate as a user and then as root, but this would mean that a connection is associated with several identities and not only \"the identity\" that RFC8446 and [Kraw16] talk about. Several identities also makes it hard to determine which identity a specific ticket belong to. RFC8446 states that data before authentication was sent/received by the identity that later authenticated.\r\n\r\n- Would it make sense to add something like the sentence below to 4.6.2 (leaving the definition of identity up to the application).\r\n\r\n\"If the server at some point in the connection has considered the client authenticated with one identity, it MUST not consider the client authenticated with another identity.\"\r\n\r\n- If the idea is to support authentication with several identities, I think other parts of RFC8446 should be updated. The document should then not talk about \u201cthe identity\u201d and consideration on which identity a certain ticket belongs to should be added. Maybe tickets would have to be made invalid. ",
      "createdAt": "2021-11-20T11:17:54Z",
      "updatedAt": "2022-03-23T09:36:13Z",
      "closedAt": "2022-03-23T09:36:13Z",
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "IIRC the consensus was that it was up to the protocol using TLS 1.3 to define how it should be handled and if multiple client identities are allowed",
          "createdAt": "2021-11-23T14:18:53Z",
          "updatedAt": "2021-11-23T14:18:53Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Given that we are admitting the possibility of the server authenticating as multiple identities, I would be reluctant to rule it out for the client.  I don't have as clear a recollection as Hubert does, but leaving it to the consuming application seems likely to be the best we can really do, other than providing warnings about the semantics of multiple identities being hard to nail down.",
          "createdAt": "2021-12-23T19:14:52Z",
          "updatedAt": "2021-12-23T19:14:52Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That is my thought as well. I believe we should close this as wontfix.\r\n\r\n",
          "createdAt": "2022-03-07T18:46:22Z",
          "updatedAt": "2022-03-07T18:46:22Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Discussed in Vienna. Closed.",
          "createdAt": "2022-03-23T09:36:13Z",
          "updatedAt": "2022-03-23T09:36:13Z"
        }
      ]
    },
    {
      "number": 1253,
      "id": "I_kwDOASA0os5FPx93",
      "title": "Should we recommend rekey with ECHDE after a certain amount",
      "url": "https://github.com/tlswg/tls13-spec/issues/1253",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "discuss-vienna"
      ],
      "body": "@emanjon proposed 100GB.\r\n\r\nI tend to think no guidance is needed but I filed this issued to keep track.",
      "createdAt": "2022-03-07T18:17:41Z",
      "updatedAt": "2022-07-11T22:44:57Z",
      "closedAt": "2022-07-11T22:44:57Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That seems arbitrary.  And large enough that it would be very rare.  And unlikely to be followed as you lose state by creating a new connection.  I'd say that no guidance is best.",
          "createdAt": "2022-03-08T11:51:01Z",
          "updatedAt": "2022-03-08T11:51:01Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing per discussion in Vienna.",
          "createdAt": "2022-07-11T22:44:57Z",
          "updatedAt": "2022-07-11T22:44:57Z"
        }
      ]
    },
    {
      "number": 1256,
      "id": "I_kwDOASA0os5FRa1V",
      "title": "AEAD limits for early data",
      "url": "https://github.com/tlswg/tls13-spec/issues/1256",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See https://github.com/tlswg/dtls13-spec/issues/260\r\n\r\nFor sending, we should require that a client stop sending more 0-RTT before they hit the limit (this means EOED needs to be sent within the limit, so they need to reserve some space).  We might note that most of the current limits for writing are larger than the largest value for max_early_data, so this is unlikely to be necessary.\r\n\r\nFor receiving, we should require that a server track failed decryptions against the per-connection limit, noting that this only applies to DTLS.",
      "createdAt": "2022-03-08T04:07:45Z",
      "updatedAt": "2022-10-21T20:12:01Z",
      "closedAt": "2022-10-21T20:12:01Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The first chunk is there and I think that the appropriate text is in 9147, so closing.\r\n\r\n@martinthomson feel free to object.",
          "createdAt": "2022-10-21T20:12:01Z",
          "updatedAt": "2022-10-21T20:12:01Z"
        }
      ]
    },
    {
      "number": 1257,
      "id": "I_kwDOASA0os5FrqbP",
      "title": "Too many KeyUpdates risk key collision within a connection",
      "url": "https://github.com/tlswg/tls13-spec/issues/1257",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "In https://github.com/tlswg/dtls13-spec/pull/257 we added some text to DTLS about how rekeying too many times (2^64 is allowed with the 64-bit DTLS 1.3 epoch) risks key reuse within a connection, and accompanied it with a MUST NOT guidance to rekey more than 2^48 times (but receivers MUST NOT enforce the rule); this overrides the usual MUST-level requirement to match an \"update_requested\" KeyUpdate with another KeyUpdate before sending more data.\r\n\r\nIt seems that some similar considerations apply for non-D TLS as well.",
      "createdAt": "2022-03-15T01:18:15Z",
      "updatedAt": "2023-03-13T18:50:19Z",
      "closedAt": "2023-03-13T18:50:19Z",
      "comments": []
    },
    {
      "number": 1268,
      "id": "I_kwDOASA0os5Puuev",
      "title": "losonszky91@gmail.com",
      "url": "https://github.com/tlswg/tls13-spec/issues/1268",
      "state": "CLOSED",
      "author": "ZL91",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-08-12T19:51:34Z",
      "updatedAt": "2022-10-21T19:34:44Z",
      "closedAt": "2022-10-21T19:34:44Z",
      "comments": []
    },
    {
      "number": 1274,
      "id": "I_kwDOASA0os5Ukfwl",
      "title": "Add a changelog from RFC 8446",
      "url": "https://github.com/tlswg/tls13-spec/issues/1274",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-21T20:58:02Z",
      "updatedAt": "2023-03-13T18:56:05Z",
      "closedAt": "2023-03-13T18:56:05Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In retrospect, I think we can skip this.",
          "createdAt": "2023-03-13T18:56:05Z",
          "updatedAt": "2023-03-13T18:56:05Z"
        }
      ]
    },
    {
      "number": 1278,
      "id": "I_kwDOASA0os5Ukll0",
      "title": "token_binding does not have TLS 1.3 extension markers in IANA",
      "url": "https://github.com/tlswg/tls13-spec/issues/1278",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See:\r\nhttps://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#tls-extensiontype-values-1\r\n\r\nIt probably should, though. @martinthomson @davidben, thoughts?",
      "createdAt": "2022-10-21T21:28:13Z",
      "updatedAt": "2022-11-09T17:23:14Z",
      "closedAt": "2022-11-09T17:23:14Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah probably. I guess CH, EE?",
          "createdAt": "2022-10-21T21:52:29Z",
          "updatedAt": "2022-10-21T21:52:29Z"
        },
        {
          "author": "nharper",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we want to list something other than \"-\" in the registry, someone would need to request the review to go through the Specification Required process. (https://datatracker.ietf.org/doc/html/draft-ietf-tokbind-tls13-03 is such a specification.)",
          "createdAt": "2022-10-26T02:07:10Z",
          "updatedAt": "2022-10-26T02:07:10Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I guess we can just close this.",
          "createdAt": "2022-11-09T17:23:14Z",
          "updatedAt": "2022-11-09T17:23:14Z"
        }
      ]
    },
    {
      "number": 1280,
      "id": "I_kwDOASA0os5WWIK4",
      "title": "Note that clients should ignore NST if they don't support resumption",
      "url": "https://github.com/tlswg/tls13-spec/issues/1280",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-11-14T19:46:56Z",
      "updatedAt": "2023-03-13T18:34:40Z",
      "closedAt": "2023-03-13T18:34:40Z",
      "comments": []
    },
    {
      "number": 1281,
      "id": "I_kwDOASA0os5aTjLZ",
      "title": "Add text that keys must be deleted when the connection closes",
      "url": "https://github.com/tlswg/tls13-spec/issues/1281",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The document has text about deleting client_/server_application_traffic_secret_N and deleting tickets but says nothing about all the other keys and secrets as far as I can see (but I might have missed something). If the implementation store secrets and keys long term, the security properties promised by TLS 1.3 is broken. I'll make a PR with suggested text.",
      "createdAt": "2022-12-31T09:18:51Z",
      "updatedAt": "2023-03-11T22:31:49Z",
      "closedAt": "2023-03-11T22:31:49Z",
      "comments": []
    },
    {
      "number": 1284,
      "id": "I_kwDOASA0os5aTrL1",
      "title": "Add more text on authentication",
      "url": "https://github.com/tlswg/tls13-spec/issues/1284",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The last few years I have personally experienced several occasions\r\nwhere people in SDOs as well as developers believe that TLS magically gives them\r\nauthentication. This has resulted in security standards that\r\njust writes that \"TLS is used for mutual authentication\" without any\r\nmore details as well as implementations that do not provide any identity verification\r\nat all and instead just doing a full path validation, when they should have\r\nchecked the server identity, that the right trust anchor was used, and that the right intermediate CA was used. I think this is a common problem.\r\n\r\nReading RFC8446, I think it is quite easy for people without expertise in security protocols to get the understanding that TLS gives you authentication.\r\n\r\nSuggestions:\r\n\r\n1. I think RFC8446 should be clearer with that what is provided by the TLS protocol is transport of authentication credentials and proof-of-possession of the private authentication key.\r\n\r\n2. I think the requirements on the application using TLS should be clearer. Maybe:\r\n\r\n   \"Application protocols using TLS MUST specify how to initiate TLS \r\n   handshaking, how to do path validation, and how to do identity verification.\"\r\n\r\n3.  I think it would be very good for readers if draft-ietf-uta-rfc6125bis was given as an informative reference.",
      "createdAt": "2022-12-31T12:17:04Z",
      "updatedAt": "2023-03-13T20:20:00Z",
      "closedAt": "2023-03-13T20:20:00Z",
      "comments": []
    },
    {
      "number": 1285,
      "id": "I_kwDOASA0os5avpsA",
      "title": "Reusing key shares enables tracking",
      "url": "https://github.com/tlswg/tls13-spec/issues/1285",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I cannot find anything in the document regarding this which is surprising as reusing key shares enables tracking\r\n\r\nI cannot find anything in the document that states that reuse of keys are allowed or forbidden but my understanding from earlier discussions in the TLS WG is that this is allowed as summarized in draft-ietf-tls-hybrid-design\r\n\r\n`TLS 1.3 does not require that ephemeral public keys be used only in a single key exchange session; some implementations may reuse them\r\n`\r\n\r\nKey shares should probably have similar text as Tickets\r\n\r\n`Clients SHOULD NOT reuse a ticket for multiple connections.  Reuse of a ticket allows passive observers to correlate different connections.\r\n`\r\n\r\nBut the requirement for key share applies to both clients and servers.\r\n\r\nThe sentence \"This addition prevents passive observers from correlating connections unless tickets are reused.\" is not correct unless both tickets and key shares are not reused.\r\n\r\n",
      "createdAt": "2023-01-06T11:36:58Z",
      "updatedAt": "2023-03-11T22:19:01Z",
      "closedAt": "2023-03-11T22:19:01Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Found that Illari raised this on the TLS list in October but Illari's comment did not seem to get any response which is also surprising. You can probably get a paper published by investigating how reuse of key shares enables tracking.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/tls/pv4p1tAwIJXxjad7myyveAubQIo/",
          "createdAt": "2023-01-06T11:44:35Z",
          "updatedAt": "2023-01-06T11:44:35Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For clients the considerations seems very similar to reuse of tickets. The client is in charge of its own privacy. The server side seems more worrying. A server reusing key shares between two clients can be used by an attacker to correlate connections between two different clients and use that to figure out the server even when ECH is used.",
          "createdAt": "2023-01-07T09:20:54Z",
          "updatedAt": "2023-01-07T09:20:54Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Motivation for normative SHOULD NOT (or MUST NOT) change can be found in charter-ietf-tls-06\r\n\r\nSecurity and privacy goals will place emphasis on the following:\r\n\r\n- Identify and mitigate other (long-term) user tracking or fingerprinting\r\nvectors enabled by TLS deployments and implementations.",
          "createdAt": "2023-01-12T15:46:13Z",
          "updatedAt": "2023-01-12T15:46:13Z"
        }
      ]
    },
    {
      "number": 1287,
      "id": "I_kwDOASA0os5bQPwk",
      "title": "Reusing psk identities enables tracking",
      "url": "https://github.com/tlswg/tls13-spec/issues/1287",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I cannot find anything in the document regarding this which is surprising as reusing psk identities makes tracking trivial. The document has text for tickets but the considerations are the same for all psk identities, not just tickets.\r\n\r\nI suggest modifying the tracking text to apply to all psk identities.\r\n\r\nMotivation for changes is given by the charter.\r\n```\r\nSecurity and privacy goals will place emphasis on the following:\r\n\r\n- Identify and mitigate other (long-term) user tracking or fingerprinting\r\nvectors enabled by TLS deployments and implementations.\r\n```\r\n\r\n\r\n",
      "createdAt": "2023-01-12T16:07:49Z",
      "updatedAt": "2023-03-13T18:35:08Z",
      "closedAt": "2023-03-13T18:35:08Z",
      "comments": []
    },
    {
      "number": 1289,
      "id": "I_kwDOASA0os5bQcPp",
      "title": "Server Tracking Prevention is also needed",
      "url": "https://github.com/tlswg/tls13-spec/issues/1289",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The document has a section on Client Tracking Prevention which is what is relevant for the Web. For IoT the TLS server is often a device. That device might be something that a person takes with them.\r\n\r\nMotivation for changes is given by the charter.\r\n\r\n```\r\nSecurity and privacy goals will place emphasis on the following:\r\n\r\n- Identify and mitigate other (long-term) user tracking or fingerprinting\r\nvectors enabled by TLS deployments and implementations.\r\n```\r\n",
      "createdAt": "2023-01-12T16:39:41Z",
      "updatedAt": "2023-03-13T18:36:39Z",
      "closedAt": "2023-03-13T18:36:39Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems to be an easy fix. Just chaning the heading from \"client tracking prevention\" to \"client and server tracking prevention\" seems to do the job",
          "createdAt": "2023-01-12T16:45:34Z",
          "updatedAt": "2023-01-12T16:45:34Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed",
          "createdAt": "2023-03-13T18:36:22Z",
          "updatedAt": "2023-03-13T18:36:22Z"
        }
      ]
    },
    {
      "number": 1291,
      "id": "I_kwDOASA0os5c_nHZ",
      "title": "Security considerations of using same cert for TLS client and server",
      "url": "https://github.com/tlswg/tls13-spec/issues/1291",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "TLS WG went through a lot of work (RFC 9258) to make sure that PSKs only be used with a single hash function. But as far as I can see the RFC8446(bis) does not say anything about:\r\n \r\n\r\n- Using the same cert for TLS client and TLS server\r\n- Using the same public key cert for TLS and another protocol (JOSE, COSE, SMIME, IKE, etc, \u2026.)\r\n- Using the external PSK for TLS and another protocol.\r\n\r\n \r\nI think it should. \r\n\r\n- Using the same signature key or PSK for TLS and another protocol is obviously unsecure in the worst case. But probably practically secure in many cases even if nobody has proved it.\r\n\r\n- Did any of the formal analysis prove that using the same key for TLS client and server is secure? It is quite common that the same node is a TLS server and client.",
      "createdAt": "2023-01-27T18:02:11Z",
      "updatedAt": "2023-03-26T22:02:58Z",
      "closedAt": "2023-03-26T22:02:58Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think we know much about this, so I'm reluctant to say too much. @karthikbhargavan, thoughts?",
          "createdAt": "2023-03-13T18:36:05Z",
          "updatedAt": "2023-03-13T18:36:05Z"
        },
        {
          "author": "karthikbhargavan",
          "authorAssociation": "NONE",
          "body": "Using the same key for client and server can result in unexpected reflection scenarios similar to Selfie (https://eprint.iacr.org/2019/347). So, for this to be safe, we need to be careful about knowing whether the context sufficiently disambiguates whether a principal intends to authenticate as a client or a server.\r\n\r\nI'd have to look to see if there is a cryptographic analysis allowing for the same key to be used for both client and server authentication. I suspect not. Extending the symbolic analyses to do this seems easy, modulo the reflection scenarios mentioned above.",
          "createdAt": "2023-03-14T06:32:25Z",
          "updatedAt": "2023-03-14T06:34:13Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Reusing a TLS key in an arbitrary other protocol is clearly a problem. It's actually particularly bad for TLS 1.2 server keys because TLS 1.2 ServerKeyExchange signatures have an arbitrary, attacker-chosen prefix. (And then a server-chosen random value.) That's why TLS 1.3 has those 64 spaces in front.\r\n\r\nI'm less clear on client/server reuse being a problem though. The signing payloads use different labels between client and server, so there's no cross-protocol mixups. And certificates are not as inherently symmetric as PSKs are. If a TLS client (conversely, server) is configured to accept some identity, that means it accepts any server (conversely, client) that is capable and willing to authenticate as that identity. If that set is multiple entities or includes itself, that's perfectly coherent.\r\n\r\n(TBH, I'm quite unconvinced of Selfie as a real attack. PSKs are the same. If a TLS client accepts servers that use some PSK, it inherently accepts all servers that know that PSK and that are willing to use it in a server role. If this set includes itself in another context, cool. If this set wasn't intended to include itself, then [configure TLS some other way](https://www.rfc-editor.org/rfc/rfc9258.html#mitigate-selfie)!)",
          "createdAt": "2023-03-14T15:32:23Z",
          "updatedAt": "2023-03-14T15:40:32Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My take is that, in general, we ought to not encourage key reuse in different contexts, even we think the underlying protocol might make it safe to do so. So rather than say nothing, I would suggest that we prohibit it outright on the basis of good hygiene. ",
          "createdAt": "2023-03-15T10:28:04Z",
          "updatedAt": "2023-03-15T10:28:04Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I tend to agree that better hygiene would be to not do this, but we also know it happens (e.g., with SMTP). Given that the purpose of this document is to mostly clarify 8446-bis, and implementations have been doing this for quite some time, I don't think 2119 language is warranted. PR #1300 tries to split the difference here.",
          "createdAt": "2023-03-26T01:22:29Z",
          "updatedAt": "2023-03-26T01:22:29Z"
        }
      ]
    },
    {
      "number": 1299,
      "id": "I_kwDOASA0os5g2pi4",
      "title": "Key update a MUST?",
      "url": "https://github.com/tlswg/tls13-spec/issues/1299",
      "state": "CLOSED",
      "author": "BenSmyth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Limits on Key Usage (Section 5.5):\r\n\r\n> There are cryptographic limits on the amount of plaintext which can be safely encrypted under a given set of keys...Implementations SHOULD do a key update as described in Section 4.6.3 prior to reaching these limits.  \r\n\r\nSince key updates are necessary for security, I think MUST (rather than SHOULD) is appropriate. \r\n\r\n(And similarly in the sentence that follows: \"Note that it is not possible to perform a KeyUpdate for early data and therefore implementations SHOULD not exceed the limits when sending early data.\") ",
      "createdAt": "2023-03-15T07:47:32Z",
      "updatedAt": "2023-03-27T01:32:41Z",
      "closedAt": "2023-03-27T01:32:41Z",
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "IIRC there was a disagreement on _when_ the rekeying should happen, and more specifically, the limits for Chacha20-Poly1305 are higher than the limit imposed by TLS sequence numbers, so there's no need to rekey if all you support is Chacha20...",
          "createdAt": "2023-03-16T15:12:35Z",
          "updatedAt": "2023-03-16T15:12:35Z"
        },
        {
          "author": "BenSmyth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@tomato42 That seems compatible with MUST: \r\n\r\n> There _are_ cryptographic limits...Implementations [MUST] do a key update...prior to reaching these limits.\r\n\r\nSection 5.5 also notes:\r\n\r\n> For ChaCha20/Poly1305, the record sequence number would wrap before the safety limit is reached.\r\n\r\nIt follows that implementations might not do a key update.",
          "createdAt": "2023-03-16T16:34:16Z",
          "updatedAt": "2023-03-16T16:34:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't necessarily object to a MUST but I think as with the limit on KeyUpdate it would need to be paired with a MUST NOT enforce on the receiver. As I understand it, these bounds aren't necessarily tight, so we might have some results that allowed fewer rekeys in the future.",
          "createdAt": "2023-03-26T01:13:03Z",
          "updatedAt": "2023-03-26T01:13:03Z"
        }
      ]
    },
    {
      "number": 1302,
      "id": "I_kwDOASA0os5h0vhv",
      "title": "Why did we make this change?",
      "url": "https://github.com/tlswg/tls13-spec/issues/1302",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/tlswg/tls13-spec/commit/ced44f9e03e6ef48d23f2b175089c804804799cf\r\n\r\nNeed to track this down for the changelog.",
      "createdAt": "2023-03-27T01:47:47Z",
      "updatedAt": "2023-07-07T02:28:42Z",
      "closedAt": "2023-07-07T02:28:42Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This removed duplicated text from erratum 6138",
          "createdAt": "2023-03-27T01:49:10Z",
          "updatedAt": "2023-03-27T01:49:10Z"
        }
      ]
    },
    {
      "number": 1305,
      "id": "I_kwDOASA0os5h1DUu",
      "title": "s7.1 Open Issue",
      "url": "https://github.com/tlswg/tls13-spec/issues/1305",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "s7.1 includes the following:\r\n\r\n    [[OPEN ISSUE: Replace the strings with hex value?]]\r\n\r\nAre we going to remove this and close with no action?",
      "createdAt": "2023-03-27T03:20:03Z",
      "updatedAt": "2023-03-27T04:09:37Z",
      "closedAt": "2023-03-27T04:09:35Z",
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Already addressed.",
          "createdAt": "2023-03-27T04:09:35Z",
          "updatedAt": "2023-03-27T04:09:35Z"
        }
      ]
    },
    {
      "number": 1306,
      "id": "I_kwDOASA0os5h1DmP",
      "title": "IANA Open Issues",
      "url": "https://github.com/tlswg/tls13-spec/issues/1306",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To keep the text in 8446bis and to avoid having people to read 8446 (and address the OPEN issues) in the IANA Considerations section - from IANA:\r\n\r\n    If you want to keep the old actions in the document, we\u2019d like to see those\r\n    actions preceded by an introduction or sub-section (or more than one sub-section;\r\n    however it\u2019s appropriate to structure it) that tells us what the new actions are\r\n    for this document.",
      "createdAt": "2023-03-27T03:22:02Z",
      "updatedAt": "2023-03-27T03:55:28Z",
      "closedAt": "2023-03-27T03:55:28Z",
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The diffs are informative here - I think there's only adding general_error to TLS Alerts and updating the references to RFC 8446bis vice RFC 8446.",
          "createdAt": "2023-03-27T03:40:37Z",
          "updatedAt": "2023-03-27T03:40:37Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Apologies for any confusion - already address via #1304. ",
          "createdAt": "2023-03-27T03:55:28Z",
          "updatedAt": "2023-03-27T03:55:28Z"
        }
      ]
    },
    {
      "number": 1308,
      "id": "I_kwDOASA0os5iIUID",
      "title": "Requirements or guidance to not use external psk identities like john.mattsson@ericsson.com",
      "url": "https://github.com/tlswg/tls13-spec/issues/1308",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "How the external PSK identity is chosen matters a lot.\r\n\r\n- An identifiers such as john.mattsson@ericsson.com can be used to trivially identify someone.\r\n- A random identifier such as dxv1hwqvf6 can typically only be used for tracking/fingerprinting. But if the person behind one of the connections is identified than the attacker knows the identity behind all the connections.\r\n- A random identifier such as dxv1hwqvf6 that is only used once cannot be used for tracking/fingerprinting.\r\n\r\nAs far as I can see the TLS specification does not say anything regarding psk identities like john.mattsson@ericsson.com. Modern EAP methods such as EAP-TLS 1.3 and EAP-AKA FS requires a \"privacy-friendly\" identifier. TLS 1.3 should say something about identifiers like john.mattsson@ericsson.com that can be used to identity someone. SHOULD NOT or MUST NOT seems appropriate.",
      "createdAt": "2023-03-29T18:54:42Z",
      "updatedAt": "2023-07-17T04:33:34Z",
      "closedAt": "2023-07-07T20:45:08Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood I'm trying to recall what we decided here.",
          "createdAt": "2023-07-07T03:10:07Z",
          "updatedAt": "2023-07-07T03:10:07Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "-1 for \"MUST NOT\", while useful, it brings unneeded and unnecessary complexity for point to point connections",
          "createdAt": "2023-07-07T12:10:54Z",
          "updatedAt": "2023-07-07T12:10:54Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the WGLC concluded without concrete suggestions for this issue, which I interpret to mean that no changes are needed. I think we can therefore close this. ",
          "createdAt": "2023-07-07T20:45:08Z",
          "updatedAt": "2023-07-07T20:45:08Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In the mobile industry permanent identifiers is seen like something that should be phased out and forbidden. TLS 1.3 not taking any normative actions against permanent identifiers that can trivially be used by passive attackers to uniquely identify and track both clients and servers would be very disappointing and bad for privacy not just in TLS 1.3 but for the ICT industry in general. Just because some companies are using permanent identifiers does not mean it is acceptable.",
          "createdAt": "2023-07-10T08:31:31Z",
          "updatedAt": "2023-07-10T08:31:31Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How about this text? https://github.com/tlswg/tls13-spec/pull/1325",
          "createdAt": "2023-07-10T14:17:40Z",
          "updatedAt": "2023-07-10T14:17:40Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> In the mobile industry permanent identifiers is seen like something that should be phased out and forbidden. \r\n\r\nLike E.164?  :)  I do agree with the sentiment though; it's a good goal to work towards.",
          "createdAt": "2023-07-17T04:33:34Z",
          "updatedAt": "2023-07-17T04:33:34Z"
        }
      ]
    },
    {
      "number": 1309,
      "id": "I_kwDOASA0os5iKZE3",
      "title": "RFC 5246 is already obsolete",
      "url": "https://github.com/tlswg/tls13-spec/issues/1309",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "I think that the obsoletes header can be trimmed.  A few other of these older RFCs can also be trimmed.",
      "createdAt": "2023-03-30T04:28:28Z",
      "updatedAt": "2023-07-07T20:53:21Z",
      "closedAt": "2023-07-07T20:53:21Z",
      "comments": []
    },
    {
      "number": 1310,
      "id": "I_kwDOASA0os5iKcCt",
      "title": "Simplify TLS 1.1 fallback",
      "url": "https://github.com/tlswg/tls13-spec/issues/1310",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "> If negotiating TLS 1.1 or below, TLS 1.3 servers MUST, and TLS 1.2 servers SHOULD, set the last 8 bytes of their ServerHello.Random value to the bytes: \r\n>>  44 4F 57 4E 47 52 44 00\r\n> Note that [RFC8996] and Appendix E.5 forbid the negotation of TLS versions below 1.2; implementations which do not follow that guidance MUST behave as described above.\r\n\r\n\r\nI think that this would be better phrased as:\r\n\r\n> RFC 8996 [RFC8996] and Appendix E.5 forbid the negotiation of TLS versions below 1.2.  However, server implementations which do not follow that guidance MUST set the last 8 bytes of their ServerHello.random value to the bytes:\r\n>> 44 ...\r\n\r\nNotes:\r\n1. I think that it is `ServerHello.Random` and not `ServerHello.random`.\r\n2. I don't think that we should loosen the mandate for TLS 1.2 servers.  Servers that implement TLS 1.2 can simply choose to ignore this specification (as they already did prior to us starting work on TLS 1.3.\r\n",
      "createdAt": "2023-03-30T04:46:26Z",
      "updatedAt": "2023-07-07T20:55:20Z",
      "closedAt": "2023-07-07T20:55:20Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson see the above. PR.\r\n\r\nHowever, it is .random. The name of the type is Random, but the field is random:\r\n\r\n```\r\n       struct {\r\n           ProtocolVersion legacy_version = 0x0303;    /* TLS v1.2 */\r\n           Random random;\r\n```\r\n\r\n",
          "createdAt": "2023-07-07T03:03:03Z",
          "updatedAt": "2023-07-07T03:03:03Z"
        }
      ]
    },
    {
      "number": 1311,
      "id": "I_kwDOASA0os5iKdA3",
      "title": "Changelog item for CertificateRequest length of 0",
      "url": "https://github.com/tlswg/tls13-spec/issues/1311",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "This was not noted in the changelog, but it seems notable.  Especially notable because it creates new permissible sending behaviour that might be rejected on receipt by older implementations (even if we have verified that it is OK).",
      "createdAt": "2023-03-30T04:49:52Z",
      "updatedAt": "2023-07-07T20:53:13Z",
      "closedAt": "2023-07-07T20:53:13Z",
      "comments": []
    },
    {
      "number": 1312,
      "id": "I_kwDOASA0os5iKfu2",
      "title": "EC(DHE)",
      "url": "https://github.com/tlswg/tls13-spec/issues/1312",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There are quite a few uses of \"EC(DHE)\" in the additions to this latest revision.  I think that this should be \"(EC)DHE\" on the basis that the \"EC\" part is optional, not the \"DHE\" part.",
      "createdAt": "2023-03-30T05:02:35Z",
      "updatedAt": "2023-07-07T02:29:02Z",
      "closedAt": "2023-07-07T02:29:02Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, it should definitly be (EC)DHE. Seems to be my fault.",
          "createdAt": "2023-05-20T17:58:34Z",
          "updatedAt": "2023-05-20T17:58:34Z"
        }
      ]
    },
    {
      "number": 1313,
      "id": "I_kwDOASA0os5iKg8G",
      "title": "Punctuation regressions",
      "url": "https://github.com/tlswg/tls13-spec/issues/1313",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "PR Pending"
      ],
      "body": "Not a PR because I'm not sure, but...\r\n\r\nI think that the change from \"(see [CK01], Definition 1, part 2).\" to  \"(see [CK01]; Definition 1, part 2).\" is not correct.\r\n\r\nSimilarly, I believe that the addition of the marked comma here is in error: \"the only requirement from the underlying transport is a reliable, in-order[[[,]]] data stream\". (Edit to mark the correct one.)",
      "createdAt": "2023-03-30T05:08:46Z",
      "updatedAt": "2023-07-07T20:53:03Z",
      "closedAt": "2023-07-07T20:53:03Z",
      "comments": []
    },
    {
      "number": 1315,
      "id": "I_kwDOASA0os5o1fA8",
      "title": "Section 3.2 incorrectly implies double brackets are part of TLS presentation language",
      "url": "https://github.com/tlswg/tls13-spec/issues/1315",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Not sure if it's too late to make changes, given we just had WGLC, but I noticed this just now and figured I'd file it in case. Section 3.2 says the following:\r\n\r\n> Comments begin with \"/\\*\" and end with \"\\*/\".\r\n> Optional components are denoted by enclosing them in \"[[ ]]\" (double brackets).\r\n> Single-byte entities containing uninterpreted data are of type opaque.\r\n> A type alias T' for an existing type T is defined by: [...]\r\n\r\nhttps://tlswg.org/tls13-spec/draft-ietf-tls-rfc8446bis.html#section-3.2\r\n\r\nThe first, third, and fourth of these are statements about the TLS presentation language itself. So it would suggest the second is as well. But I have never seen a random field be wrapped in double brackets for optionality. And given the parsing rules, it wouldn't even work. This is unparsable:\r\n\r\n```\r\nstruct {\r\n  [[ uint8 first; ]]\r\n  [[ uint8 second; ]]\r\n} MaybePair;\r\n```\r\n(Edit: Example updated because my first version was arguably parseable.)\r\n\r\nThis is sort of parsable...\r\n\r\n```\r\nstruct {\r\n  uint8 first;\r\n  [[ uint8 second; ]]\r\n} MaybePair;\r\n```\r\n\r\nBut it becomes unparsable as soon as it's incorporated into a larger structure:\r\n\r\n```\r\nstruct {\r\n  MaybePair pair;\r\n  uint16 blah;\r\n} Nope;\r\n\r\nstruct {\r\n  MaybePair pairs<0..2^16-1>;\r\n} NopeNope;\r\n```\r\n\r\nThe only two places I see this are in the definitions for enumerations and variants.\r\n\r\n```\r\n   enum { e1(v1), e2(v2), ... , en(vn) [[, (n)]] } Te;\r\n\r\n   struct {\r\n       T1 f1;\r\n       T2 f2;\r\n       ....\r\n       Tn fn;\r\n       select (E) {\r\n           case e1: Te1 [[fe1]];\r\n           case e2: Te2 [[fe2]];\r\n           ....\r\n           case en: Ten [[fen]];\r\n       };\r\n   } Tv;\r\n```\r\n\r\nBut here `[[` doesn't mean the object is optional. It means that, when you're defining an `enum` or using `select`, those components of the definition are optional. \r\n\r\nFrom that, I gather Section 3.2 is _actually_ saying that _in the description of the presentation language_, double brackets denote things that you may omit from the presentation language. But that doesn't fit with the rest of Section 3.2, which describe elements of the presentation language itself. This probably could be rephrased a bit. Like probably moved to the top of Section 3 as:\r\n\r\n> This document deals with the formatting of data in an external representation. The following very basic and somewhat casually defined presentation syntax will be used. In the definitions below, optional components of this syntax are denoted by enclosing them in \"[[ ]]\" (double brackets).\r\n\r\n(Context is I tried to write a syntax highlighter for the language in https://github.com/pygments/pygments/pull/2455#issuecomment-1593035636 and got confused at first. \ud83d\ude04 )",
      "createdAt": "2023-06-15T13:31:44Z",
      "updatedAt": "2023-07-07T02:27:26Z",
      "closedAt": "2023-07-07T02:27:26Z",
      "comments": [
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems like editorial clarification and can be fixed during IESG review.\r\nI also have a parser, I haven't tried it on this spec, but it's at https://github.com/richsalz/tlsparser/blob/main/gram.y within https://github.com/richsalz/tlsparser/",
          "createdAt": "2023-06-15T14:00:43Z",
          "updatedAt": "2023-06-15T14:00:43Z"
        },
        {
          "author": "sayrer",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think another implementation to check here is Rustls, since that is the most sensible parsing implementation I've seen. It of course operates with the benefit of hindsight, but I'd hope this issue is not news there.",
          "createdAt": "2023-06-16T00:18:15Z",
          "updatedAt": "2023-06-16T00:18:15Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@sayrer This bug is about the textual presentation language used in specs to describe the wire format, not the wire format itself. Most TLS implementations do not parse the presentation language programmatically. The wire format is simple enough that it is usually easier and more flexible to just hand transcribe it into your choice of parsing setup, than to actually programmatically consume the presentation language. This include rustls.\r\n\r\nRich's parser is interesting because it's one of the few (only?) things that actually programmatically parse the presentation language. Glancing through Rich's grammar, it agrees with my bug report (unless I missed it!), that `[[` and `]]` do not appear to actually be part of presentation language.",
          "createdAt": "2023-06-16T00:29:14Z",
          "updatedAt": "2023-06-16T00:39:41Z"
        },
        {
          "author": "sayrer",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let me apologize in advance if I'm being dense, but isn't this covered here:\r\nhttps://datatracker.ietf.org/doc/html/rfc8446#section-3.2\r\n\r\nEdit: I think what you should do is write some torture tests for this problem. But a PEG grammar might be fine (just a concise way of writing recursive descent). But `[[` etc are definitely part of the presentation language.",
          "createdAt": "2023-06-16T01:09:07Z",
          "updatedAt": "2023-06-16T01:53:57Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@sayrer Please see the issue description, which answers your question and discusses precisely that section.\r\n\r\nThat text reads as if it is part of the presentation language, but all the examples, and the core rules about how the TLS wire format is parsed, suggest otherwise. (Remember, the TLS wire format is based on plain concatenation, not tags. It doesn't work to just make random fields optional.) That is, the point of this bug is that the section you cited is misleading.\r\n\r\nI don't understand your suggestion for a PEG grammar. Again, the issue here is not that something about the presentation language is hard to parse. As discussed above, it's rare to programmatically parse the presentation language in the first place. The issue is that some text in the definition of the presentation language is misleading.",
          "createdAt": "2023-06-16T04:13:18Z",
          "updatedAt": "2023-06-16T04:13:45Z"
        },
        {
          "author": "sayrer",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not trying to be difficult here, but it's difficult to reconcile your opening comment \"This is unparsable:\" with your latest comment that says \"Again, the issue here is not that something about the presentation language is hard to parse.\"",
          "createdAt": "2023-06-16T04:21:32Z",
          "updatedAt": "2023-06-16T04:21:32Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm not trying to be difficult here, but it's difficult to reconcile your opening comment \"This is unparsable:\" with your latest comment that says \"Again, the issue here is not that something about the presentation language is hard to parse.\"\r\n\r\nIt's actually pretty easy to reconcile.  The prose in the document (RFC 8446) is hard to parse.  The presentation language in the document is easy to parse.\r\n\r\nI think that it would be pretty easy to clarify that \"optional components of the presentation language itself are enclosed in double brackets\" (but probably with more wordsmithing).",
          "createdAt": "2023-06-16T04:35:21Z",
          "updatedAt": "2023-06-16T04:35:21Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah yes, when I say \"this is unparsable\" I mean that, if you were to take Section 3.2 at face value, the examples of attempting to use double brackets in the presentation language would produce a structure that is unparsable *on the wire*. They would be unparsable as wire format structures because it would not be possible to unambiguously decode them.\r\n\r\nFor example, suppose you believe this was a valid structure in the presentation language.\r\n```\r\nstruct {\r\n  uint8 first;\r\n  [[ uint8 second; ]]\r\n} MaybePair;\r\n\r\nstruct {\r\n  MaybePair pairs<0..2^16-1>;\r\n} MaybePairs;\r\n```\r\n\r\nIt is not possible to unambiguously parse a `MaybePairs`. The byte sequence `00 02 01 02` can either be parsed as a single MaybePair (first=01, second=02), or two MaybePairs, (first=01, second=null), followed by (first=02, second=null). (If you're unfamiliar with how the TLS wire format works, the first two bytes form the length prefix implied by `<0..2^16-1>`. The contents are then parsed as however many `MaybePairs` fit. Such a parse only works `MaybePair` is self-delimiting. A hypothetical `[[ ... ]]` construct would break that invariant.)\r\n\r\nThe solution is what @kaduk said. Section 3.2 is misleading. It means to say `[[` denotes optional components of the presentation language. But as the rest of Section 3.2 describes actual components of the presentation language, it reads as if `[[` is a component of the presentation language which denotes optional fields in the wire format. That second option does not work, as seen in the example above.",
          "createdAt": "2023-06-16T04:41:03Z",
          "updatedAt": "2023-06-16T04:42:36Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(Retitling the issue description as the rhetorical question was clearly a bit confusing.)",
          "createdAt": "2023-06-16T04:43:57Z",
          "updatedAt": "2023-06-16T04:43:57Z"
        },
        {
          "author": "sayrer",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, I'm not sure what to say here. I agree that TLS structures can be ambiguous. But, they are almost always constrained by an enclosing structure that addresses the issues raised here. I wrote a version of ECH, and that requires knowledge of the TLS wire format and the presentation language. I think the ambiguity concerning optional fields is real, but not unique.\r\n\r\nhttps://github.com/grafica/rustls/blob/f85bd400896e0c5d6720c86afe0ebc3e2e54bb62/rustls/src/msgs/ech.rs\r\n",
          "createdAt": "2023-06-16T05:39:51Z",
          "updatedAt": "2023-06-16T05:39:51Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Okay, so @sayrer, great that you weren't confused by the current text.  Similarly-qualified people, such as @davidben , want to avoid a possible confusion.  @kaduk 's comment https://github.com/tlswg/tls13-spec/issues/1315#issuecomment-1594086020 is the right fix.",
          "createdAt": "2023-06-16T12:06:09Z",
          "updatedAt": "2023-06-16T12:06:09Z"
        },
        {
          "author": "sayrer",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, sorry to kick up a fuss. I was confused by the back and forth between the presentation language and the wire format in the comments on this issue. Kaduk's suggestion is fine.",
          "createdAt": "2023-06-16T16:32:24Z",
          "updatedAt": "2023-06-16T16:32:24Z"
        }
      ]
    },
    {
      "number": 1326,
      "id": "I_kwDOASA0os5s8Z7H",
      "title": "Figure 7.1 is phat",
      "url": "https://github.com/tlswg/tls13-spec/issues/1326",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I count 76 characters of width here.",
      "createdAt": "2023-07-30T03:17:19Z",
      "updatedAt": "2023-11-05T17:36:11Z",
      "closedAt": "2023-11-05T17:36:10Z",
      "comments": []
    },
    {
      "number": 1327,
      "id": "I_kwDOASA0os5s8fDt",
      "title": "kramdown warnings",
      "url": "https://github.com/tlswg/tls13-spec/issues/1327",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "```\r\n*** Input contains HT (\"tab\") characters. Undefined behavior will ensue.\r\n*** overwriting RFC5280\r\n*** overwriting DH76\r\n*** attributes left {\"data\"=>\"August, 2010\"}!\r\n```\r\n",
      "createdAt": "2023-07-30T04:00:02Z",
      "updatedAt": "2023-11-05T17:35:44Z",
      "closedAt": "2023-11-05T17:35:44Z",
      "comments": []
    },
    {
      "number": 1330,
      "id": "I_kwDOASA0os518Vdl",
      "title": "Say even more clearly that you can't trust the client to send their most preferred shares",
      "url": "https://github.com/tlswg/tls13-spec/issues/1330",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": ">    This vector MAY be empty if the client is requesting a\r\n   HelloRetryRequest.  Each KeyShareEntry value MUST correspond to a\r\n   group offered in the \"supported_groups\" extension and MUST appear in\r\n   the same order.  However, the values MAY be a non-contiguous subset\r\n   of the \"supported_groups\" extension and MAY omit the most preferred\r\n   groups.  Such a situation could arise if the most preferred groups\r\n   are new and unlikely to be supported in enough places to make\r\n   pregenerating key shares for them efficient.\r\n\r\n\r\nBut see: https://datatracker.ietf.org/doc/draft-davidben-tls-key-share-prediction/",
      "createdAt": "2023-11-06T10:03:12Z",
      "updatedAt": "2024-02-17T15:03:02Z",
      "closedAt": "2024-02-17T15:03:02Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed by #1331.",
          "createdAt": "2024-02-17T15:03:02Z",
          "updatedAt": "2024-02-17T15:03:02Z"
        }
      ]
    },
    {
      "number": 1332,
      "id": "I_kwDOASA0os5312Ug",
      "title": "AES CCM and AES CCM 8 key usage limits",
      "url": "https://github.com/tlswg/tls13-spec/issues/1332",
      "state": "CLOSED",
      "author": "Julien00859",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hello there,\r\n\r\nThe [section 5.5: Limit on Key Usage] gives limits for AES GCM and Chacha and references the [AEAD-LIMITS] study to justify the values.\r\n\r\nNor the TLS spec, nor the [AEAD-LIMITS] papers give limits for AES CCM and AES CCM 8 key usage. What would be the number of messages we can safely encrypt with both ciphers before rekeying?\r\n\r\nWhile searching online to find the limit, I found the following ietf draft [Usage Limits on AEAD Algorithms] which mandates a limit of 2^31 message encryption (given that each message is 1500 bytes) with TLS for both CCMs. Is this limit correct?\r\n\r\nWhile at it, the TLS spec mandates a maximum of 2^23.5 message encryption for AES GCM but the [Usage Limits on AEAD Algorithms] draft mandates 2^32.5. What is the actual limit?\r\n\r\nBy the way, the [AEAD-LIMITS] link seems down, I got a PHP/MySQL error when I attempt to open the link. I could retrieve the original PDF using the Wayback Machine.\r\n\r\nRegards,\r\nJulien\r\n\r\n[section 5.5: Limit on Key Usage]: https://tlswg.org/tls13-spec/draft-ietf-tls-rfc8446bis.html#name-limits-on-key-usage\r\n[AEAD-LIMITS]: http://www.isg.rhul.ac.uk/~kp/TLS-AEbounds.pdf\r\n[Usage Limits on AEAD Algorithms]: https://www.ietf.org/archive/id/draft-irtf-cfrg-aead-limits-07.html#name-single-key-examples\r\n",
      "createdAt": "2023-11-25T12:57:49Z",
      "updatedAt": "2024-02-17T15:00:36Z",
      "closedAt": "2024-02-17T15:00:36Z",
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": ">  (given that each message is 1500 bytes)\r\n\r\nno, TLS record layer allows messages (records) of 2^14 bytes see [section 5.1 of RFC 8446](https://www.rfc-editor.org/rfc/rfc8446#section-5.1); while it may be sent over multiple IP packets, which typically will be limited to 1500 bytes because Ethernet frames are usually that size, that doesn't influence how the data is encrypted for AEAD: a single IV is used to encrypt the whole 2^14 bytes",
          "createdAt": "2023-11-25T13:25:52Z",
          "updatedAt": "2023-11-25T13:25:52Z"
        },
        {
          "author": "Julien00859",
          "authorAssociation": "NONE",
          "body": "Does this explain why on the TLS 1.3 side it mandates 2^23.5 messages (16kiB long messages) and on the Usage-Limits-on-AEAD-Algoritms it mandates 2^32.5 messages (1.5kB long messages)?",
          "createdAt": "2023-11-25T13:36:25Z",
          "updatedAt": "2023-11-25T13:36:25Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Table 2 in that draft is an example:\r\n\r\n>  If the messages exchanged in the protocol are at most a common Internet MTU of around 1500 bytes,\r\n\r\nemphasis on _if_",
          "createdAt": "2023-11-25T13:51:53Z",
          "updatedAt": "2023-11-25T13:51:53Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "WRT the reference I believe this version (https://eprint.iacr.org/2024/051.pdf) is the same minus the date on the 1st page.  See #1337.",
          "createdAt": "2024-01-23T19:08:23Z",
          "updatedAt": "2024-01-23T19:08:23Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing this, as I believe it is addressed.",
          "createdAt": "2024-02-17T15:00:36Z",
          "updatedAt": "2024-02-17T15:00:36Z"
        }
      ]
    },
    {
      "number": 1338,
      "id": "I_kwDOASA0os59kyoD",
      "title": "client_early_traffic_secret  and alert",
      "url": "https://github.com/tlswg/tls13-spec/issues/1338",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "propose-close"
      ],
      "body": "Sec 7.3. says:\r\n\r\n> Alerts are sent with the then current sending key (or as plaintext if no such key has been established.)\r\n\r\nIn my experience, there is one exception. When a client tries to send early data but the negotiation fails for some reasons, the client should clear the client_early_traffic_secret and send an alert in plaintext.",
      "createdAt": "2024-01-30T01:55:20Z",
      "updatedAt": "2024-03-01T01:08:04Z",
      "closedAt": "2024-03-01T01:08:04Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems right to me. @davidben @martinthomson?",
          "createdAt": "2024-02-17T14:57:53Z",
          "updatedAt": "2024-02-17T14:57:53Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I suspect neither option works reliably, because you don't know what state the server is in. Let's say the server sent an illegal ServerHello after reading your ClientHello. If the server had accepted early data, it's expecting client_early_traffic_secret and won't accept plaintext. If the server had rejected early data, it can't read client_early_traffic_secret and is expecting plaintext (but willing to skip over early data).\r\n\r\nNormally, we'd know which of these it is, but we're presuming a situation where, for whatever reason, the server is failing to respond. Leaving the key alone (what we do) is a bit safer as there's less risk of accidentally sending plaintext application data. But really I think this situation doesn't matter. There are two kinds of error situations in TLS:\r\n\r\n1. The peer is a perfectly valid TLS implementation, you just don't have some parameter in common\r\n2. The peer sent something illegal under protocol rules\r\n\r\nDelivering an alert is important in case 1 because that will happen on configuration error. I don't think the alert is very important in case 2 because, in principle, it should never happen. When it does, it's nice to have debugging information, but I wouldn't contort the protocol or implementation to achieve it. I believe all the relevant alert conditions on receiving ServerHello and EncryptedExtensions are case 2. (After EncryptedExtensions, you've learned whether the server accepted early data and it's no longer ambiguous.)",
          "createdAt": "2024-02-17T15:08:45Z",
          "updatedAt": "2024-02-17T15:08:45Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If the server had accepted early data, it's expecting client_early_traffic_secret and won't accept plaintext. If the server had rejected early data, it can't read client_early_traffic_secret and is expecting plaintext (but willing to skip over early data).\r\n\r\nWell... the client can send an alert under client_early_traffic_secret, immediately followed by a plaintext one, and that will work in both cases. I don't think that's worth it, given it's all case 2. \ud83d\ude04 ",
          "createdAt": "2024-02-17T15:10:15Z",
          "updatedAt": "2024-02-17T15:10:15Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I'm persuaded by @davidben to do the minimal thing, which is to not change it. This matches the plan for 8446-bis to make only minimal required changes. Please object by 2/29 if you disagree.\r\n\r\n",
          "createdAt": "2024-02-17T15:37:48Z",
          "updatedAt": "2024-02-17T15:37:48Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm similarly persuaded.  Though even in case 1 you generally have servers that are not behaving.",
          "createdAt": "2024-02-19T22:34:20Z",
          "updatedAt": "2024-02-19T22:34:20Z"
        }
      ]
    },
    {
      "number": 1339,
      "id": "I_kwDOASA0os59lPgA",
      "title": "illegal_parameter vs protocol_version",
      "url": "https://github.com/tlswg/tls13-spec/issues/1339",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "propose-close"
      ],
      "body": "Sec 4.1.2. say:\r\n\r\n> A server which receives a legacy_version value not equal to 0x0303 MUST abort the handshake with an \"illegal_parameter\" alert.\r\n\r\nWhy isn't \"protocol_version\" used?",
      "createdAt": "2024-01-30T04:10:52Z",
      "updatedAt": "2024-03-01T01:07:56Z",
      "closedAt": "2024-03-01T01:07:56Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "`protocol_version` is defined as:\r\n\r\n> protocol_version:  The protocol version the peer has attempted to\r\n>      negotiate is recognized but not supported (see [Appendix D](https://datatracker.ietf.org/doc/html/rfc8446#appendix-D)).\r\n\r\nThe wrong value in `legacy_version` isn't negotiating the wrong version. It's just a syntax error.",
          "createdAt": "2024-01-30T04:24:33Z",
          "updatedAt": "2024-01-30T04:24:33Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "But E.2. says:\r\n\r\n> If the \"supported_versions\" extension is absent and the server only supports versions greater than ClientHello.legacy_version, the server MUST abort the handshake with a \"protocol_version\" alert.\r\n\r\nIn this case, \"protocol_version\" is used.\r\nFor simplicity, I would like to recommend \"protocol_version\" for the case above, too.",
          "createdAt": "2024-01-30T05:45:56Z",
          "updatedAt": "2024-01-30T05:45:56Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Absent more support, I propose to leave this as-is. At worst it's a judgement call and not an interop problem, and so I think out of scope for the 8446-bis effort. Target date: 2/29.",
          "createdAt": "2024-02-17T14:59:29Z",
          "updatedAt": "2024-02-17T14:59:29Z"
        }
      ]
    },
    {
      "number": 1341,
      "id": "I_kwDOASA0os6CwxMK",
      "title": "Forbid more than one outstanding key_update_requested at a time",
      "url": "https://github.com/tlswg/tls13-spec/issues/1341",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a bit late, but I kept forgetting to file this. :-(\r\n\r\nWe ran into a fun bug with a TLS implementation that would send key_update_requested once the other side sent more than N records. However, they were broken and send it on *every record that comes in*. Now imagine one side is sending at a much faster rate than the other. In the time it takes for the other side's KeyUpdate to come, there may have been many records and so the sender sends a huge storm of them.\r\n\r\nProbably we should have a sentence to the effect of: if you send key_updated_requested, you MUST NOT send another until you've gotten a KeyUpdate from the other side.",
      "createdAt": "2024-03-19T01:36:23Z",
      "updatedAt": "2024-07-07T02:55:16Z",
      "closedAt": "2024-07-07T02:55:16Z",
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think it's enforceable... and for links with high bandwidth and high latency it may be impractical",
          "createdAt": "2024-03-19T11:21:37Z",
          "updatedAt": "2024-03-19T11:21:37Z"
        },
        {
          "author": "camshaft",
          "authorAssociation": "NONE",
          "body": "We've been seeing a very similar issue. The client submits a request and the server sends a very large response (>125Gb). While it's sending the response, the server never reads from the client. Once the client decides to start enforcing the configured key limit, it sends a key update + request message for every record it receives. It sends so many of these that the TCP flow window is completely filled and the connection deadlocks.\r\n\r\nMaybe instead of putting a limit on in-flight key update requests the RFC more strongly indicates that the key update request is merely a request, not a requirement, and receivers ultimately cannot enforce key limits below the absolute maximum, at which point they can close the connection if the upper limit is exceeded.",
          "createdAt": "2024-03-19T21:28:28Z",
          "updatedAt": "2024-03-19T21:28:28Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If you have grossly asymmetric send weight, then the sender can always unilaterally update.\r\n\r\nThe feature whereby an update is requested is different.  While there are cases where we might like to have one endpoint poke the other to update more often than they would on their own, this does not extend to a license to DoS.\r\n\r\nI support making this change.",
          "createdAt": "2024-03-20T03:01:42Z",
          "updatedAt": "2024-03-20T03:01:42Z"
        }
      ]
    },
    {
      "number": 1344,
      "id": "I_kwDOASA0os6D5ecS",
      "title": "Address erratum 5717",
      "url": "https://github.com/tlswg/tls13-spec/issues/1344",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@mglt submitted [erratum 5717](https://www.rfc-editor.org/errata/eid5717). [List discussion](https://mailarchive.ietf.org/arch/msg/tls/gsfnz3jWZFHO8E6xFDZM8Dzh-y0/) tended towards HFDU, which I think means we should at least consider it.",
      "createdAt": "2024-03-28T10:36:12Z",
      "updatedAt": "2024-04-05T12:56:47Z",
      "closedAt": "2024-04-05T12:56:47Z",
      "comments": []
    },
    {
      "number": 1346,
      "id": "I_kwDOASA0os6D50g0",
      "title": "Address erratum 5874",
      "url": "https://github.com/tlswg/tls13-spec/issues/1346",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Might need some text based on the [thread](https://mailarchive.ietf.org/arch/browse/tls/?gbt=1&q=5874#) about [erratum 5874](https://www.rfc-editor.org/errata/eid5874).",
      "createdAt": "2024-03-28T11:22:19Z",
      "updatedAt": "2024-04-05T12:57:09Z",
      "closedAt": "2024-04-05T12:57:09Z",
      "comments": []
    },
    {
      "number": 1352,
      "id": "I_kwDOASA0os6Eknxp",
      "title": "Address erratum 6820",
      "url": "https://github.com/tlswg/tls13-spec/issues/1352",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "[Erratum 6820](https://www.rfc-editor.org/errata/eid6820) was motivated by this [bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1751157).  The fix likely requires only a modest change but it might be worthwhile as the existing text has tripped up at least two implementers.",
      "createdAt": "2024-04-04T00:57:16Z",
      "updatedAt": "2024-04-05T12:59:08Z",
      "closedAt": "2024-04-05T12:59:08Z",
      "comments": []
    },
    {
      "number": 1355,
      "id": "I_kwDOASA0os6JQFYB",
      "title": "Errata 6136",
      "url": "https://github.com/tlswg/tls13-spec/issues/1355",
      "state": "CLOSED",
      "author": "BenSmyth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "[Errata 6136](https://www.rfc-editor.org/errata/eid6136)\r\n\r\n> Section 4.1.4 says:\r\n>\r\n>   Upon receipt of a HelloRetryRequest, the client MUST check the  legacy_version, legacy_session_id_echo, cipher_suite, and       legacy_compression_method as specified in Section 4.1.3 \r\n\r\nbut\r\n\r\n> Section 4.1.3 defines no checks for legacy_version nor legacy_compression_method\r\n\r\nSpecifically, we have (RFC8446)\r\n\r\n> ...the legacy_version field MUST be set to 0x0303...\r\n\r\nand\r\n\r\n>    legacy_compression_method:  A single byte which MUST have the    value 0.\r\n\r\nneither of which are checks, whereas \r\n\r\n>  A client which receives a legacy_session_id_echo field that does not match what it sent in the ClientHello MUST abort the handshake with an  \"illegal_parameter\" alert.\r\n\r\nand \r\n\r\n> A client which receives a cipher suite that was not offered MUST abort the handshake with an \"illegal_parameter\" alert.\r\n\r\ni.e, clients perform checks on legacy_session_id_echo and illegal_parameter, but not legacy_version nor legacy_compression_method. Either (1) wording in Section 4.1.4 should state checks if needed, (2) revise Section 4.1.4 as follows \"Upon receipt of a HelloRetryRequest, the client MUST check the legacy_session_id_echo and cipher_suite as specified in Section 4.1.3.\" or (3) I've misunderstood.\r\n\r\n",
      "createdAt": "2024-05-17T13:02:25Z",
      "updatedAt": "2024-08-05T00:35:08Z",
      "closedAt": "2024-08-05T00:35:08Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I concur. https://github.com/tlswg/tls13-spec/pull/1364 fixes this.",
          "createdAt": "2024-08-03T18:21:14Z",
          "updatedAt": "2024-08-03T18:21:14Z"
        }
      ]
    },
    {
      "number": 1358,
      "id": "I_kwDOASA0os6LPLet",
      "title": "Require sending MTI curves in CH.key_share",
      "url": "https://github.com/tlswg/tls13-spec/issues/1358",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Peter Gutmann [suggests](https://mailarchive.ietf.org/arch/msg/tls/JeE2watbipk6o0FVJFDa9W6J1A8/) requiring that the CH \r\nrequire an MTI curve in CH.key_share:\r\n\r\n> Eric Rescorla <[ekr@rtfm.com](mailto:ekr@rtfm.com)> writes:\r\n> \r\n> >One more thing: we are finalizing RFC 8446-bis right now, so if there is WG\r\n> >consensus to require that clients offer all MTI curves in the key_shares of\r\n> >their initial CH, then that would be a straightforward text change.\r\n>\r\n> That would fix things, something like saying a client has to provide at least\r\n> one MTI cipher suite/signature/keyex in its client hello.  There's only one\r\n> MTI curve in 8446 so \"all MTI curves\" isn't a big deal.\r\n\r\n\r\n\r\n\r\n",
      "createdAt": "2024-06-05T13:59:34Z",
      "updatedAt": "2024-07-31T01:29:03Z",
      "closedAt": "2024-07-31T01:29:03Z",
      "comments": [
        {
          "author": "sftcd",
          "authorAssociation": "NONE",
          "body": "Would if be on/off topic here to suggest adding x25519 as another MTI at the same time?",
          "createdAt": "2024-06-05T14:07:30Z",
          "updatedAt": "2024-06-05T14:07:30Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Off-topic for this issue, I think. Please file another if you want to discuss that.",
          "createdAt": "2024-06-05T14:08:16Z",
          "updatedAt": "2024-06-05T14:08:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "FWIW, I don't think we should make the change that is proposed here.",
          "createdAt": "2024-06-05T14:09:46Z",
          "updatedAt": "2024-06-05T14:09:46Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "NONE",
          "body": "I opened #1359 ",
          "createdAt": "2024-06-05T14:10:56Z",
          "updatedAt": "2024-06-05T14:10:56Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I opened #1359\r\n\r\nThank you.",
          "createdAt": "2024-06-05T14:11:15Z",
          "updatedAt": "2024-06-05T14:11:15Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm strongly opposed. If it is in the spec, we will ignore it.\r\n\r\nThere are many reasons a client may not want to send an MTI curve in the initial key share, e.g. if it has prior knowledge of the server's preferences or if it does not want to waste CPU cycles on a curve that most servers won't pick. The TLSWG also has a poor track record with MTI options. I recall a weird \"must implement but need not enable\" reverse justification for the TLS 1.2 and earlier MTIs.\r\n\r\nIndeed we already know we will be doing a PQ transition in the future, and eventually all the current MTIs will need to be removed. Adding rules to prevent their removal just further dilutes the TLSWG's notion of MTI.\r\n\r\n(One could argue that notion is already meaningless, in which case I suppose this change is fine and only further serves to make this obvious.)",
          "createdAt": "2024-06-05T14:12:58Z",
          "updatedAt": "2024-06-05T14:12:58Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "NONE",
          "body": "I agree with @davidben ",
          "createdAt": "2024-06-05T14:17:07Z",
          "updatedAt": "2024-06-05T14:17:07Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "fully agree with @davidben ",
          "createdAt": "2024-06-05T14:29:28Z",
          "updatedAt": "2024-06-05T14:29:28Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "agree with @davidben",
          "createdAt": "2024-06-05T15:29:51Z",
          "updatedAt": "2024-06-05T15:29:51Z"
        },
        {
          "author": "dennisjackson",
          "authorAssociation": "NONE",
          "body": "Agree with @davidben",
          "createdAt": "2024-06-05T15:31:43Z",
          "updatedAt": "2024-06-05T15:31:43Z"
        },
        {
          "author": "Andrei-Popov",
          "authorAssociation": "NONE",
          "body": "I support this change, willing to implement it in the Windows TLS stack. We have thousands of customers concerned about increased latencies due to the enablement of TLS 1.3. The services they connect to require NIST curves and HRR is required to get Web browsers to send appropriate key shares. TLS 1.3 with HRR is somewhat higher-latency than TLS 1.2 full handshake.\r\n\r\n(Of course, TLS key share prediction could override this, when the server's DNS record indicates no P256 support. The key share prediction draft can include this provision.)",
          "createdAt": "2024-06-05T15:54:25Z",
          "updatedAt": "2024-06-05T15:54:48Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, @davidben  has a good summary.\r\nThe key part is that historically our position on MTI is mandatory to implement but not mandatory to use/enable; by requiring the client to send a key share we are promoting MTI to a requirement to use, at least for the client.  But absent an analogous requirement on the server, just sending the MTI key share does not guarantee a successful connection, let alone a successful connection without HRR.  A server might still not want to use the MTI algorithm in question (and the issue is compounded greatly if we go to a scenario where we have more than one MTI keyex algorithm).\r\n\r\nI think if we look at a broad IETF-wide perspective on how MTI is treated, I think it is generally biased towards the \"implement but not necessarily use\" mindset that TLS has taken in the past.  I also think there were some scenarios with, e.g., IPSec that did in effect have mandatory-to-use algorithms and that had negative security consequences for the ecosystem, by providing inertia to stick with algorithms that grew weak.  In some ways it's worse for ssh, which was slow to update the recommendations (demoting the weaker algorithms and promoting new ones -- RFC 9142 only came out in 2022, and diffie-hellman-group1-sha1 is only \"SHOULD NOT\" rather than \"MUST NOT\", because the previous recommendation was \"MUST\").\r\n\r\nI don't think we get much tangible interoperability benefit from this, and the cost is a significant hampering of the ability of willing endpoints to exercise algorithm agility and move away from using algorithms that clients do not wish to support.",
          "createdAt": "2024-06-05T15:56:32Z",
          "updatedAt": "2024-06-05T15:56:32Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I support this change, willing to implement it in the Windows TLS stack. We have thousands of customers concerned about increased latencies due to the enablement of TLS 1.3. The services they connect to require NIST curves and HRR is required to get Web browsers to send appropriate key shares. TLS 1.3 with HRR is somewhat higher-latency than TLS 1.2 full handshake.\r\n\r\nI don't think requiring every client implementation to use a specific algorithm is a good way to reduce latency.  If a set of endpoints wants to ensure a lower latency, they have the ability to agree out of band on what algorithms to prefer, including but not limited to by having the server advertise its configuration/preferences in a DNS record.",
          "createdAt": "2024-06-05T15:58:02Z",
          "updatedAt": "2024-06-05T15:58:02Z"
        },
        {
          "author": "Andrei-Popov",
          "authorAssociation": "NONE",
          "body": "> The key part is that historically our position on MTI is mandatory to implement but not mandatory to use/enable; by requiring the client to send a key share we are promoting MTI to a requirement to use, at least for the client.\r\n\r\nThe client would only be sending a P256 key share when P256 support is advertised, i.e. P256 is not disabled. I don't believe this is a requirement to use: the client can also send other key shares and the server can still negotiate a different group.\r\n\r\n> If a set of endpoints wants to ensure a lower latency, they have the ability to agree out of band on what algorithms to prefer, including but not limited to by having the server advertise its configuration/preferences in a DNS record.\r\n\r\nAgreed, and explicitly pointed out this case in my very first comment above.\r\n\r\n\r\n",
          "createdAt": "2024-06-05T16:11:30Z",
          "updatedAt": "2024-06-05T16:11:46Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk I would note that the text here actually says that \"TLS-compliant application MUST support key exchange with secp256r1\". I generally interpret this as not just MUST implement but rather MUST enable. \r\n\r\nI agree that this does not require *sending* anything in particular in CH.key_shares",
          "createdAt": "2024-06-05T16:12:11Z",
          "updatedAt": "2024-06-05T16:12:52Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh hmm, the recent replies make it sound like we do not actually agree on what we are discussing.\r\n\r\nAndrei's\r\n> The client would only be sending a P256 key share when P256 support is advertised, i.e. P256 is not disabled. I don't believe this is a requirement to use: the client can also send other key shares and the server can still negotiate a different group.\r\n\r\nsounds like he believes that the proposed change here is to require sending a P256 key share when that group is in supported_groups, which is not what I interpret the proposal quoted in the initial comment as saying.  (I read that quoted proposal as saying that literally every CH.key_share needs to include P256.)\r\n\r\nekr's reply to me suggests that there is a separate requirement for every CH.supported_groups to include P256, in which case Andrei's interpretation collapses down to be in practice the same as my interpretation.  But I don't agree with ekr in this regard :)\r\n\r\nFor a little more context, the entirety of section 9.1 (mandatory-to-implement cipher suites) of RFC 8446 is:\r\n```\r\nIn the absence of an application profile standard specifying\r\n   otherwise:\r\n\r\n   A TLS-compliant application MUST implement the TLS_AES_128_GCM_SHA256\r\n   [[GCM](https://www.rfc-editor.org/rfc/rfc8446.html#ref-GCM)] cipher suite and SHOULD implement the TLS_AES_256_GCM_SHA384\r\n   [[GCM](https://www.rfc-editor.org/rfc/rfc8446.html#ref-GCM)] and TLS_CHACHA20_POLY1305_SHA256 [[RFC8439](https://www.rfc-editor.org/rfc/rfc8439)] cipher suites (see\r\n   [Appendix B.4](https://www.rfc-editor.org/rfc/rfc8446.html#appendix-B.4)).\r\n\r\n   A TLS-compliant application MUST support digital signatures with\r\n   rsa_pkcs1_sha256 (for certificates), rsa_pss_rsae_sha256 (for\r\n   CertificateVerify and certificates), and ecdsa_secp256r1_sha256.  A\r\n   TLS-compliant application MUST support key exchange with secp256r1\r\n   (NIST P-256) and SHOULD support key exchange with X25519 [[RFC7748](https://www.rfc-editor.org/rfc/rfc7748)].\r\n```\r\n\r\nYes, there is an interesting difference in word choice between paragraphs (\"implement\" vs \"support\").  But I don't think that we say anything about \"support\" being \"at runtime\" vs \"in the codebase\", and my recollection is that at the time we wrote that we did not mean that it must be enabled at runtime.  And, as the very first quoted sentence says, an application profile standard can overrule all of this, so it's clearly not the case that we intended this to be absolutely hardcoded into implementations without any configuration option at all.\r\n\r\nSo I'd like to get a better sense of (1) whether we all agree on what is actually being proposed, and (2) what the current requirement from RFC 8446 is.",
          "createdAt": "2024-06-05T16:27:57Z",
          "updatedAt": "2024-06-05T16:27:57Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "NONE",
          "body": "@Andrei-Popov wrote\r\n> I support this change, willing to implement it in the Windows TLS stack. We have thousands of customers concerned about increased latencies due to the enablement of TLS 1.3.\r\n\r\nYou can implement this today. What puzzles me is that you mention increased latency: TLS 1.2 should be very similar in performance to TLS 1.3 where the client doesn't send any keyshare at all.",
          "createdAt": "2024-06-05T16:37:11Z",
          "updatedAt": "2024-06-05T16:37:11Z"
        },
        {
          "author": "dvorak42",
          "authorAssociation": "NONE",
          "body": "If the consensus ends up being not to requiring the MTI curves, I wonder if it would be useful to add some text to clarify that having CH.key_share sent without including the MTI key shares is compliant behavior.",
          "createdAt": "2024-06-05T19:39:49Z",
          "updatedAt": "2024-06-05T19:39:49Z"
        },
        {
          "author": "Andrei-Popov",
          "authorAssociation": "NONE",
          "body": "> You can implement this today. What puzzles me is that you mention increased latency: TLS 1.2 should be very similar in performance to TLS 1.3 where the client doesn't send any keyshare at all.\r\n\r\nI can implement this today, but it won't help much: I don't control popular Web browsers.\r\n\r\n> What puzzles me is that you mention increased latency: TLS 1.2 should be very similar in performance to TLS 1.3 where the client doesn't send any keyshare at all.\r\n\r\nI thought it should be as well, until we actually measured, using a couple different popular TLS stacks.",
          "createdAt": "2024-06-05T20:05:04Z",
          "updatedAt": "2024-06-05T20:05:04Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Browsers typically implemented False Start with TLS 1.2 (under various conditions, some security and some compat), so that's probably why the difference.",
          "createdAt": "2024-06-05T20:23:16Z",
          "updatedAt": "2024-06-05T20:23:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Seeing no consensus for this.",
          "createdAt": "2024-07-31T01:29:03Z",
          "updatedAt": "2024-07-31T01:29:03Z"
        }
      ]
    },
    {
      "number": 1359,
      "id": "I_kwDOASA0os6LPRoy",
      "title": "Should x25519 be made MTI?",
      "url": "https://github.com/tlswg/tls13-spec/issues/1359",
      "state": "CLOSED",
      "author": "sftcd",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "It seems pretty ubiquitous both in terms of implementation and deployment and if some client are emitting only x25519 shares in ClientHello, then making it MTI might improve interop, so... should we? ",
      "createdAt": "2024-06-05T14:09:52Z",
      "updatedAt": "2024-09-14T20:09:40Z",
      "closedAt": "2024-09-14T20:09:39Z",
      "comments": [
        {
          "author": "loganaden",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe that that x25519 should be MTI.",
          "createdAt": "2024-06-05T14:23:29Z",
          "updatedAt": "2024-06-05T14:23:29Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": ":-1: from me, not because x25519 is bad (it's good), but because it as MTI will be pretty meaningless: P-256 is _the_ curve for interop, and will remain so, the next big thing will be ML-KEM, not migration to x25519...",
          "createdAt": "2024-06-05T14:32:39Z",
          "updatedAt": "2024-06-05T14:32:39Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "NONE",
          "body": "FWIW, I don't think making x25519 MTI would be a next big thing or anywhere near; more a recognition of reality in order to encourage anyone who hasn't included it in their implementation to move towards doing so",
          "createdAt": "2024-06-05T14:41:40Z",
          "updatedAt": "2024-06-05T14:41:40Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> P-256 is the curve for interop,\r\n\r\nFor key exchange?  Strongly disagree.  In our experience P256 is used when needed for compliance. Our customers prefer X25519 for speed.",
          "createdAt": "2024-06-05T15:03:21Z",
          "updatedAt": "2024-06-05T15:03:21Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think x25519 should be MTI. But I don't think this helps with interop. I think the problem is servers not supporting HRR. I think HRR should be MTI.",
          "createdAt": "2024-06-05T15:35:04Z",
          "updatedAt": "2024-06-05T15:35:04Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > P-256 is the curve for interop,\r\n> \r\n> For key exchange? Strongly disagree. In our experience P256 is used when needed for compliance. Our customers prefer X25519 for speed.\r\n\r\nI meant it as \"a fallback that basically everybody supports\"\r\n\r\n> I think HRR should be MTI.\r\n\r\nHRR already is MTI",
          "createdAt": "2024-06-05T15:42:35Z",
          "updatedAt": "2024-06-05T15:42:35Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > I think HRR should be MTI.\r\n> \r\n> HRR already is MTI\r\n\r\nIn that case, maybe it should be clarified that HRR is mandatory. My understanding of this discussions is that IoT servers which do not support cannot interop with Chrome. The suggestion on the list was that this is Chrome's fault. I agree that it is the servers fault.",
          "createdAt": "2024-06-05T15:56:01Z",
          "updatedAt": "2024-06-05T15:56:01Z"
        },
        {
          "author": "Andrei-Popov",
          "authorAssociation": "NONE",
          "body": "I am opposed to making 25519 MTI for a couple of reasons:\r\n1. A lot of environments are limited to NIST curves by regulation, so they cannot be compliant with any RFC that requires X25519 support.\r\n2. Changes to MTI algorithms don't sound appropriate in a -bis document:  this change would break interoperability with rfc8446-compliant implementations.",
          "createdAt": "2024-06-05T16:03:50Z",
          "updatedAt": "2024-06-05T16:04:03Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "NONE",
          "body": "> 2\\. Changes to MTI algorithms don't sound appropriate in a -bis document:  this change would break interoperability with rfc8446-compliant implementations.\r\n\r\nI don't understand how adding an MTI would do that.",
          "createdAt": "2024-06-05T16:09:47Z",
          "updatedAt": "2024-06-05T16:09:47Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I meant it as \"a fallback that basically everybody supports\"\r\n\r\nThat I fully agree with.",
          "createdAt": "2024-06-05T16:33:34Z",
          "updatedAt": "2024-06-05T16:33:34Z"
        },
        {
          "author": "russhousley",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> 2\\. Changes to MTI algorithms don't sound appropriate in a -bis document:  this change would break interoperability with rfc8446-compliant implementations.\r\n\r\nA rfc8446-compliant implementation will not be able to interoperate with a rfc8446bis-compliant implementation with X22619. I'd rather not create a situation like this when we are facing many algorithm transition issues in the next few years,",
          "createdAt": "2024-06-05T17:08:13Z",
          "updatedAt": "2024-06-05T17:08:13Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> A rfc8446-compliant implementation will not be able to interoperate with a rfc8446bis-compliant implementation with X22619. I'd rather not create a situation like this when we are facing many algorithm transition issues in the next few years,\r\n\r\nI don't know what I think about this proposal, but I'm not sure this is correct. As I understand it, the proposal is:\r\n\r\nRFC 8446: MUST P-256\r\nRFC 8446-bis: MUST P-256, MUST X25519\r\n\r\nIf each implementation only supports the MTIs, then you get the following interop matrix for which algorithm is used:\r\n\r\n```\r\n                  8446     8446-bis\r\n8446             P-256        P-256\r\n8446-bis         P-256       either\r\n```\r\n\r\nIt's true that 8446 implementations will not be compliant with 8446-bis, but I don't see how that creates an interop issue. What am I missing?\r\n\r\n\r\n\r\n",
          "createdAt": "2024-06-05T17:16:04Z",
          "updatedAt": "2024-06-05T17:16:04Z"
        },
        {
          "author": "russhousley",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr.  Correct. I was trying to address the point that was raised by @Andrei-Popov.  That is, the interoperability will only exist with X25519.",
          "createdAt": "2024-06-05T17:20:49Z",
          "updatedAt": "2024-06-05T17:20:49Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am not sure that this change is needed either, but making X25519 MTI seems preferred to forcing P-256 key shares in CH.\r\n\r\nAndrei Popov wrote:\r\n>A lot of environments are limited to NIST curves by regulation\r\nI don't think national regulation has or should have an impact on IETF MTI algorithms. The strength with IETF is that IETF does not follow any specific national regulation. It is impossible to follow all national regulations. That IETF uses a lot of of NIST algorithms is not because IETF has to, but because NIST algorithms typically are very good and selected in open projects with leading cryptographers from around the world. \r\n",
          "createdAt": "2024-06-05T17:26:09Z",
          "updatedAt": "2024-06-05T17:26:09Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I am opposed to making 25519 MTI for a couple of reasons:\r\n> \r\n> 1. A lot of environments are limited to NIST curves by regulation, so they cannot be compliant with any RFC that requires X25519 support.\r\n\r\nAs I note in https://github.com/tlswg/tls13-spec/issues/1358#issuecomment-2150482377 an \"application profile standard\" can supersede the base spec's MTI, and we have seen NSA come in and write application profile specifications for, e.g., Suite B and CNSA, so I'm not convinced that \"my regulated environment requires NIST curves\" is a fatal flaw; it can be mitigated by pointing to a profile spec that records the requirements for that (class of) environment.\r\n\r\n> 2. Changes to MTI algorithms don't sound appropriate in a -bis document:  this change would break interoperability with rfc8446-compliant implementations.\r\n\r\nI also don't understand this argument; are you saying that the MTI algorithms will be fixed for TLS 1.3 for all time?  If not, how else other than a -bis would they change?\r\nI think we have counterexamples like RFC 9142 that specifically change the MTI algorithms for in-use protocols over time.",
          "createdAt": "2024-06-05T19:14:45Z",
          "updatedAt": "2024-06-05T19:14:45Z"
        },
        {
          "author": "legna37",
          "authorAssociation": "NONE",
          "body": "[envvars_backend.txt](https://github.com/user-attachments/files/16922999/envvars_backend.txt)\r\n",
          "createdAt": "2024-09-08T16:51:16Z",
          "updatedAt": "2024-09-08T16:51:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing per WG consensus.",
          "createdAt": "2024-09-14T20:09:39Z",
          "updatedAt": "2024-09-14T20:09:39Z"
        }
      ]
    },
    {
      "number": 1365,
      "id": "I_kwDOASA0os6aCEAT",
      "title": "HKDF label budget in 7.1 is off by 9",
      "url": "https://github.com/tlswg/tls13-spec/issues/1365",
      "state": "OPEN",
      "author": "pkelsey",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This is editorial, and the doc is somewhere between done and published, but it's haunting my notes...\r\n\r\nIn 7.1, \"any label longer than 12 characters\" should be \"any label longer than 21 characters\".\r\n\r\nThis off-by-nine appears to be due to something getting lost in the wash during #964 between @ilaril's budget calculation, @ekr's post of the new set of \"tls13 ...\" labels, and subsequent removal of \"tls13 \" from those label names to replace the \"TLS1.3, \" in HkdfLabel.",
      "createdAt": "2024-10-13T19:56:55Z",
      "updatedAt": "2025-02-09T19:37:22Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, we *can* fix this in 8446-bis.\r\n\r\n@ilaril can you double check this before we change it?",
          "createdAt": "2024-10-13T21:05:59Z",
          "updatedAt": "2024-10-13T21:05:59Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The budget calculation in #964 forgot to account overheads from SHA-256 itself, and is thus off by 9 bytes. The issue mentions ML discussion and there is corrected calculation in ML messages.\r\n\r\nThe maximum Label (i.e., not including the \"tls13 \" prefix) length that avoids extra block in Derive-Secret is indeed 12 bytes. In this case, the layout of the inner HMAC input is:\r\n\r\n* 32 bytes: Masked input key\r\n* 32 bytes: HMAC padding\r\n* 2 bytes: Length of output\r\n* 1 byte: Length of label (18=6+12)\r\n* 6 bytes: Fixed prefix \"tls13 \"\r\n* 12 bytes: Label\r\n* 1 byte: Context length (32)\r\n* 32 bytes: Context\r\n* 1 byte: HKDF block counter\r\n* 1 byte: SHA-256 padding\r\n* 8 bytes: Hash input length (952)\r\n\r\nThis fills 2 SHA-256 blocks (128 bytes), which is the minimum possible for HKDF-SHA256-Expand.\r\n\r\nThe note is somewhat confusing tho:\r\n* It says \"common hash functions\" (plural), when SHA-256 is the only common hash with that limit (SHA-384 has larger limit, and all other hashes are pretty rare).\r\n* It says \"label\" (lowercase), when talking about what structure description calls \"Label\" (i.e., not including prefix).\r\n\r\nChecking other hash functions used by various cipher suites (SHA-384, SHA-512, GOST R 34.11-2012, and SM3) all seem to be able to accommodate 12 byte Label without extra block.\r\n",
          "createdAt": "2024-10-14T08:14:17Z",
          "updatedAt": "2024-10-14T08:14:17Z"
        },
        {
          "author": "pkelsey",
          "authorAssociation": "NONE",
          "body": "Agreed, I neglected the SHA-256 pad and length trailer when checking the original budget calc in #964, and was thrown by the coincidental arithmetic in \"TLS1.3, \" (9) + \"tls ...\" (18) -> \"tls13 \" (6) + published limit (12).\r\n\r\n",
          "createdAt": "2024-10-14T11:11:48Z",
          "updatedAt": "2024-10-14T11:11:48Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@pkelsey so are you good to close this?",
          "createdAt": "2025-02-09T19:37:21Z",
          "updatedAt": "2025-02-09T19:37:21Z"
        }
      ]
    },
    {
      "number": 1367,
      "id": "I_kwDOASA0os6gPweb",
      "title": "Artworks are too wide",
      "url": "https://github.com/tlswg/tls13-spec/issues/1367",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "<details>\r\n<summary>Some of the figures are a touch too wide.</summary>\r\n\r\n```\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(418): Warning: Too long line found (L459), 1 characters longer than 72 characters:\r\n                                                       ServerHello  ^ Key\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(418): Warning: Too long line found (L460), 2 characters longer than 72 characters:\r\n                                                      + key_share*  | Exch\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(418): Warning: Too long line found (L462), 5 characters longer than 72 characters:\r\n                                             {EncryptedExtensions}  ^  Server\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(418): Warning: Too long line found (L463), 5 characters longer than 72 characters:\r\n                                             {CertificateRequest*}  v  Params\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(418): Warning: Too long line found (L465), 2 characters longer than 72 characters:\r\n                                              {CertificateVerify*}  | Auth\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2674), 1 characters longer than 72 characters:\r\n   +=========+====================+=====================================+\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2675), 1 characters longer than 72 characters:\r\n   |Mode     |Handshake Context   |Base Key                             |\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2676), 1 characters longer than 72 characters:\r\n   +=========+====================+=====================================+\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2677), 1 characters longer than 72 characters:\r\n   |Server   |ClientHello ...     |server_handshake_traffic_secret      |\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2678), 1 characters longer than 72 characters:\r\n   |         |later of            |                                     |\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2679), 1 characters longer than 72 characters:\r\n   |         |EncryptedExtensions/|                                     |\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2680), 1 characters longer than 72 characters:\r\n   |         |CertificateRequest  |                                     |\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2681), 1 characters longer than 72 characters:\r\n   +---------+--------------------+-------------------------------------+\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2682), 1 characters longer than 72 characters:\r\n   |Client   |ClientHello ...     |client_handshake_traffic_secret      |\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2683), 1 characters longer than 72 characters:\r\n   |         |later of server     |                                     |\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2684), 1 characters longer than 72 characters:\r\n   |         |Finished/           |                                     |\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2685), 1 characters longer than 72 characters:\r\n   |         |EndOfEarlyData      |                                     |\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2686), 1 characters longer than 72 characters:\r\n   +---------+--------------------+-------------------------------------+\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2687), 1 characters longer than 72 characters:\r\n   |Post-    |ClientHello ...     |[sender]_application_traffic_secret_N|\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2688), 1 characters longer than 72 characters:\r\n   |Handshake|client Finished +   |                                     |\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2689), 1 characters longer than 72 characters:\r\n   |         |CertificateRequest  |                                     |\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(2971): Warning: Too long line found (L2690), 1 characters longer than 72 characters:\r\n   +---------+--------------------+-------------------------------------+\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(3885): Warning: Too long line found (L3591), 2 characters longer than 72 characters:\r\n       AEAD-Decrypt(peer_write_key, nonce, additional_data, AEADEncrypted)\r\n.../tls13/draft-ietf-tls-rfc8446bis.xml(4624): Warning: Too long line found (L4166), 1 characters longer than 72 characters:\r\n    [sender]_write_key = HKDF-Expand-Label(Secret, \"key\", \"\", key_length)\r\n```\r\n\r\n</details>\r\n",
      "createdAt": "2024-11-24T22:19:59Z",
      "updatedAt": "2025-02-09T19:37:02Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We can fix this in auth 48",
          "createdAt": "2025-02-09T19:37:01Z",
          "updatedAt": "2025-02-09T19:37:01Z"
        }
      ]
    },
    {
      "number": 1378,
      "id": "I_kwDOASA0os6qgtxz",
      "title": "SVG rendering glitches in diagrams",
      "url": "https://github.com/tlswg/tls13-spec/issues/1378",
      "state": "OPEN",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There are two SVG rendering glitches:\n\nNote the vertical bar to the left of ClientHello\n\n![Image](https://github.com/user-attachments/assets/9f8c3304-d262-4b67-b328-96b9c0778a17)\n\n\nNote that the * has been converted into a bullet.\n\n![Image](https://github.com/user-attachments/assets/7684d122-c031-4f89-89e5-9c845319752b)\n\n\n@martinthomson I can investigate these but I thought you might know an easy fix.",
      "createdAt": "2025-02-18T14:56:10Z",
      "updatedAt": "2025-02-18T21:48:01Z",
      "closedAt": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There aren't any easy fixes really.\n\nI'm not aware of an easy fix for the vertical line of '+' that you have.  '+' is a line character, so any line of them will be turned into a line.  You could replace it with '\uff0b' (the unicode fullwidth plus sign, U+FF0B) I guess, which won't be recognized.  As a fullwidth character in a monospace font, it should render identically.\n\nThe '*' will be a bullet if it is on its own.  Replacing it with a different character throughout might be an easy fix for that as well.  '\uff0a' (U+FF0A) is an option there, again.",
          "createdAt": "2025-02-18T21:48:00Z",
          "updatedAt": "2025-02-18T21:48:00Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 18,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ4OTk2MTM=",
      "title": "Adding .gitignore",
      "url": "https://github.com/tlswg/tls13-spec/pull/18",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Deal with intermediate files and build output.\n",
      "createdAt": "2014-04-17T22:01:45Z",
      "updatedAt": "2017-07-14T12:55:25Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "66db80dd5f30583ac5a87b3eb0ed39b99dae8d17",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "gitignore",
      "headRefOid": "fcec9c34f4fd0df2e9d08d4692b754028fd1a17e",
      "closedAt": "2014-04-17T23:39:37Z",
      "mergedAt": "2014-04-17T23:39:37Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 19,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ4OTk4MTQ=",
      "title": "Hardening tab indent",
      "url": "https://github.com/tlswg/tls13-spec/pull/19",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Pure whitespace changes here.\n",
      "createdAt": "2014-04-17T22:06:17Z",
      "updatedAt": "2017-07-14T12:55:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a5c19a11f19438477daf590615998d7b330d9ed6",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "indenting",
      "headRefOid": "91b355ca639911b30cb14db015947188b60b0cbb",
      "closedAt": "2014-04-18T00:19:59Z",
      "mergedAt": "2014-04-18T00:19:59Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "8ec47a91a45a4dc55252ccb7bedf6b777a0a0d71"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 20,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ4OTk5NjE=",
      "title": "Fixing definition of supported_signature_algorithms. Closes #12",
      "url": "https://github.com/tlswg/tls13-spec/pull/20",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "As agreed in Erratum.\n",
      "createdAt": "2014-04-17T22:10:05Z",
      "updatedAt": "2017-07-14T12:55:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a5c19a11f19438477daf590615998d7b330d9ed6",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "issue12",
      "headRefOid": "097c817ea0e0de36302689744f69b824465c8467",
      "closedAt": "2015-05-17T03:25:15Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 21,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ5MDAwMjA=",
      "title": "Adding comma back. Closes #14.",
      "url": "https://github.com/tlswg/tls13-spec/pull/21",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As agreed in the erratum.\n",
      "createdAt": "2014-04-17T22:11:54Z",
      "updatedAt": "2017-07-14T12:55:49Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a5c19a11f19438477daf590615998d7b330d9ed6",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "issue14",
      "headRefOid": "34d048872814ede5d99c66a8820e0c105a33fe48",
      "closedAt": "2014-06-18T20:23:22Z",
      "mergedAt": "2014-06-18T20:23:22Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 22,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ5MDAxMDI=",
      "title": "Fixing logic inversion in padding. Closes #13.",
      "url": "https://github.com/tlswg/tls13-spec/pull/22",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "As agreed in the erratum.\n",
      "createdAt": "2014-04-17T22:14:08Z",
      "updatedAt": "2017-07-14T12:55:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a5c19a11f19438477daf590615998d7b330d9ed6",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "issue13",
      "headRefOid": "e65f2b5ab12be10c9216d2f30dbc84ac32c8b26c",
      "closedAt": "2015-08-21T17:43:19Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 23,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ5MDIyNzE=",
      "title": "Makefile",
      "url": "https://github.com/tlswg/tls13-spec/pull/23",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A basic makefile.\n\nBTW, the style sheet that xml2rfc uses looks like crap.  We have used a different one in HTTP/2, but that requires Julian's xslt, because the DOM that xml2rfc produces is also crap.  I can add that in if you want, but it does make the html generation a little more cumbersome.\n",
      "createdAt": "2014-04-17T23:19:30Z",
      "updatedAt": "2017-07-14T12:55:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b1cf7f1a2fe3b673e385e63a16fb775734ed8f11",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "makefile",
      "headRefOid": "d120472ece6fc642384c24855231f2bdb523e33c",
      "closedAt": "2014-04-17T23:27:38Z",
      "mergedAt": "2014-04-17T23:27:38Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "38ed661a44ba19049dfe1847540be70c3560de60"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 25,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ5MDc5Njk=",
      "title": "Update draft-ietf-tls-tls13.md",
      "url": "https://github.com/tlswg/tls13-spec/pull/25",
      "state": "MERGED",
      "author": "yoavnir",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Provide a temporary URL in the draft for people wanting to submit pull requests, so that they don't have to search the archives for Sean's message from April 17.\n",
      "createdAt": "2014-04-18T04:21:28Z",
      "updatedAt": "2014-07-09T09:21:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "328339112728cbf198ae9278077d5762fcaa2045",
      "headRepository": "yoavnir/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "0f758009c927b2ebc4c58031a89b01ef3a9c9188",
      "closedAt": "2014-04-18T04:49:18Z",
      "mergedAt": "2014-04-18T04:49:18Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f499675fa6f8d78e089b49a1b262af57c46ae0f3"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We should probably wrap long lines that reviewing is a little easier.\n\nThe rest of the doc wraps at 80.\n",
          "createdAt": "2014-04-18T04:29:58Z",
          "updatedAt": "2014-04-18T04:29:58Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 29,
      "id": "MDExOlB1bGxSZXF1ZXN0MTUyMTMwMTI=",
      "title": "Remove compression",
      "url": "https://github.com/tlswg/tls13-spec/pull/29",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per:\nhttp://www.ietf.org/mail-archive/web/tls/current/msg12264.html\n",
      "createdAt": "2014-04-27T15:53:50Z",
      "updatedAt": "2014-06-16T03:00:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e9cf42ae8a81c4c38de1a7027822b04fe4ece2ba",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "remove_compression",
      "headRefOid": "997c518c73df441dcfc524d243ff638ab94a6a1b",
      "closedAt": "2014-04-30T16:25:41Z",
      "mergedAt": "2014-04-30T16:25:41Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 30,
      "id": "MDExOlB1bGxSZXF1ZXN0MTUzOTg1MjY=",
      "title": "Removing period from ASN.1Cert",
      "url": "https://github.com/tlswg/tls13-spec/pull/30",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix Rick's nit.\n\nBTW, someone needs to turn on automatic whitespace cleanup in emacs.\n",
      "createdAt": "2014-05-01T18:00:04Z",
      "updatedAt": "2014-06-18T02:04:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7d906f6c2716749310f545b1901aa0186e7f3c02",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "asn1cert",
      "headRefOid": "e4009a92dd247f24339fe0eaf81b77d56d0f3182",
      "closedAt": "2014-05-01T18:04:14Z",
      "mergedAt": "2014-05-01T18:04:14Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "91466895bc78496ccdc2455dabcd8e851ad52027"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 31,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU0NjYwMDg=",
      "title": "Tweaks to makefile and .gitignore",
      "url": "https://github.com/tlswg/tls13-spec/pull/31",
      "state": "MERGED",
      "author": "richsalz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-05-03T20:51:27Z",
      "updatedAt": "2014-07-25T15:21:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "72de1c278ea2981f98bc33b6f8e61e03f849fd67",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "26af01a3a35639bc413d2254ac157f5d341c201b",
      "closedAt": "2014-05-03T21:53:54Z",
      "mergedAt": "2014-05-03T21:53:54Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 34,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU0NjY2OTk=",
      "title": "Presentation language cleanups",
      "url": "https://github.com/tlswg/tls13-spec/pull/34",
      "state": "CLOSED",
      "author": "richsalz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "Clean up some ambiguities and errors in the presentation language definition.\nFix the \"syntax errors\" in the language fragments used later.\n",
      "createdAt": "2014-05-03T22:25:20Z",
      "updatedAt": "2014-07-28T15:56:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "45aed081b1e3790507d91e3e6cc48451ed9beb94",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "9e3857f5807f21037ccdb9f2411d60fbf93e8238",
      "closedAt": "2014-07-28T15:56:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 35,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU0NjY5MDQ=",
      "title": "Add rfcdiff",
      "url": "https://github.com/tlswg/tls13-spec/pull/35",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-05-03T22:58:42Z",
      "updatedAt": "2014-07-02T11:09:43Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d6541f4fdfcb1d600f1522ece5672321e6d922c8",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "add_rfcdiff",
      "headRefOid": "f70c3af7e6635f2bfd2b39d48882f846e8a834d3",
      "closedAt": "2014-05-03T22:58:47Z",
      "mergedAt": "2014-05-03T22:58:46Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "590672e36791dff9e3626a7eb9151a059fdbf6e3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 37,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU0NjcwODc=",
      "title": "Remove rsa",
      "url": "https://github.com/tlswg/tls13-spec/pull/37",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per WG consensus, remove static RSA.\n",
      "createdAt": "2014-05-03T23:27:32Z",
      "updatedAt": "2014-06-13T01:55:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "fa930b3184972635d37ce75196c7effb2b5d2ca0",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "remove_rsa",
      "headRefOid": "71bed699b626fbd681749700ff7f66d8a93a5046",
      "closedAt": "2014-05-07T16:46:55Z",
      "mergedAt": "2014-05-07T16:46:55Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c494c1630f9640f703cf5220fbe301f81a7de53b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 39,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYxNzQ0MzY=",
      "title": "Adding contributing notice",
      "url": "https://github.com/tlswg/tls13-spec/pull/39",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just ripped from the README\n",
      "createdAt": "2014-05-21T16:49:42Z",
      "updatedAt": "2017-07-14T12:55:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "45aed081b1e3790507d91e3e6cc48451ed9beb94",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "contrib",
      "headRefOid": "1e6e0ffc3e7f14ee5880a41659693861c6d70ac8",
      "closedAt": "2014-06-18T20:20:27Z",
      "mergedAt": "2014-06-18T20:20:27Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 40,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYyMzY5OTA=",
      "title": "Removing now defunct disclaimer",
      "url": "https://github.com/tlswg/tls13-spec/pull/40",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I don't think that this is valid any more.\n",
      "createdAt": "2014-05-22T18:48:45Z",
      "updatedAt": "2014-07-09T14:29:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "45aed081b1e3790507d91e3e6cc48451ed9beb94",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "remove_disclaimer",
      "headRefOid": "d90b694fc2c028d34938e348da9bb7fe5406c894",
      "closedAt": "2014-05-22T19:08:34Z",
      "mergedAt": "2014-05-22T19:08:34Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "0627e5dd5462f1652c20de523006dbe6e9ab53ac"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 41,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYyNDI1MDA=",
      "title": "Remove renegotiation",
      "url": "https://github.com/tlswg/tls13-spec/pull/41",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "So I started here with the intent to just put in a proposal for key exhaustion.  Turned out doing the whole thing for #38.\n\nThere are a few things to note here, mostly related to the key renewal stuff:\n- ChangeCipherSpec does double duty here.  The first time it's used, it moves from the null initial state to the first encrypted mode.  Subsequent times, it's used to crank the master secret over.\n- I'm requiring that implementations answer a ChangeCipherSpec with a ChangeCipherSpec.  This means that the master secrets used for read and write are basically in sync.\n- I've removed HelloRequest and deprecated its code point and the no_renegotiation alert code\n- The text around connection state could be improved further, I'm sure.\n",
      "createdAt": "2014-05-22T20:33:38Z",
      "updatedAt": "2014-11-09T19:36:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0ea06ccca8bf1bb04bd5ce868d7dc6a0a44a0908",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "multiccs",
      "headRefOid": "793e782f4a959bcdc444c072b4c453424eeab5d0",
      "closedAt": "2014-11-09T19:36:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "These are some pretty big changes to the state machine just to have in a pull request and not have explicit discussion on the mailing list.  Or am I wrong these all appear on the list?\n\nDuring the Interim F2F, Yoav proposed a \"reset\" message that keeps the underlying network open, but has each side reset to their initial connection state.  That seems a cleaner approach.\n",
          "createdAt": "2014-05-23T01:30:36Z",
          "updatedAt": "2014-05-23T01:30:36Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@richsalz yes.  Perhaps the PR was premature.  I was planning to send an email this morning.  I've only shared this with @ekr at this point.  We've been discussing the use of CCS (vs something new like Yoav's idea) and whether the use of the same function is appropriate for cranking the master secret.\n",
          "createdAt": "2014-05-23T13:30:14Z",
          "updatedAt": "2014-05-23T13:30:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that we have a much newer one of these.\n",
          "createdAt": "2014-11-09T19:36:42Z",
          "updatedAt": "2014-11-09T19:36:42Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 44,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY4OTM0MzU=",
      "title": "Remove non-AEAD cipher suites.",
      "url": "https://github.com/tlswg/tls13-spec/pull/44",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per the consensus call closed April 26, remove all non-AEAD cipher suites\nand adjust the document around it.\n",
      "createdAt": "2014-06-09T16:20:39Z",
      "updatedAt": "2014-06-12T09:01:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "beed60ff2ab315f5d55149b577889db513c62e53",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "aead_only",
      "headRefOid": "c2fc090ba72633882370ade9a9f0ff4b2b342333",
      "closedAt": "2014-06-11T14:25:47Z",
      "mergedAt": "2014-06-11T14:25:47Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 45,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcwNzc5NDA=",
      "title": "Clean up removal of all non-AEAD modes",
      "url": "https://github.com/tlswg/tls13-spec/pull/45",
      "state": "MERGED",
      "author": "dkg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The draft was in a sort of halfway state between whether TLSCiphertext\nhas a fragment that is a selection or just embedding the AEAD elements\ndirectly.  This should normalize it to the embedded view without the\nextra GenericAEADCipher struct definition.\n\n(i don't think this changes the logic of the draft at all)\n",
      "createdAt": "2014-06-12T20:30:37Z",
      "updatedAt": "2014-06-18T19:44:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e2ec5a396e58638f452b945dada531224c50d92b",
      "headRepository": "dkg/tls13-spec",
      "headRefName": "master",
      "headRefOid": "e3f02585b0733079c7695f6fe81d93a1a2397e8c",
      "closedAt": "2014-06-18T19:44:10Z",
      "mergedAt": "2014-06-18T19:44:10Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "da959305af7b412f3f1364fca69887b2f8f765ba"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 46,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0MTI3NTE=",
      "title": "Update signed_params to included hello.random data",
      "url": "https://github.com/tlswg/tls13-spec/pull/46",
      "state": "MERGED",
      "author": "colmmacc",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This change clarifies that the signature over ServerDHParams data is a\nsignature over the hash of the client + server hello random random data and the\nServerDHParams data.\n\nI believe this small regression was introduced in TLS1.2 with the result\nthat the TLS1.2 RFC (and current TLS1.3 draft) does not contain sufficient detail\nto implement TLS + DHE. \n\nAll TLS1.2 clients and servers that I have tested do include the hello random \ndata (and omitting it would leave implementations open to replay attacks).\n",
      "createdAt": "2014-06-20T15:48:13Z",
      "updatedAt": "2014-06-20T16:28:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1c45e56d7edd9e7c86d1265d71b1d34a907c94ac",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "563d32665dca3cbf5f7b56ab4ce2ee462e248181",
      "closedAt": "2014-06-20T16:28:48Z",
      "mergedAt": "2014-06-20T16:28:48Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the PR.\n\nNote that the formal PDU definitions here appear to be correct, so there should\nbe enough information to implement things correctly: \n\n```\n          case dhe_rsa:\n              ServerDHParams params;\n              digitally-signed struct {\n                  opaque client_random[32];\n                  opaque server_random[32];\n                  ServerDHParams params;\n              } signed_params;\n```\n\nI agree it wouldn't hurt to have the explanatory text be clearer. However, in TLS 1.2 we stopped explicitly saying that things were hashed before signing (because we are treating signing as a primitive), so we probably don't want to say \"hash\". Maybe just say a signature over the random values\nand the params? \n",
          "createdAt": "2014-06-20T16:04:05Z",
          "updatedAt": "2014-06-20T16:04:05Z"
        },
        {
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah, this explains my confusion. After reading section 7.4.1.4.1, I formed the opposite impression about signing;  that hashing and signing are explicitly different primitive operations and may be composed in a variety of ways.  \n\nBut I see how that \"digitally-signed\" seems to be a reserved term that implies both operations. \n",
          "createdAt": "2014-06-20T16:14:59Z",
          "updatedAt": "2014-06-20T16:14:59Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not trying to discourage you here. If you were confused, others will probably be as well, so if you have some text that you think would clear this up, it would be welcome.\n",
          "createdAt": "2014-06-20T16:17:46Z",
          "updatedAt": "2014-06-20T16:17:46Z"
        },
        {
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks! I've updated the PR with an even simpler diff that I think would have made me less confused when I got to it. \n",
          "createdAt": "2014-06-20T16:23:20Z",
          "updatedAt": "2014-06-20T16:23:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 48,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0MjEyNjI=",
      "title": "fix typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/48",
      "state": "MERGED",
      "author": "dkg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-06-20T18:42:24Z",
      "updatedAt": "2014-06-24T22:09:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "fa0ec3268a0c124b1ed724e089ac18d37d4f8da1",
      "headRepository": "dkg/tls13-spec",
      "headRefName": "master",
      "headRefOid": "c6c757bb5798c821d7bd08d1ca02eefd9cf40f2b",
      "closedAt": "2014-06-24T22:09:01Z",
      "mergedAt": "2014-06-24T22:09:01Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 49,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0MzY3MTg=",
      "title": "Faster travis run",
      "url": "https://github.com/tlswg/tls13-spec/pull/49",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This makes a big difference, see: https://travis-ci.org/martinthomson/drafts/builds\n",
      "createdAt": "2014-06-21T05:37:45Z",
      "updatedAt": "2014-06-21T14:47:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "fa0ec3268a0c124b1ed724e089ac18d37d4f8da1",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "travis-speedup",
      "headRefOid": "891a80b0f6e59bbcb805179dcda80a2667491e72",
      "closedAt": "2014-06-21T14:47:28Z",
      "mergedAt": "2014-06-21T14:47:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "10b745ad87130c381d9f6ccb4cbf14d338dd6b23"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 51,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc4NTc0Njk=",
      "title": "Encrypt content type",
      "url": "https://github.com/tlswg/tls13-spec/pull/51",
      "state": "MERGED",
      "author": "dkg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-07-01T21:59:53Z",
      "updatedAt": "2015-09-22T20:05:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b96bd720e79b6667109fd09c93b155cd8e316d68",
      "headRepository": "dkg/tls13-spec",
      "headRefName": "encrypt-content-type",
      "headRefOid": "26716d01486bfb7e19f19dacc5d9409719a664ce",
      "closedAt": "2015-09-22T20:05:44Z",
      "mergedAt": "2015-09-22T20:05:44Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "95dad3cb47427f2a5c6a0d1c3c38a71a4e50f5f0"
      },
      "comments": [
        {
          "author": "dkg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This pull request has been updated to the current master\n",
          "createdAt": "2015-09-20T22:22:49Z",
          "updatedAt": "2015-09-20T22:22:49Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Consensus at meeting to merge this PR with updates and with the dummy type byte restored.\n\n@ekr has action item to actually measure whether we can strip off the now fixed type, record.version bytes.\n",
          "createdAt": "2015-09-21T20:17:55Z",
          "updatedAt": "2015-09-21T20:17:55Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've updated this with the expected changes: dummy external ContentType octet is restored, and fragment.type is after fragment.content instead of the other way around (to make it easier to encrypt without having to shuffle buffers).\n",
          "createdAt": "2015-09-22T06:07:44Z",
          "updatedAt": "2015-09-22T06:07:44Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with davegarrett's suggestion about field naming here, and have supplied a change implementing it.\n",
          "createdAt": "2015-09-22T16:28:19Z",
          "updatedAt": "2015-09-22T16:28:19Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 52,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc5NDg0NDQ=",
      "title": "First cut at 1RTT handshake. Lots of OPEN ISSUEs and TODOs",
      "url": "https://github.com/tlswg/tls13-spec/pull/52",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-07-03T14:48:34Z",
      "updatedAt": "2014-07-06T05:05:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "68051a3079cd71fa198a34617d16f1ca9744e8bf",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "1rtt",
      "headRefOid": "4dcdc651bb3f7dfad023e68b7ca041a13a24777d",
      "closedAt": "2014-07-06T05:05:15Z",
      "mergedAt": "2014-07-06T05:05:15Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 63,
      "id": "MDExOlB1bGxSZXF1ZXN0MTgwNzY2MDY=",
      "title": "Remove the rest of non-DHE DH",
      "url": "https://github.com/tlswg/tls13-spec/pull/63",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-07-08T00:02:25Z",
      "updatedAt": "2014-07-08T00:25:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0b0e7b8a0264a5e6d96d0e0120c89472a0b834b5",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "remove_dh_x",
      "headRefOid": "9de2c4dad8c09002d3fe67ce332cebc0b8f747c0",
      "closedAt": "2014-07-08T00:25:50Z",
      "mergedAt": "2014-07-08T00:25:50Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "02c49fafc7a093c1f20b5ba3ce4f5b9769870153"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 65,
      "id": "MDExOlB1bGxSZXF1ZXN0MTg0NzM3OTU=",
      "title": "Issue42 remove gmt",
      "url": "https://github.com/tlswg/tls13-spec/pull/65",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-07-16T15:08:52Z",
      "updatedAt": "2014-07-18T20:39:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "da567dcd9ab789b8e8d09b363f15c308c4ae77a7",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue42_remove_gmt",
      "headRefOid": "7c6cce97281d338b52e194c9cf1a4cd3857806e2",
      "closedAt": "2014-07-18T20:39:26Z",
      "mergedAt": "2014-07-18T20:39:26Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 77,
      "id": "MDExOlB1bGxSZXF1ZXN0MjAzMjA1NzA=",
      "title": "Remove length from additional_data. Fixes #67. Fixes #47",
      "url": "https://github.com/tlswg/tls13-spec/pull/77",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-08-26T16:31:04Z",
      "updatedAt": "2014-09-06T21:23:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0ea06ccca8bf1bb04bd5ce868d7dc6a0a44a0908",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue67_remove_aead_length",
      "headRefOid": "bcec710bf2106005e5efd9552cd546e0975d43f3",
      "closedAt": "2014-09-06T21:23:26Z",
      "mergedAt": "2014-09-06T21:23:26Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7f5bd1a51dd8798233902f32089242cbbd0009bb"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 81,
      "id": "MDExOlB1bGxSZXF1ZXN0MjIzNzA5MzQ=",
      "title": "Merge in ECC and Negotiated FF-DHE",
      "url": "https://github.com/tlswg/tls13-spec/pull/81",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-10-07T17:54:04Z",
      "updatedAt": "2014-10-07T17:54:46Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "710ee9b78215a55212f1fe2db747a8a9ac9cb968",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "WIP_ECC_and_DHE-DL",
      "headRefOid": "be7471d70001bbe134afb6b0d79c67b7cdf6fedf",
      "closedAt": "2014-10-07T17:54:46Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 82,
      "id": "MDExOlB1bGxSZXF1ZXN0MjIzNzIzNDU=",
      "title": "Merge in ECC and FF-DHE. Fixes #79. Fixes #73. Fixes #71. Fixes #78. Fix...",
      "url": "https://github.com/tlswg/tls13-spec/pull/82",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "...es #57\n",
      "createdAt": "2014-10-07T18:15:31Z",
      "updatedAt": "2014-10-09T19:53:44Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "710ee9b78215a55212f1fe2db747a8a9ac9cb968",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "Merge_in_ECC_and_FF-DHE",
      "headRefOid": "43dfc2412cf5b18c2c9b6d4425d639378e9b2848",
      "closedAt": "2014-10-09T19:53:44Z",
      "mergedAt": "2014-10-09T19:53:44Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "72e31b28b08960cd625da00bf49b2bdf2b1eba1c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 84,
      "id": "MDExOlB1bGxSZXF1ZXN0MjMzOTc1Mjg=",
      "title": "Pre submit cleanup",
      "url": "https://github.com/tlswg/tls13-spec/pull/84",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "MT, please double-check\n",
      "createdAt": "2014-10-27T16:49:11Z",
      "updatedAt": "2014-10-27T18:09:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7a731b8b2c8786e72df633787e7b83e994f7d253",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "pre_submit_cleanup",
      "headRefOid": "60937b8b22292bf9f9b75a6e73436b523771240f",
      "closedAt": "2014-10-27T18:09:11Z",
      "mergedAt": "2014-10-27T18:09:11Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7f58e43d875e3865396fffe665b0eaca2b3a17ae"
      },
      "comments": [
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should remove Dierks.\n",
          "createdAt": "2014-10-27T16:51:22Z",
          "updatedAt": "2014-10-27T16:51:22Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2014-10-27T17:16:47Z",
          "updatedAt": "2014-10-27T17:16:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 85,
      "id": "MDExOlB1bGxSZXF1ZXN0MjM0NDAzNzU=",
      "title": "Fix minor editorial error",
      "url": "https://github.com/tlswg/tls13-spec/pull/85",
      "state": "CLOSED",
      "author": "songdongsheng",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-10-28T08:25:54Z",
      "updatedAt": "2014-10-29T07:35:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3bed720ed2faf1fdc95f87b321d1daea7342d0a9",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "8ba716052b627e08a64757bf44f480bd8ee784c2",
      "closedAt": "2014-10-28T13:16:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The current text is actually correct. Counts here are in bytes.\n",
          "createdAt": "2014-10-28T13:16:37Z",
          "updatedAt": "2014-10-28T13:16:37Z"
        },
        {
          "author": "songdongsheng",
          "authorAssociation": "NONE",
          "body": "uint16 longer&lt;0..800&gt;;\n\nI'm not understand, uint16 is 2 bytes, longer length is 800, then from C language view, it's up to 2 \\* 800 = 1600 bytes, 800 16-bit unsigned integers.\n\nIs the length always byte-sized, not type-sized ? If so, I think it should be documented clearly.\n",
          "createdAt": "2014-10-29T07:23:58Z",
          "updatedAt": "2014-10-29T07:26:15Z"
        },
        {
          "author": "songdongsheng",
          "authorAssociation": "NONE",
          "body": "> In either case, the length declares the number of bytes, not the number of elements, in the vector.\n\nSorry, I missed this sentence, it's very wired for programs. I think you can make this sentence catch eyes e.g. use underscore, bold or colored font.\n",
          "createdAt": "2014-10-29T07:35:19Z",
          "updatedAt": "2014-10-29T07:35:19Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 86,
      "id": "MDExOlB1bGxSZXF1ZXN0MjM2OTI2NDI=",
      "title": "Issue80 single point format",
      "url": "https://github.com/tlswg/tls13-spec/pull/86",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Remove point format negotiation.\n",
      "createdAt": "2014-10-31T17:31:17Z",
      "updatedAt": "2014-12-01T15:51:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3bed720ed2faf1fdc95f87b321d1daea7342d0a9",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "Issue80_single_point_format",
      "headRefOid": "d9c78a3b796b2b6aa0ad4cb13b4923fd361765fa",
      "closedAt": "2014-12-01T15:51:29Z",
      "mergedAt": "2014-12-01T15:51:32Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c102052029e6ebb7fa252c80ca1ad6d71b8959fc"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Per WG discussion.\n",
          "createdAt": "2014-12-01T15:51:29Z",
          "updatedAt": "2014-12-01T15:51:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 88,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQwODQwNjc=",
      "title": "Issue38 remove renegotiation",
      "url": "https://github.com/tlswg/tls13-spec/pull/88",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-11-07T21:36:38Z",
      "updatedAt": "2014-12-01T15:52:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3bed720ed2faf1fdc95f87b321d1daea7342d0a9",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue38_remove_renegotiation",
      "headRefOid": "88e8eba83a364dca9405c8860d68d951dd4620e4",
      "closedAt": "2014-12-01T15:52:47Z",
      "mergedAt": "2014-12-01T15:52:47Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 89,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQwODQwOTE=",
      "title": "Issue63 session hash",
      "url": "https://github.com/tlswg/tls13-spec/pull/89",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-11-07T21:37:06Z",
      "updatedAt": "2014-12-30T22:34:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b52af6907d1b7cd5cf7409746ae8a352c5a6f580",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue63_session_hash",
      "headRefOid": "328c744e4fdae985f0b260dd84a656b14b409d1c",
      "closedAt": "2014-12-30T22:34:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased into: \nhttps://github.com/tlswg/tls13-spec/pull/119\n",
          "createdAt": "2014-12-30T22:34:13Z",
          "updatedAt": "2014-12-30T22:34:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 90,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQxMDg0MDg=",
      "title": "Wip optls",
      "url": "https://github.com/tlswg/tls13-spec/pull/90",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-11-09T00:42:22Z",
      "updatedAt": "2015-07-15T17:34:25Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3bed720ed2faf1fdc95f87b321d1daea7342d0a9",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "WIP_optls",
      "headRefOid": "6427bba4c00e31cbcdbe9251b782af501ec70933",
      "closedAt": "2015-07-15T17:34:25Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 94,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQzOTE1MzU=",
      "title": "Issue91 add update mechanism",
      "url": "https://github.com/tlswg/tls13-spec/pull/94",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "WIP for WG discussion. Not finished.\n",
      "createdAt": "2014-11-13T19:01:18Z",
      "updatedAt": "2015-08-21T17:43:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e88b8554d9de33df2d46e7de4e65fb9c38407c70",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue91_add_update_mechanism",
      "headRefOid": "fe256253d353de01b8663f6998302df8172ee5ab",
      "closedAt": "2015-08-21T17:43:19Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 95,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQzOTE1ODU=",
      "title": "Issue92 move client auth to update",
      "url": "https://github.com/tlswg/tls13-spec/pull/95",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "WIP for WG discussion. Not finished.\n",
      "createdAt": "2014-11-13T19:01:44Z",
      "updatedAt": "2015-08-21T17:43:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "910a9ee7c6512d7b93f0d778ca4e3a6b3e607587",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue92_move_client_auth_to_update",
      "headRefOid": "de3bc96b6951488a782a97a1acb39ea6e6038097",
      "closedAt": "2015-08-21T17:43:19Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 96,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQzOTE2MjM=",
      "title": "Issue93 wip session resumption via update",
      "url": "https://github.com/tlswg/tls13-spec/pull/96",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "WIP for WG discussion. Not finished.\n",
      "createdAt": "2014-11-13T19:02:18Z",
      "updatedAt": "2015-08-21T17:43:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "910a9ee7c6512d7b93f0d778ca4e3a6b3e607587",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue93_WIP_session_resumption_via_update",
      "headRefOid": "f73e359e3d8f2a7360cc866755195ced7f2a9e2c",
      "closedAt": "2015-08-21T17:43:19Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 100,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUzMDQwNjc=",
      "title": "Specify padding and context strings for signatures",
      "url": "https://github.com/tlswg/tls13-spec/pull/100",
      "state": "CLOSED",
      "author": "agl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The TLS 1.2 ServerKeyExchange signature never included enough context\nand it was possible to lift a signature for one ciphersuite into a\nhandshake for a different one. TLS 1.2 only avoided signature\nrepurposing attacks because of luck[1].\n\nAdditionally, TLS 1.2 allows an attacker to obtain a signature of a\nmessage with a chosen, 32-byte prefix.\n\nBecause of this, this change causes TLS 1.3 to include 64 bytes of\npadding at the begining of signed messages in order to easily clear the\nchosen-prefix and also context strings to ensure that signatures cannot\nbe repurposed.\n\nFor more context, see\nhttps://www.ietf.org/mail-archive/web/tls/current/msg14734.html\n\n[1] https://www.cosic.esat.kuleuven.be/publications/article-2216.pdf\n",
      "createdAt": "2014-12-01T22:26:13Z",
      "updatedAt": "2015-05-16T22:05:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b52af6907d1b7cd5cf7409746ae8a352c5a6f580",
      "headRepository": "agl/tls13-spec",
      "headRefName": "sigcontext",
      "headRefOid": "60d9cd68eb7d3e2ded983c1d085b416779d05e1d",
      "closedAt": "2015-05-16T22:05:39Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed with a separate PR.\n",
          "createdAt": "2014-12-30T19:24:10Z",
          "updatedAt": "2014-12-30T19:24:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 102,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY0MTE1MzY=",
      "title": "remove obsolete differences since TLS 1.1 section",
      "url": "https://github.com/tlswg/tls13-spec/pull/102",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "TLS 1.1 [RFC 4346] & TLS 1.2 [RFC 5246] each only have a list of changes from the immediately previous version. This current draft has both the current changelog since TLS 1.2 and the old list of changes from TLS 1.1 to 1.2. The contents of this old section are no longer relevant, in particular it mentions TLS_RSA_WITH_AES_128_CBC_SHA as MTI which is no longer permitted at all. Suggesting just removing this now.\n",
      "createdAt": "2014-12-20T03:31:22Z",
      "updatedAt": "2015-02-12T20:07:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b52af6907d1b7cd5cf7409746ae8a352c5a6f580",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "15bdb4a2c49a337efc0a2bfded53521938e4e3c0",
      "closedAt": "2014-12-22T21:39:38Z",
      "mergedAt": "2014-12-22T21:39:38Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4872fd6b963783064a4b01b020a16a231cdd6c78"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks. Merged.\n",
          "createdAt": "2014-12-22T21:39:40Z",
          "updatedAt": "2014-12-22T21:39:40Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 105,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY0ODkwNzQ=",
      "title": "remove SSL 2 backwards compatibility section & prohibit SSL negotiation",
      "url": "https://github.com/tlswg/tls13-spec/pull/105",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A straightforward cleanup of part of the backwards compatibility section. (handles an easy part of issue #54) SSL 2.0 backwards compatibility was previously deprecated in TLS 1.2 (2008) and was warned to be \"phased out with all due haste\". RFC 6176 (2011) prohibits it entirely. It's a section of obsolete complexity still in the draft. Remove it and replace it with a simple \"MUST NOT\" send or accept.\n\n---\n\nEdit to correct attribution of the \"phased out with all due haste\" language. Whilst in the TLS 1.2 (2008) spec, it was first introduced in SSL 3 (1996). It has been around for 19 years, not 5.\n",
      "createdAt": "2014-12-23T00:03:28Z",
      "updatedAt": "2015-02-12T20:06:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1c897d52fefdac3c68e3c333c939b6cacdb5219d",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "97a29004cdf8b6e0a91f85ab90c9c67482cc3925",
      "closedAt": "2015-02-12T19:40:48Z",
      "mergedAt": "2015-02-12T19:40:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a9275bbb93aadb92f6709ead593d2ecdb7cfb674"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dave, can you please post about this to the list?\n",
          "createdAt": "2014-12-23T00:14:40Z",
          "updatedAt": "2014-12-23T00:14:40Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have to ask, why not SSL 3 as well?\n",
          "createdAt": "2014-12-23T20:53:25Z",
          "updatedAt": "2014-12-23T20:53:25Z"
        },
        {
          "author": "yuhong",
          "authorAssociation": "NONE",
          "body": "This is about SSLv2 compatibility needing a different ClientHello format.\n",
          "createdAt": "2014-12-23T21:50:00Z",
          "updatedAt": "2014-12-23T21:50:00Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I completely agree that similar language should be added for SSL3 as well, however its prohibition RFC is not done yet. SSL2 was just an obvious start.\n\nI'll write another PR with the SSL3 prohibition draft language added in.\nhttps://tools.ietf.org/html/draft-ietf-tls-sslv3-diediedie-00\n",
          "createdAt": "2014-12-24T00:12:56Z",
          "updatedAt": "2014-12-24T00:12:56Z"
        },
        {
          "author": "yuhong",
          "authorAssociation": "NONE",
          "body": "One possible idea if SSL 2.0 ClientHello compatibility is still needed is to max it at TLS 1.2.\n",
          "createdAt": "2014-12-24T00:30:35Z",
          "updatedAt": "2014-12-24T00:30:45Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There is discussion on list, but just let me say for the record here that I am astonished that this wasn't considered a non-controversial cleanup. The SSL2 hello has been deprecated for 20 years...\n",
          "createdAt": "2014-12-28T00:15:16Z",
          "updatedAt": "2014-12-28T00:15:16Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Per Brian's suggestion, this PR is now just for the changes with large agreement.\n\nProhibiting all SSL v2 CLIENT-HELLO entirely is now moved to issue #113.\n",
          "createdAt": "2014-12-30T09:20:53Z",
          "updatedAt": "2014-12-30T09:20:53Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 107,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY1NDkzMzQ=",
      "title": "revise backwards compatibility & fix record layer version",
      "url": "https://github.com/tlswg/tls13-spec/pull/107",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This does the following:\n1) Reorganize the backwards compatibility section into subsections for easier readability\n2) Freezes the ClientHello record layer version to TLS 1.0 (its effective compatible version)\n3) Adds explicit requirement that all other record layer versions match the negotiated version\n\nThis plus PR #105 should be sufficient to close issue #54.\n\nThe record layer requirements were proposed by Brian Smith on the list.\nhttp://www.ietf.org/mail-archive/web/tls/current/msg14870.html\n(also mentioned by him in other discussions)\n",
      "createdAt": "2014-12-24T08:12:26Z",
      "updatedAt": "2015-04-05T22:07:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8d22c193a8e42887ff75e4450c7d067b10526d40",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-3",
      "headRefOid": "4b25f331bc3020a1e395de478211997253b90233",
      "closedAt": "2015-04-02T18:39:00Z",
      "mergedAt": "2015-04-02T18:39:00Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "12a44fed38ec059fbfa9241d816d343145a74795"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't generally use capitals and periods for sentence fragments in parentheticals. Full sentences generally shouldn't be in parentheticals. Other instances of \"(see ___)\" prefer a lowercase 's' and no period, but it's not consistent throughout the whole document. I'd lean towards that, however upon inspection I don't think this cross reference is useful at all. I'll just remove it.\n\nI'll also correct the embarrassingly stupid typo. (spellchecker doesn't work in web interface)\n\nI'm going to refactor this slightly to move more info down to the end of the section rather than cramming everything in here.\n",
          "createdAt": "2014-12-28T01:39:28Z",
          "updatedAt": "2014-12-28T01:39:28Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Can you think of a good external reference to cite for the buggy server blurb? If it's a \"complex topic beyond the scope of this document\" then it ideally should reference more information elsewhere.\n",
          "createdAt": "2014-12-28T02:48:32Z",
          "updatedAt": "2014-12-28T02:48:32Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Re: other vendors' ClientHello version strategies:\nIt occurs to me that we might prefer to make the ClientHello record version a SHOULD rather than a MUST to allow for some flexibility in implementation. If anyone is sending different versions in different instances to cope with specific server bugs, that may not need to be completely prohibited. (if not needed, then a MUST is probably appropriate)\n",
          "createdAt": "2014-12-28T10:11:08Z",
          "updatedAt": "2014-12-28T10:11:08Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "RE: \"This document describes...for SSL 3.0.\"\nI disagree that it is unnecessary. Whilst redundant, I think the reason why TLS uses weird version numbers needs to be stated somewhere in this document. Moving it to the backwards compatibility section is an option if you think it's in the way up here.\n\nRE: second section of record layer version text\nI have that set aside due to formatting concerns. The \"version\" section is indented in a list and putting lots of text in there risks cluttering things up a bit. I'd prefer to have the minimum definition and requirements under that heading and additional issues separately, in order to maximize readability.\n",
          "createdAt": "2015-01-27T23:29:53Z",
          "updatedAt": "2015-01-27T23:29:53Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well crud. I rebased this and GitHub dropped the comments from @briansmith. They haven't vanished entirely into the aether, just not shown above in the threading here. For reference, imagine there are proper \"commented on an outdated diff\" lines above and that I didn't confuse GitHub and am not talking to myself. I shall endeavor to be less of a GitHub noob in the future.\n\nhttps://github.com/davegarrett/tls13-spec/commit/959dda3d7e7cf52ee78e767fafbbc66c9fd129f0#commitcomment-9100761\nhttps://github.com/davegarrett/tls13-spec/commit/959dda3d7e7cf52ee78e767fafbbc66c9fd129f0#commitcomment-9100772\nhttps://github.com/davegarrett/tls13-spec/commit/51d2686e791ff22e990ed0348fcb99df35314146#commitcomment-9100802\nhttps://github.com/davegarrett/tls13-spec/commit/51d2686e791ff22e990ed0348fcb99df35314146#commitcomment-9100813\nhttps://github.com/davegarrett/tls13-spec/commit/15fdc807377976e97a8471aa850bae2439ff67a2#commitcomment-9444688\nhttps://github.com/davegarrett/tls13-spec/commit/15fdc807377976e97a8471aa850bae2439ff67a2#commitcomment-9444713\n",
          "createdAt": "2015-02-12T21:26:16Z",
          "updatedAt": "2015-02-12T21:26:16Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It might be simpler to just change to:\n-  TLS clients MUST set this version to { 3, 1 } for the initial ClientHello and all alert messages.\n-  For the ServerHello and all other TLS records this MUST be equal to the negotiated version.\n\nAdditionally, dropping the version field from TLSCipherText entirely might be worth considering, but that's outside the scope of this here.\n",
          "createdAt": "2015-02-13T21:09:00Z",
          "updatedAt": "2015-02-13T21:09:00Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(I assume you mean s/clients/implementations/? Otherwise there's still an unspecified hole.)\n\nAll alerts period, or just those before version negotiation? OpenSSL, after version negotiation, will currently reject any record (of whatever type) whose version does not match the negotiated version. Go's crypto/tls does the same thing. I haven't done a survey of other implementations yet. It can certainly change for TLS 1.3. But, as an implementer, I would prefer that field be hammered down in a way that can advise older versions, whether or not 1.3 additionally clamps it post-negotiation.\n\nIf just those before version negotiation, I think a cleaner statement of that rule is:\n- Prior to version negotiation, this version MUST by {3, 1}. This includes the initial ClientHello and any alerts sent during version negotiation.\n- After version negotiation, this MUST be equal to the negotiated version. This includes the ServerHello and all following records.\n\nThis is fairly straightforward and clean. The record-layer initializes in \"proto TLS\" which uses {3, 1}. Then it switches one to a concrete version. The one ambiguity left is a client's `protocol_version` alert. That one is sent when one side has done negotiation, but not the other. Which is where the trickiness I mentioned comes up with existing servers[*]. Whether the complexity is worth bothering with is another matter.\n\n(For context, I'm coming at this from having recently rewritten BoringSSL's version negotiation logic. 1.2's failure to clearly specify version negotiation was a huge pain point.)\n\n[*] For completeness, OpenSSL client has its own quirks. If the client has a minimum version > TLS 1.0 AND the server sends some alert with record-layer {3, 1}, the client will fail to read it. OpenSSL client negotiates based on record-layer version, not ServerHello. But that implementation is sufficiently weird that I don't think it's worth bothering about. See links in #136.\n",
          "createdAt": "2015-02-13T22:01:24Z",
          "updatedAt": "2015-02-13T22:01:24Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I was proposing {3,1} for all alerts, yes. (even old versions should be able to parse new; an unknown error could just be generically acted on) However, if there are implementations that would find this inconsistent with current behavior, then I agree it's not worth it.\n\nI like the language you suggested. It deals with the error cases and is quite clear. (modulo the typo ;)\n\nTo deal with the protocol_version case, this might cover everything:\n-  Prior to version negotiation, this value MUST be { 3, 1 }. This includes the ClientHello, records sent during negotiation, and errors aborting the negotiation.\n-  After version negotiation, this MUST be equal to the negotiated version. This includes the ServerHello and all following records.\n",
          "createdAt": "2015-02-13T23:54:31Z",
          "updatedAt": "2015-02-13T23:54:31Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"records sent during negotiation\" would count EarlyDataExtension records as well. Arguably this should be { 3, 4 }, but I don't think it's worth the complexity.\n",
          "createdAt": "2015-02-14T00:00:00Z",
          "updatedAt": "2015-02-14T00:00:00Z"
        },
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "Version negotiation is completed by the first packet that the server sends (ie typically ServerHello), and the client typically only sends one packet if it cares about compatibility with versions prior to TLS 1.3, so forcing the packet version to {3, 1} for the ClientHello should be sufficient.\n",
          "createdAt": "2015-02-14T16:55:33Z",
          "updatedAt": "2015-02-14T16:55:33Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Per proposed resolution at interim, we can now simplify things down to one frozen and deprecated value. This is the ideal solution, IMO. In addition to updates for this, I've also renamed the field to \"record_version\" instead of just \"version\" as people easily mix up the various version fields. It now has a different expected behavior, so a different name is appropriate.\n",
          "createdAt": "2015-03-10T19:06:21Z",
          "updatedAt": "2015-03-10T19:06:21Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm fine with freezing it going forward (it means that someday in the far far future perhaps we can forget about this craziness altogether). But note that implementations supporting TLS < 1.3 will still need to do a swap when negotiating older versions. Existing clients and servers (including anything derived from OpenSSL) will reject post-version-negotiation records that don't have the right record-layer version. I don't know if advice on that front belongs in this draft or elsewhere or nowhere, but it is a concern implementations will have for a while.\n",
          "createdAt": "2015-03-10T19:36:19Z",
          "updatedAt": "2015-03-10T19:36:19Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good point. I've updated backwards compatibility section for that.\n",
          "createdAt": "2015-03-10T20:07:46Z",
          "updatedAt": "2015-03-10T20:07:46Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "More fixes and rebasing.\n",
          "createdAt": "2015-03-10T23:43:10Z",
          "updatedAt": "2015-03-10T23:43:10Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note that I expect a new version negotiation mechanism implemented via an extension will be desired in order to deal with TLS 1.3 intolerance, and thus parts of this will be changed again. ClientHello.client_version would most likely be frozen to {3,3} in such a mechanism. That, however, is outside the scope of this PR which is to revise the existing backwards compatibility and freeze the record layer version.\n",
          "createdAt": "2015-03-25T23:30:50Z",
          "updatedAt": "2015-03-25T23:30:50Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 110,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY2NTE5NjY=",
      "title": "Issue100 context strings",
      "url": "https://github.com/tlswg/tls13-spec/pull/110",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is an update of AGL's PR #100 \n",
      "createdAt": "2014-12-29T16:59:18Z",
      "updatedAt": "2014-12-30T19:21:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1c897d52fefdac3c68e3c333c939b6cacdb5219d",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue100_context_strings",
      "headRefOid": "50b516e497e51e8499480e3191a46bbf6f664032",
      "closedAt": "2014-12-30T19:21:56Z",
      "mergedAt": "2014-12-30T19:21:56Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 111,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY2NjQwNjU=",
      "title": "Issue108 106 handshake numbers",
      "url": "https://github.com/tlswg/tls13-spec/pull/111",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-12-29T22:02:56Z",
      "updatedAt": "2014-12-30T19:21:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1c897d52fefdac3c68e3c333c939b6cacdb5219d",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue108_106_handshake_numbers",
      "headRefOid": "2acae3b223ed31c0bcf2e0c00f955cfcdbeda255",
      "closedAt": "2014-12-30T19:21:47Z",
      "mergedAt": "2014-12-30T19:21:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6bada10cf1ae08641af54234a04b3e741466d62f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 112,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY2NjY2MTE=",
      "title": "grammar improvement for issue #109",
      "url": "https://github.com/tlswg/tls13-spec/pull/112",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-12-29T23:09:09Z",
      "updatedAt": "2014-12-30T00:11:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1c897d52fefdac3c68e3c333c939b6cacdb5219d",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-4",
      "headRefOid": "a8b1566181fef46d6565d42d36145c263031ca4c",
      "closedAt": "2014-12-29T23:10:18Z",
      "mergedAt": "2014-12-29T23:10:18Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "dbb2aecb8332eb5ee4ab22cd47c57718c5e3a8aa"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 118,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY3MDYyOTE=",
      "title": "replace glossary with simple terms list",
      "url": "https://github.com/tlswg/tls13-spec/pull/118",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "PR for suggestion for issue #117.\n",
      "createdAt": "2014-12-30T22:09:33Z",
      "updatedAt": "2015-05-16T22:18:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7f92b9c86ed07b1a7df60eb07742f0be41277dbd",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-4",
      "headRefOid": "d18a526cf419bf473f9601caf7a99c4530efd02a",
      "closedAt": "2015-05-16T22:16:05Z",
      "mergedAt": "2015-05-16T22:16:05Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d36ce1b2cf0eae7ea579c2fbf53e6b8d7c6938d5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 119,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY3MDcyNDc=",
      "title": "Issue63 session hash rebase. Fixes #63",
      "url": "https://github.com/tlswg/tls13-spec/pull/119",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-12-30T22:33:58Z",
      "updatedAt": "2014-12-30T22:37:08Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "32a08c1dfcd7f9c80c10d362b09ddc253e310853",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue63_session_hash_rebase",
      "headRefOid": "ba20ef7e8c897838ff88f035d996798a386be47d",
      "closedAt": "2014-12-30T22:37:08Z",
      "mergedAt": "2014-12-30T22:37:08Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c5c7c4ea47571057fcf172551fac8523e9e4f46d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 122,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY5MTIzMzY=",
      "title": "First cut at auto-generating appendix",
      "url": "https://github.com/tlswg/tls13-spec/pull/122",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The appendix kept getting out of sync, so autogenerate it\n",
      "createdAt": "2015-01-06T19:41:04Z",
      "updatedAt": "2015-01-06T20:23:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8a74c884cf4d9bd9adc36790420e8418afcef7f8",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "auto_generate_appendix",
      "headRefOid": "7bb4ad68d42863dcdb2b585b566006119f3807a4",
      "closedAt": "2015-01-06T20:23:15Z",
      "mergedAt": "2015-01-06T20:23:15Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not how I would have done it, but if it works, then it's fine.\n",
          "createdAt": "2015-01-06T19:55:28Z",
          "updatedAt": "2015-01-06T19:55:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 123,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY5Mjg5MDg=",
      "title": "Issue121 dh updates",
      "url": "https://github.com/tlswg/tls13-spec/pull/123",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-01-07T00:14:40Z",
      "updatedAt": "2015-01-07T14:13:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f895c841f618a568774ed6b103a4d8042fa64ce7",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue121_dh_updates",
      "headRefOid": "2f1958a5050dd5de5e4f53d0a474eaa90c2de5cf",
      "closedAt": "2015-01-07T14:13:29Z",
      "mergedAt": "2015-01-07T14:13:29Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "27da871886d0f0d143944d3121cf3fadbe45a9e4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 124,
      "id": "MDExOlB1bGxSZXF1ZXN0MjcwMzAxNzk=",
      "title": "Issue103: Suggestion of how to clarify master secret computations.",
      "url": "https://github.com/tlswg/tls13-spec/pull/124",
      "state": "CLOSED",
      "author": "grubba",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "Also fixes some minor related issues.\n",
      "createdAt": "2015-01-08T14:09:13Z",
      "updatedAt": "2015-09-26T14:39:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e93af78b0ea6ea5e6d39163ae00856585fd2009a",
      "headRepository": "grubba/tls13-spec",
      "headRefName": "issue103_clarify_master_secrets",
      "headRefOid": "732a0781a4957a8d0657333ba53b5d74de317bb7",
      "closedAt": "2015-09-26T14:39:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: I think this can be closed. The current version is a bit more clear and I don't think this would help. It adds quite a bit more to the flow diagrams, so the extra complexity actually could be unnecessarily confusing. It's also quite obsolete now and needs a new PR to consider, anyway.\n",
          "createdAt": "2015-09-26T01:04:49Z",
          "updatedAt": "2015-09-26T01:04:49Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing. Will try to clean up this text in the big rewrite\n",
          "createdAt": "2015-09-26T14:39:13Z",
          "updatedAt": "2015-09-26T14:39:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 126,
      "id": "MDExOlB1bGxSZXF1ZXN0MjczNDg0MTI=",
      "title": "Cipher suite without ephemeral Diffie-Hellman.",
      "url": "https://github.com/tlswg/tls13-spec/pull/126",
      "state": "MERGED",
      "author": "fedor-brunner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "These don't use ephemeral Diffie-Hellman:\nTLS_RSA_WITH_AES_128_GCM_SHA256\nTLS_RSA_WITH_AES_256_GCM_SHA384\n",
      "createdAt": "2015-01-14T13:11:35Z",
      "updatedAt": "2015-01-14T16:51:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e93af78b0ea6ea5e6d39163ae00856585fd2009a",
      "headRepository": "fedor-brunner/tls13-spec",
      "headRefName": "cipher_suite_codes_RSA",
      "headRefOid": "15bab231ba39cf5960fdad2fe1b7bcb77f1d0131",
      "closedAt": "2015-01-14T14:22:53Z",
      "mergedAt": "2015-01-14T14:22:53Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "44e275cd7f724d8da8864d2f58bfd30c65bae326"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 127,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc4MDEzNzE=",
      "title": "Editorial strike reference to CCS.",
      "url": "https://github.com/tlswg/tls13-spec/pull/127",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just fixing up something should have been deleted in pull request #119.\n",
      "createdAt": "2015-01-21T22:31:45Z",
      "updatedAt": "2015-01-21T22:38:43Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b28bee9cc47f207bfc42b206cdfbbce4b88c0ef9",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "ec521e92ae26e4519d7effbe92156736b4a356ba",
      "closedAt": "2015-01-21T22:38:43Z",
      "mergedAt": "2015-01-21T22:38:43Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e519b84a7429d38a55ada6aa8d15f0aa5fb8661c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 128,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc4NDc5MjQ=",
      "title": "Another editorial strike reference to CCS.",
      "url": "https://github.com/tlswg/tls13-spec/pull/128",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Four instead of three ? (hs, alert, app_data) Allusion to CCS ... ?\n\nCheers,\nB.\n",
      "createdAt": "2015-01-22T14:54:58Z",
      "updatedAt": "2015-01-22T16:01:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "75f32fd3d15c0a91e5f4dcba502cfb3b5a2c6666",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "master",
      "headRefOid": "7225dd0890616b1a1f3e24daaba3ca62b626b207",
      "closedAt": "2015-01-22T16:01:54Z",
      "mergedAt": "2015-01-22T16:01:54Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "15a9fdacdcfd8e8d34e3a97b44c7ee4dacb26383"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 129,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc4NTMxNDE=",
      "title": "Improve alerts enums with error type as comments",
      "url": "https://github.com/tlswg/tls13-spec/pull/129",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I have seen multiple implementations with messages marked as warning instead of fatal..\nIt might be more explicit this way ?\n\nB.\n",
      "createdAt": "2015-01-22T15:58:25Z",
      "updatedAt": "2015-04-02T19:14:43Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "75f32fd3d15c0a91e5f4dcba502cfb3b5a2c6666",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_alert",
      "headRefOid": "12e7870a0873df47f75d4c303cd5ba50da337f86",
      "closedAt": "2015-04-02T19:14:43Z",
      "mergedAt": "2015-04-02T19:14:42Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "718b0f751e51d72e62b6bb64d2420f3f124d7e1b"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I like this because some folks never read the text they just look at the code.\n",
          "createdAt": "2015-01-22T18:51:35Z",
          "updatedAt": "2015-01-22T18:51:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 130,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc4NTQ4MTg=",
      "title": "Fix typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/130",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-01-22T16:16:35Z",
      "updatedAt": "2015-01-22T16:21:08Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "fd8eebd73dde4a7e43898953f9aa3c27911d17ba",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_typo1",
      "headRefOid": "d4d6e7cc72b3b563b804fd2983f32a88f4333df5",
      "closedAt": "2015-01-22T16:21:08Z",
      "mergedAt": "2015-01-22T16:21:08Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "15c896502516bd64b2bacb4f00ed2bd9415a8144"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 131,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc4Njg3MTM=",
      "title": "Removing some straggling reference to renegotiation.",
      "url": "https://github.com/tlswg/tls13-spec/pull/131",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think I found a straggling reference to renegotiation.\n",
      "createdAt": "2015-01-22T19:10:05Z",
      "updatedAt": "2015-10-18T01:26:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "88e61fe37798636eae8a7fd43e1ffbb4e6bfc0c9",
      "headRepository": null,
      "headRefName": "patch1",
      "headRefOid": "7fa8a2983cdc67a76533074af015b4c278d51917",
      "closedAt": "2015-01-22T19:48:49Z",
      "mergedAt": "2015-01-22T19:48:49Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 132,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc4NzAxNzU=",
      "title": "Another fix typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/132",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-01-22T19:28:07Z",
      "updatedAt": "2015-01-22T19:47:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "88e61fe37798636eae8a7fd43e1ffbb4e6bfc0c9",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_typo3",
      "headRefOid": "cacaf545603f67fb0443677c06cf16a07a591304",
      "closedAt": "2015-01-22T19:47:21Z",
      "mergedAt": "2015-01-22T19:47:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "492c8e12331937c1727bf7444a6d4b6f716dbbaa"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 133,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc4NzEzODc=",
      "title": "Fix some RFC keywords case",
      "url": "https://github.com/tlswg/tls13-spec/pull/133",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It refers to potentially sending a message so I would say its caps,\nthough I am not sure about this one ...\n",
      "createdAt": "2015-01-22T19:43:15Z",
      "updatedAt": "2015-01-23T00:18:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "88e61fe37798636eae8a7fd43e1ffbb4e6bfc0c9",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_typo4",
      "headRefOid": "1e6028aba0d424b3d0dec1e2cdeca95c593e379f",
      "closedAt": "2015-01-23T00:18:19Z",
      "mergedAt": "2015-01-23T00:18:19Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 134,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc4NzQwNDU=",
      "title": "Fix alert names when referred to",
      "url": "https://github.com/tlswg/tls13-spec/pull/134",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Sometimes the alert name is in between quotes like : \"protocol_version\" alert ..\nand sometimes it is not ... like : close_notify alert\n",
      "createdAt": "2015-01-22T20:16:47Z",
      "updatedAt": "2015-04-02T19:16:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8c437558a24c5a9cf042a8495c82941e2ba8a66a",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_typo5",
      "headRefOid": "cff805ade47e81edccd59193fdaaf35ce73dd5af",
      "closedAt": "2015-04-02T19:16:31Z",
      "mergedAt": "2015-04-02T19:16:31Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "First commit : \nfix typos\n\nOther commits :\nI made all alert names citations consistent across the text by adding quotes when missing\n\nB.\n",
          "createdAt": "2015-01-23T13:44:18Z",
          "updatedAt": "2015-01-23T13:45:39Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "BTW - I noted the same inconsistencies.\n",
          "createdAt": "2015-03-13T20:31:12Z",
          "updatedAt": "2015-03-13T20:31:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 135,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc4NzY1MTY=",
      "title": "Fix paragraph alignment",
      "url": "https://github.com/tlswg/tls13-spec/pull/135",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-01-22T20:49:04Z",
      "updatedAt": "2015-01-23T00:00:05Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c81a83d962a9ac8942a80edd084914ac1e654658",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_style",
      "headRefOid": "e028045562c7e0862c1a093173916b7f104b12ed",
      "closedAt": "2015-01-23T00:00:05Z",
      "mergedAt": "2015-01-23T00:00:05Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "10047649fdfa3c27bb0cfbb0e04561df69b4409f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 140,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk5Mzg5OTc=",
      "title": "update TLS extensions ref (fix issue #139)",
      "url": "https://github.com/tlswg/tls13-spec/pull/140",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The TLS 1.2 RFC cited WIP extension definitions at time of publish. Update current draft to point the final RFC 6066.\n",
      "createdAt": "2015-02-24T21:45:25Z",
      "updatedAt": "2015-03-10T23:24:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e88b8554d9de33df2d46e7de4e65fb9c38407c70",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "af9a2b12570095166f29d211ca179dce4bb7c31e",
      "closedAt": "2015-03-10T23:22:36Z",
      "mergedAt": "2015-03-10T23:22:36Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 141,
      "id": "MDExOlB1bGxSZXF1ZXN0MzA0MDA0MjA=",
      "title": "Cite the DH paper",
      "url": "https://github.com/tlswg/tls13-spec/pull/141",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "TLS has never before done this.\n",
      "createdAt": "2015-03-03T18:41:58Z",
      "updatedAt": "2015-05-16T21:45:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e88b8554d9de33df2d46e7de4e65fb9c38407c70",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "dh",
      "headRefOid": "be347820785c6638947fa443c04855f697571890",
      "closedAt": "2015-05-16T21:45:23Z",
      "mergedAt": "2015-05-16T21:45:23Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 142,
      "id": "MDExOlB1bGxSZXF1ZXN0MzA3MDk2MTI=",
      "title": "Specify a Padding Mechanism to 1.3",
      "url": "https://github.com/tlswg/tls13-spec/pull/142",
      "state": "CLOSED",
      "author": "tomrittervg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-03-07T21:23:41Z",
      "updatedAt": "2015-03-11T12:36:25Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e88b8554d9de33df2d46e7de4e65fb9c38407c70",
      "headRepository": "tomrittervg/tls13-spec",
      "headRefName": "padding",
      "headRefOid": "3641f797c58b34f903f5fd9f04462a68fb01d874",
      "closedAt": "2015-03-11T12:36:25Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "From the patch:\n\n> handshake_padded(24),\n\nThis assignment conflicts with RFC 6520 (heartbeat).\n",
          "createdAt": "2015-03-07T21:35:20Z",
          "updatedAt": "2015-03-07T21:35:20Z"
        },
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "Another issue with handshake_padded is that it adds unnecessary complexity to the handshake handling, as it is no longer possible to just add the decoded handshake packets to the handshake hash, as the padding and padding length will interleave with the handshake messages. The alternative would be to force handshake packet breaks between handshake messages where the handshake hash is needed, but that would be contra-productive and reveal more of the contents than before.\n\nI suggest replacing the handshake_padded packet with a handshake_padding message, as this would have clear semantics, have essentially equivalent properties after encryption but reveal less of the message breaks and be trivial to implement.\n",
          "createdAt": "2015-03-08T06:00:11Z",
          "updatedAt": "2015-03-08T06:00:11Z"
        },
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "\"Clear semantics\"; there would still be an issue with handling of padding between flights.\n\nI suggest that any padding after the last message of a flight MUST be in the same handshake packet as the last message. Any padding in later handshake packets would be considered part of the next flight.\n",
          "createdAt": "2015-03-08T11:19:07Z",
          "updatedAt": "2015-03-08T11:19:07Z"
        },
        {
          "author": "tomrittervg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Adding a separate handshake_padding ContentType with no data would not be helpful, as the ContentType is in the clear. You'd see exactly how much padding there is, and ignore it in analysis.\n\nI had originally written it as NOT including the handshake padding in the handshake messages hash, and we could go back to that, but it seems like a clear timing attack.  I think that would solve the interleaving issues as well as the question of \"How do I know the handshake is done, or if someone is going to send me empty padding records?\"\n\nI didn't think it would be too much difficult to deal with the interleaving: simply add the decrypted record payload (which includes the padding_length and padding) to the hash - I assumed that was what most implementations were doing presently (adding the data before fully parsing it). Even if you did parse it, you should have that buffer around?  But maybe not.  \n\nI agree that implementations MUST NOT send any trailing, padding-only handshake messages, to resolve that ambiguity.\n",
          "createdAt": "2015-03-08T13:40:43Z",
          "updatedAt": "2015-03-08T13:40:43Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This would be a good reason to encrypt the content type. (PR #51)\n",
          "createdAt": "2015-03-08T15:23:28Z",
          "updatedAt": "2015-03-08T15:23:51Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Can we have this discussion on the [mailing list](mailto:tls@ietf.org) please?\n",
          "createdAt": "2015-03-08T17:32:39Z",
          "updatedAt": "2015-03-08T17:32:39Z"
        },
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "Tom: It seems you misunderstood my suggestion; I suggested a handshake message type of only padding (ie an entry in the HandshakeType enum), and not a packet type (ie an entry in the ContentType enum). I assume that you are aware that multiple handshake messages may be in the same handshake packet?\n",
          "createdAt": "2015-03-09T18:42:30Z",
          "updatedAt": "2015-03-09T18:42:30Z"
        },
        {
          "author": "tomrittervg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See #147\n",
          "createdAt": "2015-03-11T12:36:25Z",
          "updatedAt": "2015-03-11T12:36:25Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 143,
      "id": "MDExOlB1bGxSZXF1ZXN0MzA4NjMyMzg=",
      "title": "align NamedGroup with ffdhe draft",
      "url": "https://github.com/tlswg/tls13-spec/pull/143",
      "state": "MERGED",
      "author": "dkg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- add back ffdhe6144\n- add ffdhe_private_use range (508-511, inclusive)\n",
      "createdAt": "2015-03-10T15:50:14Z",
      "updatedAt": "2015-03-10T23:13:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ee4a437d0824efaa7e0c952a4af960bdc304a2f3",
      "headRepository": "dkg/tls13-spec",
      "headRefName": "master",
      "headRefOid": "f668948977b3289970a845ce59de78ce5ad3404e",
      "closedAt": "2015-03-10T23:13:11Z",
      "mergedAt": "2015-03-10T23:13:11Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 145,
      "id": "MDExOlB1bGxSZXF1ZXN0MzA4OTc1MTg=",
      "title": "fix X9.62 reference link",
      "url": "https://github.com/tlswg/tls13-spec/pull/145",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Trivial typo fix.\n",
      "createdAt": "2015-03-10T22:06:56Z",
      "updatedAt": "2015-03-10T23:23:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ee4a437d0824efaa7e0c952a4af960bdc304a2f3",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "2f7f77c5165e143fbee4aff9eeea222eeb8b50f3",
      "closedAt": "2015-03-10T23:12:59Z",
      "mergedAt": "2015-03-10T23:12:59Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 146,
      "id": "MDExOlB1bGxSZXF1ZXN0MzA5MDU0NTM=",
      "title": "use full hello message version field names",
      "url": "https://github.com/tlswg/tls13-spec/pull/146",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "More clear if the exact field names are used properly, instead of the *.version naming that might be confusing.\n",
      "createdAt": "2015-03-11T00:12:21Z",
      "updatedAt": "2015-04-02T19:44:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8d22c193a8e42887ff75e4450c7d067b10526d40",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "11ed6778f2c22848ed325bae484abb9c968fdc33",
      "closedAt": "2015-04-02T19:17:08Z",
      "mergedAt": "2015-04-02T19:17:08Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 147,
      "id": "MDExOlB1bGxSZXF1ZXN0MzA5MTYwNzA=",
      "title": "Padding",
      "url": "https://github.com/tlswg/tls13-spec/pull/147",
      "state": "CLOSED",
      "author": "dkg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "New PR needed"
      ],
      "body": "revision of padding following the interim discussion (should replace PR #142)\n",
      "createdAt": "2015-03-11T05:11:37Z",
      "updatedAt": "2015-09-22T21:12:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8d22c193a8e42887ff75e4450c7d067b10526d40",
      "headRepository": "dkg/tls13-spec",
      "headRefName": "padding",
      "headRefOid": "c48fb22543387282b4b49cd8aeb6c3646194a021",
      "closedAt": "2015-09-22T21:12:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@dkg We need a new PR that addresses the consensus from the meeting\n",
          "createdAt": "2015-08-21T17:42:59Z",
          "updatedAt": "2015-08-21T17:42:59Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done\n",
          "createdAt": "2015-09-22T21:12:13Z",
          "updatedAt": "2015-09-22T21:12:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 148,
      "id": "MDExOlB1bGxSZXF1ZXN0MzEwNTU5MTk=",
      "title": "remove obsolete change from TLS 1.1 notes about signature algorithms",
      "url": "https://github.com/tlswg/tls13-spec/pull/148",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "These two notes are leftover from TLS 1.2 and not needed anymore in TLS 1.3. The first may not even be valid anymore.\n",
      "createdAt": "2015-03-12T16:59:47Z",
      "updatedAt": "2015-03-12T19:22:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8d22c193a8e42887ff75e4450c7d067b10526d40",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "e61e6696103ae1cb528236661a72326fa8d5539d",
      "closedAt": "2015-03-12T18:55:55Z",
      "mergedAt": "2015-03-12T18:55:55Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 149,
      "id": "MDExOlB1bGxSZXF1ZXN0MzExNjM1NTQ=",
      "title": "Making references to ClientHello and ServerHello consistent.",
      "url": "https://github.com/tlswg/tls13-spec/pull/149",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-03-13T21:02:07Z",
      "updatedAt": "2015-10-18T01:25:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "53728db9b2cea48c2e3b3bd3d8e462322a8be1b8",
      "headRepository": null,
      "headRefName": "ch/sh_naming_consistency",
      "headRefOid": "ba89df50659169f26fec85dc6fd539df734f8074",
      "closedAt": "2015-05-16T21:26:15Z",
      "mergedAt": "2015-05-16T21:26:15Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry 'bout all that me re-learning git again.\n",
          "createdAt": "2015-04-03T16:05:13Z",
          "updatedAt": "2015-04-03T16:05:13Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Assuming I've learned git properly, fixing the above should just be:\ngit reset --hard HEAD~2\ngit push -f\n(done on this branch, of course; check branch log before pushing!)\n",
          "createdAt": "2015-04-03T16:40:17Z",
          "updatedAt": "2015-04-03T16:47:10Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Whenever you do a `git push -f`, always, ALWAYS specify a destination.  You can be screwed by your config if you don't.\n\n```\ngit push -f origin chshnaming\n```\n\nThe alternative is to do this:\n\n```\ngit checkout HEAD~2\ngit checkout -b chshnamingv2\n```\n\nand open a new pull request.  No force pushes that way (just a dead branch somewhere).\n",
          "createdAt": "2015-04-03T16:57:18Z",
          "updatedAt": "2015-04-03T16:57:18Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 150,
      "id": "MDExOlB1bGxSZXF1ZXN0MzExNjc4ODE=",
      "title": "Referring to peers as parties.",
      "url": "https://github.com/tlswg/tls13-spec/pull/150",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If we go with PR #118, then we might consider switching to refer to two peers as opposed to parties.\n",
      "createdAt": "2015-03-13T22:03:34Z",
      "updatedAt": "2015-10-18T01:25:36Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "53728db9b2cea48c2e3b3bd3d8e462322a8be1b8",
      "headRepository": null,
      "headRefName": "peers_are_partying",
      "headRefOid": "ba4e6ec6736fdf42c7337eab675d9ef21ecc7acb",
      "closedAt": "2015-07-15T18:38:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The term \"endpoint\" is a better drop-in replacement for \"party\". The definition in #118 has \"peer\" as equivalent to \"endpoint\" except when specifically discussing remote endpoint.\n\nSome parts could ideally be using both terms, e.g.:\n\"the detecting party sends a message to the other party\"\n\\/\n\"the detecting endpoint sends a message to its peer\"\n",
          "createdAt": "2015-03-13T23:43:34Z",
          "updatedAt": "2015-03-13T23:43:34Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think I agree with dave about endpoint vs. peer. element would be ok too\n",
          "createdAt": "2015-05-16T21:49:47Z",
          "updatedAt": "2015-05-16T21:49:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 151,
      "id": "MDExOlB1bGxSZXF1ZXN0MzExNzQ5NTA=",
      "title": "Updated references from 3280 to 5280.",
      "url": "https://github.com/tlswg/tls13-spec/pull/151",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-03-14T00:46:11Z",
      "updatedAt": "2015-10-18T01:25:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "53728db9b2cea48c2e3b3bd3d8e462322a8be1b8",
      "headRepository": null,
      "headRefName": "5280_references",
      "headRefOid": "8a662ecca8046ed3cd360f9de8fb6b352eb6a0d0",
      "closedAt": "2015-05-16T21:10:53Z",
      "mergedAt": "2015-05-16T21:10:53Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 152,
      "id": "MDExOlB1bGxSZXF1ZXN0MzExNzY0OTc=",
      "title": "Some nits and some consistency fixes.",
      "url": "https://github.com/tlswg/tls13-spec/pull/152",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "e.g.,:\nr/handshake protocol/Handshake Protocol throughout\nr/Server Key Exchange/ServerKeyShare\nr/HelloRetry/HelloRetryRequest\n",
      "createdAt": "2015-03-14T02:06:12Z",
      "updatedAt": "2015-10-18T01:25:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ba8853013ea619a8b1d6c0f637208fc3728bb799",
      "headRepository": null,
      "headRefName": "protocol_capitalization",
      "headRefOid": "1223e365b4617729642e43de8d392224a0451e9f",
      "closedAt": "2015-07-15T18:38:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sean, can you rebase this?\n",
          "createdAt": "2015-05-20T00:07:39Z",
          "updatedAt": "2015-05-20T00:07:39Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Some squashing during the rebasing may also be a good idea. (to clean up some of the churn of merging/reverting & conflict fixing)\n",
          "createdAt": "2015-05-20T00:40:00Z",
          "updatedAt": "2015-05-20T02:54:11Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sean, I deconflicted your patch at:\nhttps://github.com/ekr/tls13-spec/tree/seanturner_protocol_capitalization\n\nI see some stuff that looks wrong, so PTAL and see if this matches your expectations.\n",
          "createdAt": "2015-05-20T03:11:14Z",
          "updatedAt": "2015-05-20T03:11:14Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I sent a PR to that branch to get the rest of the message->alert rewordings in the list.\n",
          "createdAt": "2015-05-20T03:28:22Z",
          "updatedAt": "2015-05-20T03:28:22Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "lgtm - thanks for doing the deconflict.\n",
          "createdAt": "2015-06-08T13:12:59Z",
          "updatedAt": "2015-06-08T13:12:59Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 153,
      "id": "MDExOlB1bGxSZXF1ZXN0MzExNzc4NTA=",
      "title": "Alerts",
      "url": "https://github.com/tlswg/tls13-spec/pull/153",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-03-14T03:59:12Z",
      "updatedAt": "2015-07-23T07:45:40Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ba8853013ea619a8b1d6c0f637208fc3728bb799",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "alerts",
      "headRefOid": "182da09eeb5f0281107b5b1e1b616c211480fca0",
      "closedAt": "2015-05-20T00:07:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner is this still needed?\n",
          "createdAt": "2015-05-16T21:50:34Z",
          "updatedAt": "2015-05-16T21:50:34Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There\ufffds some nits that aren\ufffdt in the editor\ufffds working copy.  Since the travis CI build is failing do you want to reject this one and I can resubmit the ones that aren\ufffdt incorroprated?\n\nspt\n\nOn May 16, 2015, at 17:50, ekr notifications@github.com wrote:\n\n> @seanturner is this still needed?\n> \n> \ufffd\n> Reply to this email directly or view it on GitHub.\n",
          "createdAt": "2015-05-18T15:54:17Z",
          "updatedAt": "2015-05-18T15:54:17Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Being explicit about which alert to send when one is called for is very helpful. (I wouldn't call it a nit)\n\nThe \"This message is always fatal\" to \"This alert is always fatal\" conversion makes sense, but I added more of those lines so in addition to rebasing you'll need to change those too.\n\nI guess it might be best to submit a new PR with just the set of those changes, tack some other little stuff onto PR #152, and then drop this one. Making Travis CI happy appears to be a PITA sometimes.\n",
          "createdAt": "2015-05-18T23:45:12Z",
          "updatedAt": "2015-05-18T23:45:12Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You can reject this PR all of the changes are included in PR#152.\n",
          "createdAt": "2015-05-20T00:05:24Z",
          "updatedAt": "2015-05-20T00:05:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 155,
      "id": "MDExOlB1bGxSZXF1ZXN0MzEyOTU1MjM=",
      "title": "Remove explicit IV for AEAD algorithms",
      "url": "https://github.com/tlswg/tls13-spec/pull/155",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-03-16T23:41:05Z",
      "updatedAt": "2015-05-24T20:26:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "009af5cfa696e816f1760ad3b74eedc8f25b68cb",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "Remove_AEAD_iv",
      "headRefOid": "657b033ef21594eebeb945594062bc80a20fa7ae",
      "closedAt": "2015-05-24T20:26:02Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson PTAL\n",
          "createdAt": "2015-05-16T23:13:48Z",
          "updatedAt": "2015-05-16T23:13:48Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "maybe \"max(64 bits, N_MIN)\" would be better?\n",
          "createdAt": "2015-05-17T01:02:03Z",
          "updatedAt": "2015-05-17T01:02:03Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That sounds fine, if that notation can be used. (I don't see it elsewhere, but I don't see why not)\n\nBy the way, instead of 64 bits, it probably should be 8 bytes (or octets). N_MIN is measured in bytes, not bits.\nhttps://www.ietf.org/rfc/rfc5116.txt\n",
          "createdAt": "2015-05-17T01:08:18Z",
          "updatedAt": "2015-05-17T01:09:23Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged but with confusing git history due to pilot error.\n",
          "createdAt": "2015-05-24T20:25:29Z",
          "updatedAt": "2015-05-24T20:25:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 157,
      "id": "MDExOlB1bGxSZXF1ZXN0MzIwNTY3MTY=",
      "title": "a big pile of minor fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/157",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Capitalize the first letter of the sentence like the rest of the alert descriptions.\n",
      "createdAt": "2015-03-26T20:24:31Z",
      "updatedAt": "2015-05-16T21:08:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a73ee1ddafdf5d87884fe78a0ecd018410de7dec",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "add27d63c344445c69050723d4ba6a34a71a3ac3",
      "closedAt": "2015-05-16T20:56:39Z",
      "mergedAt": "2015-05-16T20:56:39Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c5de3980e9fa6392c354ac0ebfc1a58909010d48"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I just noticed that @seanturner noticed this too and included it in PR #153 with quite a few more significant editorial improvements around alerts.\n",
          "createdAt": "2015-03-27T20:07:59Z",
          "updatedAt": "2015-03-27T20:07:59Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rather than creating new PRs, I've just added a couple other minor things to this one.\n",
          "createdAt": "2015-04-28T23:00:18Z",
          "updatedAt": "2015-04-28T23:00:18Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've just added to this two almost identical looking commits to upgrade the HTTP links to HTTPS in README.md and CONTRIBUTING.md. Can CONTRIBUTING.md just be deleted, or is it still needed for some reason?\n",
          "createdAt": "2015-04-30T00:47:14Z",
          "updatedAt": "2015-04-30T00:47:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "CONTRIBUTING.md is needed to generate the banner that you see when opening a new issue or PR.\n\nI see no harm in including a link to CONTRIBUTING.md from README.md if you want to do that.\n",
          "createdAt": "2015-04-30T17:39:39Z",
          "updatedAt": "2015-04-30T17:40:02Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Transclusion would be ideal, if that capability exists. I don't think changing it to just a link is needed. As long as they're both being used and both updated as-needed, I have nothing against just duplicating the content. Just checking to make sure.\n",
          "createdAt": "2015-04-30T18:51:30Z",
          "updatedAt": "2015-04-30T18:51:30Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Huh. Looks like I've found the most pedantic errata ever: it says \"see page 99\" when it should've said \"see page 100\" in the TLS 1.2 spec. The most recent trivial fix in this PR changes that to an actual link to the section in question. I would guess it's not worth actually filing an errata ticket for that. ;)\n",
          "createdAt": "2015-05-13T00:57:58Z",
          "updatedAt": "2015-05-13T00:57:58Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 158,
      "id": "MDExOlB1bGxSZXF1ZXN0MzIxNDAxOTQ=",
      "title": "minor terminology fix",
      "url": "https://github.com/tlswg/tls13-spec/pull/158",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Both client and server may send \"protocol_version\" errors.\n",
      "createdAt": "2015-03-27T20:01:41Z",
      "updatedAt": "2015-04-06T04:15:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7f92b9c86ed07b1a7df60eb07742f0be41277dbd",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-5",
      "headRefOid": "aaa7a722ca275ebcedd97c3ddce826a7d5640283",
      "closedAt": "2015-04-06T04:15:07Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 159,
      "id": "MDExOlB1bGxSZXF1ZXN0MzIxODc0OTU=",
      "title": "some indentation consistency fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/159",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Change indentation and spacing to match the dominant style. (7 space indent)\n\nI noticed one bit that was oddly indented and skimmed through and found quite a few spots where the indentation isn't consistent. The CipherSuite definitions, in particular, were all over the place. I also added some missing semicolons to match the definitions lines in that section.\n",
      "createdAt": "2015-03-29T20:37:21Z",
      "updatedAt": "2015-05-16T21:08:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a73ee1ddafdf5d87884fe78a0ecd018410de7dec",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-6",
      "headRefOid": "18ff51fc721cd1d1584e0468b5eddd1fd19c9bec",
      "closedAt": "2015-05-16T20:58:05Z",
      "mergedAt": "2015-05-16T20:58:05Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 160,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI1NjE3OTY=",
      "title": "fix alert name & label obsolete alerts as fatal",
      "url": "https://github.com/tlswg/tls13-spec/pull/160",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Expands on @beurdouche's improvements. The obsolete alerts were previously fatal and still are. Mark them as such.\n\nAlso fix one of their names which is missing the \"_RESERVED\" in the descriptions list.\n",
      "createdAt": "2015-04-03T00:12:09Z",
      "updatedAt": "2015-05-16T21:08:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a73ee1ddafdf5d87884fe78a0ecd018410de7dec",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "9e36201e4060bbbffd80f26ff2bf1c23b9c68ec1",
      "closedAt": "2015-05-16T20:59:36Z",
      "mergedAt": "2015-05-16T20:59:36Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 163,
      "id": "MDExOlB1bGxSZXF1ZXN0MzM0MzE4OTM=",
      "title": "Fix typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/163",
      "state": "CLOSED",
      "author": "thijzert",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Does this make me a contibutor?\n",
      "createdAt": "2015-04-16T09:15:38Z",
      "updatedAt": "2015-05-16T23:29:53Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7f92b9c86ed07b1a7df60eb07742f0be41277dbd",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "0170458b812e6413a339d5b9ff3b02c6fb08a377",
      "closedAt": "2015-05-16T23:29:53Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This was also corrected by @beurdouche and is now merged with PR #165.\n",
          "createdAt": "2015-05-16T22:31:55Z",
          "updatedAt": "2015-05-16T22:31:55Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Probably a slightly bigger contribution is required to be listed as a contributor.\n",
          "createdAt": "2015-05-16T23:29:53Z",
          "updatedAt": "2015-05-16T23:29:53Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 165,
      "id": "MDExOlB1bGxSZXF1ZXN0MzQxMTEwNTQ=",
      "title": "Spellcheck and trim some end line",
      "url": "https://github.com/tlswg/tls13-spec/pull/165",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(includes #163)\n",
      "createdAt": "2015-04-25T18:51:14Z",
      "updatedAt": "2015-05-16T20:57:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a73ee1ddafdf5d87884fe78a0ecd018410de7dec",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_typo6",
      "headRefOid": "8f68e04afde409c69a1c807e01340cc0aaf58c3d",
      "closedAt": "2015-05-16T20:57:20Z",
      "mergedAt": "2015-05-16T20:57:20Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'll let native speakers fix the typos next time xD\n",
          "createdAt": "2015-04-25T19:24:57Z",
          "updatedAt": "2015-04-25T19:24:57Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Your intuition on how to treat that last one was not wrong, but you need to know the specifics of the terminology to handle it properly. If that weren't a specific term, you'd have been correct, though usage of the word \"compatible\" there would've been strange.\n\nAs to hyphenation, tech terminology turns hyphenated words into compound words way faster than natural language evolution. In other words, we tend to make up new words frequently and write them shorter each time. ;)\n",
          "createdAt": "2015-04-25T19:32:05Z",
          "updatedAt": "2015-04-25T19:32:05Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In my experience, native speakers are usually far from the best :)\n",
          "createdAt": "2015-04-25T19:44:26Z",
          "updatedAt": "2015-04-25T19:44:26Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Native speakers can muddle through free-form usage easily, so they don't notice how bad things might be to others. Non-native speakers can't intuitively piece together words as easily, and thus follow the rules more, which can be problematic because no verbal language actually follows its own rules fully, especially ones with lots of borrowed words. We all screw up language in different and interesting ways. :p\n\nI think a rebase is needed, as the whitespace changes were merged via your other PR.\nA squash of these commits into one to drop the reverted bits is probably a good idea, while you're at it.\n",
          "createdAt": "2015-04-28T04:13:49Z",
          "updatedAt": "2015-04-28T04:13:49Z"
        },
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done, ready for merge... =)\n",
          "createdAt": "2015-04-28T05:38:48Z",
          "updatedAt": "2015-05-04T19:49:42Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 166,
      "id": "MDExOlB1bGxSZXF1ZXN0MzQxMTIzNDA=",
      "title": "Contributors alphabetical order fix",
      "url": "https://github.com/tlswg/tls13-spec/pull/166",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-04-25T20:15:03Z",
      "updatedAt": "2015-04-26T19:31:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7f92b9c86ed07b1a7df60eb07742f0be41277dbd",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "contribs",
      "headRefOid": "dac07eb964c27216f1de93bc8cefd7697ffd5996",
      "closedAt": "2015-04-26T19:31:47Z",
      "mergedAt": "2015-04-26T19:31:47Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As requested ! Thank you sir =)\n",
          "createdAt": "2015-04-26T19:04:23Z",
          "updatedAt": "2015-04-26T19:04:23Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 167,
      "id": "MDExOlB1bGxSZXF1ZXN0MzQzMTkxMjE=",
      "title": "drop obsolete recommendation of 1024-bit DHE as secure",
      "url": "https://github.com/tlswg/tls13-spec/pull/167",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A newer recommendation could be put in as a replacement, however I don't think the sentence adds anything to the explanation, nor do I expect whatever could be recommended to hold up forever.\n\nAlso fix some punctuation in the same paragraph.\n",
      "createdAt": "2015-04-28T22:42:54Z",
      "updatedAt": "2015-05-16T22:36:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8456b4e55608cf3907da09ed0336376af1e7fcec",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-3",
      "headRefOid": "091e16bfc53d91f00abbbd8cb02bc85a6fa7dac8",
      "closedAt": "2015-05-16T22:33:57Z",
      "mergedAt": "2015-05-16T22:33:57Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, I've added a new security recommendation. I'm listing a TODO with it, though, as Curve25519 is probably what we're going with as MTI for a reasonable expectation of security and there's nothing to cite yet. I don't think we'd want P256 cited in there for the baseline recommendation. This is fine until the MTIs are updated, I think. People would probably say 2048 DHE is fine, which for now it is, but I went with 3072 to match the same security level for the curve. Might need to discuss on list.\n",
          "createdAt": "2015-05-16T21:33:56Z",
          "updatedAt": "2015-05-16T21:33:56Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I actually expect P256 to be the MTI based on the discussion in person and on-list.\n\nGiven that RSA 2048 seems to be what browsers are pushing, I suspect that that's\nwhat's needed here.\n",
          "createdAt": "2015-05-16T21:53:30Z",
          "updatedAt": "2015-05-16T21:53:30Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I essentially have no problem with that currently, but this spec will be around for quite a while. I'd rather have the new general purpose expectations in the new spec so that this will age better. (you could argue I'm overthinking this, though) I could also just drop the DHE and list only ECDHE.\n",
          "createdAt": "2015-05-16T21:57:59Z",
          "updatedAt": "2015-05-16T21:57:59Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm fine with changing this to 256-bit EC keys, but note that you'll want to refer to that for signatures as well.\n",
          "createdAt": "2015-05-16T22:00:25Z",
          "updatedAt": "2015-05-16T22:00:25Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok. I've switched it to just 255 bit ECDHE and added 224 bit ECDSA as the minimum signature. (arguably the latter could be higher, but we went with 112 bit symmetric in the backwards compatibility restrictions) I'm specifically going with 255 instead of 256 so Curve25519 isn't ruled out by a bit.\n",
          "createdAt": "2015-05-16T22:25:25Z",
          "updatedAt": "2015-05-16T22:25:25Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 168,
      "id": "MDExOlB1bGxSZXF1ZXN0MzQzMzA5NzI=",
      "title": "drop obsolete references",
      "url": "https://github.com/tlswg/tls13-spec/pull/168",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "They're not used anywhere in the document anymore.\n",
      "createdAt": "2015-04-29T03:21:31Z",
      "updatedAt": "2015-05-16T21:08:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a73ee1ddafdf5d87884fe78a0ecd018410de7dec",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-5",
      "headRefOid": "60e749c45d7b70a5223464d414de2c1b5cf985f7",
      "closedAt": "2015-05-16T20:58:20Z",
      "mergedAt": "2015-05-16T20:58:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "169c77c944f6233b3c08bac9f89de1307fdc93d4"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In addition to the DES & 3DES references dropped in the first commit, I checked the others and found more obsolete references to drop. The usage of these was cut out in various prior changes. Requiring ephemeral key exchanges made the 4 RFC informative references dropable as they're no longer needed in the \"Diffie-Hellman Key Exchange with Authentication\" section. \"ENCAUTH\" is obsolete and no longer cited because AEAD is now mandatory. \"CCM\" just got cut out, and if we need a citation for it again it will probably be RFC 6655 instead.\n",
          "createdAt": "2015-04-29T03:49:03Z",
          "updatedAt": "2015-04-29T03:49:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 169,
      "id": "MDExOlB1bGxSZXF1ZXN0MzUwNTUxMzg=",
      "title": "relax certificate_list ordering requirements to match current practice",
      "url": "https://github.com/tlswg/tls13-spec/pull/169",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Current client implementations allow more flexible certificate ordering than the spec allows and some server implementations send certificates in orders that the spec says \"MUST\" not be done. Relaxing the language here to a \"SHOULD\" is appropriate so implementers following this spec know that such situations need to be handled. Enforcing this more strictly would cause interop problems for no practical gain.\n\nThe modified language here is based on the mailing list discussion.\n",
      "createdAt": "2015-05-08T23:25:14Z",
      "updatedAt": "2015-08-27T11:56:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "32d62f7e3518b1184c116b68f61cf9a49050a484",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-7",
      "headRefOid": "e6ed8cb2fb1a164d7ba32b9a3a37befb955d4f9f",
      "closedAt": "2015-08-27T11:47:19Z",
      "mergedAt": "2015-08-27T11:47:19Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6a5395548ab6db1de3678cfab1937267f3be016d"
      },
      "comments": [
        {
          "author": "grubba",
          "authorAssociation": "NONE",
          "body": "This seems like a really bad idea, since it will reduce interoperability even further.\n",
          "createdAt": "2015-05-11T17:13:00Z",
          "updatedAt": "2015-05-11T17:13:00Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If you'd like to explain how formally documenting existing behavior (that we are not otherwise proposing be changed) will somehow reduce interoperability further, then please do so on the mailing list.\n\nThis proposal is only to properly document existing capabilities such that all readers of the spec actually know what to expect here. _Not_ doing this requires either intentionally having a part of the spec we know to be wrong in practice, or changing this to require more strict error enforcement that would break interop.\n",
          "createdAt": "2015-05-11T18:08:05Z",
          "updatedAt": "2015-05-11T18:08:05Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ryan Sleevi posted to the list an in-depth argument as to why the prior requirement can be considered harmful. I'll cite it here for reference, as the threads on this topic got long and winding:\nhttps://www.ietf.org/mail-archive/web/tls/current/msg16238.html\n",
          "createdAt": "2015-05-11T19:17:38Z",
          "updatedAt": "2015-05-11T19:17:38Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased.\n\n@seanturner: Last discussion of this on-list ended with lots of agreement and one strong dissenter. Are you able to declare a rough consensus to merge this, or is more discussion needed? Note that this is already in \"running code\", as this merely documents existing practice in some implementations.\n",
          "createdAt": "2015-08-12T21:21:48Z",
          "updatedAt": "2015-08-12T21:21:48Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner can this be merged?\n",
          "createdAt": "2015-08-21T17:41:31Z",
          "updatedAt": "2015-08-21T17:41:31Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Ok, revised and rebased. Please take a look.\n",
          "createdAt": "2015-08-21T20:32:37Z",
          "updatedAt": "2015-08-21T20:32:37Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased.\n\nFTR in this PR, question from @jsalowey answered on-list:\nhttps://github.com/davegarrett/tls13-spec/commit/6fbdc44877dcd4c73f5381821474e8db4c913ace#commitcomment-12907817\nhttps://www.ietf.org/mail-archive/web/tls/current/msg17448.html\n(GitHub's logic is that if you comment on a commit directly, as apposed to the changeset in the PR, then rebasing ditches your comment from the PR; old comments on the PR get collapsed above, but are still here)\n\n@ekr: I don't know the WG policy here. Is @jsalowey approval sufficient sign-off for you to merge, or do we need @seanturner? Quoting from the list:\n\nOn Wed, Aug 26, 2015 at 02:11:01PM -0700, Joseph Salowey wrote:\n\n> It looks like we have good consensus on PR 169 to relax certificate list\n> ordering requirements.  I had one question on the revised text.\n\n[question asked and satisfactorily answered by Viktor Dukhovni; link above]\n\nOn Wed, Aug 26, 2015 at 10:25:07PM -0700, Joseph Salowey wrote:\n\n> Thanks Viktor,  I missed this part of the discussion.  The text looks fine to me as is.\n\n---\n\nSo, is this finally ready to land now?\n",
          "createdAt": "2015-08-27T06:56:30Z",
          "updatedAt": "2015-08-27T06:57:10Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 170,
      "id": "MDExOlB1bGxSZXF1ZXN0MzU1Nzc1Mzk=",
      "title": "When will this message be sent ?",
      "url": "https://github.com/tlswg/tls13-spec/pull/170",
      "state": "CLOSED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Shouldn't that be a question ?\n",
      "createdAt": "2015-05-16T21:28:53Z",
      "updatedAt": "2015-05-16T21:52:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3928c276cb195492b6cce4b2f108c2815f6c67c7",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_question",
      "headRefOid": "082eeda548966fe416f49676a58bc1c54738a1fb",
      "closedAt": "2015-05-16T21:52:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think I actually prefer the current version....\n",
          "createdAt": "2015-05-16T21:34:07Z",
          "updatedAt": "2015-05-16T21:34:07Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with ekr. The current heading is better. It doesn't need to be a question.\n",
          "createdAt": "2015-05-16T21:36:36Z",
          "updatedAt": "2015-05-16T21:36:36Z"
        },
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "ok closing\n",
          "createdAt": "2015-05-16T21:52:20Z",
          "updatedAt": "2015-05-16T21:52:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 171,
      "id": "MDExOlB1bGxSZXF1ZXN0MzU1Nzc4Nzg=",
      "title": "Fix some differences between title of messages section and harmonize \u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/171",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026the spacing before and after sections title\n",
      "createdAt": "2015-05-16T21:54:46Z",
      "updatedAt": "2015-05-16T21:59:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8456b4e55608cf3907da09ed0336376af1e7fcec",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_section_spacing",
      "headRefOid": "3ebd8393fa1666cea9969509457d7a2426b27c33",
      "closedAt": "2015-05-16T21:59:01Z",
      "mergedAt": "2015-05-16T21:59:01Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 172,
      "id": "MDExOlB1bGxSZXF1ZXN0MzU1NzgxNDg=",
      "title": "Remove glossary",
      "url": "https://github.com/tlswg/tls13-spec/pull/172",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-05-16T22:15:42Z",
      "updatedAt": "2015-05-16T22:16:05Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e9c5ac0443d25623fe32112afb1044dd0a47ff1c",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "remove_glossary",
      "headRefOid": "50b453111a6718f3a6ab32558695eb5008bd4b81",
      "closedAt": "2015-05-16T22:16:05Z",
      "mergedAt": "2015-05-16T22:16:05Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Added because git became sad somehow\n",
          "createdAt": "2015-05-16T22:15:53Z",
          "updatedAt": "2015-05-16T22:15:53Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 173,
      "id": "MDExOlB1bGxSZXF1ZXN0MzU1Nzg0MDA=",
      "title": "Fix reference",
      "url": "https://github.com/tlswg/tls13-spec/pull/173",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-05-16T22:36:57Z",
      "updatedAt": "2015-05-16T22:42:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4e19f0e7f5b2e6febe24f83dfb1165b68a492138",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "fix_compile",
      "headRefOid": "57ad95a2ec85a98817edad7e94cbb85c005d20e1",
      "closedAt": "2015-05-16T22:42:45Z",
      "mergedAt": "2015-05-16T22:42:45Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 174,
      "id": "MDExOlB1bGxSZXF1ZXN0MzU1Nzg1OTk=",
      "title": "fix changelog",
      "url": "https://github.com/tlswg/tls13-spec/pull/174",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Merging PR 100 added to the changelog at draft-04, but we're up to draft-06 now.\n",
      "createdAt": "2015-05-16T22:54:11Z",
      "updatedAt": "2015-05-16T23:02:24Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b41f4361d9a2daad919aa2c2706a03068e3872f5",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "6b6876ad94bcbc2965dbb971ae01f269c76d2aa9",
      "closedAt": "2015-05-16T23:01:41Z",
      "mergedAt": "2015-05-16T23:01:41Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 175,
      "id": "MDExOlB1bGxSZXF1ZXN0MzU1ODE0OTk=",
      "title": "remove errant \"--- back\" line",
      "url": "https://github.com/tlswg/tls13-spec/pull/175",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There's a line at the end of the \"IANA Considerations\" section that just has the content \"--- back\". It's seemingly not valid markup for anything. It looks like it was introduced in the initial conversion to markdown, but has been left in there ever since. I'm pretty sure it's some accidental cruft added from the conversion, but I'm not 100% sure. (copy/paste from an editor?)\n\nIt doesn't seem to have a purpose, though of course, please correct me if I'm wrong. Here's a PR to just delete the line.\n",
      "createdAt": "2015-05-17T04:12:45Z",
      "updatedAt": "2015-05-17T15:32:08Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "009af5cfa696e816f1760ad3b74eedc8f25b68cb",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "f92b1a4fc78646e669295decde09da2ca3b9f255",
      "closedAt": "2015-05-17T15:31:09Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe that this makes the remainder of the document into appendices.\n",
          "createdAt": "2015-05-17T04:20:13Z",
          "updatedAt": "2015-05-17T04:20:13Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This stuff needs better documentation...\n\nAfter searching around for a bit, yeah, you appear to be correct. This looks like it's for kramdown-rfc2629. It seems this variation of the syntax separates things into sections named abstract, middle, and back, labeling them on HR lines with \"---\".\n\nOk, nvm. Sorry for the noise. Closing.\n",
          "createdAt": "2015-05-17T15:31:05Z",
          "updatedAt": "2015-05-17T15:31:05Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 176,
      "id": "MDExOlB1bGxSZXF1ZXN0MzU1ODg4MDE=",
      "title": "fix security considerations",
      "url": "https://github.com/tlswg/tls13-spec/pull/176",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Removal of the glossary re-assigned the appendix letters, so the ones referenced here are all one earlier.\n",
      "createdAt": "2015-05-17T15:39:13Z",
      "updatedAt": "2015-05-18T22:13:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "009af5cfa696e816f1760ad3b74eedc8f25b68cb",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "4f6c07b464296cfb23cbe08ec0b47af6fe15cc66",
      "closedAt": "2015-05-18T22:06:32Z",
      "mergedAt": "2015-05-18T22:06:32Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 177,
      "id": "MDExOlB1bGxSZXF1ZXN0MzU2Nzg4Mjg=",
      "title": "remove obsolete SCH reference",
      "url": "https://github.com/tlswg/tls13-spec/pull/177",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The last thing citing it was the glossary, which was recently removed.\n",
      "createdAt": "2015-05-18T22:11:47Z",
      "updatedAt": "2015-05-18T22:21:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "066f267fb2983b13b84397e286088549e364fe5a",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "740fd229074f0f4e2f3db9dab094100ae5aeb393",
      "closedAt": "2015-05-18T22:21:20Z",
      "mergedAt": "2015-05-18T22:21:20Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 178,
      "id": "MDExOlB1bGxSZXF1ZXN0MzU3NTU3Mjk=",
      "title": "\"may not\" should be \"MUST NOT\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/178",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "RFC2119-ify a few little bits to be more clear\n",
      "createdAt": "2015-05-19T17:42:01Z",
      "updatedAt": "2015-05-20T18:07:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "25bb9ad05b8cd9d5a453c3a6d540ff8e535eac87",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "cfb2c202c1a06a76fe8f002ccf63824f51509157",
      "closedAt": "2015-05-20T18:06:06Z",
      "mergedAt": "2015-05-20T18:06:06Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d88389b4405e2ec741b3db3d5ad837ff6f8d06b9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 179,
      "id": "MDExOlB1bGxSZXF1ZXN0MzU4NjEwNjY=",
      "title": "depict SSL 3.0 version consistently",
      "url": "https://github.com/tlswg/tls13-spec/pull/179",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Small editorial change: The document currently goes back and forth between \"SSLv3\" & \"SSL 3.0\". Stick with the latter for consistency and clarity.\n",
      "createdAt": "2015-05-20T18:23:15Z",
      "updatedAt": "2015-05-20T19:47:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3bb993380109c6fca8f80f6067586f7968e483da",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "fe97c64404fb11f5c572cfb34b6e0f8b19dbfe72",
      "closedAt": "2015-05-20T19:42:47Z",
      "mergedAt": "2015-05-20T19:42:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2410f0c3488bac21dc0d1d409b7ed2bfb791d827"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 180,
      "id": "MDExOlB1bGxSZXF1ZXN0MzYxMTYxMzE=",
      "title": "revise cipher suites section (fixes issue #53)",
      "url": "https://github.com/tlswg/tls13-spec/pull/180",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This revises \"The Cipher Suites\" section to simplify redundant language, actually explain the de facto naming convention, and add all currently available AEAD cipher suites. It also drops the appendix table that has already had its section whittled down quite a bit, in favor of the explanation and new table in the main section.\n\nNote that this is all of the AEAD ciphers available in the current IANA registry [0], plus ChaChaPoly (which has to be a normative reference [1], so must reach RFC status before this does). Issue #53 just said \"standards track AEAD ciphers\", but as the registry lists them all, adding them wasn't difficult. If we'd rather not cite them here then they can of course be cut out (ARIA, Camellia, & ECDHE AES-CCM are informational; the rest are standards track, including DHE AES-CCM). Alternatively, the table could be annotated to note which are on what track or split in two.\n\nThis has no changes to any requirements.\n\n[0] https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-4\n[1] https://www.ietf.org/iesg/statement/normative-informative.html\n",
      "createdAt": "2015-05-25T04:20:16Z",
      "updatedAt": "2015-07-15T21:53:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2b902cf4152a3a617169ae61907de23ef52a8fa3",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "updateciphersuites",
      "headRefOid": "8331184a3f52643ce0be05fd4e5b834a82f2d3e7",
      "closedAt": "2015-07-15T20:03:14Z",
      "mergedAt": "2015-07-15T20:03:14Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@richsalz I addressed your comments in this new commit. I switched to a table to make things easier to read and explicitly clarified the constant string bits so as to be more clear. I also dropped the confusing sentence fragment.\n",
          "createdAt": "2015-05-25T18:44:48Z",
          "updatedAt": "2015-05-25T18:50:53Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "looks good.\n",
          "createdAt": "2015-05-25T20:05:52Z",
          "updatedAt": "2015-05-25T20:05:52Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "AES-OCB will also be addable to this list, but its codepoints are all completely TBD still.\nhttps://tools.ietf.org/html/draft-zauner-tls-aes-ocb-02\n",
          "createdAt": "2015-05-26T00:50:43Z",
          "updatedAt": "2015-05-26T00:50:43Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased, squashed, & updated for recent changes to draft.\n",
          "createdAt": "2015-07-07T02:38:24Z",
          "updatedAt": "2015-07-07T02:38:24Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, all comments addressed with that last commit.\n\nI've split the table into standards and non-standards and simplified the note to just mention ECDHE AES GCM being widely deployed.\n",
          "createdAt": "2015-07-15T19:00:35Z",
          "updatedAt": "2015-07-15T19:00:35Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased.\n",
          "createdAt": "2015-07-15T19:04:38Z",
          "updatedAt": "2015-07-15T19:04:38Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, reworded that bit too.\n",
          "createdAt": "2015-07-15T20:00:47Z",
          "updatedAt": "2015-07-15T20:00:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 182,
      "id": "MDExOlB1bGxSZXF1ZXN0MzcwODYzMjQ=",
      "title": "typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/182",
      "state": "MERGED",
      "author": "real-or-random",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-06-06T07:01:06Z",
      "updatedAt": "2015-06-06T14:03:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c60e430449e69de2126e155eee4bc15fad20aa05",
      "headRepository": "real-or-random/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "822305399667b35f63a041ad3e1ead09f591ff8a",
      "closedAt": "2015-06-06T14:03:02Z",
      "mergedAt": "2015-06-06T14:03:02Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 183,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTc4MDE=",
      "title": "tiny fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/183",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-06-13T02:36:09Z",
      "updatedAt": "2015-07-07T00:51:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "af92d538bdce9b4c4d2525e0d8d83a1eb5ac4bc0",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "a81167c9ca3fb8bc1ba9ceb9bf6b44aa275e2f1d",
      "closedAt": "2015-07-07T00:50:28Z",
      "mergedAt": "2015-07-07T00:50:28Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 188,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDgyODI=",
      "title": "Deprecate old curves, MD5, & SHA-224 (for issue #186)",
      "url": "https://github.com/tlswg/tls13-spec/pull/188",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Not sure if the deprecation cutoff will be at 224 bits (~112 bit security level) or 255 bits (~128 bit security level) yet, so I've just done the former for now.\n\nThis drops the old curves under 224 bits, updates the extension example bytes, and deprecates MD5.\n",
      "createdAt": "2015-06-17T21:21:36Z",
      "updatedAt": "2015-07-16T04:17:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bfd36f86b92dd2b0793580272e9bc9f417412be5",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "pruning",
      "headRefOid": "ca6448022041a56922c48e839fc0036683a35c29",
      "closedAt": "2015-07-15T18:08:09Z",
      "mergedAt": "2015-07-15T18:08:09Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "13151d96385c3eee72cdbf025b3fc29189d20379"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As noted on-list, SHA1 can't be as easily dealt with here, so that'll be a topic for a separate changeset.\n",
          "createdAt": "2015-07-07T18:35:48Z",
          "updatedAt": "2015-07-07T18:35:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 189,
      "id": "MDExOlB1bGxSZXF1ZXN0MzgxNjIxMDc=",
      "title": "generate new ClientHello.random for HelloRetryRequest (for issue #185)",
      "url": "https://github.com/tlswg/tls13-spec/pull/189",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "PR to add a simple requirement that retried ClientHello messages must not reuse random values and servers must check for and reject them if they do. (suggested by Karthik)\n",
      "createdAt": "2015-06-20T03:44:54Z",
      "updatedAt": "2015-11-21T17:39:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a257b7ad5f45d1520a0dbe30eb7c2900de3dcc51",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-3",
      "headRefOid": "f44a497ba2ea5e9fe97fdbd9992867da882d50d8",
      "closedAt": "2015-11-20T21:35:38Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it's an open issue whether we should require a new ClientRandom, but requiring that the server check for it is harmful because it makes it impossible to do a stateless HelloRetryRequest.\n",
          "createdAt": "2015-06-20T03:52:05Z",
          "updatedAt": "2015-06-20T03:52:05Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, then should I downgrade it to a SHOULD (or MAY) or drop the check requirement completely? I don't have a strong objection to dropping it.\n\nOn Friday, June 19, 2015 11:52:07 pm ekr wrote:\n\n> I think it's an open issue whether we should require a new ClientRandom, but requiring that the server check for it is harmful because it makes it impossible to do a stateless HelloRetryRequest.\n",
          "createdAt": "2015-06-20T04:18:32Z",
          "updatedAt": "2015-06-20T04:18:32Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also, would that also require the session hash to completely restart on the new ClientHello and discard the previous messages? (see also issue #104) I added in clarification for that before noticing your comment, so that may need changing as well.\n",
          "createdAt": "2015-06-20T04:24:23Z",
          "updatedAt": "2015-06-20T04:24:23Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Weeeelll, if we include a cookie, it is possible to check statelessly.  But the cookie might get a little big :)\n",
          "createdAt": "2015-06-20T06:01:11Z",
          "updatedAt": "2015-06-20T06:01:11Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've revised this to drop the required check. (also now based on current master, as it was rather bitrotted)\n",
          "createdAt": "2015-08-21T23:54:52Z",
          "updatedAt": "2015-08-21T23:54:52Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think we want this.\n",
          "createdAt": "2015-11-20T21:35:38Z",
          "updatedAt": "2015-11-20T21:35:38Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 192,
      "id": "MDExOlB1bGxSZXF1ZXN0MzkyMTIwMzE=",
      "title": "update ref to RFC 7568",
      "url": "https://github.com/tlswg/tls13-spec/pull/192",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-07-04T19:31:53Z",
      "updatedAt": "2015-07-04T23:03:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f44eecc34e8fc0082dbff6f211767115fb66e362",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-4",
      "headRefOid": "2f5ec9f1b438ae55e436c2d228505a53202ad669",
      "closedAt": "2015-07-04T22:35:31Z",
      "mergedAt": "2015-07-04T22:35:31Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 194,
      "id": "MDExOlB1bGxSZXF1ZXN0MzkzMjE4MjE=",
      "title": "Roll up all changes to semi-ephemral branch for draft-07",
      "url": "https://github.com/tlswg/tls13-spec/pull/194",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- Integration of semi-ephemeral DH proposal.\n- Add initial 0-RTT support\n- Remove resumption and replace with PSK + tickets\n- Move ClientKeyShare into an extension.\n- Move to HKDF\n",
      "createdAt": "2015-07-06T23:31:58Z",
      "updatedAt": "2015-07-07T00:42:04Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d5f2788d066d9f3d627884516cccf525b6432891",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "WIP_draft_07_for_merge",
      "headRefOid": "7d4413ff11bd573f245b5efdde14a94715223a6b",
      "closedAt": "2015-07-06T23:58:46Z",
      "mergedAt": "2015-07-06T23:58:46Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PR for posterity\n",
          "createdAt": "2015-07-06T23:32:04Z",
          "updatedAt": "2015-07-06T23:32:04Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This accidentally reverted https://github.com/tlswg/tls13-spec/pull/192\n",
          "createdAt": "2015-07-07T00:13:15Z",
          "updatedAt": "2015-07-07T00:13:15Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I see what happened here. git pilot error.\n\nHere's the commits that were in master but not WIP_draft_07. I'm just going to cherry-pick that change back. @davegarrett please let me know if I lost anything else.\n\ncommit d5f2788d066d9f3d627884516cccf525b6432891\nMerge: f44eecc 2f5ec9f\nAuthor: ekr ekr@rtfm.com\nDate:   Sat Jul 4 15:35:31 2015 -0700\n\n```\nMerge pull request #192 from davegarrett/patch-4\n\nupdate ref to RFC 7568\n```\n\ncommit 2f5ec9f1b438ae55e436c2d228505a53202ad669\nAuthor: Dave Garrett davemgarrett@gmail.com\nDate:   Sat Jul 4 15:30:55 2015 -0400\n\n```\nupdate ref to RFC 7568\n```\n",
          "createdAt": "2015-07-07T00:30:54Z",
          "updatedAt": "2015-07-07T00:30:54Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr I think it was just that one last commit. The immediately prior commit wasn't reverted. I think it's fine now. Git has entirely too many footguns. :/\n",
          "createdAt": "2015-07-07T00:35:45Z",
          "updatedAt": "2015-07-07T00:35:45Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr You also introduced a couple of typos, by the way. I tacked fixes for them onto my current trivial fixes PR:\nhttps://github.com/davegarrett/tls13-spec/commit/a81167c9ca3fb8bc1ba9ceb9bf6b44aa275e2f1d\nhttps://github.com/tlswg/tls13-spec/pull/183/files\n",
          "createdAt": "2015-07-07T00:40:33Z",
          "updatedAt": "2015-07-07T00:42:04Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 195,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk0MjMwNzU=",
      "title": "Sean's fixes pile, take 3",
      "url": "https://github.com/tlswg/tls13-spec/pull/195",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This replaces PR #152 and https://github.com/ekr/tls13-spec/tree/seanturner_protocol_capitalization\n\nAfter @ekr landed the recent draft 7 overhaul, @seanturner's fixes branch was heavily bitrotted again. I suggested ekr review and merge it recently, but I went over it again earlier and I don't think that's viable as-is anymore. I'm not a git pro, but I think I've managed to deconflict this again to the point where it's usable. I squashed a lot of commits on the same days together as this made it much easier for me to resolve the conflicts. (also got rid of some commits & reversions) This doesn't have ekr's deconflict commit in there or a deconflict commit from myself for this round, but I don't think that's too important. I also fixed a typo in one of the reference links in there somewhere. There's a lot of little things in here, but there's also a few important ones (e.g. first change updates FIPS ref), so I think this is important to finally get fixed up and merged.\n\n@seanturner: Please review this and make sure all of your stuff made it through to here ok. (at least the changes that weren't completely superseded by ekr's big commit) I think there's probably a few peers/parties bits that could be added/redone, but I don't think anything major got lost.\n\nOne important change to review: \"supported_groups\" was renamed to \"named_groups\". Did we want to keep the old name or merge this change? If not, one of us can revert that part.\n",
      "createdAt": "2015-07-07T22:18:17Z",
      "updatedAt": "2015-07-15T18:27:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f83408d24227c1aec02de27b403000b3087ed4c3",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "seanfixesredux",
      "headRefOid": "0fb813a53d2eec1af8eefdcf71c78f4de237a6b0",
      "closedAt": "2015-07-15T18:23:31Z",
      "mergedAt": "2015-07-15T18:23:31Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I also managed to fix the author metadata for these commits to actually be for the correct account. All the commits in the old PR & branches had a different email address listed and confused GitHub. (the old commits had no icons on here; these amalgamated commits are cited as from Sean's account properly)\n",
          "createdAt": "2015-07-07T22:38:19Z",
          "updatedAt": "2015-07-07T22:38:19Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "FYI - I\ufffdm perfectly happy that you tweaked/fixed this Dave.\n\nspt\n\nOn Jul 08, 2015, at 10:18, Dave Garrett notifications@github.com wrote:\n\n> This replaces PR #152 and https://github.com/ekr/tls13-spec/tree/seanturner_protocol_capitalization\n> \n> After @ekr landed the recent draft 7 overhaul, @seanturner's fixes branch was heavily bitrotted again. I suggested ekr review and merge it recently, but I went over it again earlier and I don't think that's viable as-is anymore. I'm not a git pro, but I think I've managed to deconflict this again to the point where it's usable. I squashed a lot of commits on the same days together as this made it much easier for me to resolve the conflicts. (also got rid of some commits & reversions) This doesn't have ekr's deconflict commit in there or a deconflict commit from myself for this round, but I don't think that's too important. I also fixed a typo in one of the reference links in there somewhere. There's a lot of little things in here, but there's also a few important ones (e.g. first change updates FIPS ref), so I think this is important to finally get fixed u p and merged.\n> \n> @seanturner: Please review this and make sure all of your stuff made it through to here ok. (at least the changes that weren't completely superseded by ekr's big commit) I think there's probably a few peers/parties bits that could be added/redone, but I don't think anything major got lost.\n> \n> One important change to review: \"supported_groups\" was renamed to \"named_groups\". Did we want to keep the old name or merge this change? If not, one of us can revert that part.\n> \n> You can view, comment on, or merge this pull request online at:\n> \n>   https://github.com/tlswg/tls13-spec/pull/195\n> \n> Commit Summary\n> \n>   \ufffd Various nits and capitalizations.\n>   \ufffd Fixing up comments from ekr and davegarrett\n>   \ufffd roll up changes from old branches\n>   \ufffd rest of message->alert in alerts list\n>   \ufffd some fixes and cleanups\n> File Changes\n> \n>   \ufffd M draft-ietf-tls-tls13.md (186)\n> Patch Links:\n> \n>   \ufffd https://github.com/tlswg/tls13-spec/pull/195.patch\n>   \ufffd https://github.com/tlswg/tls13-spec/pull/195.diff\n> \ufffd\n> Reply to this email directly or view it on GitHub.\n",
          "createdAt": "2015-07-08T23:15:43Z",
          "updatedAt": "2015-07-08T23:15:43Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This looks good but needs a rebase. Can you do that?\n",
          "createdAt": "2015-07-15T18:06:44Z",
          "updatedAt": "2015-07-15T18:06:44Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yay, more rebasing. :p\nSure, gimmie a sec and I'll do that.\n",
          "createdAt": "2015-07-15T18:12:50Z",
          "updatedAt": "2015-07-15T18:12:50Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased.\n",
          "createdAt": "2015-07-15T18:20:13Z",
          "updatedAt": "2015-07-15T18:20:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 196,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDU2NjI=",
      "title": "Default to sha256 for Supported Signatures Extension",
      "url": "https://github.com/tlswg/tls13-spec/pull/196",
      "state": "CLOSED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Since sha1 is not considered secure at this time and sha224 is\notherwise unused in this document, default to the next secure\nwidely supported hash algorithm.\n",
      "createdAt": "2015-07-08T18:06:27Z",
      "updatedAt": "2017-07-27T10:24:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bfd36f86b92dd2b0793580272e9bc9f417412be5",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "sha256-sigalgs-default",
      "headRefOid": "f607026e62b84cb1e062f928ffa526d332c4a494",
      "closedAt": "2015-08-21T17:44:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PR #201 removes these defaults and mandates use of the \"signature_algorithms\" extension for all certificate authenticated cipher suites.\n",
          "createdAt": "2015-07-17T21:47:00Z",
          "updatedAt": "2015-07-17T21:47:00Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is now OBE.\n",
          "createdAt": "2015-08-21T17:44:20Z",
          "updatedAt": "2015-08-21T17:44:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 197,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk1MzI2ODU=",
      "title": "fix line widths of handshake flow legends (fix Travis warning)",
      "url": "https://github.com/tlswg/tls13-spec/pull/197",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Travis warns about them as they don't get wrapped in the final build and end up being too long. See the plaintext version here:\nhttps://www.ietf.org/id/draft-ietf-tls-tls13-07.txt\n",
      "createdAt": "2015-07-08T22:57:40Z",
      "updatedAt": "2015-07-15T17:50:16Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bfd36f86b92dd2b0793580272e9bc9f417412be5",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "linelengthfix",
      "headRefOid": "8efbea9be71b3ad0965dd0dd1ba4f9c08d9e7901",
      "closedAt": "2015-07-15T17:34:55Z",
      "mergedAt": "2015-07-15T17:34:55Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c3a5ad22a85c83a69a449426f43bc6b20b20dbea"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 198,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk1Mzg3MTU=",
      "title": "update RFC refs",
      "url": "https://github.com/tlswg/tls13-spec/pull/198",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Use refs for HKDF & HMAC in the document and drop the unused AES CBC RFC ref in favor of the AES GCM RFCs (refs already in use).\n\nCaught via Travis warnings that they were all unused. It also notes that RFC 2246 (TLS 1.0) isn't referenced directly and RFC 5705 isn't used, either.\n\n@ekr: You probably wanted to reference RFC 5705 somewhere in your recent work, but it's not currently used. Travis also complains about I-D.ietf-tls-session-hash, though that is referenced in the credits. It probably should be referenced somewhere too.\n",
      "createdAt": "2015-07-09T00:50:12Z",
      "updatedAt": "2015-07-15T17:50:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bfd36f86b92dd2b0793580272e9bc9f417412be5",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "missingrefs",
      "headRefOid": "e6164c43c3f4549b663f1cc569b42a439ff3200c",
      "closedAt": "2015-07-15T17:35:53Z",
      "mergedAt": "2015-07-15T17:35:53Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've also added an update to the \"obsoletes\" line. We don't need to list TLS 1.1 (TLS 1.2 & 1.3 don't list 1.0), its extensions RFC, or AES CBC, as they've already been obsoleted by TLS 1.2 (also obsoleted old AES RFC) and the newer extensions RFC.\n",
          "createdAt": "2015-07-09T16:57:24Z",
          "updatedAt": "2015-07-09T16:57:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 199,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk3Mzk1NjU=",
      "title": "fix indentation and some missing notation",
      "url": "https://github.com/tlswg/tls13-spec/pull/199",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some fixes for things I didn't catch when I checked for typos in the big patch last time. Of note, you're missing a closing brace for the select in \"PreSharedKeyExtension\" and a semicolon after \"KnownConfigurationExtension\". I also corrected things to match the existing (admittedly unusual) indentation style of the document and put quotes around the extension IDs you missed. (some had them; some didn't)\n",
      "createdAt": "2015-07-11T04:03:37Z",
      "updatedAt": "2015-07-15T17:50:53Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bfd36f86b92dd2b0793580272e9bc9f417412be5",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "e7fcf1faa5cf2298c16de94e682fc3ee7f97136a",
      "closedAt": "2015-07-15T17:47:05Z",
      "mergedAt": "2015-07-15T17:47:05Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, spaces between cases reverted. I also added a similar bit of whitespace in another new extension.\n",
          "createdAt": "2015-07-15T17:45:09Z",
          "updatedAt": "2015-07-15T17:45:09Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 200,
      "id": "MDExOlB1bGxSZXF1ZXN0NDAwNzYxMzY=",
      "title": "drop support for sect571r1",
      "url": "https://github.com/tlswg/tls13-spec/pull/200",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It appears to be the consensus that sect571r1 should be dropped.\n\nThis drops it and adds placeholders for the CFRG curves. There are likely to be more than these two values in the final version to indicate ECDHE & certificate usage separately.\n",
      "createdAt": "2015-07-15T22:17:53Z",
      "updatedAt": "2015-07-16T16:37:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "03df7a39fe1556c5c3c29f2431328ae59df3cd32",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "drop571",
      "headRefOid": "4782b6b7d4adc61c09cd8b32588340e5d9270e50",
      "closedAt": "2015-07-16T13:45:11Z",
      "mergedAt": "2015-07-16T13:45:11Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner: shall we remove sect571r1\n\nLet's let the CFRG draft get a little further along before we add the placeholders.\n",
          "createdAt": "2015-07-15T22:23:44Z",
          "updatedAt": "2015-07-15T22:23:44Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Wednesday, July 15, 2015 06:23:48 pm ekr wrote:\n\n> Let's let the CFRG draft get a little further along before we add the placeholders.\n\nOk. I dropped that bit and pushed a new commit here.\n",
          "createdAt": "2015-07-15T22:26:56Z",
          "updatedAt": "2015-07-15T22:26:56Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rob Stradling just posted to the list that he suspects that most users of this curve are just due to implementations blindly picking the biggest number, not because it was actually chosen. OpenSSL seems to do this by default and doesn't really provide an obvious way to change that.\n",
          "createdAt": "2015-07-15T22:37:09Z",
          "updatedAt": "2015-07-15T22:37:09Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 201,
      "id": "MDExOlB1bGxSZXF1ZXN0NDAxNjU5NzQ=",
      "title": "MTI Extensions (incl. issue #116)",
      "url": "https://github.com/tlswg/tls13-spec/pull/201",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a set of changes covering mailing list discussions about error alerts, certificate acceptance, SHA-1 deprecation, as well as including some recommendations about curves. There's also quite a few other little fixes mixed in there, including some cleanups in RFC2119 language. The alerts list has been fully updated to include all standardized alerts (PSK alert is needed for new PSK extension, in particular). This also adds RFC 5746 (\"renegotiation_info\" info extension) to the list of newly obsoleted RFCs, as renegotiation has already been removed completely thus making it no longer applicable as of this new TLS version.\n\nPR #169 has the discussed change to certificate ordering requirements, however it is waiting on @seanturner to assess consensus so I'm not including it here.\n\n(Edited to note: final commits from this PR have changed and parts have been broken off into other branches for other PRs)\n",
      "createdAt": "2015-07-16T19:25:58Z",
      "updatedAt": "2015-08-27T17:22:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "32d62f7e3518b1184c116b68f61cf9a49050a484",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "alertsandcerts",
      "headRefOid": "9cbe9eb5f200aa70b3eaf9110ed31d48851f1742",
      "closedAt": "2015-08-27T11:40:09Z",
      "mergedAt": "2015-08-27T11:40:09Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@tomato42: I pushed a new commit here to address your comments. I've changed SHA1 to a SHOULD NOT except for backwards compatibility and added explicit error cases for if the other two extensions are missing (better explicit than implicit).\n",
          "createdAt": "2015-07-17T23:08:44Z",
          "updatedAt": "2015-07-17T23:08:44Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I was looking for the explicit description to send alerts in that case. I like those changes.\n\n:+1: \n",
          "createdAt": "2015-07-18T09:42:48Z",
          "updatedAt": "2015-07-18T09:42:48Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased and squashed a little bit.\n",
          "createdAt": "2015-07-19T17:49:55Z",
          "updatedAt": "2015-07-19T17:49:55Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Line 2011 in e4f5ae5: it's missing the information the client MUST abort the handshake with alert `unsupported_extension`  if the server sends a extension not advertised by client (that does duplicate paragraph from line 2101)\n\nLine 2065 in e4f5ae5: the client MUST abort the handshake with `handshake_failure` in case the selected values don't match HelloRetryRequest.\n\nLine 2293 in  e4f5ae5: as the client may advertise the obsolete curves for backwards compatibility (there are servers which will accept only those curves), the client MUST check if the server hasn't selected one the backwards-compatible curves in TLS1.3 and abort the connection\n\nLine 3905 in e4f5ae5: it's missing that the server receiving SSLv2 type client hello with TLS1.3 version, MUST abort connection with `protocol_version` alert\n\nI think we should be explicit in saying that the server MUST accept Client Hello message with version field higher than 3, 4 but process it as if it was set to 3, 4.\n",
          "createdAt": "2015-07-20T20:05:44Z",
          "updatedAt": "2015-07-20T20:05:44Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@tomato42: Comments addressed in a new commit pushed here.\n\nThe only two comments I didn't change something for are:\n- I think \"SHOULD\" is acceptable for duplicate ClientKeyShareOffers checking, as that actually requires a little bit of effort for not much gain. Not strongly against a \"MUST\" though.\n- I'm leaving MD5 at a total ban and expectation of fatal error, because it's garbage. I know the hash is meaningless in the context of trust anchors, but any exception to the rule of \"if you see MD5, kill it\" is too much of an exception at this point. (note that this does not apply to SHA1+MD5 in the context of old TLS versions, which is ugly but acceptable for backwards compatibility for now)\n\nEdit: Latest commit has this plus yet more error cases.\n",
          "createdAt": "2015-07-20T22:25:39Z",
          "updatedAt": "2015-07-21T00:40:42Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Latest commit adds a couple new error alerts so that the current catchall of \"handshake_failure\" can be better broken up into individual specialized errors to make debugging and deciding what error message to show to users easier.\n",
          "createdAt": "2015-07-23T20:51:43Z",
          "updatedAt": "2015-07-23T20:52:24Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've split out all the purely editorial stuff into PR #208 to reduce the size of this notably. This is based on top of that (the first two commits are that PR).\n\nMost of the changesets are relatively narrow in focus, now. Each commit can be reviewed more or less separately before merging the whole PR. Having them all here means not having to handle nearly as many merge conflicts, because lots of these modify similar areas.\n",
          "createdAt": "2015-07-24T01:40:55Z",
          "updatedAt": "2015-07-24T06:36:32Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased on top of master now that the editorial bits are merged.\n",
          "createdAt": "2015-08-12T21:04:20Z",
          "updatedAt": "2015-08-12T21:04:20Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Ok, this has now been pruned down to the first two commits, which covers just the MTI extensions and updating of the alerts registry (just updating the documentation with the current standards). The other stuff is in another branch which I'll submit as a new PR after this part is dealt with.\n\nGitHub forgot @ekr's comments above, as they were on the old commit itself rather than technically on the PR (an annoying habbit of GitHub, apparently). Still all here:\nhttps://github.com/davegarrett/tls13-spec/commit/387499c265bd92f7af6eeec4865cb51e91a5e2f2\n\nI've cut the allowed assumption of the TLS 1.2 SHA1 defaults when the extension isn't sent. The rest of the issues center on whether the TLC BCP is supposed to be the current standard set of expectations or not, as that's pretty much all in line with that RFC.\nhttps://tools.ietf.org/html/rfc7525\n",
          "createdAt": "2015-08-27T02:23:51Z",
          "updatedAt": "2015-08-27T02:27:46Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There's certainly not WG consensus that the UTA BCP applies to TLS as a whole, so this is not the time to merge those requirements in. Feel free to start a message on the mailing list, but I need to get -08 out so it's going to have to wait\n",
          "createdAt": "2015-08-27T02:41:51Z",
          "updatedAt": "2015-08-27T02:41:51Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Understood. I'll split them off, then. Shouldn't take long.\n",
          "createdAt": "2015-08-27T02:44:04Z",
          "updatedAt": "2015-08-27T02:44:04Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"Understood. I'll split them off, then. Shouldn't take long.\"\n\nThanks. I'm about to shut down for the night but I'll deal with this tomorrow aM.\n",
          "createdAt": "2015-08-27T02:48:00Z",
          "updatedAt": "2015-08-27T02:48:23Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, commit updated on this PR:\n- cut out SNI & RI bits\n- changed TLS 1.2 back-compat language to your suggestion\n- lowered threshold for sending missing_extension in response to no supported_groups to only the case where it already causes a handshake_failure (e.g. just use the new more precise error code when the server knows that the extension is missing)\n- added \"open issue\" notes\n- changed the DSA->ECDSA in the example\n- expanded on truncated HMAC bit, though I didn't go as far as citing the specific paper on its security (BCP does that); as noted, it's N/A for AEAD, anyway\n\nTook a little bit extra time to double-check that I got everything you and Travis wanted changed. (it wanted an informative ref listing for the TLS 1.2 spec, which we apparently didn't have in the current version) GitHub's comment system is beginning to annoy me, btw. :|\n\nI haven't added in the MTI bits for the client_key_share & pre_shared_key extensions that are in the larger branch, as you didn't review those yet, so just a note for now.\n\nThis is also rebased onto current master and I made sure the second commit is documentation only (the bulk of the changed lines are just shifting whitespace so they all fit).\n",
          "createdAt": "2015-08-27T03:51:02Z",
          "updatedAt": "2015-08-27T07:03:16Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 202,
      "id": "MDExOlB1bGxSZXF1ZXN0NDAyOTUwNDE=",
      "title": "fix broken section numbering (\"Client Key Share\" and all subsequent extension sections)",
      "url": "https://github.com/tlswg/tls13-spec/pull/202",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Since Client Key Share is an extension now, it's listed in the extensions section. However, it currently is missing a \"#\" from its section headers causing the numbers to restart from there down until the next header of that depth.\n\nhttps://tlswg.github.io/tls13-spec/#client-key-share\n\nCurrent:\n6.3.1.4. Hello Extensions\n6.3.1.4.1. Signature Algorithms\n6.3.1.4.2. Negotiated Groups\n6.3.1.5. Client Key Share\n6.3.1.5.1. Diffie-Hellman Parameters\n6.3.1.5.2. ECDHE Parameters\n6.3.1.5.3. Known Configuration Extension\n6.3.1.5.4. Pre-Shared Key Extension\n6.3.1.5.5. Early Data Indication\n6.3.1.5.5.1. Replay Properties\n6.3.2. Server Key Share\n\nCorrect:\n6.3.1.4. Hello Extensions\n6.3.1.4.1. Signature Algorithms\n6.3.1.4.2. Negotiated Groups\n6.3.1.4.3. Client Key Share\n6.3.1.4.3.1. Diffie-Hellman Parameters\n6.3.1.4.3.2. ECDHE Parameters\n6.3.1.4.4. Known Configuration Extension\n6.3.1.4.5. Pre-Shared Key Extension\n6.3.1.4.6. Early Data Indication\n6.3.1.4.6.1. Replay Properties\n6.3.2. Server Key Share\n\nThis is fixed by putting the missing 3 \"#\" characters where needed to align the section depth properly.\n",
      "createdAt": "2015-07-18T16:57:54Z",
      "updatedAt": "2015-07-19T15:00:09Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5af351568536ec20f930ee0ecda2fe11033f1f15",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "fixsections",
      "headRefOid": "9e550b1ca1ecad7301129401b515db85889b1825",
      "closedAt": "2015-07-19T11:46:30Z",
      "mergedAt": "2015-07-19T11:46:30Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5bf64e05f5ca50f1818563484107059c5fa0b276"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Seeing as the Hello Extensions aren't Hello Messages, per se, I've also pushed a commit to reduce their sectioning depth by one so they're at the same level. This reduces the excessive 6 part section IDs down to 5, at worst.\n\nOld (with fix):\n6.3.1. Hello Messages\n6.3.1.1. Client Hello\n6.3.1.2. Server Hello\n6.3.1.3. Hello Retry Request\n6.3.1.4. Hello Extensions\n6.3.1.4.1. Signature Algorithms\n6.3.1.4.2. Negotiated Groups\n6.3.1.4.3. Client Key Share\n6.3.1.4.3.1. Diffie-Hellman Parameters\n6.3.1.4.3.2. ECDHE Parameters\n6.3.1.4.4. Known Configuration Extension\n6.3.1.4.5. Pre-Shared Key Extension\n6.3.1.4.6. Early Data Indication\n6.3.1.4.6.1. Replay Properties\n6.3.2. Server Key Share\n\nNew:\n6.3.1. Hello Messages\n6.3.1.1. Client Hello\n6.3.1.2. Server Hello\n6.3.1.3. Hello Retry Request\n6.3.2. Hello Extensions\n6.3.2.1. Signature Algorithms\n6.3.2.2. Negotiated Groups\n6.3.2.3. Client Key Share\n6.3.2.3.1. Diffie-Hellman Parameters\n6.3.2.3.2. ECDHE Parameters\n6.3.2.4. Known Configuration Extension\n6.3.2.5. Pre-Shared Key Extension\n6.3.2.6. Early Data Indication\n6.3.2.6.1. Replay Properties\n6.3.3. Server Key Share\n\nI think adding a \"toc_depth: 4\" up top would allow it to show out to 4 levels deep in the generated table of contents. The TLS 1.2 spec went out to 4, and even one 5 deep section.\n",
          "createdAt": "2015-07-19T04:38:48Z",
          "updatedAt": "2015-07-19T04:38:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 203,
      "id": "MDExOlB1bGxSZXF1ZXN0NDAyOTUyMTI=",
      "title": "fix all trailing whitespace",
      "url": "https://github.com/tlswg/tls13-spec/pull/203",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes for this keep showing up in other patches due to being caught near the changed area or being automatically fixed by a text editor. Just fix everything at once now, rather than cluttering up future changesets. (patch produced automatically via text editor)\n",
      "createdAt": "2015-07-18T17:08:04Z",
      "updatedAt": "2015-07-19T15:00:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5af351568536ec20f930ee0ecda2fe11033f1f15",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "trailingwhitespace",
      "headRefOid": "d87db30357f4d2c11b15e931bea9d204d46ac5a0",
      "closedAt": "2015-07-19T11:45:16Z",
      "mergedAt": "2015-07-19T11:45:16Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 205,
      "id": "MDExOlB1bGxSZXF1ZXN0NDAzMjcxMTY=",
      "title": "fix spacing & minor tweaks for secrets",
      "url": "https://github.com/tlswg/tls13-spec/pull/205",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just a few things I noticed that I think make it a little bit easier to follow.\n- Name resumption_secret consistently when used\n- Show full legend for each handshake flow\n- Simplify/clarify secret sources table a bit and make text cases consistent\n\nThe resumption secret naming was also apparently noticed by @martinthomson in issue #191.\n\n(Edited to note: this PR has been pruned down to a smaller list of changes; see commit message)\n",
      "createdAt": "2015-07-20T07:02:07Z",
      "updatedAt": "2015-08-18T20:28:08Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9671b06d9d99177701a6aa9ce8dcdf20c89f126f",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "secretinfo",
      "headRefOid": "c1d1606a339660310744c5e9e39f1e6bab963dff",
      "closedAt": "2015-08-18T14:53:03Z",
      "mergedAt": "2015-08-18T14:53:03Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, to respond to comments I've pushed a new commit.\n\nRE: capitalization: Upper or lower is fine, as long as it's consistent. I've switched it to all upper (title case) instead of all lower.\n\nRE: legend repetition: If you're just reading one section, e.g. got to it via TOC, you might not have seen the legend (recently). I've made it less wordy now and also added a line to indicate \"+\" is for extensions, as I realized that wasn't necessarily clear. (and added a \"+\" where the notation was inconsistent) We do have an extension that was previously a message, now. The basic point is consistency; make each handshake flow make sense on its own.\n\nI think repeating the legend is helpful, but if you really don't want to repeat it that I can cut this down to just the little stuff and table. Showing \"N/A\" instead of repeating things in the table is the most helpful part here, I think. It states that SS=ES in some circumstances elsewhere, but the table isn't clear that these are the exact same values, especially because the extracted ones are _not_.\n",
          "createdAt": "2015-07-20T16:13:10Z",
          "updatedAt": "2015-07-20T16:13:10Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Edited again and repushed for some more naming consistency.\n",
          "createdAt": "2015-07-20T17:41:23Z",
          "updatedAt": "2015-07-20T17:41:23Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Revised & rebased. Of note, I think these changes to the table make it far easier to see what's going on here.\n",
          "createdAt": "2015-08-13T04:48:06Z",
          "updatedAt": "2015-08-13T04:48:06Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: If you're going to be rewriting this, I'll just set those parts aside. The commit here is now just the little stuff: fix the spacing, add a line stating what SS/ES are in the list of derivations, and fix \"shared_secret\" (there's no such value named that; just drop the underscore).\n",
          "createdAt": "2015-08-14T00:50:57Z",
          "updatedAt": "2015-08-14T00:50:57Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: commit updated with fixes for your comments above\n",
          "createdAt": "2015-08-18T03:31:08Z",
          "updatedAt": "2015-08-18T03:31:08Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 206,
      "id": "MDExOlB1bGxSZXF1ZXN0NDAzODQ0Nzc=",
      "title": "fix broken cross-reference link",
      "url": "https://github.com/tlswg/tls13-spec/pull/206",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Trivial fix. Just a missing '}' character.\n",
      "createdAt": "2015-07-20T18:52:33Z",
      "updatedAt": "2015-07-22T15:57:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0fcbc6e1dc376038999396a1291764e3b62b1dd5",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "3b881cf6b73755d12551224dfef018d00fd816e4",
      "closedAt": "2015-07-22T12:29:35Z",
      "mergedAt": "2015-07-22T12:29:34Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 208,
      "id": "MDExOlB1bGxSZXF1ZXN0NDA3MzUxMjE=",
      "title": "editorial fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/208",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is all the purely editorial fixes pulled out of PR #201 to make it not as large and easier to review. Nothing in here changes specified behavior/policy.\n\nOf note, some typos, fixes to RFC 2119 language, another cleanup of changes in TLS 1.1 stuff, some simplified wording, list \"supported_groups\" with a value of 10 (as it's already defined, not TBD), use \"supported_groups\" name consistently instead of sometimes calling it \"named_groups\", add RFC 5746 to the \"obsoletes\" field (renegotiated extension), and correct some grammar reported by Viktor Dukhovni. One commit was easily cherry-picked; the other is a squash-together of little stuff pulled out (didn't take that long to do). See the full commit message for itemized changes.\n",
      "createdAt": "2015-07-24T01:24:13Z",
      "updatedAt": "2015-08-12T21:02:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e3fe8996529d5c7f7b2a6c0aedfef1ecf071c25b",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "editorialfixes",
      "headRefOid": "f4b23c2e692a8d4a068cb3610bfba8c409e79a11",
      "closedAt": "2015-08-12T20:46:51Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To clarify the one alert change in here:\n- Negotiated Groups currently says:\n  \"If no acceptable group can be selected across all cipher suites, then the server MUST generate a fatal \u201chandshake_failure\u201d alert.\"\n  https://tlswg.github.io/tls13-spec/#negotiated-groups\n- Server Hello currently says:\n  \"If the client proposed groups are not acceptable by the server, it will respond with an \"insufficient_security\u201d fatal alert.\"\n  https://tlswg.github.io/tls13-spec/#server-hello\n\nSo, one of them is wrong. The \"insufficient_security\" definition is for suites only, so I changed the latter to \"handshake_failure\". Stuff like this is why I'm proposing splitting these up elsewhere.\n\nThere's also \"no_renegotiation\" cleanup in here.\n",
          "createdAt": "2015-07-24T16:28:56Z",
          "updatedAt": "2015-07-24T16:30:43Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, this is now rebased on top of PR #211. The PR dependency tree is now:\nPR #211 -> PR #208 -> PR #201 \n(always_sign -> editorialfixes -> alertsandcerts)\n\nMy old WIP branches are on top of that. GitHub's graph:\nhttps://github.com/ekr/tls13-spec/network\n\nThe latest commit here contains the couple other fixes for review comments above.\n\n@ekr: This should address everything except for your note about the \"known or theoretical\" language, which I've explained above. I'm fine with changing it, if need be, but I think some sort of very brief reasoning as to why all these curves are obsolete should be in here. A \"MUST NOT\" with no explanation is more likely to get overlooked. The particular wording isn't all that important so long as it's clear that obsolete curves should be assumed to be unsafe for general use, if just as a precaution.\n\nAs mentioned in PR #201, each commit there can be more or less reviewed independently, though they're all touching the same area so basing them all in one branch made things easier.\n",
          "createdAt": "2015-08-08T02:25:09Z",
          "updatedAt": "2015-08-08T02:26:04Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, I revised the last commit to reword the bit about the curves. It now says \"various known/theoretical weaknesses or have had very little usage\" instead. The rewording should be a little more clear and is more generalized to not label everything with the same level of safety concern.\n",
          "createdAt": "2015-08-08T07:52:09Z",
          "updatedAt": "2015-08-08T07:52:09Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "merged separately.\n",
          "createdAt": "2015-08-12T20:46:51Z",
          "updatedAt": "2015-08-12T20:46:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 209,
      "id": "MDExOlB1bGxSZXF1ZXN0NDA3NDE4MDQ=",
      "title": "TLS Client Auth",
      "url": "https://github.com/tlswg/tls13-spec/pull/209",
      "state": "CLOSED",
      "author": "Andrei-Popov",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Based on the TLS1.3 client authentication discussion at the TLS WG meeting, this PR:\n1. Allows the server to send CertificateRequest at any time after the handshake is complete.\n2. Allows the server to narrow down the list of acceptable client certificates by optionally specifying a list of certificate extension OIDs with their allowed values.\n",
      "createdAt": "2015-07-24T04:25:27Z",
      "updatedAt": "2015-09-22T21:17:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e3fe8996529d5c7f7b2a6c0aedfef1ecf071c25b",
      "headRepository": "Andrei-Popov/tls13-spec",
      "headRefName": "master",
      "headRefOid": "b310d99cc14d2930ffbbdd0eae65e42d2dcb13a6",
      "closedAt": "2015-09-22T21:17:15Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed so we can split into two.\n",
          "createdAt": "2015-09-22T21:17:15Z",
          "updatedAt": "2015-09-22T21:17:15Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 211,
      "id": "MDExOlB1bGxSZXF1ZXN0NDE0OTE3NDg=",
      "title": "Always sign",
      "url": "https://github.com/tlswg/tls13-spec/pull/211",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-08-03T17:47:08Z",
      "updatedAt": "2015-08-12T20:24:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e3fe8996529d5c7f7b2a6c0aedfef1ecf071c25b",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "always_sign",
      "headRefOid": "9408cd01cf666055dfe6a309dabe3b3879fc9d87",
      "closedAt": "2015-08-12T20:24:29Z",
      "mergedAt": "2015-08-12T20:24:29Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is definitely an improvement, but I think that it covers more changes than are absolutely necessary.\n",
          "createdAt": "2015-08-03T18:18:37Z",
          "updatedAt": "2015-08-03T18:18:37Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Can you explain what you mean with your overall comment?\n",
          "createdAt": "2015-08-03T18:21:58Z",
          "updatedAt": "2015-08-03T18:21:58Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There are a few things in here that weren't strictly necessary.  Mostly good things that we agreed to elsewhere. Like extensions in ServerConfiguration.\n",
          "createdAt": "2015-08-03T18:23:35Z",
          "updatedAt": "2015-08-03T18:23:35Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Do you think I should break this up?\n",
          "createdAt": "2015-08-03T18:25:04Z",
          "updatedAt": "2015-08-03T18:25:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Nah, I just wanted to flag it so that other reviewers wouldn't miss it.\n",
          "createdAt": "2015-08-03T18:25:38Z",
          "updatedAt": "2015-08-03T18:25:38Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 215,
      "id": "MDExOlB1bGxSZXF1ZXN0NDIyODY4MTQ=",
      "title": "Editorialfixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/215",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Rebased dave's PR.\n",
      "createdAt": "2015-08-12T20:46:31Z",
      "updatedAt": "2015-08-12T20:46:36Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2bcebf6750f196a74c1b3aa864096942e9e6ebe4",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "editorialfixes",
      "headRefOid": "7394b6cced15bcb2d1ae89438d243bfbe220eec8",
      "closedAt": "2015-08-12T20:46:36Z",
      "mergedAt": "2015-08-12T20:46:36Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 218,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI3MjE5MDg=",
      "title": "Reducing AEAD expansion to a maximum of 256 bytes",
      "url": "https://github.com/tlswg/tls13-spec/pull/218",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed on list.\n\nCloses #55.\n",
      "createdAt": "2015-08-18T16:52:17Z",
      "updatedAt": "2015-08-20T22:11:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d8d9ccdda52643a6f391f110654726536094c86a",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "expand256",
      "headRefOid": "cdb717925b141b767106063e65da1cee3823ccc4",
      "closedAt": "2015-08-20T14:24:20Z",
      "mergedAt": "2015-08-20T14:24:20Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Minor suggestions:\n\n1) Explicitly specify the expectation of a \"record_overflow\" alert after the two \"MUST NOT\"s.\n2) Also drop the issue #55 \"OPEN ISSUE\" note that's on line 1087-1088.\n3) Amend the changelog to mention this.\n4) Add a sentence noting the overhead cap has changed to the \"Note: In versions of TLS prior to 1.3\" paragraph, or elsewhere.\n",
          "createdAt": "2015-08-19T02:13:20Z",
          "updatedAt": "2015-08-19T02:13:20Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As @davegarrett suggests, I've updated the PR.  I have not added the Note.  I don't like those.  The change log is enough.\n",
          "createdAt": "2015-08-19T17:54:18Z",
          "updatedAt": "2015-08-19T17:54:18Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Why was the changelog amended as for draft-09? The draft-08 hasn't been published yet. Is it in the progress of being released? (not shown on DataTracker and releases haven't been tagged on GitHub since draft-05)\n",
          "createdAt": "2015-08-20T21:10:15Z",
          "updatedAt": "2015-08-20T21:10:15Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Pilot error. Please feel free to submit a PR.\n\nOn Thu, Aug 20, 2015 at 2:10 PM, Dave Garrett notifications@github.com\nwrote:\n\n> Why was the changelog amended as for draft-09? The draft-08 hasn't been\n> published yet. Is it in the progress of being released? (not shown on\n> DataTracker and releases haven't been tagged on GitHub since draft-05)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/218#issuecomment-133176130.\n",
          "createdAt": "2015-08-20T22:11:21Z",
          "updatedAt": "2015-08-20T22:11:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 220,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI5ODY0ODY=",
      "title": "small fixes for changelog and spacing",
      "url": "https://github.com/tlswg/tls13-spec/pull/220",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@ekr: Quick PR for fix noted for PR #218 plus a couple other small nits.\n- Still on draft 08.\n- Fix a typo. (\"permittion\" is not a word)\n- Consistently use spaces around the \"+\" in \"2^14 + 256\". (some did; some didn't)\n",
      "createdAt": "2015-08-20T22:35:18Z",
      "updatedAt": "2015-08-21T01:00:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "54f451ec8e0e1d68319a2cfa7c786cacf8db4246",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "372883564910c972194f2a17fc8263350e52d053",
      "closedAt": "2015-08-21T00:52:41Z",
      "mergedAt": "2015-08-21T00:52:41Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 221,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMwOTcxNTQ=",
      "title": "very trivial fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/221",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Consistently capitalize AEAD, fix a missing period, and fix a typo in a comment (for the sole purpose of appeasing my perfectionist tendencies ;).\n",
      "createdAt": "2015-08-22T04:10:46Z",
      "updatedAt": "2015-08-23T19:16:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "32361a8af69c81297e0e11d496015203a9d3d31b",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "1492bace0c0f930f7090aa67d857a3b5dbbe212a",
      "closedAt": "2015-08-23T14:09:48Z",
      "mergedAt": "2015-08-23T14:09:48Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think changing aead-ciphered to AEAD-ciphered in the protocol description is an improvement.\n\nThe typo fix is good :)\n",
          "createdAt": "2015-08-22T20:09:16Z",
          "updatedAt": "2015-08-22T20:09:16Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "3 lines below aead-ciphered we have TLSCiphertext. Abbreviations are already kept in caps in almost every place. I don't see why it shouldn't be consistent and do so here as well.\n",
          "createdAt": "2015-08-22T21:41:45Z",
          "updatedAt": "2015-08-22T21:41:45Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd prefer to stay consistent with TLS 1.2.\n",
          "createdAt": "2015-08-22T21:44:46Z",
          "updatedAt": "2015-08-22T21:44:46Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Meh, ok. It looks out of place to me, but it's not a big deal. Commit revised to just fix the missing period and typo.\n",
          "createdAt": "2015-08-23T00:33:25Z",
          "updatedAt": "2015-08-23T00:33:25Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 231,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM1MTA0MTI=",
      "title": "Shift decision to abort on unusable cert chain to client and deprecate SHA-1 for it",
      "url": "https://github.com/tlswg/tls13-spec/pull/231",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready",
        "New PR needed"
      ],
      "body": "@ekr: Another chunk that was split off of the prior PR with results of list discussions. If you intend to release draft-08 soon, then this may be too late for that, though it doesn't have anything that hasn't been discussed in detail and I can make changes if needed.\n\nThe changes here are:\nSHA-1 is a SHOULD NOT with clients doing so for TLS 1.2 compat required to prioritize it last\nSHA-1 is a MUST NOT for servers, unless there is no other option, in which case it MAY give it a try\nMD5 is a flat MUST NOT, because it's garbage (especially by itself)\nthe client gets the final call on server cert chains to avoid aborts that could've worked\n(the language of this last part was ironed out heavily in list discussions with Viktor Dukhovni)\n\nAllowing the client to have the final say also makes it vaguely possible to attempt to debug it, as opposed to a server returning an error that could mean pretty much anything.\n",
      "createdAt": "2015-08-27T12:21:16Z",
      "updatedAt": "2015-09-23T20:05:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "477cb32595a18b8d924e7fc4935cc48dbb05597e",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "clientcertdecision",
      "headRefOid": "b2e243830dbf71b51e1bbad682ac74e9d7cc6bc8",
      "closedAt": "2015-09-23T20:05:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "rebased\n",
          "createdAt": "2015-08-28T02:19:54Z",
          "updatedAt": "2015-08-28T02:20:09Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner: I believe there was rough consensus to incorporate these changes. Please confirm.\n\n@davegarrett: this needs update and rebase.\n",
          "createdAt": "2015-09-12T20:56:20Z",
          "updatedAt": "2015-09-12T20:56:20Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Changes made for comments & rebased.\n\nI rewrote the reaction to SHA-1/SHA-224 as follows:\n- If you offered it, you SHOULD accept it.\n- It's deprecated, thus support is NOT RECOMMENDED.\n- If you do reject it, you MUST respond with the proper fatal alert before closing the connection.\n",
          "createdAt": "2015-09-13T03:13:50Z",
          "updatedAt": "2015-09-13T03:14:04Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This doesn't seem right either.\n\nIf you're offering SHA-1 then you shouldn't reject a cert just because it has SHA-1 (so SHOULD seems wrong if that's what you're referring to)  but you might reject it for other reasons, so SHOULD accept also seems wrong there too.\n",
          "createdAt": "2015-09-13T03:42:52Z",
          "updatedAt": "2015-09-13T03:42:52Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The newest language ( https://github.com/davegarrett/tls13-spec/commit/a79b9393fad161ab8412afcb9a05dd0147cfe6a3 ) just says it's NOT RECOMMENDED to support, which is just a restating of what's said in the updated \"Signature Algorithms\". It shouldn't be offered, but may be for back compat. The second sentence just says that if it's rejected, the error must be sent. The third is unchanged as it's just a recommendation to transition ASAP. There's no longer a mention of \"SHOULD accept\" in this commit. I'm saying that I don't think it needs to specially mention that it should accept SHA-1 if it was offered; that's a given. I don't think we need to add a special note to say that it MUST accept it if offered. The PR overall lets the client make whatever decisions it needs here, and as you said, there are other reasons to reject.\n",
          "createdAt": "2015-09-13T04:05:44Z",
          "updatedAt": "2015-09-13T04:05:44Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "rebased\n",
          "createdAt": "2015-09-18T02:09:34Z",
          "updatedAt": "2015-09-18T02:09:34Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased and SHA-224 disallowed in fallback chains, per interim consensus.\n",
          "createdAt": "2015-09-23T00:35:30Z",
          "updatedAt": "2015-09-23T00:35:30Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett @seanturner Is there any reason not to totally deprecate SHA-1 for signatures in CertificateVerify, since we have already committed to PSS. I recognize that we have ECDSA but you should be using SHA-256 with P-256.\n\n@davegarrett this seems to need conflict resolution,\n",
          "createdAt": "2015-09-23T18:36:03Z",
          "updatedAt": "2015-09-23T18:36:27Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Yeah, git is never smart enough to merge the changelog automatically. Rebased.\n",
          "createdAt": "2015-09-23T19:55:28Z",
          "updatedAt": "2015-09-23T19:55:28Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Wednesday, September 23, 2015 02:36:06 pm ekr wrote:\n\n> @davegarrett @seanturner Is there any reason not to totally deprecate SHA-1 for signatures in CertificateVerify, since we have already committed to PSS.\n\nI think that's a good idea, but I'd like to do that in a follow-up PR, if that's alright. \n",
          "createdAt": "2015-09-23T19:58:39Z",
          "updatedAt": "2015-09-23T19:58:39Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Looks like we both were fixing the changelog conflict at the same time. This is merged now, so closing.\n",
          "createdAt": "2015-09-23T20:05:37Z",
          "updatedAt": "2015-09-23T20:05:37Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 232,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM1Njg5NjQ=",
      "title": "expand MTI Extensions and add more strict requirements",
      "url": "https://github.com/tlswg/tls13-spec/pull/232",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Modified extension requirements based on recent list discussion. It's a little verbose with repeated boilerplate, but it's clear no matter which section you read now. I've also moved the relevant requirements up top to a consistent place for each extension's section.\n\nThe level of strictness here is now:\n- If attempting to negotiate and the mandatory extension isn't available: MUST error\n- If just detecting an invalid combination, but not actively negotiating: MAY error\n- SNI is clearly listed as MUST support, servers MAY require, and SHOULD error if required\n- The \"unsupported_extension\" alert is reworded more generally and put in as the consequence for violating the pre-existing \"MUST NOT\" send the client-only extensions from a server requirements. Also added some more, namely the fact that \"client_key_share\" is clearly an error to be sent from a server.\n",
      "createdAt": "2015-08-27T21:26:57Z",
      "updatedAt": "2015-08-28T01:37:25Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bab6704254cdf4be8538109a675abdfc3c40e332",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "strictermti",
      "headRefOid": "50ffecec3d01dce96067eb1da8649a9492cda948",
      "closedAt": "2015-08-28T01:29:03Z",
      "mergedAt": "2015-08-28T01:29:03Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr & @martinthomson: Please take a look when you get a chance. Are we all on the same page with this language? Anything that needs tweaking to focus on the above better?\n\nEdited to add:\nAlso, do I need to cut out SNI again, or is this wording ok? It's not requiring it to be sent, just noting it must be supported, which was agreed to on list a while ago, and noting the existing case that servers MAY require it with a way to indicate it using the new error alert.\n",
          "createdAt": "2015-08-27T21:32:13Z",
          "updatedAt": "2015-08-27T21:39:01Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: New commit pushed here with changes for your comments:\n- \"invalid\" -> \"prohibited\"\n- Text is now: \"Servers MUST NOT negotiate use of ___ cipher suites unless the client supplies a supported ___. If the extension is not provided and no alternative cipher suite is available, the server MUST close the connection with a fatal \"missing_extension\" alert.\" So, trying to find a viable cipher suite is preferred and the error is only required when there's nothing else to do.\n\nEdited to note:\nThe latter doesn't contradict the mandatory error on negotiation without the needed extension, as the server simply has the (unlikely) chance of negotiating something completely different instead. The MAY error is still included later in the changeset, as discussed, so clients are still expected to always do this correctly or risk the server throwing an error.\n",
          "createdAt": "2015-08-27T22:20:24Z",
          "updatedAt": "2015-08-27T22:42:24Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Ok, repushed with one-word change to clarify to \"at least one group for each ephemeral key exchange algorithm\". This excludes PSK, but is still fine for (EC)DHE when used with it. Seems like the simplest fix.\n",
          "createdAt": "2015-08-28T00:00:10Z",
          "updatedAt": "2015-08-28T00:00:10Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 234,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM2ODAxNjM=",
      "title": "Copy edit certificate_list changes",
      "url": "https://github.com/tlswg/tls13-spec/pull/234",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "Remove self-signed, since the key point is that it's a trust anchor that was independently distributed.  Note here that some trust anchors are signed, though that usually indicates a reason for it to be included, the signing might persist for longer than the actual need for it.\n\nAlso the explanation had more words than it needed.\n\nn.b., I only loosely wrapped this stuff, if you want a proper wrapping of lines, name a preferred wrap column, because I couldn't work out what to do here.\n",
      "createdAt": "2015-08-28T22:59:37Z",
      "updatedAt": "2015-09-23T18:37:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3cb82641adea7ee385649bf21bf050c284d56023",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "7fc355c6310b7ef9dcb1feedbd7c3b81c2f219c3",
      "closedAt": "2015-09-23T18:37:15Z",
      "mergedAt": "2015-09-23T18:37:15Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The existing note is 722 char, the current PR is 700 char, and with the above suggestions it drops to 600 char. I think it's also a little easier to read, as a bit of that was redundant, especially after you reordered the sentences (which I agree flows in a more logical way now: what was different? -> why was it a problem? -> what should we do about it?).\n",
          "createdAt": "2015-08-29T00:25:46Z",
          "updatedAt": "2015-08-30T22:54:24Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson: I sent you a PR to this PR for my suggested changes.\nhttps://github.com/martinthomson/tls13-spec/pull/1\n",
          "createdAt": "2015-08-30T22:54:20Z",
          "updatedAt": "2015-08-30T22:54:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 235,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM2OTM2NjQ=",
      "title": "Remove DSA signatures",
      "url": "https://github.com/tlswg/tls13-spec/pull/235",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For when the WG decides it is ok...\n",
      "createdAt": "2015-08-29T12:06:23Z",
      "updatedAt": "2015-09-17T11:02:43Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d99ab243dbfba8cd28049e36fe56616fbadff145",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_dsa_removal",
      "headRefOid": "7f59c958025cd5728b3b4e470ff05cc112c560eb",
      "closedAt": "2015-09-17T11:02:38Z",
      "mergedAt": "2015-09-17T11:02:38Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I only see a couple spots left that need updating:\n1) Update the version number to FIPS 186-4 in \"Negotiated Groups\" to match the updated DSS reference.\n2) Update the version number to FIPS 180-4 in \"Digital Signing\" to match the current SHS reference, while you're at it.\n",
          "createdAt": "2015-08-30T17:31:46Z",
          "updatedAt": "2015-08-30T17:31:46Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To cross-ref: this PR fixes issue #222 and obsoletes issue #59\n",
          "createdAt": "2015-08-30T22:21:13Z",
          "updatedAt": "2015-08-30T22:21:13Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner  do we have consensus to merge this PR?\n",
          "createdAt": "2015-09-10T20:31:56Z",
          "updatedAt": "2015-09-10T20:31:56Z"
        },
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Updated, rebased, merged conflicts with PSS patch and force pushed.\n",
          "createdAt": "2015-09-17T07:49:54Z",
          "updatedAt": "2015-09-17T07:49:54Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged\n",
          "createdAt": "2015-09-17T11:02:43Z",
          "updatedAt": "2015-09-17T11:02:43Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 236,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3Mjk2NDc=",
      "title": "less verbose/redundant mandatory extension boilerplate",
      "url": "https://github.com/tlswg/tls13-spec/pull/236",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "After reading through the new parts of the published v08 draft, I think my PR to clean up the mandatory extension handling was a little too verbose and had too many repeated sentences. This refactors it a little bit to just explicitly define two terms, MANDATORY TO SEND and CLIENT ONLY, and just use them where applicable. (all caps to be clear and quick to see on skim, similar to RFC 2119 terminology) It's basically the same language, just generalized and not repeated 3 or 4 times verbatim.\n\nThe one repeated sentence could probably be shorter, but I think it's more clear when stated explicitly for each section.\n\nOverall, there's less text now and each extension's section is significantly less verbose.\n",
      "createdAt": "2015-08-31T03:44:07Z",
      "updatedAt": "2015-10-12T23:12:30Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7ad27e2407a82177bad40f90034ab9c633227bfa",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "extensionboilerplate",
      "headRefOid": "42efbcedd55df28a02d53df4a3443bd59ee8a0e2",
      "closedAt": "2015-10-12T23:10:44Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "rebased again\n\n@ekr: This is just an editorial cleanup of my recent additions. Please take a look at this at some point (and similarly PR #234) to see if it looks good or needs changes.\n",
          "createdAt": "2015-09-17T17:05:25Z",
          "updatedAt": "2015-09-17T17:05:25Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, that idea does sound better than doing it in paragraphs. I'll give redoing it like that a shot. I'll update this PR when I have something.\n",
          "createdAt": "2015-09-30T06:50:38Z",
          "updatedAt": "2015-09-30T06:50:38Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, revised rather significantly. I tried doing the list style heading, but it just didn't seem to work all that well. The biggest reduction in repetition in this is just moving the client-only bit down into the MTI extensions section and just listing the 3 there with the applicable requirements. This version here is shorter than the current draft, but not as short as the previous version of this PR. More clear to read, overall, though.\n\nEdited to note:\nPR #214 is now rebased on top of this updated PR\n",
          "createdAt": "2015-10-03T23:09:53Z",
          "updatedAt": "2015-10-03T23:36:12Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The text here assumes omitting the ClientKeyShare is allowed, by the way. Landing that PR first is probably best, after which I'll fix the conflicts here.\n",
          "createdAt": "2015-10-04T20:59:39Z",
          "updatedAt": "2015-10-04T20:59:39Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "merged here:\nhttps://github.com/tlswg/tls13-spec/commit/bdf899333ba2ed6922183d6aaff9d4c8c5d2a18f\nand tweaked more here:\nhttps://github.com/tlswg/tls13-spec/commit/07b18ebd34241865de95db78e78cf8ff124842e8\n\nClosing.\n",
          "createdAt": "2015-10-12T23:10:44Z",
          "updatedAt": "2015-10-12T23:10:44Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 238,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM4MTIyMzI=",
      "title": "Suggested wording change to Resumption and PSK section.",
      "url": "https://github.com/tlswg/tls13-spec/pull/238",
      "state": "MERGED",
      "author": "tvdmerwe",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current wording at the end of the section on resumption and PSK should be changed to indicate that if a server declines resumption then a full handshake, including the server Certificate and CertificateVerify messages, should take place. In its current state, the comment on omission of these messages is not disjoint from the statement regarding the server's rejection of resumption.  \n",
      "createdAt": "2015-08-31T21:25:15Z",
      "updatedAt": "2015-09-12T20:41:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3cb82641adea7ee385649bf21bf050c284d56023",
      "headRepository": "tvdmerwe/tls13-spec",
      "headRefName": "master",
      "headRefOid": "c94df7799f2b9acd8546d23a55c01556dd315e61",
      "closedAt": "2015-09-12T20:41:00Z",
      "mergedAt": "2015-09-12T20:41:00Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 239,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTM1NTg=",
      "title": "PSS signatures",
      "url": "https://github.com/tlswg/tls13-spec/pull/239",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-09-10T20:12:43Z",
      "updatedAt": "2015-09-17T03:58:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "31a866981fbecfd0aac0adea202e11f20845f010",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "pss_support",
      "headRefOid": "0ba1d127116a657a85c8485a93305c0e21a38a97",
      "closedAt": "2015-09-17T03:58:45Z",
      "mergedAt": "2015-09-17T03:58:45Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f33be5707b19f9ea63acd77984f2c23f830f1d4f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 240,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ4MDM3MTk=",
      "title": "Add code point for encrypted extensions",
      "url": "https://github.com/tlswg/tls13-spec/pull/240",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-09-11T16:44:06Z",
      "updatedAt": "2015-09-14T22:07:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9670929b7a6149c9bda2fbb02a4e365e167472b7",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "add_encrypted_extensions_code_point",
      "headRefOid": "f64976e6fb2fa367f85743fcf10187be94574cea",
      "closedAt": "2015-09-14T22:07:31Z",
      "mergedAt": "2015-09-14T22:07:31Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 241,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ4MTExMzA=",
      "title": "Fixing Server Certificate Verify nits",
      "url": "https://github.com/tlswg/tls13-spec/pull/241",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Missing semi-colon in the message definition.  Also, the signature_algorithms of the client are what matter.\n",
      "createdAt": "2015-09-11T18:00:38Z",
      "updatedAt": "2015-09-11T18:06:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9670929b7a6149c9bda2fbb02a4e365e167472b7",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "35a84ddba43dc2a21217727caaffc8553578da1a",
      "closedAt": "2015-09-11T18:02:51Z",
      "mergedAt": "2015-09-11T18:02:51Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 243,
      "id": "MDExOlB1bGxSZXF1ZXN0NDUyMzM4MDM=",
      "title": "update reference for RFC7627 & linkify RFC4492 author notes",
      "url": "https://github.com/tlswg/tls13-spec/pull/243",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-09-16T22:48:55Z",
      "updatedAt": "2015-09-17T17:17:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "31a866981fbecfd0aac0adea202e11f20845f010",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "010591da147a94f39a1301aed805628953d2b555",
      "closedAt": "2015-09-17T17:05:59Z",
      "mergedAt": "2015-09-17T17:05:59Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5cc0291311b0d74a56cd6c6951b2d9561a9f4895"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Travis fails because it doesn't know about the new RFC yet. I don't know what's needed to fix that.\n",
          "createdAt": "2015-09-16T22:53:46Z",
          "updatedAt": "2015-09-16T22:53:46Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson can you update our local copy of the rfc bib?\n",
          "createdAt": "2015-09-16T22:54:31Z",
          "updatedAt": "2015-09-16T22:54:31Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Updated.  You should poke travis again.\n",
          "createdAt": "2015-09-17T17:04:45Z",
          "updatedAt": "2015-09-17T17:04:45Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm just going to assume this is cool and merge.\n",
          "createdAt": "2015-09-17T17:05:57Z",
          "updatedAt": "2015-09-17T17:05:57Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 244,
      "id": "MDExOlB1bGxSZXF1ZXN0NDUyNDcxMTA=",
      "title": "promote RFC 6066 to normative reference",
      "url": "https://github.com/tlswg/tls13-spec/pull/244",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "SNI is now MTI (all MUST support; clients SHOULD send when applicable; servers MAY require it)\n\nThus, RFC 6066 in which it is defined is now a normative reference, not informative.\n\nhttps://www.ietf.org/iesg/statement/normative-informative.html\n",
      "createdAt": "2015-09-17T02:56:14Z",
      "updatedAt": "2015-09-17T03:51:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "31a866981fbecfd0aac0adea202e11f20845f010",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "a7ce436d325eec0bafd150522f9908c6f0ed0b28",
      "closedAt": "2015-09-17T03:48:19Z",
      "mergedAt": "2015-09-17T03:48:19Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 245,
      "id": "MDExOlB1bGxSZXF1ZXN0NDUyODM1MzM=",
      "title": "Minor fix of syntax for SigAlg enum",
      "url": "https://github.com/tlswg/tls13-spec/pull/245",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Missed that when rebasing. sry.\n",
      "createdAt": "2015-09-17T12:21:25Z",
      "updatedAt": "2015-09-17T17:21:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9fcea3ed0c565447c48cd9f8279c4dfadf654d7b",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_fix_sigalgEnum",
      "headRefOid": "3c058a6d07893c64fe01c46a0ecdf635a00c8edc",
      "closedAt": "2015-09-17T12:23:48Z",
      "mergedAt": "2015-09-17T12:23:48Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@beurdouche @davegarrett @martinthomson we're collecting a lot of foo_RESERVEDs. \n\nI'm thinking of modifying mk-appendix.py to strip them out of the syntax in the main text,\nbut leave them in the appendix. I think this would improve clarity. Thoughts?\n",
          "createdAt": "2015-09-17T12:25:18Z",
          "updatedAt": "2015-09-17T12:25:18Z"
        },
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In general I am in favour of cleaning up \u2026\nDo you mean removing from both the enums and the text and creating a section in the annexes for \u201cdeprecated stuff\u201d ?\n",
          "createdAt": "2015-09-17T12:50:59Z",
          "updatedAt": "2015-09-17T12:50:59Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My plan was:\n1. Remove the references in the text\n2. Leave the references in the in-line syntax in the .md file\n3. Strip the references in the in-line syntax in the rendered file\n4. Leave the references in the appendix.\n\nSo, for instance, in the case of this structure, I would do:\n",
          "createdAt": "2015-09-17T13:12:33Z",
          "updatedAt": "2015-09-17T13:12:33Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "   enum {\n           rsa(1),\n           ecdsa(3),\n   (255) }  \n\nIn the main document, and remove the discussion of the reserved ones in the\ntext, but the appendix at the end would have the syntax as-is.\n",
          "createdAt": "2015-09-17T13:13:58Z",
          "updatedAt": "2015-09-17T13:13:58Z"
        },
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I like it, we should make sure that people notice the deprecated stuff though.\n",
          "createdAt": "2015-09-17T13:35:13Z",
          "updatedAt": "2015-09-17T13:35:13Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think I'm on-board with moving all deprecations to a single appendix to get them mostly out of the main document, but I don't think doing it purely through automation is the best approach. For example, your cited example could now be written all on one line and be more clear. I also don't like the idea of the text in the rendered version and version we edit being that different. I think it might be better to have both the full and abridged versions be defined in the main text, next to each-other, but have the script cut out the full version to move to the appendix and leave the abridged version in place. This way we have two sets that get edited, but they're right next to each-other so we won't get them out of sync easily.\n\nEach enum with any \"_RESERVED\" could have it's text about deprecated values moved to a dedicated \"Deprecated Values\" section in the appendix, but with something like the following repeated in each area that does so:\n\n\"This registry contains obsolete values that were used in previous versions of TLS that MUST NOT be used as of this version of the specification for safe interoperability, except possibly in specific backwards compatibility situations. See {{newsection-relevantsubsection}} for details.\"\n\nThat new section would have a placeholder for each full version to paste in (e.g. a \"%%!\"-style reference) followed by the relevant explanations of deprecations and their use requirements.\n",
          "createdAt": "2015-09-17T16:25:08Z",
          "updatedAt": "2015-09-17T16:28:21Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett I'm really not enthused about having two copies. The whole point of the automation was to remove that.\n\nI don't generally think we need any text about the reserved values at all. The reason to list them in the document is to avoid inadvertant reassignment (which I've already accidentally done once) but this doesn't apply to the text.\n",
          "createdAt": "2015-09-17T16:29:51Z",
          "updatedAt": "2015-09-17T16:29:51Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: There's so many new deprecations that I think they need to be mentioned quite clearly to avoid implementations that transition from TLS 1.2 to TLS 1.3 from keeping them around accidentally.\n",
          "createdAt": "2015-09-17T16:34:37Z",
          "updatedAt": "2015-09-17T16:34:37Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett some yes, some no. I don't think that (for instance) we need to have specific descriptions of the deprecated alerts.\n",
          "createdAt": "2015-09-17T16:37:55Z",
          "updatedAt": "2015-09-17T16:37:55Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: As to how to do this moving without 2 copies, maybe we could have the script be smart enough to reformat the enum as-needed? Maybe, some kind of annotation we could add to enums that would trigger the script stripping the reserved values to also reformat the enum to automatically linewrap as-needed. Then, we'd do what you're suggesting, auto-strip *_RESERVED, but for the short ones the script would prettify them to shorten them too. (basically just involves stripping linebreaks in between the braces and making the comma+space delimiting consistent)\n\nI don't think the alerts descriptions are a problem, though I don't disagree that they're not that helpful. It's the cluttering up of each other section with deprecated stuff that looks like a bigger problem.\n",
          "createdAt": "2015-09-17T16:43:48Z",
          "updatedAt": "2015-09-17T16:43:48Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please take this to the mailing list, not here.  And in doing so, please explain what \"I don't disagree that they're not that helpful\" means, with fewer negatives :)\n",
          "createdAt": "2015-09-17T16:47:35Z",
          "updatedAt": "2015-09-17T16:47:35Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sure, I used a triple-negative, but I did it correctly... ;)\nTranslated: I agree that full descriptions of obsolete alerts are not productive in-line with the main index of alerts.\n\n@richsalz: This is a purely editorial discussion, not really a TLS WG issue. Personally, I generally think this is the sort of thing that does belong in Github, but I have no objection to it being moved elsewhere if needed due to WG policy.\n\nThat said, I think this discussion is basically over (unless Martin chimes in, of course) as I'm agreeing to @ekr's idea with the caveat that I'd like a way to specify individual enums to have the script also strip linebreaks from.\n\nClientCertificateType is the most galling example, by the way. It's now mostly _RESERVED, though it needs updating for ECDSA (issue #154 should probably be re-opened until this is dealt with, somehow).\n",
          "createdAt": "2015-09-17T16:58:25Z",
          "updatedAt": "2015-09-17T17:15:49Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett: I think the plan is just to remove ClientCertificateType, so that should stop being a problem.\n",
          "createdAt": "2015-09-17T17:08:26Z",
          "updatedAt": "2015-09-17T17:08:26Z"
        },
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If automatisation is a pain, I am volunteering to do it by hand if you want, also this might be safer...\nThere is 41 mentions of keyword \"reserved\" and 10 of \"deprecated\" in the spec.\n",
          "createdAt": "2015-09-17T17:18:47Z",
          "updatedAt": "2015-09-17T17:18:47Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let me take a crack at automating it first and then we can touch base\nlater...\n\nOn Thu, Sep 17, 2015 at 10:18 AM, Benjamin Beurdouche <\nnotifications@github.com> wrote:\n\n> If automatisation is a pain, I am volunteering to do it by hand if you\n> want, also this might be safer...\n> There is 41 mentions of keyword \"reserved\" and 10 of \"deprecated\" in the\n> spec.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/245#issuecomment-141156457.\n",
          "createdAt": "2015-09-17T17:21:12Z",
          "updatedAt": "2015-09-17T17:21:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 248,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU1MDcxMzM=",
      "title": "Revised kdf",
      "url": "https://github.com/tlswg/tls13-spec/pull/248",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-09-20T23:53:04Z",
      "updatedAt": "2015-09-22T20:26:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3a5b8a5688f22664c98dffdabe40a2e75e127d87",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "revised_kdf",
      "headRefOid": "6134f0389e74dff4f8bbe2d0ff56918306476023",
      "closedAt": "2015-09-22T20:26:37Z",
      "mergedAt": "2015-09-22T20:26:37Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 249,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU1MTc3NjU=",
      "title": "Padding with opaque",
      "url": "https://github.com/tlswg/tls13-spec/pull/249",
      "state": "CLOSED",
      "author": "dkg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This introduces a padding message for handshakes, as well as a padding approach for application data using a TLS opaque string.\n",
      "createdAt": "2015-09-21T06:39:27Z",
      "updatedAt": "2015-09-22T20:24:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3a5b8a5688f22664c98dffdabe40a2e75e127d87",
      "headRepository": "dkg/tls13-spec",
      "headRefName": "padding-with-opaque",
      "headRefOid": "afe2f8a776b045c4d303e6516ff759758688e7d6",
      "closedAt": "2015-09-22T20:24:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 250,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU1MTc4NzI=",
      "title": "Padding via marker octet",
      "url": "https://github.com/tlswg/tls13-spec/pull/250",
      "state": "CLOSED",
      "author": "dkg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This modifies the padding proposal to permit padding with a single octet, at the cost of using a non-TLV approach to padding.\n",
      "createdAt": "2015-09-21T06:42:04Z",
      "updatedAt": "2015-09-22T20:24:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3a5b8a5688f22664c98dffdabe40a2e75e127d87",
      "headRepository": "dkg/tls13-spec",
      "headRefName": "padding-via-marker-octet",
      "headRefOid": "4d35519af672fd5110af95292a07b13be9852691",
      "closedAt": "2015-09-22T20:24:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 253,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU2ODE5MDU=",
      "title": "Padding zero run",
      "url": "https://github.com/tlswg/tls13-spec/pull/253",
      "state": "MERGED",
      "author": "dkg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-09-22T15:57:37Z",
      "updatedAt": "2015-09-22T20:29:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b96bd720e79b6667109fd09c93b155cd8e316d68",
      "headRepository": "dkg/tls13-spec",
      "headRefName": "padding-zero-run",
      "headRefOid": "934c8ec3a63fb7b1a3507b08d8119ef39ec2371b",
      "closedAt": "2015-09-22T20:13:55Z",
      "mergedAt": "2015-09-22T20:13:55Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a51ace06d6dad292da5fb76ee1aa31bf3dcc5c7f"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is a big improvement over the previous proposed methods, by the way.\n\n@martinthomson: I suggest filing a followup PR for your comments, as it looks like this has already merged.\n",
          "createdAt": "2015-09-22T20:20:17Z",
          "updatedAt": "2015-09-22T20:20:17Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 255,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU2OTk0MDA=",
      "title": "Add Bjoern Tackmann to the contributor list",
      "url": "https://github.com/tlswg/tls13-spec/pull/255",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-09-22T18:29:41Z",
      "updatedAt": "2015-09-22T18:50:44Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b96bd720e79b6667109fd09c93b155cd8e316d68",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "add_bjorn_tackmann",
      "headRefOid": "1dea8f504ebfe0c79b7384f2db10520cc55fd82d",
      "closedAt": "2015-09-22T18:50:43Z",
      "mergedAt": "2015-09-22T18:50:43Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 257,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU3MTI1ODM=",
      "title": "Expand context",
      "url": "https://github.com/tlswg/tls13-spec/pull/257",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-09-22T20:28:21Z",
      "updatedAt": "2015-09-22T20:38:36Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "adcbbd569840ad57deac9658ecbf0d133a5914bf",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "expand_context",
      "headRefOid": "2b7faf46f83fc362a34549214cbf0e2430f743ec",
      "closedAt": "2015-09-22T20:38:36Z",
      "mergedAt": "2015-09-22T20:38:36Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 258,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU3MTMyMjA=",
      "title": "Splitting alerts is a bad idea",
      "url": "https://github.com/tlswg/tls13-spec/pull/258",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-09-22T20:34:19Z",
      "updatedAt": "2015-09-22T20:36:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "adcbbd569840ad57deac9658ecbf0d133a5914bf",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "split_alert",
      "headRefOid": "297186389e7b4a69e21b749a5ddfceef96ed1805",
      "closedAt": "2015-09-22T20:36:23Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I already did this.\n",
          "createdAt": "2015-09-22T20:36:23Z",
          "updatedAt": "2015-09-22T20:36:23Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 259,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU3MTU2Njc=",
      "title": "fix HkdfLabel.label min length",
      "url": "https://github.com/tlswg/tls13-spec/pull/259",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current min size of HkdfLabel.label is impossible. Here's a PR for a trivial fix by increasing it.\n\nHkdfLabel.label = \"TLS 1.3, \" + Label\n(\"TLS 1.3, \").length = 9\nif Label.length >=1 then\nHkdfLabel.label.length >= 10\n\nIt can never be 8 or 9 bytes long.\n\nnext power of two is 16, so might as well do:\nopaque label<16..255>;\nwhich has 9 bytes for version prefix & a minimum of 7 for the label (current shortest is 15 bytes)\n",
      "createdAt": "2015-09-22T20:56:03Z",
      "updatedAt": "2015-09-22T21:25:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "91312cbe8f9910ff7326b1d613d9203c1d5b2135",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "f1e12625ca7188c6d60837f01388632d4fdc3931",
      "closedAt": "2015-09-22T21:24:17Z",
      "mergedAt": "2015-09-22T21:24:17Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Label Length seems like it could theoretically be 0, so let's use 9\n",
          "createdAt": "2015-09-22T21:14:12Z",
          "updatedAt": "2015-09-22T21:14:12Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Ok, changed to 9 and repushed.\n",
          "createdAt": "2015-09-22T21:19:32Z",
          "updatedAt": "2015-09-22T21:19:32Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 263,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU3MzA0NDI=",
      "title": "update changelog",
      "url": "https://github.com/tlswg/tls13-spec/pull/263",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just a quick PR to add today's major changes to the log.\n",
      "createdAt": "2015-09-22T23:37:12Z",
      "updatedAt": "2015-09-23T18:20:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b25fbe81f871101b9440471d608448c52b1ae1b5",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "93d6da6b45f0373392e6d00c96ab4181201313d0",
      "closedAt": "2015-09-23T18:13:37Z",
      "mergedAt": "2015-09-23T18:13:37Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks\n",
          "createdAt": "2015-09-23T01:19:35Z",
          "updatedAt": "2015-09-23T01:19:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 264,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU4MjQ0MDU=",
      "title": "Forbid SHA-1 in CertificateVerify",
      "url": "https://github.com/tlswg/tls13-spec/pull/264",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This completes the removal of SHA-1 for CertificateVerify. There's no reason to allow it there at all\n",
      "createdAt": "2015-09-23T20:03:05Z",
      "updatedAt": "2015-09-24T13:14:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "91c3b258a1245b33521e018a9581d0891005f22f",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "forbid_sha1_in_certificate_verify",
      "headRefOid": "b69e0cf65403ec4c3a9a83f52ca5d8a413ef9065",
      "closedAt": "2015-09-24T13:14:22Z",
      "mergedAt": "2015-09-24T13:14:22Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2015-09-24T05:40:17Z",
          "updatedAt": "2015-09-24T05:40:17Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 265,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU4MzQ4MzA=",
      "title": "fix missing RSA-PSS SignatureAlgorithm value",
      "url": "https://github.com/tlswg/tls13-spec/pull/265",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is stated to exist in the definition for \"signature\", however the value wasn't actually added to the enum. ( https://github.com/tlswg/tls13-spec/pull/265/files#diff-9d84740dcc569a0a5a359d0fba461a05R2286 )\n",
      "createdAt": "2015-09-23T21:36:06Z",
      "updatedAt": "2015-09-23T22:01:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "91c3b258a1245b33521e018a9581d0891005f22f",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "304543a068981d81b6d394241df15c07c65318fc",
      "closedAt": "2015-09-23T21:48:43Z",
      "mergedAt": "2015-09-23T21:48:43Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 266,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU4NTYwNzk=",
      "title": "Explaining the DoS potential from empty records",
      "url": "https://github.com/tlswg/tls13-spec/pull/266",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think that this is OK.  I also tweaked the language in the paragraph.\n",
      "createdAt": "2015-09-24T03:31:22Z",
      "updatedAt": "2016-07-07T23:35:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de5e007e618ba2d89452fde59b31f170f89075c5",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "dospad",
      "headRefOid": "48f4651e91794551dbe7e26faec74f04936cc335",
      "closedAt": "2016-07-07T23:35:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems kind of unnecessary. \n",
          "createdAt": "2015-09-24T16:53:24Z",
          "updatedAt": "2015-09-24T16:53:24Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's probably worth dedicating a section in the appendix to covering DoS risks in detail, rather than just sticking one point inline.\n",
          "createdAt": "2015-09-26T01:08:13Z",
          "updatedAt": "2015-09-26T01:08:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 267,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU5MjY1ODc=",
      "title": "Add MTI cipher suites. Fixes #32",
      "url": "https://github.com/tlswg/tls13-spec/pull/267",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@seanturner please confirm this matches consensus\n",
      "createdAt": "2015-09-24T17:39:53Z",
      "updatedAt": "2015-09-26T00:46:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c5c72f1301451c4ed211e460311b544402b5020d",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue32_mti_ciphers",
      "headRefOid": "a5a2a0f965dd650f0a72f048bbc1557ed9caa032",
      "closedAt": "2015-09-26T00:46:55Z",
      "mergedAt": "2015-09-26T00:46:55Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 268,
      "id": "MDExOlB1bGxSZXF1ZXN0NDYwNzA4OTI=",
      "title": "unified key share extension (fixes issue #214)",
      "url": "https://github.com/tlswg/tls13-spec/pull/268",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes issue #214. Based on top of PR #236. In addition, this should be considered dependent on PR #267.\n\nMerging the server & client key sharing into a single extension simplifies things nicely. The result is an extension that looks almost identical to the PSK extension (though, probably should stay separate). Making this change necessitated touching quite a few other areas in minor ways, mostly renaming. Of note, I also revised much of the text around HelloRetryRequest. The existing explanation was a little hard to follow, not the least of which was due to issues around a double negative that needed revising. I didn't change any fundamental procedure here, but I think this revision makes it easier to read. Rather than leave the new section for the new extension with a TODO at the end, I also added a paragraph for recommendations on what to send. (it notes X25519, so MTI ciphers should land first)\n\nNote that the issue of how to do the handshake hash for a retried hello is still out-standing (issue #104), so for the moment things assume that the full transcript starts at the first ClientHello, which is the safe route. Dropping that first exchange without authenticating it in some way opens up a downgrade attack, so until a good way to deal with that is in here, I think it should expect the full transcript be used in the session hash.\n\nIssue #190 also needs to be addressed, and at this point I think the simplest thing to do is maintain consistency and state that the KeyShareOffer extension is always required when offering any (EC)DHE cipher suites, even if it's empty to request server selection. This avoids needing to state a special case where the retried ClientHello is allowed to introduce a new extension not previously included in its first attempt. It's only 6 bytes. (I could make it 4 by having empty extension_data instead of empty client_shares, but I don't think that's worth the 2 bytes there)\n\nThe last issue I brush up against is issue #185, for which I have an older PR #189 still in the queue. It's not directly involved in this change; just related.\n\nFeedback would be appreciated.\n\nAgain, this is based on top of PR #236. A diff without its commit included is here:\nhttps://github.com/davegarrett/tls13-spec/compare/extensionboilerplate...davegarrett:keyshare\n",
      "createdAt": "2015-09-26T00:31:57Z",
      "updatedAt": "2015-10-17T19:30:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6cb787a4cc7281d58f01139c0721bcc7e6867d0c",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "keyshare",
      "headRefOid": "f3c14a72c01c999e7c3a7bba2d49550f336cd7c2",
      "closedAt": "2015-10-17T18:36:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Ok... This now depends on 2 other PRs, which of course confuses GitHub greatly. The HelloRetryRequest changes are separate and the editorial changes to the boilerplate are revised. The rest that was here had to be squashed because git can't handle it properly otherwise. The only difference here from what was before, in terms of actual content, is the addition of the word \"fatal\" before '\"handshake_failure\" alert' and an added link to \"(see {{incorrect-dhe-share}})\".\n",
          "createdAt": "2015-10-04T02:15:46Z",
          "updatedAt": "2015-10-04T02:15:59Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Rebased and cleaned up. The first commit in this PR is #236. The second two are PR #275. The last is what this PR is for. I really wish GitHub handled dependencies better here. It's either basing it in a tree like this, or separate PRs that inevitably have merge conflicts. Apologies for the confusion & excess bugspam from this.\n\nThe commit should be easier to read now that the retry request part is fixed and factored out. To restate, almost everything outside of the \"Key Share Offer\" section and deletion of \"Server Key Share\" is renaming. (also a correction of the ExtensionType in the enum; the old extension type name had an 's' in that case and not in others)\n",
          "createdAt": "2015-10-04T04:28:29Z",
          "updatedAt": "2015-10-04T04:28:29Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "All the necessary git incantations have been performed again and all 3 PRs should merge onto current master cleanly, at the moment. (this time with merge commits so that GitHub's Network Graph shows it properly)\n",
          "createdAt": "2015-10-06T01:39:58Z",
          "updatedAt": "2015-10-06T01:39:58Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett I am stuck in meetings through end of today. I have a long flight tomorrow and will try to take a look then.\n",
          "createdAt": "2015-10-09T12:44:51Z",
          "updatedAt": "2015-10-09T12:44:51Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Friday, October 09, 2015 08:44:56 am ekr wrote:\n\n> @davegarrett I am stuck in meetings through end of today. I have a long flight tomorrow and will try to take a look then.\n\nThanks for the update. Due to the way I've split things up here, I would recommend reviewing in the following order:\n\nPR #275 (all comments addressed), PR #236 (fully revised; less drastic change, now), PR #268 (this, now one commit)\n",
          "createdAt": "2015-10-09T19:54:52Z",
          "updatedAt": "2015-10-09T19:54:52Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To make this simpler to review, I've split the mass renaming out into a separate commit. No changes to the total changeset; just split into two commits now.\n",
          "createdAt": "2015-10-10T05:47:11Z",
          "updatedAt": "2015-10-10T05:47:11Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, wasn't able to get to this. It's going to have to be next week.\n\nOn Sat, Oct 10, 2015 at 7:47 AM, Dave Garrett notifications@github.com\nwrote:\n\n> To make this simpler to review, I've split the mass renaming out into a\n> separate commit. No changes to the total changeset; just split into two\n> commits now.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/268#issuecomment-147041965.\n",
          "createdAt": "2015-10-10T23:10:05Z",
          "updatedAt": "2015-10-10T23:10:05Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased on top of master (which has changes from PR #236 merged in and further tweaked). This is no longer based on any other PRs. (it will now conflict with PR #275) I really wish git/GitHub was smart enough to handle dependencies without so much fiddling. The mass renaming ended up getting squashed back into the main commit in the process. The second commit is for making it a generic field, as requested, however this makes it oddly different from the PSK extension now.\n",
          "createdAt": "2015-10-13T01:47:41Z",
          "updatedAt": "2015-10-13T01:47:41Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Added a tiny followup commit to drop the vestigial \"server_key_share_RESERVED(7)\".\n",
          "createdAt": "2015-10-13T02:23:18Z",
          "updatedAt": "2015-10-13T02:23:18Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: When you merged this, you checked in https://github.com/tlswg/tls13-spec/commit/6922f873e67e16dd7b499b7b0330743568591c9a but then reverted it in https://github.com/tlswg/tls13-spec/commit/74c4c7da1bf5bcea4f75cfc38c1aedb406098d3d . I also see that you did not check in the commit to merge the client/server fields as requested. I take it you decided against that?\n",
          "createdAt": "2015-10-17T19:11:27Z",
          "updatedAt": "2015-10-17T19:11:27Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I left the removal of server_key_share_RESERVED but reverted the message renumbering, since that seemed unnecessary.\n\nYes, I was persuaded by your argument that merging was a bad idea. I think I noted that in my response to the PR.\n",
          "createdAt": "2015-10-17T19:16:47Z",
          "updatedAt": "2015-10-17T19:16:47Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Saturday, October 17, 2015 03:16:49 pm ekr wrote:\n\n> I think I noted that in my response to the PR.\n\nI don't see a response to that. In any case, yes, merging them would likely be over-generalizing.\n\nI support the name change, by the way, as it makes it a little more clear. (new PR for a minor followup fix, as you missed as spot)\n",
          "createdAt": "2015-10-17T19:26:20Z",
          "updatedAt": "2015-10-17T19:26:20Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Saturday, October 17, 2015 03:16:49 pm ekr wrote:\n\n> I left the removal of server_key_share_RESERVED but reverted the message renumbering, since that seemed unnecessary.\n\nI saw it as the other way around: keeping the numbering is unnecessary. Both values are new to TLS 1.3, so there's no reason to leave a gap in the values.\n",
          "createdAt": "2015-10-17T19:30:28Z",
          "updatedAt": "2015-10-17T19:30:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 269,
      "id": "MDExOlB1bGxSZXF1ZXN0NDYwNzE0NTI=",
      "title": "trivial tweak",
      "url": "https://github.com/tlswg/tls13-spec/pull/269",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "missed one \"key agreement\" -> \"key exchange\"\n",
      "createdAt": "2015-09-26T00:49:44Z",
      "updatedAt": "2015-09-26T00:59:43Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "02b11728afcb77d9787331052eb750a343d5b33b",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "0afdc7d4aba0b7d5892745ee299e4033ab22fa0f",
      "closedAt": "2015-09-26T00:58:31Z",
      "mergedAt": "2015-09-26T00:58:31Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 270,
      "id": "MDExOlB1bGxSZXF1ZXN0NDY3MTI4NTU=",
      "title": "Reserved in appendix",
      "url": "https://github.com/tlswg/tls13-spec/pull/270",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-10-03T20:40:01Z",
      "updatedAt": "2015-10-05T18:16:09Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7ad27e2407a82177bad40f90034ab9c633227bfa",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "reserved_in_appendix",
      "headRefOid": "5d1d831e5ae1e7d83a1987a1fda27fe004d2e1f8",
      "closedAt": "2015-10-05T18:16:09Z",
      "mergedAt": "2015-10-05T18:16:09Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note: un_RESERVEDing SHA-1 and DSA is intentional. The point is that that things which are RESERVED are totally forbidden. Because you can offer SHA-1, we need the code point.\nIf we decide to make DSA MUST_NOT, then I'll mark it reserved and update the text.\n",
          "createdAt": "2015-10-03T20:42:42Z",
          "updatedAt": "2015-10-03T20:42:42Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Saturday, October 03, 2015 04:42:44 pm ekr wrote:\n\n> Note: un_RESERVEDing SHA-1 and DSA is intentional. The point is that that things which are RESERVED are totally forbidden. Because you can offer SHA-1, we need the code point.\n> If we decide to make DSA MUST_NOT, then I'll mark it reserved and update the text.\n\nAgreed. Using the \"RESERVED\" notation before was a bit iffy and with this new refactoring it has to be changed now. Just need to make sure it's mentioned explicitly that it's restricted.\n",
          "createdAt": "2015-10-03T21:26:24Z",
          "updatedAt": "2015-10-03T21:26:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 271,
      "id": "MDExOlB1bGxSZXF1ZXN0NDY3MTM0NzA=",
      "title": "Document removal of DH_anon (based on drafts from garrett and beurdou\u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/271",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026che). Fixes #233\n",
      "createdAt": "2015-10-03T21:13:56Z",
      "updatedAt": "2015-10-05T18:16:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7ad27e2407a82177bad40f90034ab9c633227bfa",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue233_remove_anon_dh",
      "headRefOid": "90541f620a20d33287e2ce38d65d41fd9c2e7fc1",
      "closedAt": "2015-10-05T18:16:21Z",
      "mergedAt": "2015-10-05T18:16:20Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Aside from the little nits and typo, the text itself looks good to me.\n",
          "createdAt": "2015-10-03T21:40:53Z",
          "updatedAt": "2015-10-03T21:40:53Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 272,
      "id": "MDExOlB1bGxSZXF1ZXN0NDY3MTM2ODk=",
      "title": "Remove TLS_NULL_WITH_NULL_NULL. Fixes #251",
      "url": "https://github.com/tlswg/tls13-spec/pull/272",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-10-03T21:25:10Z",
      "updatedAt": "2015-10-05T18:16:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7ad27e2407a82177bad40f90034ab9c633227bfa",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue251_remove_TLS_NULL_WITH_NULL_NULL",
      "headRefOid": "f5b0ae166ebf779065d2907333e08392db5e732e",
      "closedAt": "2015-10-05T18:16:28Z",
      "mergedAt": "2015-10-05T18:16:28Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2015-10-04T20:38:34Z",
          "updatedAt": "2015-10-04T20:38:34Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 273,
      "id": "MDExOlB1bGxSZXF1ZXN0NDY3MTM3NDg=",
      "title": "Don't use ServerConfiguration till it's verified. Fixed #229",
      "url": "https://github.com/tlswg/tls13-spec/pull/273",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-10-03T21:28:25Z",
      "updatedAt": "2015-10-05T18:16:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7ad27e2407a82177bad40f90034ab9c633227bfa",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue229_server_configuration_valid",
      "headRefOid": "990d1615b595cb8ad902751bc707020a34a07d5d",
      "closedAt": "2015-10-05T18:16:38Z",
      "mergedAt": "2015-10-05T18:16:38Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "90887ddb331869c64c77d33b0cf60ede53516c93"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2015-10-04T20:38:24Z",
          "updatedAt": "2015-10-04T20:38:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 274,
      "id": "MDExOlB1bGxSZXF1ZXN0NDY3MTM5NDc=",
      "title": "Omit empty ClientKeyShare. Fixes #190",
      "url": "https://github.com/tlswg/tls13-spec/pull/274",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-10-03T21:39:34Z",
      "updatedAt": "2015-10-17T18:36:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7ad27e2407a82177bad40f90034ab9c633227bfa",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue190_omit_empty_client_key_share",
      "headRefOid": "9391d8c7354059881d1b23d277600b69a4b6e6eb",
      "closedAt": "2015-10-17T18:36:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Holding off on this because Garrett pointed out that having no extension to elicit server state and than \"appending\" is weird. \n",
          "createdAt": "2015-10-05T18:33:21Z",
          "updatedAt": "2015-10-05T18:33:21Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My objection is not strong. After rewrites, it doesn't stand out as much in the text. It's fine so long as it's explicit that zero offers is no extension and an empty vector is not permitted. (don't want both showing up) I'll have a line to that effect in the extension merging PR, so no objection to this PR as-is.\n",
          "createdAt": "2015-10-05T18:37:44Z",
          "updatedAt": "2015-10-05T18:37:44Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm holding off on this. We have been looking at HelloRetryRequest and it looks like it would be easier to require the empty extension.\n",
          "createdAt": "2015-10-12T22:35:12Z",
          "updatedAt": "2015-10-12T22:35:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 275,
      "id": "MDExOlB1bGxSZXF1ZXN0NDY3MTYyNjY=",
      "title": "revise HelloRetryRequest",
      "url": "https://github.com/tlswg/tls13-spec/pull/275",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is the commit with the HelloRetryRequest changes from PR #268 backported to the current master. It's mostly just editorial, with a few important fixes. There was one part with a double negative that was supposed to be a triple negative and made no sense. As I was interacting with this area in merging the DH key share methods together, I ended up rewriting this somewhat to make it easier to follow and fix the various issues. Aside from being more verbose and explicit about how to handle errors, this doesn't change any of the design in the current draft spec.\n\nIt also makes note of, but does not alter the current state of, issue #104.\n",
      "createdAt": "2015-10-04T00:21:27Z",
      "updatedAt": "2015-10-17T20:43:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "14c3da1af48754ac112ccf82898b8329475cfc83",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "helloretryrequestchanges",
      "headRefOid": "006e25d4736aed53a247614a218b582dc52edf64",
      "closedAt": "2015-10-17T20:07:24Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There's a lot of reflow here and it's making it hard to tell what you actually changed in the text.\nAre you able to separate out those changes?\n",
          "createdAt": "2015-10-04T00:25:08Z",
          "updatedAt": "2015-10-04T00:25:08Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Saturday, October 03, 2015 08:25:11 pm ekr wrote:\n\n> There's a lot of reflow here and it's making it hard to tell what you actually changed in the text.\n> Are you able to separate out those changes?\n\nI pushed a commit to make the linebreaks similar, but the differ on GitHub isn't really smart enough for it to help much.\nTop is a little less changed here:\nhttps://github.com/tlswg/tls13-spec/pull/275/files\nThe \"rich diff\" doesn't care and says it's all different:\nhttps://github.com/tlswg/tls13-spec/pull/275/files?short_path=9d84740#diff-9d84740dcc569a0a5a359d0fba461a05\n\nTo break it down manually:\n\nThe \"Upon receipt of a HelloRetryRequest[...]\" is rewritten. It previously said:\n\n> MUST first verify that the \"selected_group\" field does not identify a group which was not in the original ClientHello. If it was present, then the client MUST abort the handshake with a fatal \"handshake_failure\" alert.\n> It's saying MUST verify that the field does not (1) identify a group not (2) in first ClientHello and if it was present (?) then MUST abort. With (1)+(2) it's a double negative, and then (?) should be a third negative to make sense if we're talking about a group in the supported_groups; it's just a confusing double negative if we're talking about client_key_share. Either way, it's not clear. I changed this to note both places by extension name, and that we're retrying IFF the client had it in the supported_groups but not the client_key_share. If it's not supported or a key was offered, then error.\n\nI then make the infinite loop check its own paragraph, and change it to use the more specific \"unexpected_message\" alert for the unexpected repeat retry request.\n\nThe next paragraph has a change saying the retry MUST contain exactly one share for the group the server requested and that the rest of the hello MUST remain the same (a requirement mentioned elsewhere).\n\nThe next bit fills in the step of the server replying to the new ClientHello.\n\nThe next bit reorders the wording to explicitly state what was selected. It also lists the version field for completeness and notes the error by name that would be here: illegal_parameter (again, we could just do a generic handshake_failure, but then nobody knows what to fix).\n\nLastly is just a note of issue #104. For safety, I'm assuming the transcript for the hash is everything. The current draft text is very ambiguous as to what the handshake hash is on a retry.\n",
          "createdAt": "2015-10-04T01:47:47Z",
          "updatedAt": "2015-10-04T01:47:47Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Addressed all comments and squashed to two commits: one with attempt to minimize wrapping changes and a followup to just fix the wrapping for the whole section. (wrapped to 75 char lines) Sorry; took longer than that should've. Was also fighting with git a bit there.\n",
          "createdAt": "2015-10-04T03:59:42Z",
          "updatedAt": "2015-10-04T03:59:42Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: fixed\n\nI prefer \"ClientKeyShare offer\" as I generally think specs are easier to use when you cite names directly, thus making it easy to search for them in the rest of the document. Also changed the will to a MUST.\n",
          "createdAt": "2015-10-05T18:33:13Z",
          "updatedAt": "2015-10-05T18:33:13Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: All comments have been fixed and this merges with master cleanly (I just tested). Is there anything else you want me to change here, or is this ready?\n",
          "createdAt": "2015-10-07T04:09:59Z",
          "updatedAt": "2015-10-07T04:09:59Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson and I have been looking at some restructuring of HRR to make the handshake cleaner. I will be posting something this week, but a holding off on this PR till then.\n",
          "createdAt": "2015-10-12T22:36:17Z",
          "updatedAt": "2015-10-12T22:36:17Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This was mostly dealt with in https://github.com/tlswg/tls13-spec/commit/74c4c7da1bf5bcea4f75cfc38c1aedb406098d3d#diff-9d84740dcc569a0a5a359d0fba461a05L2097 . I'm going to close this, then. I'll file a new PR with any little stuff.\n",
          "createdAt": "2015-10-17T20:07:24Z",
          "updatedAt": "2015-10-17T20:07:24Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Followup -> PR #297\n",
          "createdAt": "2015-10-17T20:43:21Z",
          "updatedAt": "2015-10-17T20:43:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 283,
      "id": "MDExOlB1bGxSZXF1ZXN0NDcxODAyNzc=",
      "title": "Consistency for the use of _RESERVED keyword (Issue #281)",
      "url": "https://github.com/tlswg/tls13-spec/pull/283",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #281\n",
      "createdAt": "2015-10-08T17:12:25Z",
      "updatedAt": "2015-10-12T22:42:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "733e62320c836a12e84f9634bcd605435f093907",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_reserved_consistency",
      "headRefOid": "8df445467afa18397a3bcabc6dc13efbc5dcf3e5",
      "closedAt": "2015-10-12T22:42:42Z",
      "mergedAt": "2015-10-12T22:42:42Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 284,
      "id": "MDExOlB1bGxSZXF1ZXN0NDcyNjUyMzQ=",
      "title": "Anti downgrade",
      "url": "https://github.com/tlswg/tls13-spec/pull/284",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "chair action needed"
      ],
      "body": "",
      "createdAt": "2015-10-09T12:22:45Z",
      "updatedAt": "2015-11-26T23:21:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "be016fd35830872f228f7843440f591d5e5a4669",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "anti_downgrade",
      "headRefOid": "3e980e9321a875535acfb2f4afa0de2debdd49b2",
      "closedAt": "2015-11-26T23:21:07Z",
      "mergedAt": "2015-11-26T23:21:07Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c22237f235c5ccd88a6f17da46eb64ed4a64ff77"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Chairs have judged that there is consensus to merge, see:\nhttps://mailarchive.ietf.org/arch/msg/tls/UfoOWPuJXCL1MyhJ4yAYpg3r53E\n",
          "createdAt": "2015-11-25T19:43:44Z",
          "updatedAt": "2015-11-25T19:43:44Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 285,
      "id": "MDExOlB1bGxSZXF1ZXN0NDczMTQyMzM=",
      "title": "fix misnamed handshake_hash in text",
      "url": "https://github.com/tlswg/tls13-spec/pull/285",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The struct contains a value named handshake_hash, not session_hash.\n\nI apparently had fixed this in PR #189. Pulling it out separately to get it in now, as it hasn't even been decided for sure if we're doing that.\n",
      "createdAt": "2015-10-09T20:06:47Z",
      "updatedAt": "2015-10-12T23:05:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "733e62320c836a12e84f9634bcd605435f093907",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "14d90f0244043c87074bf4397d0d899540bb54d3",
      "closedAt": "2015-10-12T22:43:54Z",
      "mergedAt": "2015-10-12T22:43:54Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 286,
      "id": "MDExOlB1bGxSZXF1ZXN0NDczNDE4MTA=",
      "title": "Fix missing assignment number in enum for sha1 HashAlgorithm (fixes #280)",
      "url": "https://github.com/tlswg/tls13-spec/pull/286",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-10-10T09:26:10Z",
      "updatedAt": "2015-10-10T14:02:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "733e62320c836a12e84f9634bcd605435f093907",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_hash_alg_assignment",
      "headRefOid": "beca2540d8f49f86dfce65442469f15602f4c6cb",
      "closedAt": "2015-10-10T14:02:34Z",
      "mergedAt": "2015-10-10T14:02:34Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 287,
      "id": "MDExOlB1bGxSZXF1ZXN0NDczNTAxMTA=",
      "title": "get serious with SHA-1",
      "url": "https://github.com/tlswg/tls13-spec/pull/287",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Proposal to prohibit SHA-1 in TLS 1.3+ entirely. Recent research indicates that SHA-1 is weaker than previously thought and thus I think it's time to reopen discussion on this topic. Please discuss in the newly submitted mailing list thread on the topic.\n\nhttps://sites.google.com/site/itstheshappening/\n",
      "createdAt": "2015-10-10T17:37:05Z",
      "updatedAt": "2015-10-12T05:09:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8ff853050360ec0eefa96746797499a66fb5a683",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "sha1",
      "headRefOid": "b016f05becfd2252d71441da9cb51dfc02417129",
      "closedAt": "2015-10-12T05:09:02Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This and a lesser version of it were rejected from consideration by @seanturner in favor of maintaining existing consensus language. Closing...\n",
          "createdAt": "2015-10-12T05:09:02Z",
          "updatedAt": "2015-10-12T05:09:02Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 288,
      "id": "MDExOlB1bGxSZXF1ZXN0NDczODU5ODc=",
      "title": "Explicitly specify SSLv2/SSLv3",
      "url": "https://github.com/tlswg/tls13-spec/pull/288",
      "state": "CLOSED",
      "author": "yuhong",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Explicitly specify SSL version 2 and SSL version 3.\n",
      "createdAt": "2015-10-12T05:04:51Z",
      "updatedAt": "2015-10-14T21:43:08Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8ff853050360ec0eefa96746797499a66fb5a683",
      "headRepository": "yuhong/tls13-spec",
      "headRefName": "master",
      "headRefOid": "220968c7a68f13b428782c499c975855717f3c1a",
      "closedAt": "2015-10-12T11:30:00Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think this is a helpful change. That list is long enough already.\n\n\"SSL\" necessarily includes SSL 1-3. Dropping SSL2 compatible CLIENT-HELLO support is recommended, so it doesn't need singling out separately as permitted. Also, supporting it is not support for SSL2; it's an obsolete compatibility shim for TLS, so that's not even covered here. Implementations can support both TLS & SSL2 CLIENT-HELLO, but not SSL, just fine.\n",
          "createdAt": "2015-10-12T05:19:07Z",
          "updatedAt": "2015-10-12T05:19:07Z"
        },
        {
          "author": "yuhong",
          "authorAssociation": "NONE",
          "body": "\"SSL\" is often used to refer to all SSL/TLS versions in practice.\n",
          "createdAt": "2015-10-12T05:32:43Z",
          "updatedAt": "2015-10-12T05:33:22Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And that practice needs to stop.\n\nIf this was anywhere other than directly in the TLS specification itself, I might agree with you with a need for clarification. However, it's clearly not telling people to make sure not to implement itself. ;)\n",
          "createdAt": "2015-10-12T05:47:41Z",
          "updatedAt": "2015-10-12T05:47:41Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If @ekr agrees with enumerating it to \"SSL 2.0, SSL 3.0\", instead of simply \"SSL\", I don't think it's needed but I don't object.\n\nThe SSL2 compatible CLIENT-HELLO parenthetical, however, is not relevant here as that's a shim for TLS, not SSL2 support itself, and I'd like to keep mention of it as banished as possible. Implementations are permitted to drop support for it, but it's only a recommendation.\n\nNote that we previously had a mix of \"SSL3\", \"SSLv3\", and \"SSL 3.0\" all scattered about, which made things a bit inconsistent and annoying to search the document for. I normalized all mentions of versions to use the \"SSL 3.0\" style version notation a while back, so please use this notation.\n",
          "createdAt": "2015-10-12T06:00:07Z",
          "updatedAt": "2015-10-12T06:00:07Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with @davegarrett, this isn't really making things clearer.\n",
          "createdAt": "2015-10-12T11:30:00Z",
          "updatedAt": "2015-10-12T11:30:00Z"
        },
        {
          "author": "yuhong",
          "authorAssociation": "NONE",
          "body": "Also, TLS 1.0 was far less different from SSL 3.0 than SSL 3.0 was against SSL 2.0.\n",
          "createdAt": "2015-10-14T21:43:08Z",
          "updatedAt": "2015-10-14T21:43:08Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 289,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc0NzkyODQ=",
      "title": "trivial fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/289",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-10-13T00:33:07Z",
      "updatedAt": "2015-10-13T04:13:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4a97f763c9bdb8969aad4745e1b6b5097d68eb6b",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "9fa039fa1231e71dd8a74b4161d3b6e6f617ce78",
      "closedAt": "2015-10-13T03:25:36Z",
      "mergedAt": "2015-10-13T03:25:36Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 290,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc3MDgwMjU=",
      "title": "Removing certificate_types and adding certificate_extensions",
      "url": "https://github.com/tlswg/tls13-spec/pull/290",
      "state": "MERGED",
      "author": "Andrei-Popov",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This PR includes CertificateRequest changes discussed at the TLS WG Interim:\n1. Removes certificate_types, which are no longer needed.\n2. Adds client cert selection by certificate extension values. This helps make CertificateRequest more specific and eliminate the need for the confusing \"Choose a certificate\" UI.\n",
      "createdAt": "2015-10-14T20:06:36Z",
      "updatedAt": "2015-10-16T22:12:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "925c7013a89602a089051f54f9ab10cef9eea418",
      "headRepository": "Andrei-Popov/tls13-spec",
      "headRefName": "master",
      "headRefOid": "4f83ee6ad1d10650fa239f4a7d555cbd57a2a219",
      "closedAt": "2015-10-16T22:12:26Z",
      "mergedAt": "2015-10-16T22:12:26Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "199a25302d36ccdd6ede2554c6139b8e44f365fa"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 293,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc3OTIzNTE=",
      "title": "State the required salt length for RSA-PSS signatures",
      "url": "https://github.com/tlswg/tls13-spec/pull/293",
      "state": "MERGED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-10-15T14:19:28Z",
      "updatedAt": "2015-10-29T18:19:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "925c7013a89602a089051f54f9ab10cef9eea418",
      "headRepository": null,
      "headRefName": "issue-291",
      "headRefOid": "2663e017d88eda85ad523cd78989cfeaeb925cba",
      "closedAt": "2015-10-16T22:10:08Z",
      "mergedAt": "2015-10-16T22:10:08Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 294,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc5OTMzNTE=",
      "title": "minor KeyShare renaming followup fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/294",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix spacing to match other flow charts & fix one KeyShare->KeyShareEntry that was missed.\n",
      "createdAt": "2015-10-17T19:22:14Z",
      "updatedAt": "2015-10-17T19:26:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "74c4c7da1bf5bcea4f75cfc38c1aedb406098d3d",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "5b726b725ceb35ab9561201f9093786496fa5d15",
      "closedAt": "2015-10-17T19:25:43Z",
      "mergedAt": "2015-10-17T19:25:43Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 296,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc5OTQwMjQ=",
      "title": "group & key share recommendations",
      "url": "https://github.com/tlswg/tls13-spec/pull/296",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "These are a revision of the recommendations I had in earlier drafts of my PRs. They're now neutral as to group priority, as you said that had not been sufficiently discussed & decided.\n\nNote that one important issue is addressed here: how to reconcile the priorities of the \"supported_groups\" and \"key_share\" extensions. Both have priorities, but those could conflict leading to no clear answer as to what the indicated priority should be. I've fixed that with a simple \"SHOULD\" to have them just match up. If they still don't match up, it's ambiguous; implementers can decide for themselves how to handle that, which I think is fine.\n\nThis also adds a \"MUST NOT\" offer shares for unsupported groups.\n\nThere's also a \"MUST NOT\" use ffdhe2048 with TLS 1.3+, as it's in there primarily to increase adoption of the extension with older servers that will be using TLS 1.2 and it is relatively weak.\n",
      "createdAt": "2015-10-17T19:57:14Z",
      "updatedAt": "2016-05-22T01:29:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de5e007e618ba2d89452fde59b31f170f89075c5",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "grouprecommendations",
      "headRefOid": "fc541f1758b6c9cb2c2b47eadb46cc76bc01a0f4",
      "closedAt": "2016-05-22T01:29:30Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased & fixed conflict with recent changes.\n",
          "createdAt": "2015-12-16T22:05:00Z",
          "updatedAt": "2015-12-16T22:05:00Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This PR is obsolete and not useful to be open anymore. (see also mailing list discussion related to parts here)\n",
          "createdAt": "2016-05-22T01:29:30Z",
          "updatedAt": "2016-05-22T01:29:30Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 297,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc5OTQ4MTQ=",
      "title": "helloretryrequest fixups",
      "url": "https://github.com/tlswg/tls13-spec/pull/297",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@ekr: You addressed the main ambiguity in https://github.com/tlswg/tls13-spec/commit/74c4c7da1bf5bcea4f75cfc38c1aedb406098d3d#diff-9d84740dcc569a0a5a359d0fba461a05L2097 . This fixes a few remaining issues. An itemized list:\n- \"handshake_failure\" alert is fatal\n- note it must be appended, not just \"used\", in the selected_group description (just using instead of appending creates a downgrade attack due to lack of authentication for this message, as discussed previously)\n- clean up styling of variable names; the dominant style uses no quotes around variable names, but quotes around enum values (granted, this may not be the ideal style, but it is more or less consistently the case elsewhere in the document)\n- note that the same rule as ServerHello applies: no extensions the client did not offer first\n- update text to deal with possibility of omitted extension\n- minor wording simplification\n- specify error to use if \"MUST\" fails (could be a \"SHOULD\" error, here)\n",
      "createdAt": "2015-10-17T20:40:37Z",
      "updatedAt": "2015-12-16T02:57:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "37a350187d2ea89eda89e9403f92dcee4e75edf4",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "minorhelloretryrequestchanges",
      "headRefOid": "02002a8481657e9dee048559b6451e558143fd68",
      "closedAt": "2015-12-15T22:20:40Z",
      "mergedAt": "2015-12-15T22:20:40Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Repushed commit with changes for comments.\n- Changed description to not say used/amended, but rather describe what it actually represents directly: the group the server intends to negotiate and is requesting a retry for. (we don't need duplicated MUSTs here, and stating its actual meaning more explicitly is preferable)\n- Changed text wrt selected group as suggested.\n",
          "createdAt": "2015-10-17T20:56:17Z",
          "updatedAt": "2015-10-17T20:56:17Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased on top of PR #349 (which still merges cleanly onto master, as of this moment; this does too) to avoid flip-flopping again on the omit vs. empty KeyShare for retry request.\n",
          "createdAt": "2015-12-15T02:57:41Z",
          "updatedAt": "2015-12-15T02:58:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 312,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc5OTYxOTI=",
      "title": "mention (EC)DHE+PSK (issue #309)",
      "url": "https://github.com/tlswg/tls13-spec/pull/312",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Quick PR for proposed change for issue #309.\n",
      "createdAt": "2015-10-17T21:52:12Z",
      "updatedAt": "2015-11-20T04:05:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7a57d79adb1870474cc4689257fc16f1aa5bf411",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "3cd243f511d5289a3902619f13bce4fc7a7511b8",
      "closedAt": "2015-11-20T01:13:31Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, looking at this again, this proposal is not really what's wanted here.\n\nThe natural case here is that the client will offer only:\nSig + ECDHE (full handshake) and PSK (resumption)\n",
          "createdAt": "2015-10-17T21:55:14Z",
          "updatedAt": "2015-10-17T21:55:14Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I thought we were using (EC)DHE+PSK for resumption? I mentioned previously that I think plain PSK for resumption is appropriate, but I vaguely remember someone saying we were going to use PFS+PSK here anyway. I don't see a reason to not support it, though.\n",
          "createdAt": "2015-10-17T21:58:37Z",
          "updatedAt": "2015-10-17T21:58:37Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The client can use either plain PSK or (EC)DHE+PSK for resumption, at its discretion (this is one of the advantages of a more decoupled design). However, the natural counterpart is pure PSK.\n",
          "createdAt": "2015-10-17T22:02:20Z",
          "updatedAt": "2015-10-17T22:02:20Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, if you think the current text is preferred, I have no objection to just closing this and the issue.\n\nThe PSK resumption story really does need to be clarified as to explicitly how offer and negotiate which cipher suites, by the way.\n",
          "createdAt": "2015-10-17T22:07:00Z",
          "updatedAt": "2015-10-17T22:07:00Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think this is what's needed.\n",
          "createdAt": "2015-11-20T01:13:31Z",
          "updatedAt": "2015-11-20T01:13:31Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 313,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc5OTk1Mjg=",
      "title": "Renaming section to be generic and making description of msg agnostic.",
      "url": "https://github.com/tlswg/tls13-spec/pull/313",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It's always bugged me that there's no section title \"client finished\" just one called \"server finished\".  So, how about we make this one applicable to both by a title change and some tweaks to the initial description.\n",
      "createdAt": "2015-10-18T01:38:54Z",
      "updatedAt": "2015-10-18T01:54:46Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7a57d79adb1870474cc4689257fc16f1aa5bf411",
      "headRepository": null,
      "headRefName": "s3.6.8",
      "headRefOid": "d019c0441af4fdf34e143ea3f0812c0ed596fe50",
      "closedAt": "2015-10-18T01:54:46Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've got a major rewrite of this section pending and it includes a change like this. \n",
          "createdAt": "2015-10-18T01:54:46Z",
          "updatedAt": "2015-10-18T01:54:46Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 314,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc5OTk4NDI=",
      "title": "Removing some unnecessary etcs.",
      "url": "https://github.com/tlswg/tls13-spec/pull/314",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "etc. in an example or after such as can be removed.\n",
      "createdAt": "2015-10-18T02:04:54Z",
      "updatedAt": "2015-10-18T02:20:40Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7a57d79adb1870474cc4689257fc16f1aa5bf411",
      "headRepository": null,
      "headRefName": "etc",
      "headRefOid": "4491808489d41c97efaa5233260818ed24a8e861",
      "closedAt": "2015-10-18T02:20:40Z",
      "mergedAt": "2015-10-18T02:20:40Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 315,
      "id": "MDExOlB1bGxSZXF1ZXN0NDgwMDE3NjA=",
      "title": "another KeyShare rename",
      "url": "https://github.com/tlswg/tls13-spec/pull/315",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I found another spot that was missed in the renaming of the renaming.\n",
      "createdAt": "2015-10-18T04:52:18Z",
      "updatedAt": "2015-10-18T05:09:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "01a8b6e84f4231aa0dd8e7cacf816758fd5b9cff",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "b15f70f1df9e1fb85649eb9fb8cf3ec6e6538833",
      "closedAt": "2015-10-18T05:04:03Z",
      "mergedAt": "2015-10-18T05:04:03Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 316,
      "id": "MDExOlB1bGxSZXF1ZXN0NDgzNTU5NTI=",
      "title": "Wip client auth revision",
      "url": "https://github.com/tlswg/tls13-spec/pull/316",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "This is still a WIP but is posted so that people can review.\n",
      "createdAt": "2015-10-21T16:33:37Z",
      "updatedAt": "2015-12-01T17:18:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "50cf98537f0e805737bbc296f2f4ecc65210a601",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "WIP_client_auth_revision",
      "headRefOid": "4798edaf20983f8dd2de26e67dc818db8608358f",
      "closedAt": "2015-12-01T17:18:22Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've rebased this version and made some updates. I need to go over the diff again before I merge so there may be some issues, but I wanted to put it up so others could comment ahead of that. Expected merge tonight or tomorrow.\n",
          "createdAt": "2015-12-01T00:30:13Z",
          "updatedAt": "2015-12-01T00:30:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 317,
      "id": "MDExOlB1bGxSZXF1ZXN0NDgzNzQ1MzM=",
      "title": "Control SHA-1 with signature_algorithms",
      "url": "https://github.com/tlswg/tls13-spec/pull/317",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "chair action needed"
      ],
      "body": "The current draft permits the use of SHA-1 in the certificate chain, which gives SHA-1 a free pass indefinitely.  Since we expressly forbid the use of SHA-1 for signing in TLS itself, we can just permit clients to include it in \"signature_algorithms\" and use that to determine whether SHA-1 is acceptable.\n\nThat means that clients that want to disable SHA-1 (real soon now, we promise), can signal that preference cleanly.\n\nThis is built on top of #316 to avoid a nasty rebase when that merges.  Just look at the final commit.\n",
      "createdAt": "2015-10-21T19:13:24Z",
      "updatedAt": "2015-12-01T17:35:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f0ea00a14becc9fbb7f0ce69a3d8b142fedee1c1",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "sha1_redux",
      "headRefOid": "ce462bd5b0eb8c1bd4269da4aee7e28adaaf1703",
      "closedAt": "2015-12-01T17:35:10Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed nits and rebased.\n",
          "createdAt": "2015-10-30T06:32:26Z",
          "updatedAt": "2015-10-30T06:32:26Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Travis is still mad at this. I think it's because there's two \"%%### Key Exchange Messages\" in the appendix, and the generator script is erroring on that.\nhttps://travis-ci.org/tlswg/tls13-spec/builds/89405121\n\nThis is from @ekr's PR #316 commits on which this is based, though, not the ones for this issue. That PR doesn't have any Travis result.\n",
          "createdAt": "2015-11-05T21:14:07Z",
          "updatedAt": "2015-11-05T21:14:45Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson are you happy with the basic text here? If so, I can rebase.\n",
          "createdAt": "2015-11-13T00:03:55Z",
          "updatedAt": "2015-11-13T00:03:55Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr, I reviewed the thread and didn't find anything actionable other than Russ' suggestion to refer to RFC 5280 for terminology.  In doing so, I noticed that we use \"certificate chain\" whereas 5280 uses \"certification path\".  I also notice that we duplicate some of the advice regarding certificate validation and the \"bad_certificate\" alert.\n\nBTW, I have no idea on how you might rebase this.  I tried against several base points but was unsuccessful in even applying the changes.\n",
          "createdAt": "2015-11-13T18:05:18Z",
          "updatedAt": "2015-11-13T18:05:18Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "After reviewing the list discussion, PR#317 (https://github.com/tlswg/tls13-spec/pull/317) is okay to merge. Initially, there was some confusion about exactly what changes were being proposed (PR#317 is built on PR#231) but that seems to have no be cleared up; text about not checking the signature on a self-signed certificates has been added in various places.\n\nFor reference:\nhttps://mailarchive.ietf.org/arch/msg/tls/8O1zcuoGwbNjrZZr6Z0wJrTUYww\n",
          "createdAt": "2015-11-25T19:40:52Z",
          "updatedAt": "2015-11-25T19:40:52Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 319,
      "id": "MDExOlB1bGxSZXF1ZXN0NDg0MDE3MjU=",
      "title": "Issue225 deprecated extensions",
      "url": "https://github.com/tlswg/tls13-spec/pull/319",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-10-21T23:33:52Z",
      "updatedAt": "2015-10-22T13:29:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d6b696c1593e7b5e7da28dc7f342d0ec25ba84c3",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue225_deprecated_extensions",
      "headRefOid": "543c923101723ac7113bf160c73b4404b73f0104",
      "closedAt": "2015-10-22T13:29:53Z",
      "mergedAt": "2015-10-22T13:29:53Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Can we just cite the registry itself, which links to the various RFCs?\nhttps://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#tls-extensiontype-values-1\n\nThis would let us avoid adding informative references to stuff we're explicitly telling people to ignore.\n\nTechnically, the only info really needed to follow this would be the ID numbers, which could be added for each.\n",
          "createdAt": "2015-10-22T00:34:39Z",
          "updatedAt": "2015-10-22T00:34:39Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Eh, I already did it and it seems like useful context.\n",
          "createdAt": "2015-10-22T00:35:43Z",
          "updatedAt": "2015-10-22T00:35:43Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 320,
      "id": "MDExOlB1bGxSZXF1ZXN0NDg2MzE4OTQ=",
      "title": "Empty additional data. Fixes #318. Fixes #278",
      "url": "https://github.com/tlswg/tls13-spec/pull/320",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-10-23T21:24:49Z",
      "updatedAt": "2015-10-29T07:14:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1cfd9df658b87a6b53994d26414caf97c3994102",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue318_278_additional_data",
      "headRefOid": "b486f94cbca0fc959856b515990a34bb45bcf3cc",
      "closedAt": "2015-10-29T07:14:31Z",
      "mergedAt": "2015-10-29T07:14:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "371312deaa7606bade4622406d5fc61a15708bb5"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner ready for merge?\n",
          "createdAt": "2015-10-23T21:25:53Z",
          "updatedAt": "2015-10-23T21:25:53Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merging per discussion with @seanturner \n",
          "createdAt": "2015-10-29T07:14:28Z",
          "updatedAt": "2015-10-29T07:14:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 321,
      "id": "MDExOlB1bGxSZXF1ZXN0NDg2NDA0MTM=",
      "title": "Describe exactly where extensions have to go. Fixes #72",
      "url": "https://github.com/tlswg/tls13-spec/pull/321",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-10-23T23:16:04Z",
      "updatedAt": "2015-10-24T19:38:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1cfd9df658b87a6b53994d26414caf97c3994102",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue72_extensions",
      "headRefOid": "68b1106ed8477d8c075b2ed94e6cb2595f0bd94f",
      "closedAt": "2015-10-24T19:38:06Z",
      "mergedAt": "2015-10-24T19:38:06Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Does it make sense to just have a tri-state column for TLS 1.3 on the extensions registry:\n\"key\" - key determining parameters\n\"encrypted\" - encrypted\n\"forbidden\" - not for use in TLS 1.3\n",
          "createdAt": "2015-10-23T23:21:08Z",
          "updatedAt": "2015-10-23T23:21:08Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 322,
      "id": "MDExOlB1bGxSZXF1ZXN0NDkxMTEyMzM=",
      "title": "fix broken reference link",
      "url": "https://github.com/tlswg/tls13-spec/pull/322",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix another missing brace breaking a link.\n\nAlso drops a leading space for that line; markdown doesn't seem to need it and generates a space there anyway, just as it does for all the other lines.\n",
      "createdAt": "2015-10-29T08:43:24Z",
      "updatedAt": "2015-10-29T08:46:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5f30bca74fdf8ded2bf50b112487ca780faa52ef",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "cc0d41a8b39d4b9347d457797807180c06931d84",
      "closedAt": "2015-10-29T08:45:55Z",
      "mergedAt": "2015-10-29T08:45:55Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 324,
      "id": "MDExOlB1bGxSZXF1ZXN0NDkyMDM2MjU=",
      "title": "EncryptedExtensions is mandatory",
      "url": "https://github.com/tlswg/tls13-spec/pull/324",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think that the decision was to make this mandatory, since present-but-empty is harder to screw up.\n\nCloses #323.\n",
      "createdAt": "2015-10-29T21:36:34Z",
      "updatedAt": "2015-10-29T22:34:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0b3847d03553c0717f96647024057b794dac10b4",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "eemandatory",
      "headRefOid": "b06593ff210a3b5e7e1d6ec8856b88dcf968e8ae",
      "closedAt": "2015-10-29T22:34:29Z",
      "mergedAt": "2015-10-29T22:34:29Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 325,
      "id": "MDExOlB1bGxSZXF1ZXN0NDkyMTA4NTI=",
      "title": "drop Boolean definition subsection",
      "url": "https://github.com/tlswg/tls13-spec/pull/325",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This has been unused since draft-07.\n",
      "createdAt": "2015-10-29T22:48:18Z",
      "updatedAt": "2015-10-30T00:15:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5087333553ca9658780f7fae8e79d1eff587fc0a",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "c2528b92d33a47fb1c4be29bd724efc2f2f08314",
      "closedAt": "2015-10-30T00:00:42Z",
      "mergedAt": "2015-10-30T00:00:42Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 326,
      "id": "MDExOlB1bGxSZXF1ZXN0NDkyMTMzMzI=",
      "title": "cleanup ClientHello message placeholders",
      "url": "https://github.com/tlswg/tls13-spec/pull/326",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I noticed that a definition of the SessionID type is missing from the current draft. Here's a few little cleanups to deal with the legacy ClientHello bits like this.\n- drop empty orphaned \"%%% Hello Messages\" block\n- drop CompressionMethod enum in favor of just saying it's exactly one zero byte (defining an enum to tell someone that a value is zero is just clutter at this point)\n- change the placeholder session_id & compression_methods fields to opaque vectors (that's all they are to TLS 1.3 implementations)\n- rename the placeholders to have a \"legacy_\" prefix so it's clear that they're just placeholders now (also makes it clear here that session resumption has changed)\n- RFC2119 capitalize a \"should\"\n",
      "createdAt": "2015-10-29T23:17:20Z",
      "updatedAt": "2015-12-01T17:42:30Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5087333553ca9658780f7fae8e79d1eff587fc0a",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "hellolegacycleanup",
      "headRefOid": "14233eee6b50388f5816418b31bb93b06a50968a",
      "closedAt": "2015-12-01T17:40:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Manually rebased and merged separately.\n",
          "createdAt": "2015-12-01T17:40:37Z",
          "updatedAt": "2015-12-01T17:40:37Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Thanks :)\n",
          "createdAt": "2015-12-01T17:42:07Z",
          "updatedAt": "2015-12-01T17:42:07Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 327,
      "id": "MDExOlB1bGxSZXF1ZXN0NDkzODc1NzI=",
      "title": "Issue318 278 additional data",
      "url": "https://github.com/tlswg/tls13-spec/pull/327",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-11-02T01:31:28Z",
      "updatedAt": "2015-11-17T14:17:16Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f0ea00a14becc9fbb7f0ce69a3d8b142fedee1c1",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue318_278_additional_data",
      "headRefOid": "4b0de0405e8f34f000bed3cf1c4a2f131e212dba",
      "closedAt": "2015-11-02T01:31:44Z",
      "mergedAt": "2015-11-02T01:31:44Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Starts in this thread:\n\nhttps://mailarchive.ietf.org/arch/msg/tls/bPccVqZyu2vO_JE-91cLS9n8gXg\n\nspt\n\n> On Nov 17, 2015, at 14:59, zaker notifications@github.com wrote:\n> \n> Why additional data input is empty in TLS1.3?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n",
          "createdAt": "2015-11-17T14:17:15Z",
          "updatedAt": "2015-11-17T14:17:15Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 328,
      "id": "MDExOlB1bGxSZXF1ZXN0NDkzODgwOTM=",
      "title": "fix changelog",
      "url": "https://github.com/tlswg/tls13-spec/pull/328",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Draft 10 was released; we're on draft 11 now.\n",
      "createdAt": "2015-11-02T01:47:36Z",
      "updatedAt": "2015-11-07T01:50:52Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8e82c3c7e8b0b3fcc687a48529abc18863fd29a4",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "69d273e1b712a325c4f82946f3a055fa5f1544a6",
      "closedAt": "2015-11-06T22:12:50Z",
      "mergedAt": "2015-11-06T22:12:50Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 331,
      "id": "MDExOlB1bGxSZXF1ZXN0NDk2NDQ0Njc=",
      "title": "Be more positive!",
      "url": "https://github.com/tlswg/tls13-spec/pull/331",
      "state": "CLOSED",
      "author": "IETF-WG-Chairs-Training",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-11-04T03:28:16Z",
      "updatedAt": "2015-11-04T03:29:09Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8e82c3c7e8b0b3fcc687a48529abc18863fd29a4",
      "headRepository": "IETF-WG-Chairs-Training/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "8d40540d0bf96491202f1d53a1fc3eb953c9d8c2",
      "closedAt": "2015-11-04T03:29:09Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 332,
      "id": "MDExOlB1bGxSZXF1ZXN0NDk2NDUwNTE=",
      "title": "Add Barnes",
      "url": "https://github.com/tlswg/tls13-spec/pull/332",
      "state": "CLOSED",
      "author": "IETF-WG-Chairs-Training",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-11-04T03:40:35Z",
      "updatedAt": "2015-11-04T03:44:40Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8e82c3c7e8b0b3fcc687a48529abc18863fd29a4",
      "headRepository": "IETF-WG-Chairs-Training/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "9208f5a5a3f58a056de62e151a15124bb3ac5dec",
      "closedAt": "2015-11-04T03:44:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "IETF-WG-Chairs-Training",
          "authorAssociation": "NONE",
          "body": "You should use a different affiliation.\n",
          "createdAt": "2015-11-04T03:41:53Z",
          "updatedAt": "2015-11-04T03:41:53Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 333,
      "id": "MDExOlB1bGxSZXF1ZXN0NDk2Njk5MTk=",
      "title": "Add CFRG ECC (ECDH&signatures) algorithms",
      "url": "https://github.com/tlswg/tls13-spec/pull/333",
      "state": "CLOSED",
      "author": "ilaril",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This should be straightforward forward-port of RFC4492bis changes for the same purpose.\n\nIn style of RSA-PSS, I gave these explicit codepoints (signature algorithm 5 and curves 29-32).\n",
      "createdAt": "2015-11-04T10:17:08Z",
      "updatedAt": "2015-11-07T14:42:44Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8e82c3c7e8b0b3fcc687a48529abc18863fd29a4",
      "headRepository": null,
      "headRefName": "eddsa-support",
      "headRefOid": "8d2f5e5e7cedcc5ccfc1ed0eb746238d29ee871a",
      "closedAt": "2015-11-07T11:23:55Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ilaril",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As result of comments, perhaps make the following changes?\n- \"x25519, etc.\" -> \"x25519 and x448\"\n- \"Ed25519, etc.\" -> \"Ed25519 and Ed448\"\n- \"For secp curves, This is[...]\" -> \"For secp256r1, secp384r1 and secp521r1, This is[...]\"\n- \"For ECDH functions, this is raw octet-string output of the ECDH function with input point being the public basepoint. E.g. 32 octets for X25519 (29) 56 octets for X448 (30).\" -> \"For ECDH functions, this is raw octet-string input for the ECDH function, 32 octets for X25519(29) and 56 octets for X448(30).\"\n- \"All ECDH calculations that are not ECDH functions[...]\" -> \"For secp256r1, secp384r1 and secp521r1, ECDH calculations[...]\"\n",
          "createdAt": "2015-11-04T14:35:20Z",
          "updatedAt": "2015-11-04T14:35:20Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This looks generally pretty good. Can you also update the PR to include your name\nand affiliation in the acknowledgements section (assuming you wish to be acknowledged).\n",
          "createdAt": "2015-11-05T02:02:31Z",
          "updatedAt": "2015-11-05T02:02:31Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Pushed new commit incorporating various feedback\n\nFeel free to squash these two (or request me to squash them).\n",
          "createdAt": "2015-11-05T04:06:58Z",
          "updatedAt": "2015-11-05T04:06:58Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This appears to be already merged (but not marked so), so closing.\n",
          "createdAt": "2015-11-07T11:23:55Z",
          "updatedAt": "2015-11-07T11:23:55Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks.\n",
          "createdAt": "2015-11-07T14:42:44Z",
          "updatedAt": "2015-11-07T14:42:44Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 334,
      "id": "MDExOlB1bGxSZXF1ZXN0NDk4MDMzMTQ=",
      "title": "Use \"length\" instead of \"octet length\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/334",
      "state": "MERGED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This addresses Brian's comment from #293. We don't use \"octet length\" anywhere else in the document.\n",
      "createdAt": "2015-11-05T10:04:47Z",
      "updatedAt": "2015-11-06T22:12:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8e82c3c7e8b0b3fcc687a48529abc18863fd29a4",
      "headRepository": null,
      "headRefName": "octet-length",
      "headRefOid": "f959ecd88b9ba9b55509bf498293ba26bbea3da2",
      "closedAt": "2015-11-06T22:12:14Z",
      "mergedAt": "2015-11-06T22:12:14Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 335,
      "id": "MDExOlB1bGxSZXF1ZXN0NDk4MDM0MTY=",
      "title": "Use correct pronoun for \"client\" and \"attacker\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/335",
      "state": "MERGED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The spec always uses the gender-neutral possessive pronoun \"its\" for \"client\", so I think we should definitely fix that occurrence.\n\nAlso, it seems that throughout the document we try to not use gender-specific pronouns for \"attacker\". I'm not sure about \"their\" though, as it looks like we usually try to avoid that by restructuring sentences, but I may be mistaken. We could also refer to multiple attackers?\n",
      "createdAt": "2015-11-05T10:05:46Z",
      "updatedAt": "2015-11-06T22:12:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8e82c3c7e8b0b3fcc687a48529abc18863fd29a4",
      "headRepository": null,
      "headRefName": "pronouns",
      "headRefOid": "266d9a03d913def8ca9c8904357a4c1ed01c2942",
      "closedAt": "2015-11-06T22:12:20Z",
      "mergedAt": "2015-11-06T22:12:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "80b67615943d62ab849e9f700b8e95c5d977e7bb"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In technical writing, we should generally use \"they\" and \"their\" everywhere when (potentially) referring to a person or persons. (\"it\" is best for denoting clients/servers) The word \"they\" gives both gender & quantity neutral language; no assumptions. (this use is older than Shakespeare; it's just underused)\n",
          "createdAt": "2015-11-05T20:57:31Z",
          "updatedAt": "2015-11-05T20:57:31Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 336,
      "id": "MDExOlB1bGxSZXF1ZXN0NDk4MDM0NjU=",
      "title": "EarlyDataIndication response must be sent with ServerHello",
      "url": "https://github.com/tlswg/tls13-spec/pull/336",
      "state": "MERGED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The early_data extension should be listed as one of the few that can't go into EncryptedExtensions but must be sent with ServerHello.\n",
      "createdAt": "2015-11-05T10:06:17Z",
      "updatedAt": "2015-11-06T22:12:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8e82c3c7e8b0b3fcc687a48529abc18863fd29a4",
      "headRepository": null,
      "headRefName": "earlydata-serverhello",
      "headRefOid": "1eed2a94d39bee73934c0081250108ab54c1eb46",
      "closedAt": "2015-11-06T22:12:38Z",
      "mergedAt": "2015-11-06T22:12:38Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 337,
      "id": "MDExOlB1bGxSZXF1ZXN0NDk4MDM1MTk=",
      "title": "s/in future/in the future/",
      "url": "https://github.com/tlswg/tls13-spec/pull/337",
      "state": "MERGED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-11-05T10:06:48Z",
      "updatedAt": "2015-11-06T22:11:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8e82c3c7e8b0b3fcc687a48529abc18863fd29a4",
      "headRepository": null,
      "headRefName": "in-the-future",
      "headRefOid": "3d0df7ac007b1ab81afd7be6e3287e1cc1bf22bd",
      "closedAt": "2015-11-06T22:11:45Z",
      "mergedAt": "2015-11-06T22:11:45Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 339,
      "id": "MDExOlB1bGxSZXF1ZXN0NTAwMjY1OTU=",
      "title": "typo fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/339",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "An errant 's' got into one of the field names from one of the draft versions of the unified KeyShare extension. Quick fix to match the name defined in the struct.\n\nThis PR also contains couple other trivial typo fixes.\n",
      "createdAt": "2015-11-07T03:00:04Z",
      "updatedAt": "2015-11-10T01:08:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "76a326741343f3ab6f12e13b9792e8e664d33ffd",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "62c3a291537b9d7b9b8c4d9965c8aaba69bb38ae",
      "closedAt": "2015-11-09T21:56:35Z",
      "mergedAt": "2015-11-09T21:56:35Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ef39e1579b6f5898161e6a719666769d24713770"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 341,
      "id": "MDExOlB1bGxSZXF1ZXN0NTAxOTE1NTI=",
      "title": "Reorder HkdfLabel. Fixes #330",
      "url": "https://github.com/tlswg/tls13-spec/pull/341",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per discussion in Yokohama.\n",
      "createdAt": "2015-11-09T23:04:56Z",
      "updatedAt": "2015-11-10T02:51:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "be016fd35830872f228f7843440f591d5e5a4669",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue330_hkdf_inputs",
      "headRefOid": "7082ef4a0c6c98c48e2ae9c3b2a8e04305088792",
      "closedAt": "2015-11-10T02:51:18Z",
      "mergedAt": "2015-11-10T02:51:18Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9d5e88907c85f0d7ffb413904bf0ee5af23d77a6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 342,
      "id": "MDExOlB1bGxSZXF1ZXN0NTAxOTQ0NjM=",
      "title": "Issue311 295 content types",
      "url": "https://github.com/tlswg/tls13-spec/pull/342",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "",
      "createdAt": "2015-11-09T23:36:22Z",
      "updatedAt": "2015-12-01T17:18:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "50cf98537f0e805737bbc296f2f4ecc65210a601",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue311_295_content_types",
      "headRefOid": "7c66676c544e45b15897bb143c29a597e32c1996",
      "closedAt": "2015-12-01T17:18:22Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr this needs an update to indicate that the client conditions which messages to send on the ServerConfiguration.\n",
          "createdAt": "2015-11-09T23:55:37Z",
          "updatedAt": "2015-11-09T23:55:37Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "rebased\n",
          "createdAt": "2015-12-01T00:32:13Z",
          "updatedAt": "2015-12-01T00:32:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 344,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA4NDcyMDY=",
      "title": "Wip issue125 104 hello retry request",
      "url": "https://github.com/tlswg/tls13-spec/pull/344",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "in progress"
      ],
      "body": "This is a WIP, so no editorial comments needed.\n\n@martinthomson, @dkg: I wrote this up with reusable cookies, in sort of the style of QUIC, but I think this is a mistake, because it makes life complicated and has obvious privacy concerns for modest benefit. Implementations which want to have DoS protection without CPU cost should just bind tickets to IP addresses and implementations which want to have DoS protection with CPU cost can just put them in the app payload.\n",
      "createdAt": "2015-11-16T18:31:11Z",
      "updatedAt": "2016-05-22T20:20:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de5e007e618ba2d89452fde59b31f170f89075c5",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "WIP_issue125_104_hello_retry_request",
      "headRefOid": "31f8df5da07f0e5e011cd8c522608d03777b947f",
      "closedAt": "2016-05-22T20:20:14Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 345,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA4ODA5MjA=",
      "title": "Update IANA considerations. Fixes #62, Fixes #252",
      "url": "https://github.com/tlswg/tls13-spec/pull/345",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "chair action needed"
      ],
      "body": "",
      "createdAt": "2015-11-16T23:11:42Z",
      "updatedAt": "2015-11-30T21:47:43Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a257b7ad5f45d1520a0dbe30eb7c2900de3dcc51",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue62_iana_considerations",
      "headRefOid": "d64d3f43e9ce681e81489aa984afe604a34ae8e1",
      "closedAt": "2015-11-30T21:47:43Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "NOTE: Recommended here is based on whether the RFC is a standards track RFC, \n",
          "createdAt": "2015-11-16T23:12:07Z",
          "updatedAt": "2015-11-16T23:12:07Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Chairs have judged that there is consensus to merge as per:\nhttps://mailarchive.ietf.org/arch/msg/tls/GhKgwUPU5TPX7W2ZhDaCcxbfRjc\n",
          "createdAt": "2015-11-25T19:42:56Z",
          "updatedAt": "2015-11-25T19:42:56Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "rebased and merged.\n",
          "createdAt": "2015-11-30T21:47:43Z",
          "updatedAt": "2015-11-30T21:47:43Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 346,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA4OTIyOTQ=",
      "title": "Issue329 individual key derivation",
      "url": "https://github.com/tlswg/tls13-spec/pull/346",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editor Ready"
      ],
      "body": "",
      "createdAt": "2015-11-17T01:23:54Z",
      "updatedAt": "2015-11-21T22:59:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a257b7ad5f45d1520a0dbe30eb7c2900de3dcc51",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue329_individual_key_derivation",
      "headRefOid": "892758d1008f23c94275b0b7cc99ab9a7f0a491f",
      "closedAt": "2015-11-21T22:59:57Z",
      "mergedAt": "2015-11-21T22:59:57Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 347,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE0MTI1NjQ=",
      "title": "iana considerations",
      "url": "https://github.com/tlswg/tls13-spec/pull/347",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Adding a note to registry so that those that start there understand why the cipher suites are marked the way they are in column.\n",
      "createdAt": "2015-11-20T21:47:34Z",
      "updatedAt": "2015-11-23T14:31:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a257b7ad5f45d1520a0dbe30eb7c2900de3dcc51",
      "headRepository": null,
      "headRefName": "spt_iana_considerations",
      "headRefOid": "0aadbf9dc4d0939d4f93fd7331e20076a2c8c05b",
      "closedAt": "2015-11-23T14:31:10Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner it seems like there's not yet consensus on the list for the semantics here. Holding off on merging this PR pending chair declaration one way or the otehr\n",
          "createdAt": "2015-11-21T22:59:44Z",
          "updatedAt": "2015-11-21T22:59:44Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 349,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE5NTA0MDA=",
      "title": "always require key_share extension with (EC)DHE suites",
      "url": "https://github.com/tlswg/tls13-spec/pull/349",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current text is a mix of omitting and sending empty, as pointed out by Ilari on the mailing list. This fixes things and switches to an always-send model.\n",
      "createdAt": "2015-11-26T23:31:54Z",
      "updatedAt": "2015-12-16T02:57:44Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "37a350187d2ea89eda89e9403f92dcee4e75edf4",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "alwayssendkeyshareextension",
      "headRefOid": "3662a37c0b0c9e03cb6c969e579024b6c474852a",
      "closedAt": "2015-12-15T22:20:26Z",
      "mergedAt": "2015-12-15T22:20:26Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This looks good to me modulo the issue noted above\n",
          "createdAt": "2015-11-27T02:02:33Z",
          "updatedAt": "2015-11-27T02:02:33Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Ok, I've pushed a second commit here which clarifies that point and also reconciles the fact that the two extensions here both claim to determine group priority. Suggestions to reduce verbosity without reducing clarity would be appreciated. (this commit fixes issue #277)\n",
          "createdAt": "2015-11-27T07:00:35Z",
          "updatedAt": "2015-11-27T07:00:35Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Typo fixed & rebased.\n",
          "createdAt": "2015-11-27T07:11:48Z",
          "updatedAt": "2015-11-27T07:11:48Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since the list is in favor of \"forward secrecy\" over \"forward security\", I've changed my use of the term in this PR to the former (a commit just landed to change the existing uses elsewhere). Not rebased again; still merges cleanly (for the moment, at least).\n",
          "createdAt": "2015-12-01T17:38:28Z",
          "updatedAt": "2015-12-01T17:38:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 352,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIyMTA5NDM=",
      "title": "Sha1 redux",
      "url": "https://github.com/tlswg/tls13-spec/pull/352",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is MT's PR manually rebased\n",
      "createdAt": "2015-12-01T03:10:39Z",
      "updatedAt": "2015-12-01T17:18:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "50cf98537f0e805737bbc296f2f4ecc65210a601",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "sha1_redux",
      "headRefOid": "937a14cc7d1497bcc71e9239abdd6fb7e0dc24e4",
      "closedAt": "2015-12-01T17:18:22Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 354,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIyODkwOTU=",
      "title": "Implement rekey. Fixes #125, Fixes #4",
      "url": "https://github.com/tlswg/tls13-spec/pull/354",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-12-01T17:31:06Z",
      "updatedAt": "2015-12-15T21:02:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2c4fe4e58d11b5f81b5771c3fdfe6b69b9cf30df",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue125_issue4_rekey",
      "headRefOid": "26fec826c6650d3e85d4817154f2c663aa5cb699",
      "closedAt": "2015-12-15T21:02:32Z",
      "mergedAt": "2015-12-15T21:02:32Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is good.\n",
          "createdAt": "2015-12-03T03:40:20Z",
          "updatedAt": "2015-12-03T03:40:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 355,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIyOTAyNjM=",
      "title": "cleanup ClientHello message placeholders.",
      "url": "https://github.com/tlswg/tls13-spec/pull/355",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-12-01T17:39:59Z",
      "updatedAt": "2015-12-01T17:40:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2f76b1b8ef871b42957882aef801ed51c774dabb",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "hellolegacycleanup",
      "headRefOid": "8d245f55a6802805ba20b3af90270bbb1aaea2f9",
      "closedAt": "2015-12-01T17:40:15Z",
      "mergedAt": "2015-12-01T17:40:15Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett I manually rebased and merged.\n",
          "createdAt": "2015-12-01T17:40:12Z",
          "updatedAt": "2015-12-01T17:40:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 356,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIzMzU1MDU=",
      "title": "Include data volume limitations",
      "url": "https://github.com/tlswg/tls13-spec/pull/356",
      "state": "MERGED",
      "author": "wbl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I included limitations on the amount of data to send, for AES-GCM and ChaCha20-Poly1305. We don't seem to have rekeying capabilities in this branch, but some editing should fix that.\n",
      "createdAt": "2015-12-02T00:04:27Z",
      "updatedAt": "2015-12-15T21:05:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8c027a3d9e5b378bdde132f5ead7f998940f1515",
      "headRepository": "wbl/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "32ff2988bfac4af9815a79ffcf9db947b2510a0f",
      "closedAt": "2015-12-15T21:05:21Z",
      "mergedAt": "2015-12-15T21:05:21Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I suggest you add a title to the commit. It's just \"Update draft-ietf-tls-tls13.md\" at the moment.\n",
          "createdAt": "2015-12-02T00:08:21Z",
          "updatedAt": "2015-12-02T00:08:21Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2015-12-03T03:36:28Z",
          "updatedAt": "2015-12-03T03:36:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 359,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI5MzIyNjI=",
      "title": "Added note that 0-RTT is compatible with PSK",
      "url": "https://github.com/tlswg/tls13-spec/pull/359",
      "state": "CLOSED",
      "author": "waywardgeek",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This is a one-sentence addition to clarify that 0-RTT is compatible with PSK.\n",
      "createdAt": "2015-12-08T02:53:15Z",
      "updatedAt": "2015-12-16T19:49:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "37a350187d2ea89eda89e9403f92dcee4e75edf4",
      "headRepository": "waywardgeek/tls13-spec",
      "headRefName": "zero_rtt_psk",
      "headRefOid": "276a5958a1af5d4278e67e1851162f5859adb4db",
      "closedAt": "2015-12-16T19:49:57Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd prefer it to be more clear on what's actually supposed to happen here. The flow chart is currently only applicable to the non-PSK case. Instead of the currently proposed text, I'd suggest something akin to:\n\n\"When offering PSK support, the PreSharedKeyExtension will be used instead of (or in addition to) the KeyShare extension as specified above.\"\n",
          "createdAt": "2015-12-12T03:45:16Z",
          "updatedAt": "2015-12-12T03:45:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Added something more along the lines of what Garrett proposed.\n",
          "createdAt": "2015-12-16T19:49:57Z",
          "updatedAt": "2015-12-16T19:49:57Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 360,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI5MzMxMDA=",
      "title": "Added suggestions for mitigating security weaknesses when using 0-RTT",
      "url": "https://github.com/tlswg/tls13-spec/pull/360",
      "state": "CLOSED",
      "author": "waywardgeek",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This needs some work, I think.  I do think it is important to offer some guidance, as the spec currently reads as if we are discouraging 0-RTT handshakes due to security weaknesses.\n",
      "createdAt": "2015-12-08T03:07:52Z",
      "updatedAt": "2015-12-15T22:33:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "37a350187d2ea89eda89e9403f92dcee4e75edf4",
      "headRepository": "waywardgeek/tls13-spec",
      "headRefName": "0-RTT_risk_mitigation",
      "headRefOid": "f326c89d6e7ed2f31a53c9d8763e90674b704031",
      "closedAt": "2015-12-15T22:33:14Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 361,
      "id": "MDExOlB1bGxSZXF1ZXN0NTMxMzQyMzU=",
      "title": "named_curve_list has been renamed to named_group_list",
      "url": "https://github.com/tlswg/tls13-spec/pull/361",
      "state": "MERGED",
      "author": "hannesm",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-12-09T15:34:27Z",
      "updatedAt": "2015-12-15T02:35:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "fdea06d483c2db0b0f8318d38451c78c1b85f74a",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "e26e15f199f204d31a8e42f838973ba65132ecf9",
      "closedAt": "2015-12-15T02:35:32Z",
      "mergedAt": "2015-12-15T02:35:32Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 363,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM0NTcwMjA=",
      "title": "Receiving TLS 1.2 ClientHello:  MAY/may to might",
      "url": "https://github.com/tlswg/tls13-spec/pull/363",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When talking about handling downlevel clients, the spec variously says a server \"MAY\" receive such messages, or \"may\" receive such messages.  Since this is discussing a possibility (not a permitted behavior), the normative language isn't correct; lower-case versions of the RFC2119 terms have the potential to confuse readers.  Suggest changing all of these to \"might\" to denote a possible occurrence server implementers will need to handle.\n",
      "createdAt": "2015-12-11T23:23:20Z",
      "updatedAt": "2016-12-23T17:32:05Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "fdea06d483c2db0b0f8318d38451c78c1b85f74a",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "0d8dbb4540d55bd3b64bf02ac7d1fcac24f7307e",
      "closedAt": "2015-12-12T20:29:39Z",
      "mergedAt": "2015-12-12T20:29:39Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, this looks like an improvement.\n",
          "createdAt": "2015-12-12T03:36:53Z",
          "updatedAt": "2015-12-12T03:36:53Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2015-12-12T20:29:37Z",
          "updatedAt": "2015-12-12T20:29:37Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 364,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM2NTcyMDg=",
      "title": "Using template",
      "url": "https://github.com/tlswg/tls13-spec/pull/364",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think that this should work.  I've not tested that the upload works, but it should be fine.\n",
      "createdAt": "2015-12-15T03:53:46Z",
      "updatedAt": "2015-12-15T04:13:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "16de1c36cf9ef2165bb5c3945d81b7f193800f57",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "template",
      "headRefOid": "df373bbe27fcaa157ccc1029883eadc4bf00494c",
      "closedAt": "2015-12-15T04:13:00Z",
      "mergedAt": "2015-12-15T04:13:00Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 365,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM2NTg2MzE=",
      "title": "Contributors section cleanup",
      "url": "https://github.com/tlswg/tls13-spec/pull/365",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This was one giant figure before now.\n",
      "createdAt": "2015-12-15T04:21:24Z",
      "updatedAt": "2015-12-15T19:18:49Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9b2090d828917dbe299e034cabccab0aa024e3b8",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "contributors",
      "headRefOid": "6ca3950daaa4f145f6f1c593706c0a39f1960229",
      "closedAt": "2015-12-15T19:18:49Z",
      "mergedAt": "2015-12-15T19:18:49Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 366,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM2NTg2ODA=",
      "title": "Use tables",
      "url": "https://github.com/tlswg/tls13-spec/pull/366",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This was using figures.  Using tables isn't that much harder on the eyes in the markdown form and much nicer in the HTML format.\n",
      "createdAt": "2015-12-15T04:22:20Z",
      "updatedAt": "2015-12-15T19:44:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9b2090d828917dbe299e034cabccab0aa024e3b8",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "a4reformat",
      "headRefOid": "0a0871cfc841aac8810dac29fecb931133bbceff",
      "closedAt": "2015-12-15T19:44:39Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "When viewing richdiff to get a sense of what it will look like, the font in the tables is notably larger than the surrounding text. This easily fixable?\n",
          "createdAt": "2015-12-15T07:23:05Z",
          "updatedAt": "2015-12-15T07:23:05Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 367,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM2NjE2OTI=",
      "title": "Server certificate selection",
      "url": "https://github.com/tlswg/tls13-spec/pull/367",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This section has a strange table that looked a little messy.  So I cleaned that up.  However, I noticed that it used to say this:\n\n> The certificate MUST allow the key to be used for signing (i.e., the\n>   digitalSignature bit MUST be set if the key usage extension is present) with\n>   the signature scheme and hash algorithm that will be employed in the server's\n>   KeyShare extension.\n\nWhich doesn't make any sense.  Should this be signature_algorithms extension instead?\n",
      "createdAt": "2015-12-15T05:22:38Z",
      "updatedAt": "2015-12-15T19:35:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9b2090d828917dbe299e034cabccab0aa024e3b8",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "cert_select",
      "headRefOid": "f9e4838e938931b13f0ff8533aaed104cc70fe4a",
      "closedAt": "2015-12-15T19:35:22Z",
      "mergedAt": "2015-12-15T19:35:22Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 368,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM2NjE4MjA=",
      "title": "The field in the digitally-signed struct is just \"algorithm\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/368",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-12-15T05:25:05Z",
      "updatedAt": "2015-12-15T19:39:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9b2090d828917dbe299e034cabccab0aa024e3b8",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "sig_alg",
      "headRefOid": "98529c372225aeca1927c08ba4d3b0af5a230f09",
      "closedAt": "2015-12-15T19:39:11Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "separately merged\n",
          "createdAt": "2015-12-15T19:39:11Z",
          "updatedAt": "2015-12-15T19:39:11Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 369,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM2NjI2MzE=",
      "title": "More consistently name extensions",
      "url": "https://github.com/tlswg/tls13-spec/pull/369",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I noticed that the doc was almost consistently refering to the `KeyShare extension` where everywhere else, the text used `\"signature_algorithms\" extension`.  I changed everything I found to the latter, except those hit by #367, because that will conflict if that is merged.\n",
      "createdAt": "2015-12-15T05:40:21Z",
      "updatedAt": "2015-12-15T22:07:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "37a350187d2ea89eda89e9403f92dcee4e75edf4",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "extension_name",
      "headRefOid": "4c687db3d8553a2cba0e1d732b0066657ece43dd",
      "closedAt": "2015-12-15T22:07:02Z",
      "mergedAt": "2015-12-15T22:07:02Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b10afc82a7e7e3c543ad6ac9a4c92e2f5d292c3e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 370,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM2NjgyMjc=",
      "title": "Adding docmapping PI for style goodness",
      "url": "https://github.com/tlswg/tls13-spec/pull/370",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-12-15T07:16:49Z",
      "updatedAt": "2015-12-15T19:39:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9b2090d828917dbe299e034cabccab0aa024e3b8",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "template_tweak",
      "headRefOid": "8092de5453a4ebc8785abb97b75fa5f132a2ea35",
      "closedAt": "2015-12-15T19:39:56Z",
      "mergedAt": "2015-12-15T19:39:56Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 372,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM3NjI4MTg=",
      "title": "Data volume",
      "url": "https://github.com/tlswg/tls13-spec/pull/372",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I de-merged this because I'm not sure if we really want to have the same hard limit for ChaCha as for GCM.\n",
      "createdAt": "2015-12-15T21:12:32Z",
      "updatedAt": "2016-07-08T17:14:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de5e007e618ba2d89452fde59b31f170f89075c5",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "data_volume",
      "headRefOid": "d5cd759ef0f783c352425cebc287d2920bfd19f3",
      "closedAt": "2016-07-08T17:14:26Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 373,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM3Njg3Mjk=",
      "title": "Clean up early data indication text",
      "url": "https://github.com/tlswg/tls13-spec/pull/373",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This cleans up some of the text around EarlyDataIndication that was introduced previously.\n",
      "createdAt": "2015-12-15T22:00:40Z",
      "updatedAt": "2015-12-16T19:50:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "587e143f25a13f44ace82a84749e0f55c7265952",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "early_data_indication",
      "headRefOid": "fcd19294fede649fe032ef2a6da02c2fbf5fed24",
      "closedAt": "2015-12-16T19:50:34Z",
      "mergedAt": "2015-12-16T19:50:34Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 374,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM3NzA5ODY=",
      "title": "Alwayssendkeyshareextension",
      "url": "https://github.com/tlswg/tls13-spec/pull/374",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-12-15T22:20:20Z",
      "updatedAt": "2015-12-15T22:20:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7a53982e3f3613309520869de59a078efbc75c6b",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "alwayssendkeyshareextension",
      "headRefOid": "85d2de10ee37f0d0a5a63a98db3a8d79fea3751e",
      "closedAt": "2015-12-15T22:20:25Z",
      "mergedAt": "2015-12-15T22:20:25Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 375,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM3OTYyNDg=",
      "title": "The preprocessor was messing things up",
      "url": "https://github.com/tlswg/tls13-spec/pull/375",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "So I modified the template to support the idea of having preprocessing.  This updates the makefile.\n\nYou should be able to create a diff now.\n",
      "createdAt": "2015-12-16T03:50:28Z",
      "updatedAt": "2015-12-16T19:49:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b28029a9c6ebc6d98defcb3f7b26859d2bf79401",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "makehaxx",
      "headRefOid": "c47857aa9aa1ec8c8c04c3af8d0bb58f04a9b0ed",
      "closedAt": "2015-12-16T19:49:01Z",
      "mergedAt": "2015-12-16T19:49:01Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 376,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM5MDkzODM=",
      "title": "update CHACHA20_POLY1305 cipher suite names",
      "url": "https://github.com/tlswg/tls13-spec/pull/376",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://www.ietf.org/rfcdiff?url2=draft-ietf-tls-chacha20-poly1305-04\n\nA new ChaChaPoly draft was just released that changes all the cipher suite names to have an explicitly specified hash. This updates this document with the new names.\n",
      "createdAt": "2015-12-16T22:39:05Z",
      "updatedAt": "2015-12-21T20:51:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "280ab66e384c2dac80d10eb9c892d44fc3aa00a4",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "chachaupdate",
      "headRefOid": "c43ec16cea7fc502dd131314db32fa5a0aa86470",
      "closedAt": "2015-12-21T16:00:36Z",
      "mergedAt": "2015-12-21T16:00:36Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 379,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQwMjIwNzA=",
      "title": "resetting the sequence number to zero for each record key.",
      "url": "https://github.com/tlswg/tls13-spec/pull/379",
      "state": "CLOSED",
      "author": "fournet",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-12-17T19:43:22Z",
      "updatedAt": "2015-12-24T17:11:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "da5d0a37a0b655164e466a5230f5c7633976ec79",
      "headRepository": "fournet/tls13-spec",
      "headRefName": "master",
      "headRefOid": "eabbe5daa0e7d9af88a5418439b3c994a08aa632",
      "closedAt": "2015-12-24T17:11:21Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Wouldn't this partially undo the protection that was gained from generating the nonces as `{client,server}_write_iv ^ sequence number`?\n",
          "createdAt": "2015-12-17T19:46:45Z",
          "updatedAt": "2015-12-17T19:46:45Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Maybe we should just generate a new IV N+1 using the same method as for keys? Sequence can be reset without risking any nonce reuse.\n",
          "createdAt": "2015-12-17T20:12:14Z",
          "updatedAt": "2015-12-17T20:12:14Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Unless I'm badly misreading the spec, we already generate a fresh IV every time we generate a fresh traffic key.\n\nhttp://tlswg.github.io/tls13-spec/#rfc.section.7.3\n",
          "createdAt": "2015-12-17T20:38:24Z",
          "updatedAt": "2015-12-17T20:38:24Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Thursday, December 17, 2015 03:38:27 pm ekr wrote:\n\n> Unless I'm badly misreading the spec, we already generate a fresh IV every time we generate a fresh traffic key.\n> \n> http://tlswg.github.io/tls13-spec/#rfc.section.7.3\n\nIf that was supposed to be implicit, I didn't get that. It only mentions keys. A simple change of \"keys\" to \"keys and IVs\" in each use in \"Updating Traffic Keys\" (currently section 7.2) would make it clear.\n",
          "createdAt": "2015-12-17T20:49:15Z",
          "updatedAt": "2015-12-17T20:49:15Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can see how it might not be clear. I can fix that when I merge this PR.\n",
          "createdAt": "2015-12-17T21:36:19Z",
          "updatedAt": "2015-12-17T21:36:19Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged separately\n",
          "createdAt": "2015-12-24T17:11:21Z",
          "updatedAt": "2015-12-24T17:11:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 380,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQwNTY2ODI=",
      "title": "minor cleanup: message->alert in Closure Alerts",
      "url": "https://github.com/tlswg/tls13-spec/pull/380",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@seanturner did a massive message->alert change a while back and I did yet more when we were rebasing his patch. Looks like there's more up here in Closure Alerts.\n\nWe're referring to alerts, not the messages that carry them. Switch to \"alerts\" instead to remain consistent with the rest of the document, notably the following section.\n",
      "createdAt": "2015-12-18T01:58:08Z",
      "updatedAt": "2015-12-21T20:50:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "280ab66e384c2dac80d10eb9c892d44fc3aa00a4",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "52cf09e478d4976ff45ce2bb52229707557aa843",
      "closedAt": "2015-12-21T16:00:21Z",
      "mergedAt": "2015-12-21T16:00:21Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 381,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQyMTk0NzA=",
      "title": "enumerate supported PSK cipher suites (issue #305; WIP)",
      "url": "https://github.com/tlswg/tls13-spec/pull/381",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For issue #305.\n\nI'm listing this as WIP for now, as the reason this has yet to be done is that we need to list the ECDHE PSK suites, which are themselves WIP. I'm citing the current draft, though it has yet to be adopted by the TLS WG. Not sure what the policy on this is; we probably don't want to merge before that's dealt with. In any case, here's a new table with the (EC)DHE PSK suites as requested in issue #305.\n",
      "createdAt": "2015-12-21T04:18:57Z",
      "updatedAt": "2016-03-21T06:49:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b4ce16b9e826ab9ce0dc9472118e10e80fdad602",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "listpsksuites",
      "headRefOid": "0bf9461e6e30b83f0659a290fddf912a1dbcdc2d",
      "closedAt": "2016-03-20T23:06:48Z",
      "mergedAt": "2016-03-20T23:06:48Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "75f6c74219726b093ebcec7ef511002252a228e9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 382,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQyNzM5MTU=",
      "title": "Dont reset seqno",
      "url": "https://github.com/tlswg/tls13-spec/pull/382",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-12-21T16:17:02Z",
      "updatedAt": "2015-12-21T16:17:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2e3ff839155775895b3cf4d5ed83eb895249fe6e",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "dont_reset_seqno",
      "headRefOid": "2ab60d05aec141967035a785304d607926df853b",
      "closedAt": "2015-12-21T16:17:47Z",
      "mergedAt": "2015-12-21T16:17:47Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 383,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ0MjM5MzY=",
      "title": "Clarifying text specifying the definition of the master secret",
      "url": "https://github.com/tlswg/tls13-spec/pull/383",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In section 6.2, the diagrams make reference to three secrets: static, ephemeral, and master. But the master secret was not defined in the introduction of the section.\n",
      "createdAt": "2015-12-22T22:47:59Z",
      "updatedAt": "2015-12-24T17:06:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b4ce16b9e826ab9ce0dc9472118e10e80fdad602",
      "headRepository": "huitema/tls13-spec",
      "headRefName": "master",
      "headRefOid": "439b1938d8d18ef9ec732244d0defb9bec18d1c3",
      "closedAt": "2015-12-24T17:06:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged separately.\n",
          "createdAt": "2015-12-24T17:06:48Z",
          "updatedAt": "2015-12-24T17:06:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 384,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ1NTk3MTE=",
      "title": "More explicitly require group matching between 0-RTT and 1-RTT",
      "url": "https://github.com/tlswg/tls13-spec/pull/384",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per a question by Ilari\n",
      "createdAt": "2015-12-24T16:50:25Z",
      "updatedAt": "2015-12-26T16:25:52Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "65499833a54bce30e2bd72724a1f6cb58483f5d9",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "one_group",
      "headRefOid": "ecde2461a80e2f05b238724d1d945e6a0d2db0fa",
      "closedAt": "2015-12-26T16:25:52Z",
      "mergedAt": "2015-12-26T16:25:52Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 385,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ1NTk4MDA=",
      "title": "Reuse KeyShareEntry in ServerConfiguration. No wire format change",
      "url": "https://github.com/tlswg/tls13-spec/pull/385",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-12-24T16:53:30Z",
      "updatedAt": "2015-12-26T16:26:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "65499833a54bce30e2bd72724a1f6cb58483f5d9",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "server_configuration_common_structs",
      "headRefOid": "ce998e62d93bb5dbf6b3047b77af59d5afc93fe1",
      "closedAt": "2015-12-26T16:26:14Z",
      "mergedAt": "2015-12-26T16:26:14Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "65956180acb3141b4789ec7d20a8c0ccce5769b0"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 386,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ1NjAzMjk=",
      "title": "Certificate verify cleanup",
      "url": "https://github.com/tlswg/tls13-spec/pull/386",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-12-24T17:08:12Z",
      "updatedAt": "2015-12-26T16:42:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "65499833a54bce30e2bd72724a1f6cb58483f5d9",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "certificate_verify_cleanup",
      "headRefOid": "1e928275231aa555fb75885c78dda7001f0aef3d",
      "closedAt": "2015-12-26T16:42:51Z",
      "mergedAt": "2015-12-26T16:42:51Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 387,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ1NjA1Njc=",
      "title": "Change the presentation of the NUL at the end of the string to avoid \u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/387",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026inconsistencies around string presentation\n",
      "createdAt": "2015-12-24T17:15:07Z",
      "updatedAt": "2015-12-26T16:43:49Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "65499833a54bce30e2bd72724a1f6cb58483f5d9",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "handle_strings_consistently",
      "headRefOid": "9b9b92e9a38be09be8ae3d4db64cc44b172e2ae5",
      "closedAt": "2015-12-26T16:43:49Z",
      "mergedAt": "2015-12-26T16:43:49Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 388,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ1Njc4OTc=",
      "title": "correct field name in text",
      "url": "https://github.com/tlswg/tls13-spec/pull/388",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The text & struct have different names for the config ID. Use the one in the struct.\n",
      "createdAt": "2015-12-24T22:47:34Z",
      "updatedAt": "2015-12-25T02:23:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "65499833a54bce30e2bd72724a1f6cb58483f5d9",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "7e5ea357e6f9b1b5fa6c40387c955fff41f92019",
      "closedAt": "2015-12-25T01:05:32Z",
      "mergedAt": "2015-12-25T01:05:32Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 390,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ1OTI3NTE=",
      "title": "typo: s/may requires/may require/",
      "url": "https://github.com/tlswg/tls13-spec/pull/390",
      "state": "MERGED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-12-25T20:02:21Z",
      "updatedAt": "2015-12-26T16:36:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8adcc245b234c4427a0efc2cb299c00868502b19",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "296996300edf9325faa6dfb842b119e8fddbcfe7",
      "closedAt": "2015-12-26T16:36:23Z",
      "mergedAt": "2015-12-26T16:36:23Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e0eb647fbb44a840fb21ba9e07047b04bb2d4c8b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 391,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ1OTI4ODc=",
      "title": "Improve end_of_early_data description",
      "url": "https://github.com/tlswg/tls13-spec/pull/391",
      "state": "MERGED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current version is missing a word and I tried to improve it a bit more.\n",
      "createdAt": "2015-12-25T20:16:26Z",
      "updatedAt": "2015-12-26T16:37:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8adcc245b234c4427a0efc2cb299c00868502b19",
      "headRepository": null,
      "headRefName": "patch-2",
      "headRefOid": "17fa40b8fe256b0b1aea2dc85324f41d5c8f91f1",
      "closedAt": "2015-12-26T16:37:39Z",
      "mergedAt": "2015-12-26T16:37:39Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 392,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ1OTMwMzM=",
      "title": "More consistency for extension names",
      "url": "https://github.com/tlswg/tls13-spec/pull/392",
      "state": "CLOSED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Continuing what Martin started.\n",
      "createdAt": "2015-12-25T20:32:16Z",
      "updatedAt": "2015-12-26T16:37:08Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8adcc245b234c4427a0efc2cb299c00868502b19",
      "headRepository": null,
      "headRefName": "patch-3",
      "headRefOid": "73c7d049b48320c7b1d2f693073e346160512b3c",
      "closedAt": "2015-12-26T16:37:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged separately.\n",
          "createdAt": "2015-12-26T16:37:08Z",
          "updatedAt": "2015-12-26T16:37:08Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 393,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ2MTI5MzQ=",
      "title": "explicitly prohibit 1-RTT fallback on 0-RTT data error",
      "url": "https://github.com/tlswg/tls13-spec/pull/393",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Proposed clarification based on mailing list discussion. Explicitly state that 0-RTT records MUST NOT get special treatment and 1-RTT fallback on decryption errors is prohibited. This may technically already be the intended situation, however any ambiguity here will undoubtedly lead to some implementations falling back to avoid breakage in this scenario, which risks 0-RTT data stripping attacks. As I agree with the expected behavior stated by @ekr on-list, this is just a matter of adding some clarification here (even if it might be redundant; someone interpreting the text the way I initially did could do something dangerous if they don't also notice the risk).\n",
      "createdAt": "2015-12-27T07:00:02Z",
      "updatedAt": "2015-12-28T21:59:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f4dde7b4b5d1389f1e44203b85afdc70d25c7707",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "dontfallbackonerror",
      "headRefOid": "c3906dcc3bf85b5298933f9963412175c6967963",
      "closedAt": "2015-12-28T17:46:38Z",
      "mergedAt": "2015-12-28T17:46:38Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 394,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ2ODY5MTI=",
      "title": "minor fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/394",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This should be \"chose\" not \"choosed\", which isn't really an accepted word.\n",
      "createdAt": "2015-12-28T21:58:51Z",
      "updatedAt": "2015-12-28T22:28:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d030997d1d08b4fc41859296340189f33c36dc34",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "59a91af8e1bb7536400e24567216987999c538f8",
      "closedAt": "2015-12-28T22:27:26Z",
      "mergedAt": "2015-12-28T22:27:26Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Added another commit here for a minor wording fix that snuck in with changing all extensions to be referred to by type ID name.\n",
          "createdAt": "2015-12-28T22:16:53Z",
          "updatedAt": "2015-12-28T22:16:53Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, I switched it to \"chooses\" instead & squashed my little fixes together here. There's also a fix for the \"will MAY\" bit that I think we discussed at some point but its fix didn't get in.\n",
          "createdAt": "2015-12-28T22:26:30Z",
          "updatedAt": "2015-12-28T22:26:30Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 395,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ2ODkyNDI=",
      "title": "trivial capitalization fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/395",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "One more minor fix I just noticed when diffing the latest draft. Just capitalization fixes to match the other notes.\n",
      "createdAt": "2015-12-28T22:38:17Z",
      "updatedAt": "2015-12-28T22:45:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8f4372e9d7580aa879b5f248a30beef3df8808b2",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "bb48aa72488d1e46975e2fa01c1c0c43f9a6d7df",
      "closedAt": "2015-12-28T22:42:43Z",
      "mergedAt": "2015-12-28T22:42:43Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 396,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ2ODk5NzY=",
      "title": "fix extensions table in IANA considerations",
      "url": "https://github.com/tlswg/tls13-spec/pull/396",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See the dubiously line-wrapped table here:\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-11#page-81\n\nThe current draft 11 has the last 'd' in the \"Recommended\" header and all of the last 'd's for all \"Encrypted\"s bumped to a second line.\n\nThe ALPN extension ID name is quite long and results in things not fitting when rendered for tools.ietf.org. This commit adds a space between the name and RFC number/link to (hopefully) let it wrap and have things fit properly.\n\n@martinthomson: Is this spacing fix enough to make the renderer used for that happy enough to wrap this column?\n\nNote also that the cipher suites table also has issues, however I think this will all fit correctly once ChaChaPoly gets an RFC number and its reference can fit properly.\n",
      "createdAt": "2015-12-28T22:52:27Z",
      "updatedAt": "2015-12-29T02:50:46Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a22e723583a7ebc8127ab5eb46ae3610a4f93f0d",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "421bf117de4cd96b49973b1d302c4a7e1505fd8e",
      "closedAt": "2015-12-28T23:54:52Z",
      "mergedAt": "2015-12-28T23:54:52Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2015-12-28T23:35:50Z",
          "updatedAt": "2015-12-28T23:35:50Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 397,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ2OTE0MDc=",
      "title": "all hellos now have at least one extension",
      "url": "https://github.com/tlswg/tls13-spec/pull/397",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Small simplification & clarification. Now that the server key share is in an extension, all TLS 1.3 endpoints will have at least one extension in their hello, either \"key_share\" or \"pre_shared_key\", at minimum. This changeset simplifies the ServerHello struct in the same manner as was previously done for ClientHello and adds short notes explicitly stating this.\n",
      "createdAt": "2015-12-28T23:19:32Z",
      "updatedAt": "2016-03-21T06:46:43Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a22e723583a7ebc8127ab5eb46ae3610a4f93f0d",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "alwaysextended",
      "headRefOid": "47ede8bdc50c58194412a47fe8fb533dd60c140e",
      "closedAt": "2016-03-20T22:46:02Z",
      "mergedAt": "2016-03-20T22:46:02Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 398,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ4NzQ4NjU=",
      "title": "fix whitespace",
      "url": "https://github.com/tlswg/tls13-spec/pull/398",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix the alignment in the Handshake switch. Just a whitespace patch.\n",
      "createdAt": "2015-12-31T18:22:15Z",
      "updatedAt": "2016-03-21T06:47:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "440f3f62e3d8539268128df0b5eec9efcd34eb87",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "1fe305e564af8b61a3a4bdb8421ec162d4c10e2d",
      "closedAt": "2016-03-20T22:46:39Z",
      "mergedAt": "2016-03-20T22:46:39Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Appending another quick whitespace fix changeset here, as more trailing whitespace crept back in. (easily generated by my text editor)\n",
          "createdAt": "2016-01-05T00:54:46Z",
          "updatedAt": "2016-01-05T00:54:46Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 399,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU1MzA5Njk=",
      "title": "fixed typo, use <0..2^8-1> for consistency instead of <0..255>",
      "url": "https://github.com/tlswg/tls13-spec/pull/399",
      "state": "MERGED",
      "author": "hannesm",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(via https://github.com/tlswg/tls13-spec/commit/238bac7b94b7892c4e86bbb8e9588234ac5a2410#commitcomment-15351983)\n",
      "createdAt": "2016-01-09T01:31:32Z",
      "updatedAt": "2016-03-20T22:50:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "75261877d3c5fe0537452e6c15ad5a340f914e5e",
      "headRepository": "hannesm/tls13-spec",
      "headRefName": "patch1",
      "headRefOid": "6879b5020c63faef7c15b06fe01b4f3c3231ac32",
      "closedAt": "2016-03-20T22:46:22Z",
      "mergedAt": "2016-03-20T22:46:22Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 402,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY4NDY3MjA=",
      "title": "1rttappdata",
      "url": "https://github.com/tlswg/tls13-spec/pull/402",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It would appear, based on the ladder diagrams that the server can't speak after sending its Finished, when it can (unless it doesn't _want_ to speak because it is waiting on client auth, that is).  This changes the diagrams to show that.\n\nThis is largely editorial discretion stuff.\n",
      "createdAt": "2016-01-22T04:52:15Z",
      "updatedAt": "2016-03-20T22:52:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "75261877d3c5fe0537452e6c15ad5a340f914e5e",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "1rttappdata",
      "headRefOid": "67c06ff863910cb9d3fcc1556d1063cbd1dcca0b",
      "closedAt": "2016-03-20T22:52:50Z",
      "mergedAt": "2016-03-20T22:52:50Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 403,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY5MjcwNTc=",
      "title": "Substitute early_data for known_configuration",
      "url": "https://github.com/tlswg/tls13-spec/pull/403",
      "state": "MERGED",
      "author": "s-zanella",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Cleaned up references to known_configuration extension (merged into early_data in draft-08)\n",
      "createdAt": "2016-01-22T18:58:34Z",
      "updatedAt": "2016-01-22T19:02:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "75261877d3c5fe0537452e6c15ad5a340f914e5e",
      "headRepository": "s-zanella/tls13-spec",
      "headRefName": "known_configuration",
      "headRefOid": "78bdbf23c363fa7c6c24a916f8e523b67985b95a",
      "closedAt": "2016-01-22T19:02:18Z",
      "mergedAt": "2016-01-22T19:02:18Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 404,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY5NDk4ODk=",
      "title": "Revise signature algorithm negotiation.",
      "url": "https://github.com/tlswg/tls13-spec/pull/404",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR contains proposed specification text for the mailing list thread here:\nhttps://www.ietf.org/mail-archive/web/tls/current/msg19060.html\n\nSignatureAlgorithm and HashAlgorithm are merged into a single u16 value. Fold signing curves into it as well. This is wire-compatible with TLS 1.2, generalizes better to Ed25519 which combines all parameters into a single algorithm, and allows the server to report signature curve preferences to the client.\n\nPer discussion, there are only three ECDSA values, one per curve, so mismatching curve and hash is no longer allowed. They use the same values as the old TLS 1.2 ECDSA code points. (If the WG decides differently here, that can be tweaked.)\n\nOtherwise, I tried to keep SHOULD NOTs and MUST NOTs the same. MUST NOT values (MD5 and SHA-224) are unallocated and remain at MUST NOT. DSA and SHA-1 remain allocated as they're merely SHOULD NOT.\n\nNote: SHA-1 values are limited to rsa_pkcs1_sha1 (formerly {sha1, rsa}) and dsa_sha1 (formerly {sha1, dsa}). TLS 1.2's {sha1, ecdsa} does not have a corresponding TLS 1.3 value due to the curve/hash matching. (Thus it implicitly falls in the unallocated pair MUST NOT bucket.)\n\nFinally, with NamedGroups limited to (EC)DH, this also removes the 'ecdh_' prefix on ecdh_x25519 and ecdh_x448. X25519 and X448 already refer exclusively to Diffie-Hellman primitives and now there is no need to disambiguate between signing curves anyway.\n",
      "createdAt": "2016-01-22T22:22:37Z",
      "updatedAt": "2016-03-21T16:51:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de5e007e618ba2d89452fde59b31f170f89075c5",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "sigalgs",
      "headRefOid": "cbf9539ce0d35435a19db39c4149c47d66c5b969",
      "closedAt": "2016-03-21T16:51:21Z",
      "mergedAt": "2016-03-21T16:51:21Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 405,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY5NjI0ODE=",
      "title": "update reference to new RFC 7748",
      "url": "https://github.com/tlswg/tls13-spec/pull/405",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-01-23T01:08:58Z",
      "updatedAt": "2016-03-21T06:48:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3a4a7ad431a506d37b74b86df9bfb2467cd38dd3",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "69f23f1e541393aac824dd49d26b49c9b305b2df",
      "closedAt": "2016-03-20T22:50:25Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Separately merged\n",
          "createdAt": "2016-03-20T22:50:25Z",
          "updatedAt": "2016-03-20T22:50:25Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 406,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY5ODM3MTA=",
      "title": "Require RFC6979 deterministic ECDSA",
      "url": "https://github.com/tlswg/tls13-spec/pull/406",
      "state": "CLOSED",
      "author": "ctz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think TLS1.3 should require implementations to use RFC6979 deterministic ECDSA. This eradicates the well-known flaw in ECDSA, and makes ECDSA k selection testable for correctness.\n",
      "createdAt": "2016-01-23T19:06:26Z",
      "updatedAt": "2016-01-25T20:08:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3a4a7ad431a506d37b74b86df9bfb2467cd38dd3",
      "headRepository": "ctz/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "563baf5b1de8b4282b56c9f53b5c5a1843091063",
      "closedAt": "2016-01-25T20:08:07Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I get the feeling from discussion on the mailing list that the WG is leaning towards consensus for a \"SHOULD\" not a \"MUST\", as this is an unverifiable & unenforceable requirement, and systems with true RNGs can actually do things properly. I suggest changing this PR to reflect this, including leaving the pitfalls section as it is in the current draft.\n\nMentioning TRNGs could be a good idea here, to differentiate that case from when doing things deterministically his highly preferred. e.g., something to the effect of:\n\n\"ECDSA signatures SHOULD be deterministically made using the scheme specified in {{RFC6979}} or generated using randomness provided by a secure hardware entropy source.\"\n\n(not sure of the best way to word this)\n\nA squash of all commits might also be a good idea.\n",
          "createdAt": "2016-01-24T22:59:53Z",
          "updatedAt": "2016-01-24T22:59:53Z"
        },
        {
          "author": "ctz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This PR is superseded by https://github.com/tlswg/tls13-spec/pull/408\n",
          "createdAt": "2016-01-25T20:08:07Z",
          "updatedAt": "2016-01-25T20:08:07Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 408,
      "id": "MDExOlB1bGxSZXF1ZXN0NTcxMjI3NDU=",
      "title": "Recommend RFC6979 deterministic ECDSA",
      "url": "https://github.com/tlswg/tls13-spec/pull/408",
      "state": "CLOSED",
      "author": "ctz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the signing details section, we warn and then recommend\nRFC6979.\n\nIn the crypto pitfalls section, reiterate and try\nto impress the importance of getting this right.\n",
      "createdAt": "2016-01-25T20:05:48Z",
      "updatedAt": "2016-07-07T23:34:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de5e007e618ba2d89452fde59b31f170f89075c5",
      "headRepository": "ctz/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "2b59c72928deb2ab3c26b5e96509b883d62dffdf",
      "closedAt": "2016-07-07T23:34:51Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 409,
      "id": "MDExOlB1bGxSZXF1ZXN0NTgwNzY3Mjc=",
      "title": "spell-out first occurances of PSK",
      "url": "https://github.com/tlswg/tls13-spec/pull/409",
      "state": "MERGED",
      "author": "equalsJeffH",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "the PSK acronym occurs first in the TOC, and later in S 6 without being spelled-out -- these modest changes fix that. \n\n[ this is also a small test to see if I have the tlswg+github process figured out ]\n",
      "createdAt": "2016-02-03T01:05:38Z",
      "updatedAt": "2016-03-20T22:56:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3a4a7ad431a506d37b74b86df9bfb2467cd38dd3",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "0a31af6522e780abd71ab63b59d4741c7d62223e",
      "closedAt": "2016-03-20T22:56:23Z",
      "mergedAt": "2016-03-20T22:56:23Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5e22681ec5301def216155988b530ec7ba64c7aa"
      },
      "comments": [
        {
          "author": "equalsJeffH",
          "authorAssociation": "CONTRIBUTOR",
          "body": "ok, I see the problem (see below) -- tho i ought to install travis, kramdown, et al hereabouts to be able to try a build locally before pushing again to here. \n",
          "createdAt": "2016-02-03T01:39:35Z",
          "updatedAt": "2016-02-03T01:40:05Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You don't need to install everything unless you're testing the build yourself, which usually isn't needed.\n",
          "createdAt": "2016-02-03T01:52:44Z",
          "updatedAt": "2016-02-03T01:52:44Z"
        },
        {
          "author": "equalsJeffH",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh, sorry @davegarrett, i didn't see your suggestion above until after I'd figured out how to fix the one xref the section title had broken -- but the fix can be easily changed to how you suggest if you all wish. also thx for the hint wrt toolchain. \n",
          "createdAt": "2016-02-03T02:58:13Z",
          "updatedAt": "2016-02-03T02:58:13Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd prefer just renaming the ref, as parens don't end up in the autogenerated one, so it looks a little odd. (\"{{resumption-and-pre-shared-key-psk}}\") If it works, though, I don't have a strong objection, as it doesn't really matter.\n",
          "createdAt": "2016-02-03T22:40:30Z",
          "updatedAt": "2016-02-03T22:40:30Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 414,
      "id": "MDExOlB1bGxSZXF1ZXN0NTg4OTE5NTQ=",
      "title": "Corrected typos",
      "url": "https://github.com/tlswg/tls13-spec/pull/414",
      "state": "MERGED",
      "author": "s-zanella",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-02-10T13:45:56Z",
      "updatedAt": "2016-02-10T13:57:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3a4a7ad431a506d37b74b86df9bfb2467cd38dd3",
      "headRepository": "s-zanella/tls13-spec",
      "headRefName": "typos",
      "headRefOid": "89e0e566dcfa6cfd03d680a531e33072a0f4d622",
      "closedAt": "2016-02-10T13:57:21Z",
      "mergedAt": "2016-02-10T13:57:21Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 423,
      "id": "MDExOlB1bGxSZXF1ZXN0NjAzNjM4MjU=",
      "title": "purpose should be lowercase",
      "url": "https://github.com/tlswg/tls13-spec/pull/423",
      "state": "MERGED",
      "author": "hannesm",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It seems that both Karthik and I misinterpreted this \"IV\" to be uppercase, but it should be lowercase... Thus fixing this table so that others won't make the very same mistake..\n",
      "createdAt": "2016-02-23T16:08:32Z",
      "updatedAt": "2016-02-24T18:51:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "332b1b9af5229d9b43de3f506686e1bf3493c0b0",
      "headRepository": "hannesm/tls13-spec",
      "headRefName": "patch2",
      "headRefOid": "75c389c12d7a1e65a70e74eac05bbc2a4a4ce429",
      "closedAt": "2016-02-23T22:43:32Z",
      "mergedAt": "2016-02-23T22:43:32Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This does in fact seem like a bug in the spec.\n",
          "createdAt": "2016-02-23T22:43:29Z",
          "updatedAt": "2016-02-23T22:43:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 424,
      "id": "MDExOlB1bGxSZXF1ZXN0NjAzNzU0MTA=",
      "title": "Proposal to change session ticket lifetime",
      "url": "https://github.com/tlswg/tls13-spec/pull/424",
      "state": "MERGED",
      "author": "grittygrease",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Change ticket_lifetime_hint to ticket_lifetime and add stricter requirements.\n",
      "createdAt": "2016-02-23T17:16:11Z",
      "updatedAt": "2016-03-20T22:30:53Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "332b1b9af5229d9b43de3f506686e1bf3493c0b0",
      "headRepository": "grittygrease/tls13-spec",
      "headRefName": "nick/ticket_lifetime",
      "headRefOid": "027f83e29406ec473259f5862f79568f3502fe85",
      "closedAt": "2016-03-20T22:30:53Z",
      "mergedAt": "2016-03-20T22:30:53Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "lgtm\n\nPlease send an email to tls@ietf.org pointing to the change and making a case for it.\n",
          "createdAt": "2016-02-23T17:36:34Z",
          "updatedAt": "2016-02-23T17:36:34Z"
        },
        {
          "author": "grittygrease",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sent, thanks.\n\nOn Tue, Feb 23, 2016 at 9:36 AM, Martin Thomson notifications@github.com\nwrote:\n\n> lgtm\n> \n> Please send an email to tls@ietf.org pointing to the change and making a\n> case for it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/424#issuecomment-187807838.\n",
          "createdAt": "2016-02-23T18:05:21Z",
          "updatedAt": "2016-02-23T18:05:21Z"
        },
        {
          "author": "grittygrease",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mailing list discussion here:\nhttps://www.ietf.org/mail-archive/web/tls/current/msg19283.html\n",
          "createdAt": "2016-02-23T19:04:22Z",
          "updatedAt": "2016-02-23T19:04:22Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1\n",
          "createdAt": "2016-02-29T17:39:10Z",
          "updatedAt": "2016-02-29T17:39:10Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merging per WG discussion.\n\n@grittygrease please send me a PR adding yourself to acknowledgements :)\n",
          "createdAt": "2016-03-20T22:30:51Z",
          "updatedAt": "2016-03-20T22:30:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 426,
      "id": "MDExOlB1bGxSZXF1ZXN0NjA4MTIxNjU=",
      "title": "KeyUpdate message: add receive_generation field",
      "url": "https://github.com/tlswg/tls13-spec/pull/426",
      "state": "CLOSED",
      "author": "JudsonWilson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "A contribution from:\n\nJudson Wilson, Henry Corrigan-Gibbs, Riad S. Wahby,\nKeith Winstein, Philip Levis, and Dan Boneh\n\nStanford University\n",
      "createdAt": "2016-02-26T09:09:36Z",
      "updatedAt": "2016-05-15T23:28:52Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de5e007e618ba2d89452fde59b31f170f89075c5",
      "headRepository": "JudsonWilson/tls13-spec",
      "headRefName": "receive_generation",
      "headRefOid": "8acf9078204c80d93d1e10460cd3ed19abaa4047",
      "closedAt": "2016-05-15T23:28:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The discussion in BA did not support merging this PR. I am moving this to the parking lot. If someone makes a strong case for this and shifts the WG consensus I will resurrect it.\n",
          "createdAt": "2016-04-26T00:45:13Z",
          "updatedAt": "2016-04-26T00:45:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 428,
      "id": "MDExOlB1bGxSZXF1ZXN0NjI1MjMzNDE=",
      "title": "Assign some code points for the new extensions",
      "url": "https://github.com/tlswg/tls13-spec/pull/428",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "These match what NSS uses\n",
      "createdAt": "2016-03-11T10:22:54Z",
      "updatedAt": "2016-03-20T22:29:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a83709d1d52bfa2c7584a4fd147d9de2dc54abe0",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "code_points",
      "headRefOid": "90f3035b3045abfe85b4488d7202f8133597fefb",
      "closedAt": "2016-03-20T22:29:03Z",
      "mergedAt": "2016-03-20T22:29:03Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "27581d166307a00b1402d6b26ee8ed27454ff538"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 429,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM1MTY5NDk=",
      "title": "Add Nick Sullivan to contributors.",
      "url": "https://github.com/tlswg/tls13-spec/pull/429",
      "state": "MERGED",
      "author": "grittygrease",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-03-21T02:35:33Z",
      "updatedAt": "2016-03-21T02:43:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de5e007e618ba2d89452fde59b31f170f89075c5",
      "headRepository": "grittygrease/tls13-spec",
      "headRefName": "nick/contributors",
      "headRefOid": "b13ed824a85dbde33bd0e787f20d0ddb4fbc03f0",
      "closedAt": "2016-03-21T02:43:44Z",
      "mergedAt": "2016-03-21T02:43:44Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mission accomplished\n",
          "createdAt": "2016-03-21T02:43:48Z",
          "updatedAt": "2016-03-21T02:43:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 431,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM2MjQ2MTY=",
      "title": "Define exporter. Fixes #282",
      "url": "https://github.com/tlswg/tls13-spec/pull/431",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@martinthomson, sanity check?\n",
      "createdAt": "2016-03-21T20:11:15Z",
      "updatedAt": "2016-03-22T00:22:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c5f95dc455441739c2fac890b66fae7a4af82b3b",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue282_exporters",
      "headRefOid": "783b0ac3809155ae0aa7423fc84ad8518efdfddf",
      "closedAt": "2016-03-22T00:22:13Z",
      "mergedAt": "2016-03-22T00:22:13Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 432,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM2Mjc3OTE=",
      "title": "Clarify verification requirements of KeyUpdate",
      "url": "https://github.com/tlswg/tls13-spec/pull/432",
      "state": "MERGED",
      "author": "siyengar",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current wording of KeyUpdate a bit ambiguous, and leaves out certain areas needed for enforcement and might result in a security issue if not implemented correctly\n\nA sender of the keyupdate has no choice of which key to encrypt the keyupdate with, however the recipient does. \nIt has 2 choices:\na. Use old key and reset the sequence number after acking the keyupdate\nb. Use the new key for the key update and reset the sequence number before acking the keyupdate.\n\nThis distinction is very important for security. If a client uses option b), this causes a security vuln. Because the sequence numbers are reset after a key update, an attacker could truncate (application data) records from the old stream, wait for the key update from the client, and then let new packets through. The client or server has no way of figuring out this has happened. \n\nIf a receiver verifies that the KeyUpdate is received with the old key before accepting messages encrypted with the new key, then this attack is prevented.\n",
      "createdAt": "2016-03-21T20:34:24Z",
      "updatedAt": "2016-03-21T20:40:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "fec25c38d0b3f51023aab573f74d04d666d27ab5",
      "headRepository": "siyengar/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "a7d7d3db60e97a7be40d7e90f96f342101fd76b9",
      "closedAt": "2016-03-21T20:40:31Z",
      "mergedAt": "2016-03-21T20:40:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "46058653a834d3ceaaa7e293cc1d3b470ce66ef9"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Excellent point. I will merge this. Please also file a PR adding yourself to acknowledgements.\n",
          "createdAt": "2016-03-21T20:40:33Z",
          "updatedAt": "2016-03-21T20:40:33Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 433,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM2MjkyNjc=",
      "title": "Add subodh to contributor list",
      "url": "https://github.com/tlswg/tls13-spec/pull/433",
      "state": "CLOSED",
      "author": "siyengar",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-03-21T20:45:02Z",
      "updatedAt": "2016-03-22T00:21:36Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4160f93e88c96ae24afa32bccb1a29c072c26973",
      "headRepository": "siyengar/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "3e9ff2b85e318424e92a8d4e67f35aec4816a0c4",
      "closedAt": "2016-03-22T00:21:36Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 434,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM2NjkwMTI=",
      "title": "append \"_RESERVED\" to DSA SignatureScheme value names",
      "url": "https://github.com/tlswg/tls13-spec/pull/434",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This appends a \"_RESERVED\" to each name for the DSA values in the SignatureScheme enum to have them hidden up top and only shown in the appendix, as they're obsolete and their full description was removed in a prior changeset (https://github.com/tlswg/tls13-spec/commit/bed72816a2cbcb2695718c3936c44b78498e07da).\n\nThe alternative would be to remove them completely and expand the obsolete_RESERVED ranges to encompass them (these ranges are already hidden up top). I think keeping them as separate reserved values in the appendix is a bit better.\n\nNote that I have to delete this block's header comment as well, as the auto-pruning won't catch that.\n",
      "createdAt": "2016-03-22T04:37:49Z",
      "updatedAt": "2016-03-22T22:27:09Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "24d0f54ba009e7ddc5aec265cdf9e47533625405",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "eeb4bfd42d72a7d095d6010d16a1e3b09266867c",
      "closedAt": "2016-03-22T16:04:29Z",
      "mergedAt": "2016-03-22T16:04:29Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks. Good fix.\n",
          "createdAt": "2016-03-22T16:04:25Z",
          "updatedAt": "2016-03-22T16:04:25Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 435,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM4MDM0NDU=",
      "title": "followup tweaks to PR #434",
      "url": "https://github.com/tlswg/tls13-spec/pull/435",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Minor editorial tweaks. I just noticed the extra line that gets left in there when shown up top (two lines between first two shown blocks, instead of one). This fixes that. Also drops the periods after the comments, as they're not sentences.\n",
      "createdAt": "2016-03-22T22:26:32Z",
      "updatedAt": "2016-03-23T02:03:53Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3975fc499bb8fe1ed727826ce973f7dc11c57d8b",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "85f0d53eb18467a5164a687d37f6e061806a6c8b",
      "closedAt": "2016-03-22T22:44:50Z",
      "mergedAt": "2016-03-22T22:44:50Z",
      "mergedBy": "ekr",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 436,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQwOTIxNTA=",
      "title": "Patch some typos, missing words and punctuations",
      "url": "https://github.com/tlswg/tls13-spec/pull/436",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-03-24T20:15:11Z",
      "updatedAt": "2016-04-26T00:40:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "70f0e523e1483a074060c6bb0f344c8b1a3a170a",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "patch_typo7",
      "headRefOid": "3fcb2bc6fd053f7d2c56b87b42490877d36b6eaa",
      "closedAt": "2016-04-26T00:40:20Z",
      "mergedAt": "2016-04-26T00:40:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "0fbdf484db15a782ee428e5bfaf7e9471c5ce614"
      },
      "comments": [
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Re-pushed to squash commits...\n",
          "createdAt": "2016-03-24T20:22:06Z",
          "updatedAt": "2016-03-24T20:22:06Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Aside from the one noted change, lots of good typo fixes here.\n",
          "createdAt": "2016-03-25T01:01:29Z",
          "updatedAt": "2016-03-25T01:01:29Z"
        },
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good to go.\n",
          "createdAt": "2016-03-28T10:38:59Z",
          "updatedAt": "2016-03-28T10:38:59Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 437,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQ0NDM1MDk=",
      "title": "Adding elapsed_time protection for early data",
      "url": "https://github.com/tlswg/tls13-spec/pull/437",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This isn't perfect yet, but I think that it's a good mitigation.\n\nThe biggest shortcoming I see is the absence of a recommended allowance for error.  That will take some measurements to determine, I think.\n",
      "createdAt": "2016-03-29T10:24:12Z",
      "updatedAt": "2016-05-12T14:04:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "70f0e523e1483a074060c6bb0f344c8b1a3a170a",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "0rtt_elapsed",
      "headRefOid": "779ee5afefcfde25c2a08b9f9b381fd2b646a6cc",
      "closedAt": "2016-05-12T14:04:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 439,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYwNTg4Njg=",
      "title": "Add a section on 0-RTT backwards compatibility.",
      "url": "https://github.com/tlswg/tls13-spec/pull/439",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "0-RTT is _not_ backwards compatible because of the external application data records. Add some guidance for both clients and servers to mitigate this. Ideally the server SHOULD could be a MUST and that would be the end of it, but I do not expect all servers to get this right and so clients will want a fallback.\n\nThis also lets us provide guidance on the exact client-side fallback trigger and explicitly say not to change the version. Conveniently, there is a reliable signal available. (Historically, clients have used network errors or generic protocol errors as fallback triggers which masks new server bugs.)\n",
      "createdAt": "2016-04-11T20:42:01Z",
      "updatedAt": "2016-05-15T23:28:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "70f0e523e1483a074060c6bb0f344c8b1a3a170a",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "0-rtt-compat",
      "headRefOid": "d757991e3a011d2b3ef6f4bf0731762dd11bff61",
      "closedAt": "2016-05-15T23:28:35Z",
      "mergedAt": "2016-05-15T23:28:35Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3b47c46cfe36ca9ea67f91c8b3d983b082e07e28"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Your rationale for sectioning like this does make sense; fair enough. Updated text looks good.\n\nOne issue, though: use of \"SHOULD\" with regard to upgrade deployment should probably be changed to a \"RECOMMENDED\". I agree with the statement, but multi-server rollout of updates and new features is rather outside the scope of this document. It's the same level of requirement per RFC2119 language, but I think the later is technically preferred in this context. (might just be my interpretation; not a strong objection)\n",
          "createdAt": "2016-04-18T20:11:13Z",
          "updatedAt": "2016-04-18T20:11:13Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done. I know little of RFC2119 minutia and will defer to you all on that. :-)\n",
          "createdAt": "2016-04-18T21:41:49Z",
          "updatedAt": "2016-04-18T21:41:49Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 442,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYzNjI3NTI=",
      "title": "client_shares MAY be empty, the floor should be 0",
      "url": "https://github.com/tlswg/tls13-spec/pull/442",
      "state": "MERGED",
      "author": "s-zanella",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-04-13T17:47:17Z",
      "updatedAt": "2016-04-13T17:51:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "70f0e523e1483a074060c6bb0f344c8b1a3a170a",
      "headRepository": "s-zanella/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "614ec5636a698a5ec4bed0a4b67e951dabe51fd1",
      "closedAt": "2016-04-13T17:51:57Z",
      "mergedAt": "2016-04-13T17:51:57Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ed89759b4d9fad236ab2e5f4712fbc047ff771d5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 444,
      "id": "MDExOlB1bGxSZXF1ZXN0NjgxMjc3OTE=",
      "title": "Remove 0-RTT (EC)DHE and 0-RTT client authentication",
      "url": "https://github.com/tlswg/tls13-spec/pull/444",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Not ready for landing, but for @martinthomson initial review.\n",
      "createdAt": "2016-04-27T21:26:46Z",
      "updatedAt": "2016-05-12T14:04:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d6b0bb3398d43b98801427706cdc3f160d060e8c",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "remove_0rtt_ecdhe_client_auth",
      "headRefOid": "596edba317a5fcbf274f8237b737a09005e3c9c3",
      "closedAt": "2016-05-12T14:04:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A bunch of nits, though some of these are on existing text.\n",
          "createdAt": "2016-04-28T01:08:30Z",
          "updatedAt": "2016-04-28T01:08:30Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 445,
      "id": "MDExOlB1bGxSZXF1ZXN0NjgxNDEwNjQ=",
      "title": "Enhanced new session ticket",
      "url": "https://github.com/tlswg/tls13-spec/pull/445",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@martinthomson this builds on the previous PR.\n",
      "createdAt": "2016-04-27T23:20:18Z",
      "updatedAt": "2016-05-12T14:04:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d6b0bb3398d43b98801427706cdc3f160d060e8c",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "enhanced_new_session_ticket",
      "headRefOid": "789724d7b33c4aa8a514c238abd2fca939240ea2",
      "closedAt": "2016-05-12T14:04:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 446,
      "id": "MDExOlB1bGxSZXF1ZXN0NjgxNDE3MTU=",
      "title": "Allow server to send supported_groups. Fixes #415",
      "url": "https://github.com/tlswg/tls13-spec/pull/446",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-04-27T23:27:28Z",
      "updatedAt": "2016-05-02T19:46:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0fbdf484db15a782ee428e5bfaf7e9471c5ce614",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue415_supported_groups_in_serverhello",
      "headRefOid": "cb70b9819e17655a66e34a0e8b82854c9ebbb251",
      "closedAt": "2016-05-02T19:46:01Z",
      "mergedAt": "2016-05-02T19:46:01Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b87c2af98305926a0bf55a30a4f3a7a706b324a7"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You'll also need to update the last paragraph of the MTI Extensions section (currently section 8.2). Now that we're going to be down to only one client-only extension defined in this document, that whole paragraph can probably be cut in favor of a one-off note in the remaining extension's section (signature_algorithms will be the last).\n",
          "createdAt": "2016-04-28T00:52:13Z",
          "updatedAt": "2016-04-28T00:52:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 448,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg2MTc2NDg=",
      "title": "Move CertificateStatus to an extension",
      "url": "https://github.com/tlswg/tls13-spec/pull/448",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-05-02T20:39:29Z",
      "updatedAt": "2016-05-11T11:44:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4b92793b6a0ca687d6841359a6b8992fc7887c4d",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "certificate_status_xtn",
      "headRefOid": "bdb0058d222e2111d2f2ec84bc259df0228261b3",
      "closedAt": "2016-05-11T11:44:57Z",
      "mergedAt": "2016-05-11T11:44:57Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ad3125cc44417578f48ec2b95a718d0ee998333c"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that you should mark this document as updating 6066 and 6961.\n",
          "createdAt": "2016-05-03T00:49:22Z",
          "updatedAt": "2016-05-03T00:49:22Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 449,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg3OTAwNTA=",
      "title": "Encrypted extensions for client",
      "url": "https://github.com/tlswg/tls13-spec/pull/449",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "WIP, not ready to land. @martinthomson PTAL\n",
      "createdAt": "2016-05-03T23:11:52Z",
      "updatedAt": "2016-05-15T23:26:59Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4b92793b6a0ca687d6841359a6b8992fc7887c4d",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "encrypted_extensions_for_client",
      "headRefOid": "eeec465f3379fd84cfc7d397e58907ef956c0006",
      "closedAt": "2016-05-15T23:26:59Z",
      "mergedAt": "2016-05-15T23:26:59Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9851e169e3af4d4873fd887138f61ddef9e2f40c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 453,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk2NTUxOTE=",
      "title": "Wip new key schedule",
      "url": "https://github.com/tlswg/tls13-spec/pull/453",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "First cut at a new, more linear key schedule. WIP so possible I missed something serious.\n\n@martinthomson @bifurcation, comments, please? Does this seem more straightforward\n",
      "createdAt": "2016-05-11T11:22:51Z",
      "updatedAt": "2016-05-20T17:40:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3b47c46cfe36ca9ea67f91c8b3d983b082e07e28",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "WIP_new_key_schedule",
      "headRefOid": "b4f42cb0f4412d453e3c7da016ed705b772fa12e",
      "closedAt": "2016-05-20T17:40:50Z",
      "mergedAt": "2016-05-20T17:40:50Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b4f42cb0f4412d453e3c7da016ed705b772fa12e"
      },
      "comments": [
        {
          "author": "svince",
          "authorAssociation": "NONE",
          "body": "After this change, the keys used to encrypt the handshake traffic are derived from both ES and SS. (As before, they were derived only from ES)\nDoes this bring any advantages security-wise?\n\nIn the current version, the Finished keys contain the handshake context up to CertificateVeryServer, by being transitively derived from mES and mSS. Now these keys don't contain handshake context any more. What is the reasoning behind this change?\n",
          "createdAt": "2016-05-11T19:53:16Z",
          "updatedAt": "2016-05-11T19:53:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Wed, May 11, 2016 at 9:53 PM, svince notifications@github.com wrote:\n\n> After this change, the keys used to encrypt the handshake traffic are\n> derived from both ES and SS. (As before, they were derived only from ES)\n> Does this bring any advantages security-wise?\n> \n> Some, because then if you have 0-RTT then you get protection from the PSK.\n> but mostly, it's just convenience.\n\nIn the current version, the Finished keys contain the handshake context up\n\n> to CertificateVeryServer, by being transitively derived from mES and mSS.\n> Now these keys don't contain handshake context any more. What is the\n> reasoning behind this change?\n> \n> Simplicity. Since they're going to be used anyway to hash the handshake\n> transcript\n> it seemed unnecessary. But we could do it if there was strong reason to the\n> contrary\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/453#issuecomment-218570495\n",
          "createdAt": "2016-05-11T22:38:46Z",
          "updatedAt": "2016-05-11T22:38:46Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is pretty good.  The simplification is dramatic, which is the number one thing.  Well, the number two thing, given that number one is sign-off from the cryptographers; my limited knowledge of this says that we are using the same basic source of keying material for all the important decisions.  Critically, exporters and resumption branch after the client Finished.\n\nI think that you can revert the bracketing changes by changing the description of each instead.  The fact that there are different keys for different phases is quite important to have in people's faces, I think.\n",
          "createdAt": "2016-05-12T01:33:19Z",
          "updatedAt": "2016-05-12T01:33:19Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note that I had some concerns with clarity of the PR: formatting, the description of `Add-Secret()` and a few things.  I think that those are pretty important and probably need a little attention before landing this.\n",
          "createdAt": "2016-05-12T01:34:14Z",
          "updatedAt": "2016-05-12T01:34:14Z"
        },
        {
          "author": "svince",
          "authorAssociation": "NONE",
          "body": "I'm currently modeling the handshake using the Tamarin Prover. Now i need to decide how to model key generation. Should I rather already use the new key generation, or use the current one?\nHow likely will this pull request be merged in the next time?\n",
          "createdAt": "2016-05-12T14:15:06Z",
          "updatedAt": "2016-05-12T14:15:06Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I expect to have this resolved and in (though perhaps not identical to\nthis) by this\ntime next week.\n\nOn Thu, May 12, 2016 at 4:15 PM, svince notifications@github.com wrote:\n\n> I'm currently modeling the handshake using the Tamarin Prover. Now i need\n> to decide how to model key generation. Should I rather already use the new\n> key generation, or use the current one?\n> How likely will this pull request be merged in the next time?\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/453#issuecomment-218770245\n",
          "createdAt": "2016-05-12T14:24:33Z",
          "updatedAt": "2016-05-12T14:24:33Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 454,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk2NTU0MDE=",
      "title": "Wip context for resumption",
      "url": "https://github.com/tlswg/tls13-spec/pull/454",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "WIP PR for adding a \"context\" string when we resume\n",
      "createdAt": "2016-05-11T11:24:32Z",
      "updatedAt": "2016-05-20T17:40:49Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a63ccbb35041acba4db8c52265f70515f09b0a7a",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "WIP_context_for_resumption",
      "headRefOid": "418535e01ab4db0a69b90a84164ce700ad60a208",
      "closedAt": "2016-05-20T17:40:49Z",
      "mergedAt": "2016-05-20T17:40:49Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "254ee8bf102e3ffb84e0991e17679f2b5a872d37"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 457,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk5OTcxMTM=",
      "title": "Remove duplicated words and add missing commas",
      "url": "https://github.com/tlswg/tls13-spec/pull/457",
      "state": "MERGED",
      "author": "jwilk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-05-13T13:40:04Z",
      "updatedAt": "2016-05-13T16:09:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ad3125cc44417578f48ec2b95a718d0ee998333c",
      "headRepository": null,
      "headRefName": "spelling",
      "headRefOid": "37a03ecb21d4711f65e67783104acb7c651a3784",
      "closedAt": "2016-05-13T15:56:23Z",
      "mergedAt": "2016-05-13T15:56:23Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2396cf846c7326515f4eabf005b4d3a6642f9ef1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 458,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA0MTYyODA=",
      "title": "Specify whether DHE public keys are zero-padded.",
      "url": "https://github.com/tlswg/tls13-spec/pull/458",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "TLS 1.2 did not specify this and some implementations have sporadic interoperability issues as a result. Specify that, in TLS 1.3, public keys should be zero-padded. This is believed to be the more compatible TLS 1.2 variant, and having cryptographic messages be fixed-width fields where possible (not that it matters for public keys) seems preferable to saving one byte 1/256 of the time.\n",
      "createdAt": "2016-05-17T19:33:13Z",
      "updatedAt": "2016-05-18T22:19:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3b47c46cfe36ca9ea67f91c8b3d983b082e07e28",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "dhe-pad",
      "headRefOid": "6c8ff2cb86dadd123428d924fd584195d0c9423b",
      "closedAt": "2016-05-18T22:19:41Z",
      "mergedAt": "2016-05-18T22:19:41Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a63ccbb35041acba4db8c52265f70515f09b0a7a"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(Er, that should say \"DHE public keys\". I'll go do a force-push to fix the commit description.)\n",
          "createdAt": "2016-05-17T19:38:33Z",
          "updatedAt": "2016-05-17T19:38:33Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 459,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA2MDY3NTA=",
      "title": "Add some more implementation pitfalls.",
      "url": "https://github.com/tlswg/tls13-spec/pull/459",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There are many fields where unknown values are supposed to be ignored and not a fatal error. Experience with buggy TLS 1.2 servers suggests this is somehow not obvious. Switch the mention of omitting the extensions field completely (which is no longer possible) with unknown extensions.\n\nAlso explicitly call out ClientHello version processing as this historically has been a huge ecosystem failure.\n",
      "createdAt": "2016-05-18T22:00:21Z",
      "updatedAt": "2016-05-18T22:08:05Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3b47c46cfe36ca9ea67f91c8b3d983b082e07e28",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "more-pitfalls",
      "headRefOid": "dcee25cd659cedfb47c1538ad8a9d5adeace7b4b",
      "closedAt": "2016-05-18T22:08:05Z",
      "mergedAt": "2016-05-18T22:08:05Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "bd069ba89a69d06eab29102426c3e7a3647ed8cd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 460,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA2MjQxOTE=",
      "title": "minor followup to PR #459",
      "url": "https://github.com/tlswg/tls13-spec/pull/460",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Here's a quick followup to PR #459. Both the new and old issue are applicable. Whilst TLS 1.3 will always have extensions, servers will need to be able to handle hellos from older clients that don't send any extensions without choking. \"Correctly\" in this case is just a matter of parsing and rejecting or replying as TLS 1.2, but it's nonetheless still applicable for interop.\n",
      "createdAt": "2016-05-19T01:20:04Z",
      "updatedAt": "2016-05-19T02:57:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a63ccbb35041acba4db8c52265f70515f09b0a7a",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "221e9410201a33648e82fe35cf52fcc1a77e3703",
      "closedAt": "2016-05-19T01:59:56Z",
      "mergedAt": "2016-05-19T01:59:56Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3dabad540a5702b4167c891f01532e808df9fb57"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 461,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA3NDY5NDU=",
      "title": "Add implementation note about client tracking",
      "url": "https://github.com/tlswg/tls13-spec/pull/461",
      "state": "MERGED",
      "author": "squarooticus",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Session tickets enable client tracking by passive observers if they are used more than once. This change adds guidance to implementors for preventing this.\n",
      "createdAt": "2016-05-19T18:59:13Z",
      "updatedAt": "2016-05-21T16:10:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3dabad540a5702b4167c891f01532e808df9fb57",
      "headRepository": "squarooticus/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "8cadd60daa6040cdd49a39364764649544e71f28",
      "closedAt": "2016-05-21T16:10:58Z",
      "mergedAt": "2016-05-21T16:10:58Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "db8f6c2e615815d31f9f03245a61df2b63b85ce7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 462,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA3NTAyNjE=",
      "title": "Preserve leading zeros in Diffie-Hellman secrets.",
      "url": "https://github.com/tlswg/tls13-spec/pull/462",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Every other use of Diffie-Hellman preserves leading zeros. See PKCS #3 section\n8.3, RFC 2631 section 2.1.2, and SP 800-56A section C.1. I assume X9.42 says\nsomething similar to RFC 2631, but I do not have a copy of it. This discrepancy\nhas caused sporadic interoperability issues in TLS 1.2's DHE construction, so\nclearly it's confusing.\n\nMoreover, having variable-length secrets is generally dubious. It exposes an\nunnecessary side channel.\n\nSince TLS 1.2's server-fiat DHE and TLS 1.3's negotiated DHE are already very\ndifferent animals (1.3 DHE is more like 1.2 ECDHE than anything else), change\nit to the more reasonable scheme going forward. This is not compatible with 1.2\nand does risk a different set of sporadic interop issues if implementations do\nnot realize this changed, but we already have those with 1.2 implementations\ntoday.\n",
      "createdAt": "2016-05-19T19:22:05Z",
      "updatedAt": "2016-05-20T17:44:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3dabad540a5702b4167c891f01532e808df9fb57",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "dhe-pad2",
      "headRefOid": "6af2cd01e8b3109651dcde667aa030b26f459321",
      "closedAt": "2016-05-20T17:44:06Z",
      "mergedAt": "2016-05-20T17:44:06Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2e7c11cf9824d4726587a6d6f18fd6bb2a958cc5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 463,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA3NTY1NjQ=",
      "title": "Remove redundant length prefix from KeyShareEntry.key_exchange contents.",
      "url": "https://github.com/tlswg/tls13-spec/pull/463",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(Let me know if you think this is sufficiently non-trivial that it deserves a mailing list posting. It is a wire format change, but I think a fairly boring one.)\n\nOnly the outer length prefix is necessary, not the inner one. Named groups can\njust as easily take a byte string with known length rather than need to parse\nfields out.\n\nThis is consistent with the definition of DigitallySigned.signature; the\nsignature is an opaque field which is passed as a byte string into the\ncorresponding signature algorithm. The definition of rsa_pss_sha256 does not\ndefine an inner u16 length prefix. It simply takes the opaque byte string and\npasses it into the rsa_pss_sha256 function.\n\n(In fact, this change means KeyShareEntry and DigitallySigned structures\nexactly parallel.)\n\nThis also fixes some references to non-existent structures like ECPoint and\ndh_Yc. (Those seem to be remnants of TLS 1.2.)\n",
      "createdAt": "2016-05-19T20:07:03Z",
      "updatedAt": "2016-05-20T17:43:36Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3dabad540a5702b4167c891f01532e808df9fb57",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "redundant-length",
      "headRefOid": "be66d8ebc077ffa48f1ba37d6ee99201b201a101",
      "closedAt": "2016-05-20T17:43:36Z",
      "mergedAt": "2016-05-20T17:43:36Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1a58e83f2cb88fdc328dbe9e4e0abee4015e07f6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 464,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA3OTEwNDk=",
      "title": "Fix typo in Encrypted Extensions",
      "url": "https://github.com/tlswg/tls13-spec/pull/464",
      "state": "MERGED",
      "author": "FiloSottile",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-05-20T01:46:14Z",
      "updatedAt": "2016-05-20T15:04:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3dabad540a5702b4167c891f01532e808df9fb57",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "705ce677678663ac01b82f2a9eca45a297e58b8b",
      "closedAt": "2016-05-20T14:51:16Z",
      "mergedAt": "2016-05-20T14:51:16Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b92f21175fef55548353c6122910afcb07aea681"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 465,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA5NTM0MzA=",
      "title": "Expanded NewSessionTicket message",
      "url": "https://github.com/tlswg/tls13-spec/pull/465",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-05-21T16:17:46Z",
      "updatedAt": "2016-05-21T16:19:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "db8f6c2e615815d31f9f03245a61df2b63b85ce7",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "enhanced_new_session_ticket",
      "headRefOid": "5994b4411fbe4b56245ba775ef8efcf6078bfece",
      "closedAt": "2016-05-21T16:19:33Z",
      "mergedAt": "2016-05-21T16:19:33Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "282c130265553e879e84feb19ce71dec48327299"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 466,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA5NTM3MDg=",
      "title": "Allow multiple tickets in NewSessionTicket",
      "url": "https://github.com/tlswg/tls13-spec/pull/466",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@martinthomson Was this what you had in mind?\n",
      "createdAt": "2016-05-21T16:29:15Z",
      "updatedAt": "2016-07-07T23:48:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c9ed99f5be850a8b9f2b22f783a3f59d455e345e",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "multiple_tickets",
      "headRefOid": "55a35a5b87a10d287a6f58650ad713afc44f1934",
      "closedAt": "2016-07-07T23:48:55Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, this is what I was thinking.\n",
          "createdAt": "2016-05-21T21:31:59Z",
          "updatedAt": "2016-05-21T21:31:59Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is lamer than the generation alternative\n",
          "createdAt": "2016-07-07T23:48:55Z",
          "updatedAt": "2016-07-07T23:48:55Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 468,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA5NTQwNjA=",
      "title": "Cookie for hrr",
      "url": "https://github.com/tlswg/tls13-spec/pull/468",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@martinthomson PTAL\n",
      "createdAt": "2016-05-21T16:43:22Z",
      "updatedAt": "2016-05-22T19:29:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5deba7bfb48ceb8dad2997a23f63e6ad143acfe3",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "cookie_for_hrr",
      "headRefOid": "39ce82700a3452bbf4bbc0aafc0f36acf7b331ea",
      "closedAt": "2016-05-22T19:29:15Z",
      "mergedAt": "2016-05-22T19:29:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d73b78386dd6a49819cc2cd4a27e85ad3bc868ee"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I was thinking if you wanted to have a cookie but not PSK for some reason. I could go either way on this. Not allowing it would have the advantage that it would always be strictly for a given connection and if QUIC wanted to have some sort of source address token it could put it elsewhere (like in EE)\n",
          "createdAt": "2016-05-21T22:06:43Z",
          "updatedAt": "2016-05-21T22:06:43Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 469,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA5NTg0Mzc=",
      "title": "Code point groups. Fixes #441",
      "url": "https://github.com/tlswg/tls13-spec/pull/469",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-05-21T19:42:41Z",
      "updatedAt": "2016-05-21T19:44:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0a4f9549255c3ac35fa426b7ce51b29fd000d4f0",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue441_clarify_signature_schemes",
      "headRefOid": "3f3b4a54da55ea34a5e8a4847971ad0d6b2b07c5",
      "closedAt": "2016-05-21T19:44:01Z",
      "mergedAt": "2016-05-21T19:44:01Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "164d8c3f7259e8e4e143754f52d07ad7cea9eb90"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 474,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA5NjE1OTM=",
      "title": "Editorial",
      "url": "https://github.com/tlswg/tls13-spec/pull/474",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-05-21T22:03:28Z",
      "updatedAt": "2016-05-22T18:36:04Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "164d8c3f7259e8e4e143754f52d07ad7cea9eb90",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "editorial_draft_13",
      "headRefOid": "dbb6b47e915815a15ee2f30b1bc7cf41c0f1a89f",
      "closedAt": "2016-05-22T18:36:04Z",
      "mergedAt": "2016-05-22T18:36:04Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c9ed99f5be850a8b9f2b22f783a3f59d455e345e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 475,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA5NjUwMzc=",
      "title": "relax and focus error condition (issue #473)",
      "url": "https://github.com/tlswg/tls13-spec/pull/475",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For issue #473. This relaxes the requirement to check for and error on lack of inclusion in both extensions and focuses the explicit error requirement on the case of multiple keys for the same group.\n",
      "createdAt": "2016-05-22T01:17:42Z",
      "updatedAt": "2016-05-23T01:13:16Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "164d8c3f7259e8e4e143754f52d07ad7cea9eb90",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "e57106c5db89f611b0df5ca663b2f73e2ba6b08c",
      "closedAt": "2016-05-22T18:41:25Z",
      "mergedAt": "2016-05-22T18:41:25Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e57106c5db89f611b0df5ca663b2f73e2ba6b08c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 476,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA5Njk4NzY=",
      "title": "Change the HTTP/1.1 reference from RFC7231 to 7230",
      "url": "https://github.com/tlswg/tls13-spec/pull/476",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When I commented in #461, I mistakenly thought RFC 7231 was the first RFC in HTTP/1.1 spec series. Now I think it is better to use RFC 7230 as a reference of HTTP/1.1 in Client Tracking Prevention section, since RFC 7230 talks about connections, while RFC 7231 talks about the header fields, status codes, etc.\n",
      "createdAt": "2016-05-22T07:08:30Z",
      "updatedAt": "2016-05-22T23:26:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "164d8c3f7259e8e4e143754f52d07ad7cea9eb90",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "a5989fbbb85a8f486371d669f4c2a1750f1c4e7b",
      "closedAt": "2016-05-22T18:41:38Z",
      "mergedAt": "2016-05-22T18:41:38Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5deba7bfb48ceb8dad2997a23f63e6ad143acfe3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 477,
      "id": "MDExOlB1bGxSZXF1ZXN0NzEwNzcyNDA=",
      "title": "Add krose to contributors",
      "url": "https://github.com/tlswg/tls13-spec/pull/477",
      "state": "MERGED",
      "author": "squarooticus",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #467.\n",
      "createdAt": "2016-05-23T15:51:05Z",
      "updatedAt": "2016-05-23T21:56:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7fb4b2385134a447263c8627ddc8e1485b771d24",
      "headRepository": "squarooticus/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "3b853a04754e2abeaefa0d54c6155ba71ff6da1f",
      "closedAt": "2016-05-23T21:56:11Z",
      "mergedAt": "2016-05-23T21:56:11Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "dea15151b1a68e7c60555ef2fb8b8ecd9d3b7126"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 479,
      "id": "MDExOlB1bGxSZXF1ZXN0NzExMjU2MjM=",
      "title": "fixes for issue #478",
      "url": "https://github.com/tlswg/tls13-spec/pull/479",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some small tweaks and fixes for issue #478:\n- Move HKDF-Extract citing to a sentence and bring HKDF-Extract with it.\n- Change the Messages arg to HashValue, as the actual hashing is stated in the definition of Derive-Secret which is passing this function a hash, not messages. (fixes issue #478)\n- More concise defining of HkdfLabel.\n- Use the word \"zeroes\" instead of \"0s\".\n\nEdited to add:\n- Also, appended a commit to fix an extra trailing paren.\n",
      "createdAt": "2016-05-23T21:43:34Z",
      "updatedAt": "2016-07-04T00:35:24Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "142a1ac3e4d0bfe26a1cbb64350fdf240a23f848",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "keyschedulefunctionscleanup",
      "headRefOid": "3eef96d6ac9b4b9da1d334bc924983aa0958131d",
      "closedAt": "2016-07-03T23:13:32Z",
      "mergedAt": "2016-07-03T23:13:32Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a01eb5a5347628b8b0a493b6f0782653062e0945"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The other possibility is that a hash of the concatenation of hashes was to be the new HashValue. Simplest change is just to make the arg for what's currently used in the definition and passed in.\n",
          "createdAt": "2016-05-23T21:47:52Z",
          "updatedAt": "2016-05-23T21:47:52Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: Rebased. Is this ok to merge now?\n",
          "createdAt": "2016-06-23T23:44:04Z",
          "updatedAt": "2016-06-23T23:44:04Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 480,
      "id": "MDExOlB1bGxSZXF1ZXN0NzEyNjAyOTI=",
      "title": "Use underscores consistently for key/iv parameters",
      "url": "https://github.com/tlswg/tls13-spec/pull/480",
      "state": "CLOSED",
      "author": "colmmacc",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This change uses underscores to consistently represent the \"client_write_IV\", \"server_write_IV\", \"client_write_key\", \"server_write_key\" parameters. Greatly aids search/grep workflow .\n",
      "createdAt": "2016-05-24T17:26:16Z",
      "updatedAt": "2016-05-24T18:36:49Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "dea15151b1a68e7c60555ef2fb8b8ecd9d3b7126",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "083fc7752585c8b605d1b3739f4c1a7d34f221ad",
      "closedAt": "2016-05-24T18:36:49Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@colmmacc can you rebase?\n",
          "createdAt": "2016-05-24T17:46:59Z",
          "updatedAt": "2016-05-24T17:46:59Z"
        },
        {
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I created a new PR - I didn't realize my fork was so old! sorry. \n",
          "createdAt": "2016-05-24T18:36:48Z",
          "updatedAt": "2016-05-24T18:36:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 481,
      "id": "MDExOlB1bGxSZXF1ZXN0NzEyNzA3NDY=",
      "title": "Use underscores consistently for key/iv parameters",
      "url": "https://github.com/tlswg/tls13-spec/pull/481",
      "state": "MERGED",
      "author": "colmmacc",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This change uses underscores consistently for the key/iv paramaters\nto aid searching.\n",
      "createdAt": "2016-05-24T18:36:14Z",
      "updatedAt": "2016-05-24T19:49:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "dea15151b1a68e7c60555ef2fb8b8ecd9d3b7126",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "614a937651c46dd69874f57f2d00e0f02b0ae348",
      "closedAt": "2016-05-24T18:57:18Z",
      "mergedAt": "2016-05-24T18:57:18Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "65df473d4ce860385891d8597d56caa85f170919"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What about the table in Section 7.3.1?\n",
          "createdAt": "2016-05-24T19:49:54Z",
          "updatedAt": "2016-05-24T19:49:54Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 482,
      "id": "MDExOlB1bGxSZXF1ZXN0NzEyODQxMDU=",
      "title": "Yo whitespace is all messed up",
      "url": "https://github.com/tlswg/tls13-spec/pull/482",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-05-24T20:07:54Z",
      "updatedAt": "2016-05-24T21:12:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "65df473d4ce860385891d8597d56caa85f170919",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "ws",
      "headRefOid": "1ebdb8f76dac88def76994bad81e0eaeef460403",
      "closedAt": "2016-05-24T21:12:37Z",
      "mergedAt": "2016-05-24T21:12:37Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "04cb411362fd8b143072722aaa4a50de89848f70"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 483,
      "id": "MDExOlB1bGxSZXF1ZXN0NzEyODQzNDg=",
      "title": "481part2",
      "url": "https://github.com/tlswg/tls13-spec/pull/483",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A followup to #481.\n",
      "createdAt": "2016-05-24T20:09:37Z",
      "updatedAt": "2016-05-24T21:13:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "65df473d4ce860385891d8597d56caa85f170919",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "481part2",
      "headRefOid": "c808abc89cf93a674b7cfb5f844d6322c226a430",
      "closedAt": "2016-05-24T21:13:22Z",
      "mergedAt": "2016-05-24T21:13:22Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1e0708c6297706343ddbe5532fba7cf81d2b6a68"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 484,
      "id": "MDExOlB1bGxSZXF1ZXN0NzEyODg0MTc=",
      "title": "Add a comma to TicketFlags",
      "url": "https://github.com/tlswg/tls13-spec/pull/484",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-05-24T20:38:00Z",
      "updatedAt": "2016-05-24T21:19:25Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "65df473d4ce860385891d8597d56caa85f170919",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "commaticketflags",
      "headRefOid": "7a146187f6a89134b7ca5426861ecf2fefee6cb2",
      "closedAt": "2016-05-24T21:12:53Z",
      "mergedAt": "2016-05-24T21:12:53Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "59172bc994e8e0dc98095e6e44121f842de08006"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 485,
      "id": "MDExOlB1bGxSZXF1ZXN0NzEyOTE5NTc=",
      "title": "Update table to use underscores for keys/ivs",
      "url": "https://github.com/tlswg/tls13-spec/pull/485",
      "state": "CLOSED",
      "author": "colmmacc",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-05-24T21:01:28Z",
      "updatedAt": "2016-05-24T21:13:40Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "65df473d4ce860385891d8597d56caa85f170919",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "c7f172cb9739269f0a7e91efaf2f491da7f9a1aa",
      "closedAt": "2016-05-24T21:13:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "MT beat you to it.\n",
          "createdAt": "2016-05-24T21:13:40Z",
          "updatedAt": "2016-05-24T21:13:40Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 486,
      "id": "MDExOlB1bGxSZXF1ZXN0NzEzNjU4MTk=",
      "title": "Make pre_shared_key explicit in 0-RTT diagram",
      "url": "https://github.com/tlswg/tls13-spec/pull/486",
      "state": "MERGED",
      "author": "FiloSottile",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A 0-RTT is always a PSK handshake, so it requires a pre_shared_key, make it explicit in the diagram.\n\nAlso, in 0-RTT the key_share is only sent by the server for (EC)DHE, mark it optional.\n\nFinally, the client key_share in PSK is a SHOULD, so mark it optional.\n",
      "createdAt": "2016-05-25T10:23:19Z",
      "updatedAt": "2016-05-25T15:08:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1e0708c6297706343ddbe5532fba7cf81d2b6a68",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "f573e2eb64daa04a6a32e8484235b7df99fe1d1b",
      "closedAt": "2016-05-25T15:08:48Z",
      "mergedAt": "2016-05-25T15:08:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b5b814311f451de292b7640dcf31dce3be41a5d2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 487,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE2NDcyMDc=",
      "title": "Fix code block display issues",
      "url": "https://github.com/tlswg/tls13-spec/pull/487",
      "state": "MERGED",
      "author": "haroldfredshort",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Editorial: Indented code blocks do not render correctly until after the first blank line. Added initial blank lines where appropriate to fix the appearance of affected code blocks.\n",
      "createdAt": "2016-05-27T01:05:56Z",
      "updatedAt": "2016-07-06T19:30:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b5b814311f451de292b7640dcf31dce3be41a5d2",
      "headRepository": "haroldfredshort/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "e308eab95397fd0c1b0fc8d81cc8051383c8494d",
      "closedAt": "2016-07-06T19:30:41Z",
      "mergedAt": "2016-07-06T19:30:41Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a544312324bcb3f768120b7c18eaf06df1b3fa34"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 488,
      "id": "MDExOlB1bGxSZXF1ZXN0NzIyNDIwNDU=",
      "title": "Define ecdsa_sha1 and mark it as a SHOULD NOT alongside other SHA-1 algorithms",
      "url": "https://github.com/tlswg/tls13-spec/pull/488",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I'm going to see about getting rid of it anyway, but I think, for the spec, this is probably the better text, as sad as it makes me.\n\n---\n\nThe revised signature algorithm mechanism left the {sha1, ecdsa}\nSignatureAndHashAlgorithm without a corresponding SignatureScheme defined at\nall. SHA-1 does not have a corresponding curve, so defining it alongside\necdsa_p256_sha256 and friends was a nuisance.\n\nBut omitting it, combined with other text, implicitly means it \"MUST NOT be\noffered or negotiated by any implementation\".  Clients (ideally) send only one\nClientHello, so this implies a constraint on TLS 1.2 as well. SHA-1 needs to\ngo, but I think I was a tad overzealous here.\n\nI wouldn't be surprised {sha1, ecdsa} can be removed from TLS 1.2 right now.\nCertainly it will be much much easier to remove than {sha1, rsa}. But this is\nprobably better a SHOULD NOT rather than a MUST NOT. We wouldn't like to\ndiscover after the fact that a MUST NOT in TLS 1.3 is untenable due to some\necosystem problem. Notably, old versions of some popular server software ignore\nsignature algorithms and only sign SHA-1. This mostly affects RSA since ECDSA\nisn't that common, but any such ECDSA deployments would be affected.\n\nThis is also a little odd for servers as TLS 1.2 says missing sigalgs means the\nclient is assumed to support {sha1, X}. (Although, strictly speaking, the spec\ndoes not say the server must do anything useful with that advertisement.)\n\nIn contrast, dsa_sha1 is already not offered by many major browsers but is\nmerely a SHOULD NOT.\n\nDefine ecdsa_sha1_RESERVED as a companion to dsa_*_RESERVED to bring it out of\nthe implicit MUST NOT. Then include it in the SHOULD NOT lists alongside\nrsa_pkcs1_sha1 and dsa_sha1.\n",
      "createdAt": "2016-06-01T19:56:50Z",
      "updatedAt": "2016-07-06T23:52:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b5b814311f451de292b7640dcf31dce3be41a5d2",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "ecdsa-sha1",
      "headRefOid": "3b180d9029d6d56eae2107fbfbffe9ad47e02435",
      "closedAt": "2016-07-06T23:52:06Z",
      "mergedAt": "2016-07-06T23:52:06Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b19cfd25eef6a443947bf5bc279af6eed5cf3fc4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 489,
      "id": "MDExOlB1bGxSZXF1ZXN0NzIyNTQ4Mjc=",
      "title": "Rename HandshakeType.session_ticket to HandshakeType.new_session_ticket.",
      "url": "https://github.com/tlswg/tls13-spec/pull/489",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is purely aesthetic, but apparently no one realizes the name is different, not even IANA, so we may as well go fix it.\n\n(I don't know how to write IANA considerations, so I've left it a TODO. But if you give me text, I'll update this PR to include it.)\n\n---\n\nFor consistency. At a glance, it seems most TLS implementations did not realize\nthe HandshakeType value was actually named session_ticket and assumed it was\nnamed new_session_ticket anyway. Moreover, the IANA entry was named neither and\nactually named NewSessionTicket since RFC 4507's IANA considerations used the\nwrong name.\n",
      "createdAt": "2016-06-01T21:24:37Z",
      "updatedAt": "2016-06-08T22:30:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b5b814311f451de292b7640dcf31dce3be41a5d2",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "new-session-ticket",
      "headRefOid": "9c852d9f951acbd4fe7da79a85a9cdae824b1fd5",
      "closedAt": "2016-06-08T22:30:11Z",
      "mergedAt": "2016-06-08T22:30:11Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c6d085ff716c674e2c9f00e80421e440758173c9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 490,
      "id": "MDExOlB1bGxSZXF1ZXN0NzIzNzMxMTI=",
      "title": "Use more capital letters to describe version negotiation.",
      "url": "https://github.com/tlswg/tls13-spec/pull/490",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "People will continue getting this wrong until the end of time, but add an extra\nMUST in the server_version half on the off chance someone reads it.\n\nAlso clarify that client_version is a maximum version. (\"The version of the TLS\nprotocol by which the client wishes to communicate during this session\"\nsuggests it should be an exact match.)\n",
      "createdAt": "2016-06-02T16:03:28Z",
      "updatedAt": "2016-07-07T00:06:36Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b5b814311f451de292b7640dcf31dce3be41a5d2",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "more-capital-letters",
      "headRefOid": "772f747c53fe57ead627584cf6aed772fe5eed6b",
      "closedAt": "2016-07-07T00:06:36Z",
      "mergedAt": "2016-07-07T00:06:36Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "772f747c53fe57ead627584cf6aed772fe5eed6b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 491,
      "id": "MDExOlB1bGxSZXF1ZXN0NzI0NTgyMTg=",
      "title": "It really can't be used without encryption now, ",
      "url": "https://github.com/tlswg/tls13-spec/pull/491",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "and arguably should never be used in that fashion.\n\nI know that this stuff badly needs a rewrite, but this is just egregious.\n",
      "createdAt": "2016-06-03T06:08:16Z",
      "updatedAt": "2016-07-08T01:03:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b5b814311f451de292b7640dcf31dce3be41a5d2",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "insecure_nah",
      "headRefOid": "aa662059aff3b3de642b5516bd85c4eb724449c2",
      "closedAt": "2016-07-08T01:03:56Z",
      "mergedAt": "2016-07-08T01:03:56Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "34684104716b5a14b84b37deb510a48c3cbab8db"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 492,
      "id": "MDExOlB1bGxSZXF1ZXN0NzI0NjA5MTI=",
      "title": "Remove cruft from Record Layer section, reorganize a little",
      "url": "https://github.com/tlswg/tls13-spec/pull/492",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The section on connection states was almost all cruft.  I made a new section for nonce construction and moved the piece on sequence numbers there.\n\nThe only text I modified was the first three paragraphs of the nonce section, which needed to be scrubbed for references to \"connection state\", and the lead-in section on the AEAD, which I moved to where the other AEAD stuff was and expanded a little to include some forward references.\n",
      "createdAt": "2016-06-03T06:45:41Z",
      "updatedAt": "2016-07-07T22:27:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b5b814311f451de292b7640dcf31dce3be41a5d2",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "record_section",
      "headRefOid": "32582e95c17499f958e78076c43edaf26c8d138c",
      "closedAt": "2016-07-07T22:27:31Z",
      "mergedAt": "2016-07-07T22:27:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "32582e95c17499f958e78076c43edaf26c8d138c"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n\n@ekr: Did you still want to replace any of this? The stuff being cut here is very obsolete and must confuse anyone who attempts to read through the whole spec.\n",
          "createdAt": "2016-07-06T01:13:31Z",
          "updatedAt": "2016-07-06T01:13:31Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I'm working on it this week.\n\nOn Tue, Jul 5, 2016 at 6:13 PM, Dave Garrett notifications@github.com\nwrote:\n\n> LGTM\n> \n> @ekr https://github.com/ekr: Did you still want to replace any of this?\n> The stuff being cut here is very obsolete and must confuse anyone who\n> attempts to read through the whole spec.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/492#issuecomment-230647035, or mute\n> the thread\n> https://github.com/notifications/unsubscribe/ABD1oVodlSX-vo1jm7gHpYBa82wKBORzks5qSwE9gaJpZM4ItP42\n> .\n",
          "createdAt": "2016-07-06T01:52:50Z",
          "updatedAt": "2016-07-06T01:52:50Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 493,
      "id": "MDExOlB1bGxSZXF1ZXN0NzI2MDU0NTM=",
      "title": "Explicitly specify multiply concurrent tickets",
      "url": "https://github.com/tlswg/tls13-spec/pull/493",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "discuss:berlin"
      ],
      "body": "",
      "createdAt": "2016-06-04T15:45:12Z",
      "updatedAt": "2016-09-03T20:12:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b5b814311f451de292b7640dcf31dce3be41a5d2",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "ticket_generations",
      "headRefOid": "4b9a600689fa100cead306bbbee4e6b38d7027ad",
      "closedAt": "2016-09-03T20:12:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We need to cover this at IETF.\n",
          "createdAt": "2016-07-07T23:46:47Z",
          "updatedAt": "2016-07-07T23:46:47Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To me, the ticket-encrypting-key change use case is the most compelling, and seems useful enough to support adding this now.\n",
          "createdAt": "2016-07-19T02:35:57Z",
          "updatedAt": "2016-07-19T02:35:57Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This was resolved with separate changes.\n",
          "createdAt": "2016-09-03T20:12:54Z",
          "updatedAt": "2016-09-03T20:12:54Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 494,
      "id": "MDExOlB1bGxSZXF1ZXN0NzI4ODg5NTI=",
      "title": "Implementations should return \"handshake_failure\" to peers sending SS\u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/494",
      "state": "CLOSED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026L v3 in the {Client,Server}Hello message\n",
      "createdAt": "2016-06-07T14:48:25Z",
      "updatedAt": "2016-09-19T12:29:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b5b814311f451de292b7640dcf31dce3be41a5d2",
      "headRepository": null,
      "headRefName": "hs-failure-on-ssl3-hello",
      "headRefOid": "00b72bd5ddf6463f30bb6080047f7d7296c538a6",
      "closedAt": "2016-07-07T23:35:05Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No, the fatal alert here is very clearly \"protocol_version\" and is stated multiple times in the document elsewhere.\n\nMy guess is you think this is required because SSL did not yet have the precision to say this and only had \"handshake_failure\", however I couldn't care less. SSL is still required to abort on a fatal error, even if it has no idea what it is, and special-casing this is a horrible idea. TLS implementations need to have very clear instructions on what to do for what contingency, and this is very clearly defined as the response here. Unneeded added complexity for no gain is not helpful here.\n\nDefinition of this error code in current draft:\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-13#page-31\n\nRequirement of full abort on all fatal alerts in SSL3:\nhttps://tools.ietf.org/html/rfc6101#section-5.4.2\n",
          "createdAt": "2016-06-07T17:39:39Z",
          "updatedAt": "2016-06-07T17:42:36Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 498,
      "id": "MDExOlB1bGxSZXF1ZXN0NzM3NjIzNTg=",
      "title": "Fix small formatting typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/498",
      "state": "MERGED",
      "author": "ghedo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-06-14T15:32:51Z",
      "updatedAt": "2016-06-14T17:31:52Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c6d085ff716c674e2c9f00e80421e440758173c9",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "5ebc665568c71456d4c491d386b5e996f7ea7d5c",
      "closedAt": "2016-06-14T17:31:52Z",
      "mergedAt": "2016-06-14T17:31:52Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "142a1ac3e4d0bfe26a1cbb64350fdf240a23f848"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 499,
      "id": "MDExOlB1bGxSZXF1ZXN0NzM5NjMwOTY=",
      "title": "Define the interaction between 0-RTT and multiple PSK identities.",
      "url": "https://github.com/tlswg/tls13-spec/pull/499",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I would actually much rather we only offer one PSK identity since TLS 1.2 was perfectly fine offering just one and resumption has no use for offering multiple, but I suspect I will lose that fight. Absent that, at least make the protocol well-defined.\n\n---\n\nUnlike both TLS 1.2 resumption and TLS 1.2 PSK, TLS 1.3 increases the state\nspace and allows clients to offer multiple PSK identities. This mostly works,\nbut 0-RTT presumes that only one is offered. Define 0-RTT to presume the first\nidentity is selected and clarify that other shapes are possible due to the\nincreased state space.\n",
      "createdAt": "2016-06-15T18:45:52Z",
      "updatedAt": "2016-07-07T23:30:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "142a1ac3e4d0bfe26a1cbb64350fdf240a23f848",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "0rtt-ambiguous",
      "headRefOid": "5e8e6eb5ca5d5b310fc68b279ac5050d856dea27",
      "closedAt": "2016-07-07T23:30:18Z",
      "mergedAt": "2016-07-07T23:30:18Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5e8e6eb5ca5d5b310fc68b279ac5050d856dea27"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 502,
      "id": "MDExOlB1bGxSZXF1ZXN0NzQ1Mzc5MzM=",
      "title": "Negotiating 0-RTT means that the server has 1.3 everywhere.",
      "url": "https://github.com/tlswg/tls13-spec/pull/502",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The text that @davidben proposed that covered 0-RTT and backward\ncompatibility took the position that a server might not support\nTLS 1.3 when it was attempted.  That leads to all sorts of mess,\nparticularly given that most 1.2 and earlier servers are totally\nincapable of handling 0-RTT messages.  In NSS, it's a fatal\nerror and I would expect others to be similarly strict given the\nsmackTLS work.\n\nThis is a simpler set of rules:\n- If the server advertises support for 0-RTT that means that it\n  commits to supporting TLS 1.3 for the duration.\n- If the client attempts 0-RTT, then it should abort if it sees\n  a ServerHello with 1.2 or earlier.\n\nThis is stricter than what we currently have, but it's crisper.\nThat is, unless people imagine modifying their TLS 1.2\nimplementations to be able to ignore 0-RTT data,\n",
      "createdAt": "2016-06-21T01:13:44Z",
      "updatedAt": "2016-07-03T23:15:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "142a1ac3e4d0bfe26a1cbb64350fdf240a23f848",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "0rtt_means_13",
      "headRefOid": "4594494cc7daada09d28d97ff990bab25f0b5b5b",
      "closedAt": "2016-07-03T23:15:31Z",
      "mergedAt": "2016-07-03T23:15:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "13b930e2e39080ebd53cdcfa814ab4619c9f877b"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What's the smackTLS work's relevance here? Our two versions of the text have no difference to the TLS stack itself. In both cases, the TLS stack treats a 1.2 ServerHello as a fatal error. The only difference is I'm proposing the latter fail with a specific error code that higher-level logic can use to trigger a fallback.\n\nI really dislike fallbacks, but the alternative seems worse to me. It's not just servers. One might bring a work device with MITM proxy home. Or perhaps toggle antivirus on and off. Or other weird behaviors. (MITM proxies are also terrible, but they're a reality, unfortunately.) It's true the failures, if any, will be rare, but they will be non-deterministic which is the worst kind of failure.\n\n(Of course, unless we change the version negotiation, we'll end up with a version fallback anyway. My intent here was that the 0-RTT fallback _not_ be the same as the version fallback. Getting rid of the old version fallback was tricky due to lots of confounding factors.)\n",
          "createdAt": "2016-06-21T02:11:48Z",
          "updatedAt": "2016-06-21T02:11:48Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> What's the smackTLS work's relevance here? \n\nThere were some implementations that would happily pass cleartext records if they arrived before the handshake completed.\n\n> Our two versions of the text have no difference to the TLS stack itself. In both cases, the TLS stack treats a 1.2 ServerHello as a fatal error. The only difference is I'm proposing the latter fail with a specific error code that higher-level logic can use to trigger a fallback.\n\nOh, I didn't get that from reading it.  This PR makes it much clearer though.  I do agree about the specific error code though and had intended to implement a new code for this.\n\nAs for fallback, I expect that browsers will be stuck doing that sort of shameful thing, but we have to ask how much we want to encourage that by blessing it.  If you are suggesting that 0-RTT will lead to a new form of intolerance, I suppose that is true, and I guess that it is more easily detectable with the specific error code.  I guess where we disagree is over how much to write in the spec about fallback.\n",
          "createdAt": "2016-06-21T02:37:02Z",
          "updatedAt": "2016-06-21T02:37:02Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> There were some implementations that would happily pass cleartext records if they arrived before the handshake completed.\n\n...lovely. Good job, everyone. Although such a server would still read as expected, right? The 1.2 ServerHello will come in before any arbitrarily weird `early_data` confusion.\n\n> Oh, I didn't get that from reading it. This PR makes it much clearer though. I do agree about the specific error code though and had intended to implement a new code for this.\n\nYeah, the current text doesn't make that very clear. The specification doesn't \"know\" that TLS stacks usually aren't responsible for making connections (maybe you're doing something crazy like an HTTP CONNECT proxy) and so any kind of retry necessarily must be external.\n\n> I guess where we disagree is over how much to write in the spec about fallback.\n\n_shrug_ Whatever works I suppose.\n",
          "createdAt": "2016-06-21T02:45:24Z",
          "updatedAt": "2016-06-21T02:45:24Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Although such a server would still read as expected, right? The 1.2 ServerHello will come in before any arbitrarily weird early_data confusion.\n\nYeah, they will probably just fail on the second flight like any other 1.2 server.\n",
          "createdAt": "2016-06-21T02:59:19Z",
          "updatedAt": "2016-06-21T02:59:19Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(I also would not lose any sleep over breaking those servers.)\n",
          "createdAt": "2016-06-21T03:01:06Z",
          "updatedAt": "2016-06-21T03:01:06Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1. The new text is much clearer than my version. (And, yeah, I hate that we have to do this too. :-( )\n",
          "createdAt": "2016-06-22T04:07:02Z",
          "updatedAt": "2016-06-22T04:07:02Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 503,
      "id": "MDExOlB1bGxSZXF1ZXN0NzQ3MjIxNTM=",
      "title": "Move ticket_age to the early_data extension",
      "url": "https://github.com/tlswg/tls13-spec/pull/503",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This allows us to remove EncryptedExtensions from the 0-RTT flight.\nDoing this means that the server has all the information that they\nneed to generate a ServerHello in the ClientHello.  That reduces\nthe complexity of the state machine needed considerably.\n\nThe 0-RTT Finished message is only needed for key confirmation for\n0-RTT, which means that processing the Finished is not necessary.\nIf it's wrong, then the connection can fail.  That's different to\nticket_age, which would be \"wrong\" very often, so that we could\nonly reject 0-RTT.\n\nThis reduces generality somewhat, but since we've not identified\nany other use for EncryptedExtensions, this isn't the end of the\nworld.  The other candidate use for EncryptedExtensions was\nencrypted SNI, but it's not clear that a design based on\nEncryptedExtensions is the right way to solve that problem.\n\nA bad server can unmask clients by using a zero, fixed, or\npredictable mask.  I don't believe that this is worth complicating\nthe design to counter.  This is a case where the dumbest possible\nsolution is the best.\n",
      "createdAt": "2016-06-22T04:22:49Z",
      "updatedAt": "2016-07-07T15:49:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "142a1ac3e4d0bfe26a1cbb64350fdf240a23f848",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "mask_ticket_age",
      "headRefOid": "0d3730885019fd1c1ed4280c1eda3757962fc073",
      "closedAt": "2016-07-07T15:49:23Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> A bad server can unmask clients by using a zero, fixed, or predictable mask. I don't believe that this is worth complicating the design to counter.\n\n(A bad server can equally easily unmask clients by making single-use tickets easily correlatable, so I think this is fine.)\n",
          "createdAt": "2016-06-22T06:56:31Z",
          "updatedAt": "2016-06-22T06:56:31Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, this looks right. Why don't you propose it?\n",
          "createdAt": "2016-06-22T12:40:51Z",
          "updatedAt": "2016-06-22T12:40:51Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "merged by hand\n",
          "createdAt": "2016-07-07T15:49:17Z",
          "updatedAt": "2016-07-07T15:49:17Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 504,
      "id": "MDExOlB1bGxSZXF1ZXN0NzQ4NzA5ODE=",
      "title": "Chacha20-poly1305 is now RFC 7905.",
      "url": "https://github.com/tlswg/tls13-spec/pull/504",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Update Chacha20-poly1305 reference to RFC7905 in this document.\n",
      "createdAt": "2016-06-22T22:50:32Z",
      "updatedAt": "2016-07-03T23:45:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "142a1ac3e4d0bfe26a1cbb64350fdf240a23f848",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "f6390511836ca6d7e8e8daaead2840b151319708",
      "closedAt": "2016-07-03T23:15:59Z",
      "mergedAt": "2016-07-03T23:15:59Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "33511fbdc3207cf4279a5b18bb424664a1bece33"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ignore the travis error, that's on me (and corrected now).\n",
          "createdAt": "2016-06-23T10:16:26Z",
          "updatedAt": "2016-06-23T10:16:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 505,
      "id": "MDExOlB1bGxSZXF1ZXN0NzUwMjM0ODI=",
      "title": "Fix typo in definition of HKDF-Expand-Label",
      "url": "https://github.com/tlswg/tls13-spec/pull/505",
      "state": "CLOSED",
      "author": "nharper",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-06-23T20:41:06Z",
      "updatedAt": "2016-07-03T23:16:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "142a1ac3e4d0bfe26a1cbb64350fdf240a23f848",
      "headRepository": "nharper/tls13-spec",
      "headRefName": "master",
      "headRefOid": "d0601e4ce30452338416142c6ea9fe88f2ea108d",
      "closedAt": "2016-07-03T23:16:18Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is a duplicate of PR #479, which contains this exact change as well as others to this section.\n",
          "createdAt": "2016-06-23T23:36:57Z",
          "updatedAt": "2016-06-23T23:36:57Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged PR#479\n",
          "createdAt": "2016-07-03T23:16:18Z",
          "updatedAt": "2016-07-03T23:16:18Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 507,
      "id": "MDExOlB1bGxSZXF1ZXN0NzU3MDQwMjE=",
      "title": "Fix typo in RSASSA-PKCS1-v1_5's full name.",
      "url": "https://github.com/tlswg/tls13-spec/pull/507",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "RFC 3447 refers to it as RSASSA-PKCS1-v1_5, not RSASSA-PKCS-v1_5.\n",
      "createdAt": "2016-06-29T19:09:23Z",
      "updatedAt": "2016-07-03T23:03:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "142a1ac3e4d0bfe26a1cbb64350fdf240a23f848",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "pkcs1-typo",
      "headRefOid": "44ceda22517084bae91a331d49ac9beb33037486",
      "closedAt": "2016-07-03T23:03:33Z",
      "mergedAt": "2016-07-03T23:03:33Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "42697f92c8bd605c0235a3167c2d82aa10589a0d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 508,
      "id": "MDExOlB1bGxSZXF1ZXN0NzU3MTg1NjE=",
      "title": "Move the downgrade sentinel to the end of server_random.",
      "url": "https://github.com/tlswg/tls13-spec/pull/508",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The sentinel value was chosen to avoid conflicting with any valid TLS 1.2\nvalue, but this is not actually desirable. We need to avoid conflicting with\nany non-TLS-1.3 server but _still_ be a valid TLS 1.2 value. A TLS 1.3 server\nmust still correctly implement TLS 1.2 to interoperate with existing TLS 1.2\nclients.\n\nIn particular, placing it at the front clobbers TLS 1.2's server timestamp.\nPutting this in the random was silly and 1.3 rightfully removes it, but some\nsoftware depends on servers sending a timestamp. The tlsdate program uses this\nas a secure-ish time synchronization protocol. Silly as it is, it exists and it\narguably was following the letter of the TLS 1.2 spec, even if we don't like\nthat timestamp very much...\n\nMove the sentinel to the end so servers may implement this downgrade protection\n(which will be needed in the short term given the current version negotiation\nas it forces browsers to implement the version fallback again) without breaking\nany tlsdate instances which may still exist.\n",
      "createdAt": "2016-06-29T20:47:25Z",
      "updatedAt": "2016-07-06T18:10:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "142a1ac3e4d0bfe26a1cbb64350fdf240a23f848",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "random",
      "headRefOid": "5b561a0b7feffd707fa76090d735c7b0f8e554ac",
      "closedAt": "2016-07-06T18:10:02Z",
      "mergedAt": "2016-07-06T18:10:02Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "dc06f1adaa25e6986299402d2fd283bec2129e6e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 509,
      "id": "MDExOlB1bGxSZXF1ZXN0NzU3MzMzODg=",
      "title": "Minor typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/509",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Nitpick I noticed while reading through the spec again.\n",
      "createdAt": "2016-06-29T22:35:27Z",
      "updatedAt": "2016-12-23T17:32:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "142a1ac3e4d0bfe26a1cbb64350fdf240a23f848",
      "headRepository": null,
      "headRefName": "patch-2",
      "headRefOid": "947d572f573cd73ba6c58976644dac4182579457",
      "closedAt": "2016-07-01T05:42:20Z",
      "mergedAt": "2016-07-01T05:42:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b007ecc63c8303cf6d818e7002f604b531ab87b7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 511,
      "id": "MDExOlB1bGxSZXF1ZXN0NzYxMDI5OTE=",
      "title": "trivial formatting fix",
      "url": "https://github.com/tlswg/tls13-spec/pull/511",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Lack of a blank line after \"draft-14\" but before the bullet point causes it to render all on one line:\nhttps://tlswg.github.io/tls13-spec/\n\nThis is just a quick patch to make the spacing consistent because apparently Markdown (or, at least whatever is interpreting it there) can be picky. ;)\n\nThis is just a whitespace fix.\n",
      "createdAt": "2016-07-04T00:45:47Z",
      "updatedAt": "2016-07-04T01:01:59Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "33511fbdc3207cf4279a5b18bb424664a1bece33",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "9a00d2319d44cf79af74157eceb4df05b408d85f",
      "closedAt": "2016-07-04T01:00:52Z",
      "mergedAt": "2016-07-04T01:00:52Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "de759d101da79f118f13e64687ee6800bd2c7b33"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 512,
      "id": "MDExOlB1bGxSZXF1ZXN0NzYxNDEyOTg=",
      "title": "Added support for DTLS 1.3 to the TLS 1.3 specification",
      "url": "https://github.com/tlswg/tls13-spec/pull/512",
      "state": "CLOSED",
      "author": "hannestschofenig",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "discuss:berlin"
      ],
      "body": "Made various changes throughout the document in an attempt to propose the integration of DTLS 1.3 into the TLS 1.3 specification. Although a lot of the text of RFC 6347 has been re-used it is worth pointing out that the cookie mechanism is different in DTLS 1.3 compared to DTLS 1.2 due to the use of the cookie extension. \n",
      "createdAt": "2016-07-04T10:13:18Z",
      "updatedAt": "2016-10-25T11:38:05Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de759d101da79f118f13e64687ee6800bd2c7b33",
      "headRepository": "hannestschofenig/tls13-spec",
      "headRefName": "dtls13",
      "headRefOid": "af8541027332472cfa1b40e28865143b6507969f",
      "closedAt": "2016-09-03T20:12:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hannes, can you fix the build so it compiles? See:\nhttps://travis-ci.org/tlswg/tls13-spec/builds/142169418\n",
          "createdAt": "2016-07-04T13:35:28Z",
          "updatedAt": "2016-07-04T13:35:28Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To start, this needs rebasing, as it looks like it reverts quite a few recent commits.\n\nPersonally, I think this is too much to dump into this document and just makes it harder to read. Keeping the two separate, but directly referencing eachother where appropriate, makes more sense to me. (e.g. do both specs in parallel, and release at same time)\n",
          "createdAt": "2016-07-04T16:06:03Z",
          "updatedAt": "2016-07-04T16:06:03Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Added various review comments by Ilari:\n- Corrected text related to Length and payload description.\n- Removed text about 're-handshake'\n- Removed sentence that talked about  block padding and compression in PMTU section.\n- Indicated that ClientHello and HelloRetryRequest are included in handshake hashes.\n\nOpen issues: \n- Where should the client put the cookie? (cookie extension or in the legacy_cookie field)?\n- What version number should be used in the DTLS handshake and in the DTLS record layer? \n",
          "createdAt": "2016-07-04T21:06:10Z",
          "updatedAt": "2016-07-04T21:06:10Z"
        },
        {
          "author": "hannestschofenig",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Changes: \n- Modified version number, as suggested by Ilari. \n- Added placeholder for text about re-transmission of post-authentication messages. \n- Added placeholder for text about rekeying. \n- Indicated HelloVerifyRequest and KeyUpdate messages as depreciated for DTLS 1.3.\n- Updated design rational\n- Added cookie extension to the table in the IANA consideration section and indicated that it can be transmitted in clear as part of the ClientHello message. \n",
          "createdAt": "2016-07-05T08:58:24Z",
          "updatedAt": "2016-07-05T08:58:24Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I definitely won't get to this by draft-14\n",
          "createdAt": "2016-07-07T23:49:26Z",
          "updatedAt": "2016-07-07T23:49:26Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hannes has started a separate spec.\n",
          "createdAt": "2016-09-03T20:12:06Z",
          "updatedAt": "2016-09-03T20:12:06Z"
        },
        {
          "author": "boaks",
          "authorAssociation": "NONE",
          "body": "> Hannes has started a separate spec.\n\nIs there a repo for the separate spec.?\nUsing CoAP I'm very interessted in a future version of DTLS.\n",
          "createdAt": "2016-10-25T11:38:05Z",
          "updatedAt": "2016-10-25T11:38:05Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 513,
      "id": "MDExOlB1bGxSZXF1ZXN0NzYzMzkzNjQ=",
      "title": "Make HKDF hash function and L explicit",
      "url": "https://github.com/tlswg/tls13-spec/pull/513",
      "state": "CLOSED",
      "author": "FiloSottile",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-05T20:41:43Z",
      "updatedAt": "2016-07-07T00:02:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de759d101da79f118f13e64687ee6800bd2c7b33",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "ec9c5f106dd4bf409d5df6d409e0d9d6fcbdcbff",
      "closedAt": "2016-07-07T00:02:10Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks. I think there's no explanation of 'L' anywhere in here, currently, so this is a notable fix.\n\nDoing a quick search for \" L \" shows another two places where it's used in a sentence. I think those are the only other two places you'd need to update.\n",
          "createdAt": "2016-07-05T22:40:11Z",
          "updatedAt": "2016-07-05T22:40:11Z"
        },
        {
          "author": "FiloSottile",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Only found another one, what am I missing?\n\nIn general I think there needs to be in general more clarity as to what hash function is used where (which to my understanding is always the cipher suite one, except in crafting the digitally-signed data) but it's not as obvious. Opinions?\n",
          "createdAt": "2016-07-05T23:27:24Z",
          "updatedAt": "2016-07-05T23:27:24Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Tuesday, July 05, 2016 07:27:27 pm Filippo Valsorda wrote:\n\n> Only found another one, what am I missing?\n\nMy first count was wrong; looks like you were only missing the one more, and the other must've been in the previous version of the commit already. I think you've got all the uses of 'L' now, so this should be good.\n\n> In general I think there needs to be in general more clarity as to what hash function is used where (which to my understanding is always the cipher suite one, except in crafting the digitally-signed data) but it's not as obvious.\n\nUnless I'm forgetting something, the only separately decided hash functions are the one for the cipher suite to be used with HKDF/HMAC and the one(s) for signatures (negotiated via signature_algorithms extension).\n\n> Opinions?\n\nMy general opinion is always that explicit is better than implicit in spec docs. If there's a point that you think needs better clarification, please do submit a new PR with some updates.\n",
          "createdAt": "2016-07-06T01:01:05Z",
          "updatedAt": "2016-07-06T01:01:05Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand.\n",
          "createdAt": "2016-07-07T00:02:10Z",
          "updatedAt": "2016-07-07T00:02:10Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 514,
      "id": "MDExOlB1bGxSZXF1ZXN0NzYzNTYxNzA=",
      "title": "Clarify that Early Secret is not 0 when PSK is not in use",
      "url": "https://github.com/tlswg/tls13-spec/pull/514",
      "state": "MERGED",
      "author": "FiloSottile",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-05T22:57:54Z",
      "updatedAt": "2016-07-06T18:10:24Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de759d101da79f118f13e64687ee6800bd2c7b33",
      "headRepository": null,
      "headRefName": "patch-2",
      "headRefOid": "b5c9754bb910170449c0c881492e33460640f747",
      "closedAt": "2016-07-06T18:10:24Z",
      "mergedAt": "2016-07-06T18:10:24Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "269c5f73361dd6ecc4749b73c0cb20f7b0d47abb"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 515,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY1MjMxMTA=",
      "title": "Add Filippo Valsorda to Contributors",
      "url": "https://github.com/tlswg/tls13-spec/pull/515",
      "state": "MERGED",
      "author": "FiloSottile",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-07T00:28:08Z",
      "updatedAt": "2016-07-07T00:44:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0569ae7eb06c18d37d7bc2f7f8c58b6c00707efe",
      "headRepository": null,
      "headRefName": "patch-3",
      "headRefOid": "3b5de53c1f5e3b7d6e140cf2952f8d09b592bd18",
      "closedAt": "2016-07-07T00:44:16Z",
      "mergedAt": "2016-07-07T00:44:16Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a2503289667d05ed61a8fcdec6dd99b6891764aa"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 516,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY1MjYwMzQ=",
      "title": "Flatter Sectioning (for issue #510)",
      "url": "https://github.com/tlswg/tls13-spec/pull/516",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a PR for the section flattening scheme I noted in issue #510. The handshake structs are a little awkwardly positioned, but other than that, this is pretty straightforward. A little bit of excessive redundant text is also cut here. The reasons to do this are:\n1) The TOC will actually list all the messages and extensions by name, which is fairly important information, and should make browsing the document easier.\n2) No more 5 part subsection ID silliness.\n3) The relevant handshake enum and struct are now defined before all the stuff that mentions them.\n",
      "createdAt": "2016-07-07T01:11:20Z",
      "updatedAt": "2016-07-09T21:18:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e91689832a1827bd023d8e173d3a006b0ff637b3",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "flattersectioning",
      "headRefOid": "63c26a762e8edacecb6e33a08a8c7ffe9ded4d51",
      "closedAt": "2016-07-09T21:18:21Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing this in favor of the more drastic restructuring and improvements in PR #524.\n",
          "createdAt": "2016-07-09T21:18:21Z",
          "updatedAt": "2016-07-09T21:18:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 517,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY2NTI0ODg=",
      "title": "Specify that AEAD plaintext also includes the padding bytes.",
      "url": "https://github.com/tlswg/tls13-spec/pull/517",
      "state": "MERGED",
      "author": "tomrittervg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This sentence in general seems redundant, but if it's going to be included it should be correct.\n",
      "createdAt": "2016-07-07T19:35:13Z",
      "updatedAt": "2016-07-07T19:57:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "93462f34e8b920702506ef32ce0c0bd4ac846ba2",
      "headRepository": "tomrittervg/tls13-spec",
      "headRefName": "tjr-quibble1",
      "headRefOid": "a5203cacd122fc8fb1f9e783aa244b9039a87447",
      "closedAt": "2016-07-07T19:57:37Z",
      "mergedAt": "2016-07-07T19:57:37Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b4307abf02f13c32d00177eaeb2676933a8fd2ac"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 518,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY2NTI1NTE=",
      "title": "Indent KeyUpdate",
      "url": "https://github.com/tlswg/tls13-spec/pull/518",
      "state": "CLOSED",
      "author": "tomrittervg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-07T19:35:38Z",
      "updatedAt": "2016-07-07T22:28:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "93462f34e8b920702506ef32ce0c0bd4ac846ba2",
      "headRepository": "tomrittervg/tls13-spec",
      "headRefName": "tjr-quibble2",
      "headRefOid": "a6664701bc38e85fb323eba060366d08c8275a0a",
      "closedAt": "2016-07-07T22:28:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "tomrittervg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I assume this was intended to be indented, but I guess I'm not 100% certain.\n",
          "createdAt": "2016-07-07T19:35:53Z",
          "updatedAt": "2016-07-07T19:35:53Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Indent yes, line break no :)\n",
          "createdAt": "2016-07-07T19:58:08Z",
          "updatedAt": "2016-07-07T19:58:08Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 519,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY2Nzk0MDQ=",
      "title": "fix jumbled merge",
      "url": "https://github.com/tlswg/tls13-spec/pull/519",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/tlswg/tls13-spec/commit/e91689832a1827bd023d8e173d3a006b0ff637b3\n\nThis recent commit left a few jumbled sentences.\n",
      "createdAt": "2016-07-07T23:02:36Z",
      "updatedAt": "2016-07-07T23:24:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e91689832a1827bd023d8e173d3a006b0ff637b3",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "381bb4157189b5df86f1fa7c6de86c7083400e84",
      "closedAt": "2016-07-07T23:21:12Z",
      "mergedAt": "2016-07-07T23:21:12Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "8e75cd8ceefd61851913f3a840a936e87e1e9a8a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 521,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY2ODcyNTY=",
      "title": "Issue471 fatal alerts",
      "url": "https://github.com/tlswg/tls13-spec/pull/521",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-08T00:42:03Z",
      "updatedAt": "2016-07-08T15:15:04Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "820e3f6d6ab3fe8a8449e4e7a77c0e9d7446124b",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue471_fatal_alerts",
      "headRefOid": "9516b39e8177b31dea01babfaf6beb88738c35ab",
      "closedAt": "2016-07-08T15:15:04Z",
      "mergedAt": "2016-07-08T15:15:04Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4ba28ab0c217926579eb1f2f89b09e9b4474ae3a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 522,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY3NzQyNDc=",
      "title": "Add data volume limits",
      "url": "https://github.com/tlswg/tls13-spec/pull/522",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-08T15:53:25Z",
      "updatedAt": "2016-07-11T13:19:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2127d2b1295ef63416563d77137d4be4c9f0f954",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "aead_limits",
      "headRefOid": "40477496e023c8815fa4885e1706a880f86332b2",
      "closedAt": "2016-07-10T15:30:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@wbl PTAL\n",
          "createdAt": "2016-07-08T15:54:04Z",
          "updatedAt": "2016-07-08T15:54:04Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looks like it accurately represents the citation, which I remember previously checking for correctness. \n",
          "createdAt": "2016-07-09T16:12:31Z",
          "updatedAt": "2016-07-09T16:12:31Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks!\n\nOn Sat, Jul 9, 2016 at 9:12 AM, Watson Ladd notifications@github.com\nwrote:\n\n> Looks like it accurately represents the citation, which I remember\n> previously checking for correctness.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/522#issuecomment-231541908, or mute\n> the thread\n> https://github.com/notifications/unsubscribe/ABD1oVVa01ctRtIW6jEPknteWJbwijkfks5qT8hwgaJpZM4JIKOh\n> .\n",
          "createdAt": "2016-07-09T16:24:28Z",
          "updatedAt": "2016-07-09T16:24:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kennypaterson comments?\n",
          "createdAt": "2016-07-09T16:36:39Z",
          "updatedAt": "2016-07-09T16:36:39Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged separately.\n",
          "createdAt": "2016-07-10T15:30:35Z",
          "updatedAt": "2016-07-10T15:30:35Z"
        },
        {
          "author": "kennypaterson",
          "authorAssociation": "NONE",
          "body": "This \"data limits\" text is good. We need to spell Atul's name properly though - it's Atul Luykx.\n\nAdditionally, it might be good to mention that the actual data limits are predicated on the assumption that the underlying PRF has no weaknesses (this being AES for AES-GCM and ChaCha20 for ChaCha20-Poly1305).\n",
          "createdAt": "2016-07-11T13:11:16Z",
          "updatedAt": "2016-07-11T13:11:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See:\nhttps://github.com/tlswg/tls13-spec/commit/42edc9b79e80e415fe60cd55ff704d77fe993a0f\n",
          "createdAt": "2016-07-11T13:19:22Z",
          "updatedAt": "2016-07-11T13:19:22Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 523,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY3OTEyOTE=",
      "title": "Refine rules for accepting 0-RTt. Fixes #451",
      "url": "https://github.com/tlswg/tls13-spec/pull/523",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As proposed by Ilari on the list.\n\nI opted not to require that the various extensions where the server sends extra cert info (OCSP, etc.) be the same, as the client has already sent the data at this point and can make reliance decisions if those change.\n",
      "createdAt": "2016-07-08T18:06:49Z",
      "updatedAt": "2016-07-10T15:37:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2127d2b1295ef63416563d77137d4be4c9f0f954",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue451_0rtt_rules",
      "headRefOid": "69ec243996d525c7b4dfce7240c3fe98c8e3fbaf",
      "closedAt": "2016-07-10T15:37:11Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ilaril PTAL.\n",
          "createdAt": "2016-07-08T18:06:57Z",
          "updatedAt": "2016-07-08T18:06:57Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Fri, Jul 08, 2016 at 11:07:00AM -0700, ekr wrote:\n\n> @ilaril PTAL.\n\nYeah, much better than what there was previously.\n\nI did run over all other known extensions to check if those are either\ndeprecated, (presumably[1]) connection control or related to signature\nauth. All seem to be.\n\n[1] Not all extensions explicitly say are those connection-scoped or\nsession-scoped in TLS 1.2.\n",
          "createdAt": "2016-07-08T18:52:47Z",
          "updatedAt": "2016-07-08T18:52:47Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This commit makes Travis sad. You need to add RFC7443 to the informative references list up top for this to build properly.\n",
          "createdAt": "2016-07-09T21:23:07Z",
          "updatedAt": "2016-07-09T21:23:07Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks. I will fix pre-landing.\n",
          "createdAt": "2016-07-09T21:29:40Z",
          "updatedAt": "2016-07-09T21:29:40Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased at: https://github.com/tlswg/tls13-spec/pull/527\n",
          "createdAt": "2016-07-10T15:37:11Z",
          "updatedAt": "2016-07-10T15:37:11Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 524,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY4NDY3OTY=",
      "title": "Restructure",
      "url": "https://github.com/tlswg/tls13-spec/pull/524",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a lot of editorial work. Specifically:\n- Removing redundant text\n- Reordering things so that the handshake appears first and making the handshake and alert section A heds\n- Harmonize a bunch of text\n- Remove the obsolete Security Analysis text in preparation for providing a real Security Analysis section.\n\nThis is my first cut and I will make another pass later today to catch mistakes/things that still need to be updated.\n\n@davegarrett @martinthomson you may want to take a look at this pre-merge.\n",
      "createdAt": "2016-07-09T13:22:30Z",
      "updatedAt": "2016-07-10T15:22:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2127d2b1295ef63416563d77137d4be4c9f0f954",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "restructure",
      "headRefOid": "03a559a7996c8082e636256a63e651df82eaf90f",
      "closedAt": "2016-07-10T15:22:19Z",
      "mergedAt": "2016-07-10T15:22:19Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7e5b402170e6561a14210e4f720d011365d4e426"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There's a lot of good restructuring here (and I wish git handled changes like this far better). In particular, moving the handshake overview up to first position feels like a very good move.\n\nThe only part here that I'm really not sure of is having the subprotocols all moved so far away from eachother. They're not really in any obvious order anymore. In the current draft, we have things ordered: record, alert, handshake, computations, MTI, application. In this changeset, we now have: handshake, computations, record, alert, MTI, application. (there's also the trivially fixable issue of ProtocolVersion being defined after being first used, now) I think a more logical flow would be to put computations first and have the subprotocols in order of use: computations, record, handshake, alert, application, MTI. This would have a reader going through the document linearly go through steadily up through the layers (more or less).\n\nOne thing I think could also do with a change is to banish the full Presentation Language section to an appendix and link to it with a very short summary added to the end of the Conventions and Terminology section. Whilst vector length declaration confuses everyone from implementers to the NSA, the other 90% of that section is straightforward. There is nobody capable of understanding this document that needs this stuff up top like this, and it easily obscures the few parts of it that are absolutely crucial. The only things I think need to be in a summary are: explain vector notation in one or two sentences, note that everything is big-endian, and define \"opaque\" in one sentence. If we can get this bit of required knowledge up front, the rest is merely paperwork and can safely be stuck in the appendix. Seeing as we are aware of how frequently the vector notation is misunderstood, focusing on that up front feels like a needed improvement.\n",
          "createdAt": "2016-07-09T17:56:28Z",
          "updatedAt": "2016-07-09T17:56:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dave, thanks for your comments. Responses below.\n\nOn Sat, Jul 9, 2016 at 10:56 AM, Dave Garrett notifications@github.com\nwrote:\n\n> There's a lot of good restructuring here (and I wish git handled changes\n> like this far better).\n\nYeah. FWIW opendiff does an OK job here. That's what I used for sanity\nchecking.\n\n> In particular, moving the handshake overview up to first position feels\n> like a very good move.\n> \n> The only part here that I'm really not sure of is having the subprotocols\n> all moved so far away from eachother. They're not really in any obvious\n> order anymore. In the current draft, we have things ordered: record, alert,\n> handshake, computations, MTI, application. In this changeset, we now have:\n> handshake, computations, record, alert, MTI, application.\n> \n> I'm not sure why you're calling \"computations\" a subprotocol. It's really\n> an internal detail. I went back and forth on whether computations should go\n> right with handshake or elsewhere.\n> \n> (there's also the trivially fixable issue of ProtocolVersion being defined\n> after being first used, now)\n\nThanks. This I can fix.\n\n> I think a more logical flow would be to put computations first and have\n> the subprotocols in order of use: computations, record, handshake, alert,\n> application, MTI. This would have a reader going through the document\n> linearly go through steadily up through the layers (more or less).\n> \n> The order I'm shooting for is the logical order in which the protocol is\n> executed. I've never liked how much effort is spent on the record layer\n> before you ever get to the handshake, which is the heart of the protocol\n> (doubly true with AEAD). I went back and forth on computations, but I guess\n> you've convinced me to move it towards the end, since it's kind of obvious\n> approximately what it's going to do.\n\nGiven this discussion, I think I'm going to do:\n- Presentation language\n- Handshake\n- Record layer\n- Application Data (though this is goofily short).\n- Alerts\n- Cryptographic computations\n- MTI\n\nOne thing I think could also do with a change is to banish the full\n\n> Presentation Language section to an appendix and link to it with a very\n> short summary added to the end of the Conventions and Terminology section.\n> Whilst vector length declaration confuses everyone from implementers to the\n> NSA, the other 90% of that section is straightforward. There is nobody\n> capable of understanding this document that needs this stuff up top like\n> this, and it easily obscures the few parts of it that are absolutely\n> crucial. The only things I think need to be in a summary are: explain\n> vector notation in one or two sentences, note that everything is\n> big-endian, and define \"opaque\" in one sentence. If we can get this bit of\n> required knowledge up front, the rest is merely paperwork and can safely be\n> stuck in the appendix. Seeing as we are aware of how frequently the vector\n> notation is misunderstood, focusing on that up front feels like a needed\n> improvement.\n> \n> I'm less sold about this, but it's an easy change once we get the rest\n> straightened out if we decide it's a good idea.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/524#issuecomment-231547003, or mute\n> the thread\n> https://github.com/notifications/unsubscribe/ABD1oTRzEtpuBEvM-bqExkSmi88MyHwVks5qT-DOgaJpZM4JInfc\n> .\n",
          "createdAt": "2016-07-09T18:11:21Z",
          "updatedAt": "2016-07-09T18:11:21Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I could see splitting the presentation language out into a separate document, otherwise put the full description before it is first used.\n",
          "createdAt": "2016-07-09T19:35:16Z",
          "updatedAt": "2016-07-09T19:35:16Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Saturday, July 09, 2016 02:11:24 pm ekr wrote:\n\n> On Sat, Jul 9, 2016 at 10:56 AM, Dave Garrett notifications@github.com\n> wrote:\n> \n> > In particular, moving the handshake overview up to first position feels\n> > like a very good move.\n> > \n> > The only part here that I'm really not sure of is having the subprotocols\n> > all moved so far away from eachother. They're not really in any obvious\n> > order anymore. In the current draft, we have things ordered: record, alert,\n> > handshake, computations, MTI, application. In this changeset, we now have:\n> > handshake, computations, record, alert, MTI, application.\n> > \n> > I'm not sure why you're calling \"computations\" a subprotocol. It's really\n> > an internal detail. I went back and forth on whether computations should go\n> > right with handshake or elsewhere.\n\nI'm not. I'm just saying that in the list of sections, the ones that are for subprotocols (handshake & alert) are no longer in the same vicinity, as there's other sections in between now.\n\n> > I think a more logical flow would be to put computations first and have\n> > the subprotocols in order of use: computations, record, handshake, alert,\n> > application, MTI. This would have a reader going through the document\n> > linearly go through steadily up through the layers (more or less).\n> > \n> > The order I'm shooting for is the logical order in which the protocol is\n> > executed. I've never liked how much effort is spent on the record layer\n> > before you ever get to the handshake, which is the heart of the protocol\n> > (doubly true with AEAD). I went back and forth on computations, but I guess\n> > you've convinced me to move it towards the end, since it's kind of obvious\n> > approximately what it's going to do.\n> \n> Given this discussion, I think I'm going to do:\n> - Presentation language\n> - Handshake\n> - Record layer\n> - Application Data (though this is goofily short).\n> - Alerts\n> - Cryptographic computations\n> - MTI\n\nI think that's an improvement. I'd put alerts before application, though, as application data is generally the end steady-state of things and thus makes sense to be last.\n\n> > One thing I think could also do with a change is to banish the full\n> > Presentation Language section to an appendix and link to it with a very\n> > short summary added to the end of the Conventions and Terminology section.\n> > Whilst vector length declaration confuses everyone from implementers to the\n> > NSA, the other 90% of that section is straightforward. There is nobody\n> > capable of understanding this document that needs this stuff up top like\n> > this, and it easily obscures the few parts of it that are absolutely\n> > crucial. The only things I think need to be in a summary are: explain\n> > vector notation in one or two sentences, note that everything is\n> > big-endian, and define \"opaque\" in one sentence. If we can get this bit of\n> > required knowledge up front, the rest is merely paperwork and can safely be\n> > stuck in the appendix. Seeing as we are aware of how frequently the vector\n> > notation is misunderstood, focusing on that up front feels like a needed\n> > improvement.\n> > \n> > I'm less sold about this, but it's an easy change once we get the rest\n> > straightened out if we decide it's a good idea.\n\nWhether or not it turns out to be worth doing will probably hinge on if we can put together a short summary that is sufficient. An alternative would be to rewrite it to be overall more concise, focus on the potentially misunderstood parts, and not going into as much verbosity on standard stuff like enums.  The whole section also feels over-subsectioned a bit (lots of tiny parts).\n",
          "createdAt": "2016-07-09T20:22:21Z",
          "updatedAt": "2016-07-09T20:22:21Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, just cutting the Application Data Protocol section and sticking those lines in the Record Layer section might be better. It's not really large or significant enough to be a section on its own.\n",
          "createdAt": "2016-07-09T20:37:54Z",
          "updatedAt": "2016-07-09T20:37:54Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 525,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY4NTY2Mzk=",
      "title": "Security analysis",
      "url": "https://github.com/tlswg/tls13-spec/pull/525",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Here is a first cut at the security properties, built on the big restructure.\n",
      "createdAt": "2016-07-09T20:43:43Z",
      "updatedAt": "2016-07-11T18:26:12Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "70234105b9cec37220a743993dd6a0faddbbb4d1",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "security_analysis",
      "headRefOid": "de286153c1f8ec5515a915e906c70d31add350b0",
      "closedAt": "2016-07-11T18:18:09Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Here's the GitHub branch diff link, just for ease of reading here:\nhttps://github.com/ekr/tls13-spec/compare/restructure...ekr:security_analysis\n",
          "createdAt": "2016-07-09T21:15:16Z",
          "updatedAt": "2016-07-09T21:15:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased now that I landed big restructure. This should be much easier to read.\n\n@tvdmerwe \n",
          "createdAt": "2016-07-10T17:53:37Z",
          "updatedAt": "2016-07-10T17:53:37Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bifurcation PTAL. I know this is incomplete but worth shipping as a first draft with -14\n",
          "createdAt": "2016-07-11T15:25:09Z",
          "updatedAt": "2016-07-11T15:25:09Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@wbl PTAL.\n",
          "createdAt": "2016-07-11T15:34:53Z",
          "updatedAt": "2016-07-11T15:34:53Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@wbl you happy?\n",
          "createdAt": "2016-07-11T18:09:18Z",
          "updatedAt": "2016-07-11T18:09:18Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yup.\n",
          "createdAt": "2016-07-11T18:12:27Z",
          "updatedAt": "2016-07-11T18:12:27Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged separately.\n",
          "createdAt": "2016-07-11T18:18:09Z",
          "updatedAt": "2016-07-11T18:18:09Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 526,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY4NzAyNzQ=",
      "title": "Remove duplicated article",
      "url": "https://github.com/tlswg/tls13-spec/pull/526",
      "state": "CLOSED",
      "author": "jwilk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Found using [mwic](http://jwilk.net/software/mwic).\n",
      "createdAt": "2016-07-10T10:51:13Z",
      "updatedAt": "2016-07-10T15:26:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2127d2b1295ef63416563d77137d4be4c9f0f954",
      "headRepository": null,
      "headRefName": "spelling",
      "headRefOid": "283cac3edfd0da7b2674db6a47037a7e96cba60f",
      "closedAt": "2016-07-10T15:26:56Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed in PR#524\n",
          "createdAt": "2016-07-10T15:26:56Z",
          "updatedAt": "2016-07-10T15:26:56Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 527,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY4NzYyNDI=",
      "title": "Refine rules for accepting 0-RTt. Fixes #451",
      "url": "https://github.com/tlswg/tls13-spec/pull/527",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-10T15:36:50Z",
      "updatedAt": "2016-07-10T15:42:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1f1f9ecfb1622d63b8383cef662299101079ba7a",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue451_0rtt_rules2",
      "headRefOid": "7eb5e7767756b950e611c32916e710f0e019e747",
      "closedAt": "2016-07-10T15:42:41Z",
      "mergedAt": "2016-07-10T15:42:41Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "70234105b9cec37220a743993dd6a0faddbbb4d1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 529,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY4NzcxNTA=",
      "title": "Clean up after big restructure",
      "url": "https://github.com/tlswg/tls13-spec/pull/529",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-10T16:16:05Z",
      "updatedAt": "2016-07-10T18:15:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "70234105b9cec37220a743993dd6a0faddbbb4d1",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "post_restructure_cleanup",
      "headRefOid": "6a6a31d5893f9717a19e3a3f3c0d9ca2fe137e4b",
      "closedAt": "2016-07-10T18:14:47Z",
      "mergedAt": "2016-07-10T18:14:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5e0e3a89a7dcf690ed28bc16bde1d65eb98e5cd6"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett you might want to take a look if you have time. Will merge this afternoon\n",
          "createdAt": "2016-07-10T17:55:01Z",
          "updatedAt": "2016-07-10T17:55:01Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "All LGTM.\n\nI'm doing a full read-through right now to hunt for editorial issues that have crept in over time, so I'll have a broader cleanups PR to submit a bit later, as well.\n",
          "createdAt": "2016-07-10T18:05:25Z",
          "updatedAt": "2016-07-10T18:05:25Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks. I did a read through myself but I'm sure more stuff has crept in as\nwell.\n\nOn Sun, Jul 10, 2016 at 11:05 AM, Dave Garrett notifications@github.com\nwrote:\n\n> All LGTM.\n> \n> I'm doing a full read-through right now to hunt for editorial issues that\n> have crept in over time, so I'll have a broader cleanups PR to submit a bit\n> later, as well.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/529#issuecomment-231602340, or mute\n> the thread\n> https://github.com/notifications/unsubscribe/ABD1oVcjUuAjiFOLIoh2bo_Vc_V-zf_Tks5qUTRmgaJpZM4JI3WJ\n> .\n",
          "createdAt": "2016-07-10T18:15:15Z",
          "updatedAt": "2016-07-10T18:15:15Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 530,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY4Nzc2MjE=",
      "title": "All alerts close the connection. Unknown alerts are failures. Fixes #472",
      "url": "https://github.com/tlswg/tls13-spec/pull/530",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-10T16:38:03Z",
      "updatedAt": "2016-07-11T02:54:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f75f15bb579400375567c65427acbf3602e7ce67",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue472_remove_nonfatal_alerts",
      "headRefOid": "342e9c48029895ce8559aaf300972e335be9ff05",
      "closedAt": "2016-07-11T02:54:38Z",
      "mergedAt": "2016-07-11T02:54:38Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "bd237c0492ace06b163de14505d3625c9d97df88"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben @richsalz PTAL\n",
          "createdAt": "2016-07-10T18:18:47Z",
          "updatedAt": "2016-07-10T18:18:47Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2016-07-10T19:38:52Z",
          "updatedAt": "2016-07-10T19:38:52Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "lgtm\n",
          "createdAt": "2016-07-11T02:47:25Z",
          "updatedAt": "2016-07-11T02:47:25Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 531,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY4NzgwNTg=",
      "title": "ChangeLog for -14",
      "url": "https://github.com/tlswg/tls13-spec/pull/531",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-10T16:57:37Z",
      "updatedAt": "2016-07-10T18:15:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "70234105b9cec37220a743993dd6a0faddbbb4d1",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "changelog_14",
      "headRefOid": "7847e3bd043d187dfe45ade8c59f546e30fd44c5",
      "closedAt": "2016-07-10T18:15:06Z",
      "mergedAt": "2016-07-10T18:15:06Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "99bc5fe2ce53197354f6d32d0065cb51e84b8417"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 532,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY4ODE1NTI=",
      "title": "cleanups",
      "url": "https://github.com/tlswg/tls13-spec/pull/532",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I've done a full read-through, so here's a pile of minor cleanups. There's lots of punctuation and capitalization consistency fixes, as well as a few slight wording fixes/changes and the usual bit of spacing fixes. I also flushed out a couple pitfall points slightly more. Nothing major.\n",
      "createdAt": "2016-07-10T19:34:22Z",
      "updatedAt": "2016-07-10T20:05:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "99bc5fe2ce53197354f6d32d0065cb51e84b8417",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "cleanups",
      "headRefOid": "c133bc94ff9f7991440449f8abd68d81a02b5d15",
      "closedAt": "2016-07-10T19:47:26Z",
      "mergedAt": "2016-07-10T19:47:26Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c133bc94ff9f7991440449f8abd68d81a02b5d15"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks. Very helpful. Also reassuring that someone just read the whole thing :)\n",
          "createdAt": "2016-07-10T19:48:03Z",
          "updatedAt": "2016-07-10T19:48:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 533,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY4ODIxOTQ=",
      "title": "trivial typo fix",
      "url": "https://github.com/tlswg/tls13-spec/pull/533",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Trivial cleanup of a cleanup of a cleanup. Yay typos. :p\n",
      "createdAt": "2016-07-10T20:04:53Z",
      "updatedAt": "2016-07-10T20:53:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6d4367f0947566ae6a375ba7c978294e46a9969c",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "ab136664df7e2cb893a58b2840b133217cf3489c",
      "closedAt": "2016-07-10T20:52:56Z",
      "mergedAt": "2016-07-10T20:52:56Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f75f15bb579400375567c65427acbf3602e7ce67"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 535,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY4OTk2NDU=",
      "title": "remove now redundant fatal alert language",
      "url": "https://github.com/tlswg/tls13-spec/pull/535",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As all error alerts are now considered fatal (PR #530), we no longer need \"This alert is always fatal\" explicitly stated everywhere in that section.\n",
      "createdAt": "2016-07-11T04:55:27Z",
      "updatedAt": "2016-07-11T16:11:30Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c5c2fdc597053ba676e7d7761bb394c3dd7dec9f",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "alwaysfatalerroralerts",
      "headRefOid": "889f5da9549b0bfcf3e9e9982bb3bf7e95eb7f9d",
      "closedAt": "2016-07-11T10:15:10Z",
      "mergedAt": "2016-07-11T10:15:10Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "21aa5df1f13507f48002527247573ebe786e7162"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 536,
      "id": "MDExOlB1bGxSZXF1ZXN0NzY5MDc4MTc=",
      "title": "Use definition lists more consistently",
      "url": "https://github.com/tlswg/tls13-spec/pull/536",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The definitions of terms didn't use a definition list.\n\nMost of the other definition lists didn't include any delimiter other than whitespace, which isn't clear in some renderings.\n\nThis fixes both of those.\n",
      "createdAt": "2016-07-11T07:04:09Z",
      "updatedAt": "2016-09-21T17:49:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c5c2fdc597053ba676e7d7761bb394c3dd7dec9f",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "reformat_conventions",
      "headRefOid": "2ca693a3314182a65828d37fe3623f0efa54dc24",
      "closedAt": "2016-09-21T17:49:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not sure about adding the colons. Something happened to the toolchain here; previous versions out-dented the term and then broke the line. I think rather than adding colons I'd rather go back to that style if I (or someone else) can figure out what we need to feed to cramdown\n",
          "createdAt": "2016-07-11T11:34:46Z",
          "updatedAt": "2016-07-11T11:34:46Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I may deal with this in a later editorial pass but this has bit rotted enough to not be something we could apply, so closing\n",
          "createdAt": "2016-09-21T17:49:54Z",
          "updatedAt": "2016-09-21T17:49:54Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 537,
      "id": "MDExOlB1bGxSZXF1ZXN0NzcwMjI2NTY=",
      "title": "Some editorial updates",
      "url": "https://github.com/tlswg/tls13-spec/pull/537",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "1. Code point values for Chacha/poly are no longer preliminary.\n2. Update the mail list info URL.\n",
      "createdAt": "2016-07-11T21:02:02Z",
      "updatedAt": "2016-07-11T21:18:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "97b493d2150dd249d70cb67be4bd200186e77571",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "25716f36ed88c6c12e63491e0f76b511b7193f8b",
      "closedAt": "2016-07-11T21:11:29Z",
      "mergedAt": "2016-07-11T21:11:29Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c6c2c1ccfd7e45da0665f8e4c364d24cc3452fd4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 541,
      "id": "MDExOlB1bGxSZXF1ZXN0NzcwNTkzNjg=",
      "title": "Use HTTPS link",
      "url": "https://github.com/tlswg/tls13-spec/pull/541",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Use HTTPS link for https://xml2rfc.tools.ietf.org/\n",
      "createdAt": "2016-07-12T04:18:09Z",
      "updatedAt": "2016-07-12T22:58:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c6c2c1ccfd7e45da0665f8e4c364d24cc3452fd4",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "0ae1f14581ff3f7ea239e94b4b54180f7b3cb4ed",
      "closedAt": "2016-07-12T12:02:55Z",
      "mergedAt": "2016-07-12T12:02:55Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "dba8ced9fd53e0da003d857351849d36438b6d28"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 542,
      "id": "MDExOlB1bGxSZXF1ZXN0NzcwNjI5Nzc=",
      "title": "minor update to preliminary assignment note",
      "url": "https://github.com/tlswg/tls13-spec/pull/542",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Noticed by Ilari Liusvaara on-list. Effective follow-up to PR #537. ChaCha/Poly is no longer preliminary, though ECDHE PSK AES still is.\n",
      "createdAt": "2016-07-12T05:23:22Z",
      "updatedAt": "2016-07-12T15:39:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c6c2c1ccfd7e45da0665f8e4c364d24cc3452fd4",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "cbb75c57ac30f7818fe4d57b0bc510722e4f8b8c",
      "closedAt": "2016-07-12T12:03:10Z",
      "mergedAt": "2016-07-12T12:03:10Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7a7605ca65a06c7e7c903b3e0a23a5ebaa9eba07"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 544,
      "id": "MDExOlB1bGxSZXF1ZXN0NzcxNTczNjk=",
      "title": "Remove server missing_extension requirements.",
      "url": "https://github.com/tlswg/tls13-spec/pull/544",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(This is orthogonal to whether alerts should be MUST or SHOULD. I've\nleft them as MUST for now.)\n\nWhile the client can reasonably send missing_extension in response to a\nServerHello which, say, selected an ECDHE cipher without key_share, the\nserver is in no such position. Such a requirement is unhelpful as a\nnatural implementation would have the same behavior (connection failed)\nanyway.\n\nSince servers already must account for some ciphers requiring ECDHE and\nsome not, a server may implement logic such as:\n\n```\necdheOk := tryToSelectAGroup(myList, clientList)\nfor cipher in serverCiphers {\n    if cipher not in clientCiphers {\n        continue\n    }\n    if isECDHE(cipher) and not ecdheOk {\n        continue\n    }\n    ... other checks, etc. ...\n    yay, I found a cipher\n}\nif no cipher was found {\n    send handshake_failure and close connection\n}\n```\n\nThere is no reason to ask a server to distinguish between the following\ncases, all of which will fail anyway:\n- The client sent only ECDHE ciphers I know about but did not send\n  key_share.\n- The client sent only ECDHE ciphers I know about but only key_shares I\n  don't implement.\n- The client sent only ECDHE ciphers, some of which I don't know about,\n  and did not send key_share.\n- The client sent ECDHE ciphers I know about and some PSK ciphers I\n  don't know about and did not send key_share.\n- The client sent only ECDHE ciphers, none of which I know about, and\n  did not send key_share.\n\nNotably, the some cases are not even distinguishable, even though the\nold text mandates different alerts for them. The only case we can\nreasonably send missing_extension for is the first, but this is an\nunhelpful special-case to mandate. It only adds complexity (the\nconnection will fail anyway), thus risking bugs.\n",
      "createdAt": "2016-07-12T17:23:40Z",
      "updatedAt": "2016-08-19T18:31:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7a7605ca65a06c7e7c903b3e0a23a5ebaa9eba07",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "unhelpful-missing-extension",
      "headRefOid": "5b683ca9fc02f854892041d425b80ae3233146c6",
      "closedAt": "2016-08-13T23:38:16Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ditching an alert warrants a mailing list discussion, rather than just filing a PR. Please propose this there.\n\nThe purpose of proper error reporting is to actually catch bugs and fix issues, rather than get a potentially useless reply that causes people to just avoid new versions. It is not a complex requirement to have implementations close connections with appropriate error codes rather than a generic one. If you wish to not keep track of why the handshake is failing, just reassess after actually hitting the error: If you'd normally do a handshake_failure and you found any cipher that looks like it might be viable, but the needed extension is not provided, then send the specific alert instead.\n",
          "createdAt": "2016-07-12T20:17:08Z",
          "updatedAt": "2016-07-12T20:17:08Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sure thing. Let's continue this on the list.\n",
          "createdAt": "2016-07-13T01:50:41Z",
          "updatedAt": "2016-07-13T01:50:41Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is mostly overtaken by the refactor of negotiation. @davidben please provide another PR for what is left if you want.\n",
          "createdAt": "2016-08-13T23:38:14Z",
          "updatedAt": "2016-08-13T23:38:14Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Nah, I think I'm good with the current state of missing_extensions. Actually the alert is basically gone by now.\n",
          "createdAt": "2016-08-19T18:31:01Z",
          "updatedAt": "2016-08-19T18:31:01Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 547,
      "id": "MDExOlB1bGxSZXF1ZXN0Nzc1Mjc1NzA=",
      "title": "Clarify that the key changes immediately at Finished.",
      "url": "https://github.com/tlswg/tls13-spec/pull/547",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(My impression from the list is that we're not doing post-handshake key separation. If I'm wrong and we are, this will need to be slightly tweaked. Anyway, the current state of the world is we don't do it, so I've worded it accordingly.)\n\n---\n\nAs the Finished message is an implicit ChangeCipherSpec, it's worth\nclarifying that this is the point at which the cipher state changes.\n\nShould an implementation not send half-RTT data, it may defer switching\ntraffic keys until both Finished messages have been exchanged. This will\nnot work well, as alerts sent in response to a bad client certificate\nwill be unreadable. The outgoing traffic keys must be switched early.\n",
      "createdAt": "2016-07-14T21:17:20Z",
      "updatedAt": "2016-07-14T21:51:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7a7605ca65a06c7e7c903b3e0a23a5ebaa9eba07",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "finished-clarify",
      "headRefOid": "88a35ed2274c1d64e26b087eec038fac5688a084",
      "closedAt": "2016-07-14T21:51:32Z",
      "mergedAt": "2016-07-14T21:51:32Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c02d9023a04b9bd68ec8e6db05e4e554b37c3597"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 548,
      "id": "MDExOlB1bGxSZXF1ZXN0Nzc3MDQzMTA=",
      "title": "ClientHello is sent in response to HelloRetryRequest",
      "url": "https://github.com/tlswg/tls13-spec/pull/548",
      "state": "MERGED",
      "author": "nharper",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-16T08:32:26Z",
      "updatedAt": "2016-07-16T08:48:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c02d9023a04b9bd68ec8e6db05e4e554b37c3597",
      "headRepository": "nharper/tls13-spec",
      "headRefName": "hello-retry-request",
      "headRefOid": "beddc81fcc72a50b4027bf825518cc3b1aaea19d",
      "closedAt": "2016-07-16T08:48:10Z",
      "mergedAt": "2016-07-16T08:48:10Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "71fe503ebb3607022637434aeefb56ac2ab8270d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 549,
      "id": "MDExOlB1bGxSZXF1ZXN0Nzc3MDQzNjk=",
      "title": "Require the CertificateRequest context to be empty in the handshake.",
      "url": "https://github.com/tlswg/tls13-spec/pull/549",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It's only useful during the handshake, so avoid forcing the client save\nthat field for the in-handshake version.\n",
      "createdAt": "2016-07-16T08:35:31Z",
      "updatedAt": "2016-08-13T23:52:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c02d9023a04b9bd68ec8e6db05e4e554b37c3597",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "empty-request-context",
      "headRefOid": "d14a55f6da45b99557c637bd6ac18a4843a93d5b",
      "closedAt": "2016-08-13T23:52:26Z",
      "mergedAt": "2016-08-13T23:52:26Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6c116be3008b86b28c0a711b73019b2236d9eee8"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I went back and forth on this, but on balance I think you're right.\n",
          "createdAt": "2016-08-13T23:52:24Z",
          "updatedAt": "2016-08-13T23:52:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 550,
      "id": "MDExOlB1bGxSZXF1ZXN0Nzc3MTEzNjA=",
      "title": "Fix typo in key schedule.",
      "url": "https://github.com/tlswg/tls13-spec/pull/550",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There may be messages between ClientHello and ServerHello\n(HelloRetryRequest and the second ClientHello), so use ... rather than\n+.\n",
      "createdAt": "2016-07-16T14:56:25Z",
      "updatedAt": "2016-07-20T08:29:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "71fe503ebb3607022637434aeefb56ac2ab8270d",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "clienthello-dot-dot",
      "headRefOid": "a571ec1575d9c0dfc649c1e44821fa9b2c23da94",
      "closedAt": "2016-07-20T08:29:39Z",
      "mergedAt": "2016-07-20T08:29:39Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ef8e5c59d9bdede9029c1cf6f33fabbf4fd58c65"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 552,
      "id": "MDExOlB1bGxSZXF1ZXN0Nzc3NjMxMTE=",
      "title": "Tweak NewSessionTicket lower bounds.",
      "url": "https://github.com/tlswg/tls13-spec/pull/552",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In TLS 1.2, empty tickets were used for the server to change its mind\nabout sending a ticket after committing to it in ServerHello:\n\n> If the server determines that it does not want to include a\n> ticket after it has included the SessionTicket extension in the\n> ServerHello, then it sends a zero-length ticket in the\n> NewSessionTicket handshake message.\n\nThis is not useful in TLS 1.3 where a server could decline to send a\nticket at all, so don't allow 0. (Fields tend to specify whether empty\nvalues are allowed.)\n\nAlso lower the minimum NewSessionTicket.extensions size from 2 to 0.\nSince we haven't defined any TicketExtensionTypes at all, it probably\nshould be allowed to be empty.\n",
      "createdAt": "2016-07-18T06:10:20Z",
      "updatedAt": "2016-07-18T06:35:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "71fe503ebb3607022637434aeefb56ac2ab8270d",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "empty-ticket",
      "headRefOid": "854458d4a8b67afdc96ed151b447ac83e7fd8cd2",
      "closedAt": "2016-07-18T06:35:31Z",
      "mergedAt": "2016-07-18T06:35:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "11b9a9343033bda0fc63bec884da42e9a658b887"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 554,
      "id": "MDExOlB1bGxSZXF1ZXN0NzgwNTgzODY=",
      "title": "Fix typo in Key Exchange Messages",
      "url": "https://github.com/tlswg/tls13-spec/pull/554",
      "state": "MERGED",
      "author": "FiloSottile",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-19T22:11:48Z",
      "updatedAt": "2016-07-19T22:15:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "11b9a9343033bda0fc63bec884da42e9a658b887",
      "headRepository": null,
      "headRefName": "patch-4",
      "headRefOid": "bfe88f884384f353dc1982fc1e4ccde82c3115b0",
      "closedAt": "2016-07-19T22:15:28Z",
      "mergedAt": "2016-07-19T22:15:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3d0c4b33b1b384060f7a223d858b712341502976"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 557,
      "id": "MDExOlB1bGxSZXF1ZXN0Nzg1OTQxOTg=",
      "title": "Improve the guidance around supporting TLS 1.2",
      "url": "https://github.com/tlswg/tls13-spec/pull/557",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The document was pretty crisp about the version downgrade protections, but\nwas less good about the changes to signature schemes.  I have made a few\nchanges to the description of signature_algorithms that should improve that.\nIn particular, I have made it clear that the RSASSA-PSS codepoints are also\ndefined for TLS 1.2 and that they can be used there.  That means that TLS\n1.3 implementations need to be prepared to accept PSS signatures.\n\nThis also adds a section that points to the pieces that 1.2 implementations\nneed to consider.\n",
      "createdAt": "2016-07-24T09:42:35Z",
      "updatedAt": "2016-08-13T23:58:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ef8e5c59d9bdede9029c1cf6f33fabbf4fd58c65",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "pss12",
      "headRefOid": "772723b99abb00c8e4558294ff6e5c24d46cd31e",
      "closedAt": "2016-08-13T23:58:15Z",
      "mergedAt": "2016-08-13T23:58:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f488dc00f54d54426715d12429116cee64067b4c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 559,
      "id": "MDExOlB1bGxSZXF1ZXN0Nzg2NzI0NzQ=",
      "title": "WIP: Refactor negotiation as discussed in Berlin",
      "url": "https://github.com/tlswg/tls13-spec/pull/559",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is just a WIP and needs review.\n\n@martinthomson @grittygrease @davidben PTAL.\n\n@davidben: I know you don't like the indication from the server but would like your opinion on other aspects.\n",
      "createdAt": "2016-07-25T12:27:07Z",
      "updatedAt": "2016-08-29T12:06:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "31fa4aaa7bafe449949c1a5ceb5da38a1117354c",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "WIP_refactor_negotiation",
      "headRefOid": "25b6e23b851907b4a4cd0043caeac00f33bb59c1",
      "closedAt": "2016-08-13T23:34:41Z",
      "mergedAt": "2016-08-13T23:34:41Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "25ace365d87179658aa6bb1b7b293bf62fd3ea32"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson @davidben ptal\n",
          "createdAt": "2016-07-28T11:39:02Z",
          "updatedAt": "2016-07-28T11:39:02Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "CONTRIBUTOR",
          "body": "could we change NamedGroup to be called KeyExchangeAlgorithm instead. It seems like that's what it technically is after this change and will allow us to support other kinds of exchanges in the future like Post quantum algorithms in a more semantically friendly way than calling them a \"named group\"\n",
          "createdAt": "2016-08-06T00:41:16Z",
          "updatedAt": "2016-08-06T00:41:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben @martinthomson I changed the server's indicator to be SignatureAlgorithms. PTAL.\n",
          "createdAt": "2016-08-12T00:39:03Z",
          "updatedAt": "2016-08-12T00:39:03Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "P.S. Also removed the server signing with PSK mode. Will move that to a separate PR.\n",
          "createdAt": "2016-08-12T00:40:56Z",
          "updatedAt": "2016-08-12T00:40:56Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 561,
      "id": "MDExOlB1bGxSZXF1ZXN0Nzg2ODc2MDU=",
      "title": "Rename various version fields.",
      "url": "https://github.com/tlswg/tls13-spec/pull/561",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "From the past three times we've bumped the version, reality has\nunequivocally told us that the TLS version negotiation, as described in\nprevious specifications, has been a collossal failure.\n\nThe working group decided not to replace the mechanism with a more\nsustainable one, so do the next best thing in trying to save TLS from\nitself. If the fields are renamed to what they actually are\n('server_version' is the true version and 'client_version' is a\nmaximum), then perhaps we'll have some hope of future implementors\ngetting it right, if we ever clear through the prior iterations of the\nbug.\n\nWhile I'm here, remove the mention of 'The protocol version the current\nrecord is compatible with' for record_version. record_version is purely\nvestigial.\n",
      "createdAt": "2016-07-25T14:09:50Z",
      "updatedAt": "2016-08-13T23:50:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "31fa4aaa7bafe449949c1a5ceb5da38a1117354c",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "rename-client-version",
      "headRefOid": "82f0b35b6115753f784f0310680e2c5c03943e55",
      "closedAt": "2016-08-13T23:50:20Z",
      "mergedAt": "2016-08-13T23:50:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "82f0b35b6115753f784f0310680e2c5c03943e55"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1\n",
          "createdAt": "2016-07-25T16:04:05Z",
          "updatedAt": "2016-07-25T16:04:05Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This sounds like a good idea, however for the server version I'd go with \"negotiated_version\" to be more precise. For \"record_version\", we could also extend the \"legacy\" prefix convention we've started using and change it to \"legacy_record_version\" to remind that it's a deprecated field.\n",
          "createdAt": "2016-07-25T17:43:10Z",
          "updatedAt": "2016-07-25T17:43:10Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> negotiated_version\n\nHrm. We don't name other fields like ServerHello.negotiated_cipher_suite and such. Though if we wanted to be consistent with those fields, it should be ClientHello.max_version rather than ClientHello.max_supported_version. Dunno, maybe that would be better... max_supported_version is a bit wordy.\n\n(Though I do think breaking pattern on the ClientHello version is justified because that field is already inconsistent with everything else in TLS. The version is the only place where the client doesn't offer a list, so everything else already self-describes as a \"pick one of these\" type of field.)\n\n> legacy_record_version.\n\nDone.\n",
          "createdAt": "2016-07-26T11:30:06Z",
          "updatedAt": "2016-07-26T11:30:06Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 562,
      "id": "MDExOlB1bGxSZXF1ZXN0NzkxMTY0NTc=",
      "title": "Don't talk about rolling your own PRNG",
      "url": "https://github.com/tlswg/tls13-spec/pull/562",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Instead, talk about not rolling your own PRNG.  This document is\nnot the place to discuss how to do so, and RFC 40986 is a fine reference.\n",
      "createdAt": "2016-07-27T23:44:05Z",
      "updatedAt": "2016-07-28T07:53:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "31fa4aaa7bafe449949c1a5ceb5da38a1117354c",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "master",
      "headRefOid": "505d9a419c6e61ccaa9b20cf9b3d3ab1639b1b25",
      "closedAt": "2016-07-28T07:53:41Z",
      "mergedAt": "2016-07-28T07:53:41Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9ac62abc15266a9ee254691c92d99f6a6d5ec045"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Cleaning up the very old info here is in the list in issue #543.\n\nThis PR looks good to me. Recommending implementers to not reinvent the wheel is better than trying to cram anything useful in here, and we already reference RFC4086.\n",
          "createdAt": "2016-07-27T23:54:07Z",
          "updatedAt": "2016-07-27T23:54:07Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 563,
      "id": "MDExOlB1bGxSZXF1ZXN0NzkxOTk3MDY=",
      "title": "extension name is \"Supported Groups\", not \"Named Group\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/563",
      "state": "MERGED",
      "author": "dkg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We have a registry called \"supported groups\", and the extension is\n\"supported groups\"; but each element is called a \"named group\" and the\ndata passed in the extension is a \"named group list\".  be consistent\nin our terminology.\n",
      "createdAt": "2016-07-28T13:53:52Z",
      "updatedAt": "2016-08-13T23:38:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9ac62abc15266a9ee254691c92d99f6a6d5ec045",
      "headRepository": "dkg/tls13-spec",
      "headRefName": "groups-extension",
      "headRefOid": "a9d250ffb0c9ca41c83dfd4b9a509e4eef45ea18",
      "closedAt": "2016-08-13T23:38:33Z",
      "mergedAt": "2016-08-13T23:38:33Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c960e7d3fc181cfa78546e611557fb482f999516"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 564,
      "id": "MDExOlB1bGxSZXF1ZXN0NzkyMDY4Nzc=",
      "title": "Formatting fix: section D.2",
      "url": "https://github.com/tlswg/tls13-spec/pull/564",
      "state": "MERGED",
      "author": "tmshort",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Outdent \"Make Forward security after key change.\" paragraph.\n",
      "createdAt": "2016-07-28T14:34:20Z",
      "updatedAt": "2016-07-28T21:56:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9ac62abc15266a9ee254691c92d99f6a6d5ec045",
      "headRepository": "tmshort/tls13-spec",
      "headRefName": "master",
      "headRefOid": "4b93b4d7b67d50e935b861c48bd1ffba7fd2a836",
      "closedAt": "2016-07-28T21:56:28Z",
      "mergedAt": "2016-07-28T21:56:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c88d8ab1c5f120eeb85537bd1f8aef954ed6cf83"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 565,
      "id": "MDExOlB1bGxSZXF1ZXN0NzkyMDk4NjM=",
      "title": "Forbid post-handshake handshake/application interleave.",
      "url": "https://github.com/tlswg/tls13-spec/pull/565",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "No sender could possibly need to send half of a message interleaved with\napplication data in TLS, so forbid this. This cuts down on the\nstate-space a receiver needs to worry about.\n\nThis also means one cannot force the peer to buffer all but one byte of\na giant post-handshake message, and then never complete it for the\nlifetime of the connection. (Although it does not remove all\nsteady state buffering DoS-type concerns.)\n",
      "createdAt": "2016-07-28T14:50:41Z",
      "updatedAt": "2016-08-13T23:36:59Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9ac62abc15266a9ee254691c92d99f6a6d5ec045",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "forbid-interleave",
      "headRefOid": "355b2be6f9ab1f3dad4c5e562fdffbd5df8a1d4e",
      "closedAt": "2016-08-13T23:36:58Z",
      "mergedAt": "2016-08-13T23:36:58Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f642d94894714be051aa317ad9710b837d5deff6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 566,
      "id": "MDExOlB1bGxSZXF1ZXN0NzkyMTI0MDI=",
      "title": "Codify receiver obligations on epoch changes.",
      "url": "https://github.com/tlswg/tls13-spec/pull/566",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "TLS is stuck with the legacy of a layer of indirection between messages\nand records. This means that message boundaries and record boundaries\nneed not be correlated at all, which has historically been the cause of\nbugs.\n\nAmong other problems, correlating messages with key changes is subtle.\nReceivers MUST ensure that there is no buffered handshake data cross\nrecord boundaries. Otherwise one can inject prefixes authenticated under\none epoch into another. Write down these rules.\n\nNote: the spelling of these rules is very TLS-centric. DTLS will need a\nvery different spelling of the rules. (It's not as straight-forward as\nrecord boundaries. One must make sure there is no partial message data\nbeyond the current message.) Since DTLS 1.3 does not exist yet, I've\nleft that alone. We should extract a common \"transport\" or \"dispatch\"\nlayer interface between DTLS/TLS for the protocol to sit on top of for\nthat.\n",
      "createdAt": "2016-07-28T15:03:51Z",
      "updatedAt": "2016-08-17T21:37:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9ac62abc15266a9ee254691c92d99f6a6d5ec045",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "clarify-key-change",
      "headRefOid": "f58b4f96752440f3e72822d307841aefeaff789e",
      "closedAt": "2016-08-17T21:37:55Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What should the receiver do if the message does not end on a record boundary?\n",
          "createdAt": "2016-07-28T15:44:53Z",
          "updatedAt": "2016-07-28T15:44:53Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Shut down the connection. Will add a sentence. (Not sure if we should say which alert. There's a lot of different implementation strategies for this sort of thing, particularly once DTLS is involved. Some cases naturally hit one set of alerts and some others.)\n\nEdit: Hrm, actually it seems TLS records are coarse enough that we can probably get away with saying `unexpected_message`. I'll just do that. I don't want to deal with yet another pointless argument about alert values.\n",
          "createdAt": "2016-07-28T16:24:09Z",
          "updatedAt": "2016-07-28T16:27:32Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks.\n",
          "createdAt": "2016-07-28T16:38:13Z",
          "updatedAt": "2016-07-28T16:38:13Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with these requirements, but I think I would prefer to have a single requirement that any time a key changes you must align rather than have boilerplate. Would you like to take a stab at that or should I?\n",
          "createdAt": "2016-08-13T23:42:39Z",
          "updatedAt": "2016-08-13T23:42:39Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 567,
      "id": "MDExOlB1bGxSZXF1ZXN0NzkyMzQyMTM=",
      "title": "Supply guidance on the magnitude of replay window",
      "url": "https://github.com/tlswg/tls13-spec/pull/567",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just saying \"small allowance\" is not very clear, so supply some\nconcrete text with an arbitrarily selected value for discussion.\n\nSome (but not much) previous discussion in the vicinity of https://www.ietf.org/mail-archive/web/tls/current/msg20566.html\n",
      "createdAt": "2016-07-28T17:16:54Z",
      "updatedAt": "2016-08-17T21:08:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "35af4add08994be462a9871ba77d15fe26612540",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "master",
      "headRefOid": "d284d53ef1662bc8596c5c19fcf9b74a68d9f9c8",
      "closedAt": "2016-08-17T21:08:54Z",
      "mergedAt": "2016-08-17T21:08:54Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7ec69218026f56068477857c1de82e2407fbfa53"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See also issue #543 \n",
          "createdAt": "2016-07-28T17:24:59Z",
          "updatedAt": "2016-07-28T17:24:59Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not sure that tens of seconds is good advice.  It's certainly larger than I had imagined for a general purpose server.\n\nIf we accept that clock drift is in the order of seconds per day, then single-digit seconds is probably OK.\n\nYou don't need to have a high rate of 0-RTT success toward the end of the ticket validity period (1 week), you only need to ensure that most users get 0-RTT if they come back a short time (measured in hours) after the initial session.\n",
          "createdAt": "2016-08-01T06:38:35Z",
          "updatedAt": "2016-08-01T06:38:35Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The reference point was the 15 seconds that Ilari had used (but still seemed large to me).\nIt is still unclear to me what metric we actually want to use to bound the replay window (i.e., whether it is guided by clock rate skew, RTT, absolute time, or something else), so this text is mostly just a discussion starter.  Is one second too small?\n",
          "createdAt": "2016-08-01T13:20:40Z",
          "updatedAt": "2016-08-01T13:20:40Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I updated the text some (and rebased); hopefully it is an improvement.\n",
          "createdAt": "2016-08-17T15:18:51Z",
          "updatedAt": "2016-08-17T15:18:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 568,
      "id": "MDExOlB1bGxSZXF1ZXN0NzkzMDc1ODA=",
      "title": "draft-ietf-tls-cached-info is now RFC 7924",
      "url": "https://github.com/tlswg/tls13-spec/pull/568",
      "state": "CLOSED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "draft-ietf-tls-cached-info is now [RFC 7924](https://tools.ietf.org/html/rfc7924). Update the reference.\n",
      "createdAt": "2016-07-29T05:10:41Z",
      "updatedAt": "2016-08-14T03:34:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c88d8ab1c5f120eeb85537bd1f8aef954ed6cf83",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "144a4c578ec900674bf4c53ef718b2a2ea185f12",
      "closedAt": "2016-08-14T00:03:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Failed due to `404 Not Found while fetching http://unicorn-wg.github.io/idrefs/bibxml/reference.RFC.7924.xml`\n",
          "createdAt": "2016-07-29T05:20:08Z",
          "updatedAt": "2016-07-29T05:20:08Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand\n",
          "createdAt": "2016-08-14T00:03:47Z",
          "updatedAt": "2016-08-14T00:03:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 569,
      "id": "MDExOlB1bGxSZXF1ZXN0NzkzNzYzMDY=",
      "title": "Remove references to the disallowed status_request",
      "url": "https://github.com/tlswg/tls13-spec/pull/569",
      "state": "CLOSED",
      "author": "FiloSottile",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-29T15:17:10Z",
      "updatedAt": "2016-08-17T21:08:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c88d8ab1c5f120eeb85537bd1f8aef954ed6cf83",
      "headRepository": null,
      "headRefName": "patch-5",
      "headRefOid": "bd8981e25d43259622cd3220d67f7a89f266538f",
      "closedAt": "2016-08-17T21:08:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "FiloSottile",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I assumed the behavior from the \"TLS 1.3: No\" entry in the extensions table. However this means that browsers will have to send both status_request and status_request_v2 in all CH for a while. Do we want that?\n",
          "createdAt": "2016-07-29T15:21:18Z",
          "updatedAt": "2016-07-29T15:21:18Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we want browsers sending both for a while, for maximal compatibility, yes.\n\nI a little bit wonder if it's worth having text about \"when TLS 1.3 is negotiated\", for servers that support both 1.2 and 1.3, but I think we generally don't do that and it's generally the right thing to (not) do.\n",
          "createdAt": "2016-08-01T13:56:19Z",
          "updatedAt": "2016-08-01T13:56:19Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This was an error on my part. Both are still allowed.\n",
          "createdAt": "2016-08-17T21:08:13Z",
          "updatedAt": "2016-08-17T21:08:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 570,
      "id": "MDExOlB1bGxSZXF1ZXN0Nzk0MzYxNTE=",
      "title": "0-RTT API considerations",
      "url": "https://github.com/tlswg/tls13-spec/pull/570",
      "state": "MERGED",
      "author": "wbl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-29T22:58:32Z",
      "updatedAt": "2016-08-13T23:43:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c88d8ab1c5f120eeb85537bd1f8aef954ed6cf83",
      "headRepository": "wbl/tls13-spec",
      "headRefName": "privacy",
      "headRefOid": "f9a09bbbb87783db2a5b2bcd4fa4a7f51887a811",
      "closedAt": "2016-08-13T23:43:02Z",
      "mergedAt": "2016-08-13T23:43:02Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6f7272c096682a29583803fcd8c9e41151654122"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 575,
      "id": "MDExOlB1bGxSZXF1ZXN0ODAwODYwNzg=",
      "title": "Tidy up some client-sent handshake_failure alerts.",
      "url": "https://github.com/tlswg/tls13-spec/pull/575",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Noticed these while reviewing the negotiation PR:\n\n---\n\nhandshake_failure means \"the sender was unable to negotiate an\nacceptable set of security parameters given the options available\", but\nthese are all protocol errors that should only occur with a buggy\nserver. Switch them to more appropriate ones:\n- If the HelloRetryRequest makes no sense, it is an illegal_parameter.\n- If we get a second HelloRetryRequest, it's an unexpected_message (the\n  client is in a state where it expects a ServerHello and will likely\n  just fall through to the generic message-mismatch codepath).\n- If HelloRetryRequest and ServerHello are inconsistent, it is an\n  illegal_parameter.\n- If an anonymous server sends a CertificateRequest, it's an\n  unexpected_message (this too will likely use the generic\n  message-mismatch codepath).\n",
      "createdAt": "2016-08-04T14:17:12Z",
      "updatedAt": "2016-08-13T23:46:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c88d8ab1c5f120eeb85537bd1f8aef954ed6cf83",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "client-alerts",
      "headRefOid": "20434a18a12b21b8e77ce9243dac1f88c8c32ab2",
      "closedAt": "2016-08-13T23:46:31Z",
      "mergedAt": "2016-08-13T23:46:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "20434a18a12b21b8e77ce9243dac1f88c8c32ab2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 576,
      "id": "MDExOlB1bGxSZXF1ZXN0ODA1NDg3MjI=",
      "title": "Fix typos in key schedule",
      "url": "https://github.com/tlswg/tls13-spec/pull/576",
      "state": "MERGED",
      "author": "nharper",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-08-09T01:33:27Z",
      "updatedAt": "2016-08-13T23:35:05Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c88d8ab1c5f120eeb85537bd1f8aef954ed6cf83",
      "headRepository": "nharper/tls13-spec",
      "headRefName": "fix-typos",
      "headRefOid": "a7181223ce249baad70450730c594338bd966b7a",
      "closedAt": "2016-08-13T23:35:05Z",
      "mergedAt": "2016-08-13T23:35:05Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6e766b1dd388b5bd134d9a1fd668bd592e5abc62"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 578,
      "id": "MDExOlB1bGxSZXF1ZXN0ODEyMzAwMjE=",
      "title": "Go back to canonical refs",
      "url": "https://github.com/tlswg/tls13-spec/pull/578",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-08-13T23:56:57Z",
      "updatedAt": "2016-08-14T00:00:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6c116be3008b86b28c0a711b73019b2236d9eee8",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "canonical_refs",
      "headRefOid": "3f2f5828614903d7ec49b877b5f8240f8d12e52b",
      "closedAt": "2016-08-14T00:00:47Z",
      "mergedAt": "2016-08-14T00:00:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b363035cf8dfcf707968c48af6d7c135d9b08c8a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 579,
      "id": "MDExOlB1bGxSZXF1ZXN0ODEyNjg3NDU=",
      "title": "status_request is Encrypted",
      "url": "https://github.com/tlswg/tls13-spec/pull/579",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think that this was just an error.  `status_request` is mentioned elsewhere in the text and seemingly permitted.\n",
      "createdAt": "2016-08-15T04:18:22Z",
      "updatedAt": "2016-08-17T01:26:59Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d4914d0aaf18e88a3df175faf37bc105dbeee2f6",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "status_request",
      "headRefOid": "950e830f8e55825ff169a8bd68f5d1e31f590ab5",
      "closedAt": "2016-08-17T01:26:59Z",
      "mergedAt": "2016-08-17T01:26:59Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ea950c0149d096d1e547b624dbda5dce220c7df5"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Somehow I had the sense that you can send status_request if you are willing to negotiate a lower version, but if 1.3 is negotiated status_request cannot be returned by the server (only status_request_v2).\n\nBut, if you encrypt it in your 1.3 ClientHello, the 1.2-only server you might be talking to wouldn't be able to handle it ... so, contingent on the above, this doesn't seem to make sense.\n",
          "createdAt": "2016-08-15T16:33:59Z",
          "updatedAt": "2016-08-15T16:33:59Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Encrypted means encrypted by the server, not the client. There are no client-encrypted extensions.\n\nNo one currently implements status_request_v2 that I know of, and I don't see much reason to tie v2 and TLS 1.3 together, so +1 from me on this change.\n",
          "createdAt": "2016-08-15T19:07:02Z",
          "updatedAt": "2016-08-15T19:07:02Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oops, sorry for being confused.\n",
          "createdAt": "2016-08-15T19:22:06Z",
          "updatedAt": "2016-08-15T19:22:06Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 580,
      "id": "MDExOlB1bGxSZXF1ZXN0ODE0MDExOTY=",
      "title": "KeyUpdate message: add receive_generation field",
      "url": "https://github.com/tlswg/tls13-spec/pull/580",
      "state": "CLOSED",
      "author": "keithw",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Rebased version of #426 \n",
      "createdAt": "2016-08-16T01:15:31Z",
      "updatedAt": "2016-08-27T21:04:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d4914d0aaf18e88a3df175faf37bc105dbeee2f6",
      "headRepository": "keithw/tls13-spec",
      "headRefName": "keyupdate-generation",
      "headRefOid": "608ed4cca7cd66c9d640f3842feaeff68d7be45d",
      "closedAt": "2016-08-27T21:04:45Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner can the chairs bring this discussion to a close\n",
          "createdAt": "2016-08-27T21:04:45Z",
          "updatedAt": "2016-08-27T21:04:45Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 581,
      "id": "MDExOlB1bGxSZXF1ZXN0ODE3MTg1Nzk=",
      "title": "Key updates",
      "url": "https://github.com/tlswg/tls13-spec/pull/581",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-08-17T21:18:41Z",
      "updatedAt": "2016-08-17T21:22:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b3949e1eb469c5ca2380ebf1848214a245008b68",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "key_updates",
      "headRefOid": "b554f632e4b05864d34571e8500397b2134eb1a3",
      "closedAt": "2016-08-17T21:22:34Z",
      "mergedAt": "2016-08-17T21:22:34Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "47d8bf40fcca34abf97d4917713bfba475737686"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben PTAL quickly.\n",
          "createdAt": "2016-08-17T21:19:31Z",
          "updatedAt": "2016-08-17T21:19:31Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1\n",
          "createdAt": "2016-08-17T21:20:26Z",
          "updatedAt": "2016-08-17T21:20:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 582,
      "id": "MDExOlB1bGxSZXF1ZXN0ODE3NDYyOTg=",
      "title": "Update reference",
      "url": "https://github.com/tlswg/tls13-spec/pull/582",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "draft-ietf-tls-negotiated-ff-dhe is now RFC 7919.\ndraft-mattsson-tls-ecdhe-psk-aead is now draft-ietf-tls-ecdhe-psk-aead.\n",
      "createdAt": "2016-08-18T02:04:23Z",
      "updatedAt": "2016-08-19T20:04:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "63439b99ec6b7c831aedcb7a8cc9f4a0710c9fd5",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "0eab5378a28785fba2b336fb4dee7b7e96db2502",
      "closedAt": "2016-08-19T15:43:19Z",
      "mergedAt": "2016-08-19T15:43:19Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "da88ae07037604d2909a8b7b00bf66a1c0455700"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Do we even need a reference to draft-ietf-tls-ecdhe-psk-aead with the new negotiation syntax?\n",
          "createdAt": "2016-08-18T03:40:19Z",
          "updatedAt": "2016-08-18T03:40:19Z"
        },
        {
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson I removed it from the reference section. It was used in previous versions. But it is no longer referenced to by any text in the spec since version 15.\n",
          "createdAt": "2016-08-18T04:20:55Z",
          "updatedAt": "2016-08-18T04:20:55Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 583,
      "id": "MDExOlB1bGxSZXF1ZXN0ODE3NjI0Mjk=",
      "title": "Move HelloRetryRequest.selected_group to an extension.",
      "url": "https://github.com/tlswg/tls13-spec/pull/583",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Gave writing this up a go. It might need further refining though. (Not sure if the lack of definition for random ServerHello extensions is sufficient to imply, e.g., thou shalt not send sigalgs in HRR. Although arguably this was a problem in the original version too.)\n\n---\n\nThis avoids the problems around the interaction with other\nHelloRetryRequest reasons (see issue #560). Instead, all problems are\nextensions and the rules are simply:\n- A HelloRetryRequest must contain at least one extension.\n- If a selected_group extension is present, it must not be a no-op.\n- Future HRR xtns can define their own rules and modifications to the\n  ClientHello.\n\nAlso clarify the intent that the old ClientHello be computable from the\nnew one.\n",
      "createdAt": "2016-08-18T06:21:45Z",
      "updatedAt": "2016-08-27T20:37:24Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "63439b99ec6b7c831aedcb7a8cc9f4a0710c9fd5",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "hrr-xtns",
      "headRefOid": "ffff0c5c1afe44191939d1651a55ce0c669d2211",
      "closedAt": "2016-08-27T20:37:24Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that we also need to change the IANA considerations for extensions to include a new column: HRR.  This will indicate if the extension is defined as being valid for inclusion in HelloRetryRequest.\n",
          "createdAt": "2016-08-18T06:51:04Z",
          "updatedAt": "2016-08-18T06:51:04Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I think that we also need to change the IANA considerations for extensions to include a new column: HRR. This will indicate if the extension is defined as being valid for inclusion in HelloRetryRequest.\n\nDone.\n",
          "createdAt": "2016-08-18T14:26:48Z",
          "updatedAt": "2016-08-18T14:26:48Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand\n",
          "createdAt": "2016-08-27T20:37:24Z",
          "updatedAt": "2016-08-27T20:37:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 584,
      "id": "MDExOlB1bGxSZXF1ZXN0ODIwMjUyNzg=",
      "title": "Fix typo in cipher suite naming convention.",
      "url": "https://github.com/tlswg/tls13-spec/pull/584",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "One 'TLS13_' prefix snuck by.\n",
      "createdAt": "2016-08-19T18:34:02Z",
      "updatedAt": "2016-08-19T21:52:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "da88ae07037604d2909a8b7b00bf66a1c0455700",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "cipher-suite-typo",
      "headRefOid": "21f940801b015d91fe9bd78cce6fa2b57b8faeef",
      "closedAt": "2016-08-19T21:52:35Z",
      "mergedAt": "2016-08-19T21:52:35Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1640e2eb8af0f6f1bc480b88ce49eca19742da92"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 585,
      "id": "MDExOlB1bGxSZXF1ZXN0ODIxMTA0MzQ=",
      "title": "Downgrade a SHA-1 ordering requirement from MUST to SHOULD.",
      "url": "https://github.com/tlswg/tls13-spec/pull/585",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Alas, it turns out that not only are there plenty of servers incapable\nof signing anything but SHA-1, but there are bugs in signature algorithm\nprocessing. Specifically, older versions of NSS have the following bug:\n\n   https://bugzilla.mozilla.org/show_bug.cgi?id=1119983\n\nAffected versions will:\n\na) Refuse to sign anything but SHA-1. (Type mismatch between\n   HashAlgorithm and internal OID identifier.)\n\nb) Require that the SHA-1-based algorithm appear in the first N sigalg\n   entries, where N is the number of sigalg entries that begin with a\n   HashAlgorithm that NSS knows how to parse. (Mistake in appending to\n   an array.)\n\nThe upshot is, with SHA-1 at the end, advertising new algorithms like\nrsa_pss_sha256 or ed25519 will break those servers. This bug does not\nappear very common (I found 35 hosts in a probe of the Alexa top 1m\nlist), but it is difficult to predict these things ahead of time. At\nleast one affected piece of software targets enterprise customers (it\nbundles a copy of NSS), where outdated software is prevalent and\nvisibility nil.\n\nTo avoid tying our hands should we need ugly workarounds, downgrade MUST\nto SHOULD. RSASSA-PKCS1-v1_5 is forbidden in TLS 1.3 anyway, so while\nadvertising rsa_pkcs1_\\* at the front would be poor, it shouldn't have\nserious adverse effects.\n\n(Note that version-intolerance is many orders magnitude higher, so this\nwill not save us from the fallback on its own. Nonetheless, even with a\nfallback, it is simpler if the signature algorithms list could\neventually be kept constant between TLS 1.2 and TLS 1.3.)\n",
      "createdAt": "2016-08-21T16:53:29Z",
      "updatedAt": "2016-08-30T18:19:04Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1640e2eb8af0f6f1bc480b88ce49eca19742da92",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "sha1-must-should",
      "headRefOid": "fec540539cc15b168884078d834f2fff1d6f2b61",
      "closedAt": "2016-08-30T18:19:04Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I say we just let those servers be broken and avoid this change.\n",
          "createdAt": "2016-08-21T23:04:00Z",
          "updatedAt": "2016-08-21T23:04:00Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, I was intending to see if we could break them first, but I didn't want to find out too late that we can't. I'm mostly worried about some over-eager server deciding actually enforce this MUST on clients.\n\nIf the WG is willing to consider the RSA-PSS numbers fixed, we can possibly try to ship them in Chrome quickly with an emergency field trial off switch. But even then I won't get information back on problematic enterprise stuff for a while. They by and large only run the stable channel.\n",
          "createdAt": "2016-08-21T23:17:11Z",
          "updatedAt": "2016-08-21T23:17:11Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Sunday, August 21, 2016 12:53:32 pm David Benjamin wrote:\n\n> Alas, it turns out that not only are there plenty of servers incapable\n> of signing anything but SHA-1, but there are bugs in signature algorithm\n> processing. Specifically, older versions of NSS have the following bug:\n> \n>    https://bugzilla.mozilla.org/show_bug.cgi?id=1119983\n> \n> Affected versions will:\n> \n> a) Refuse to sign anything but SHA-1. (Type mismatch between\n>    HashAlgorithm and internal OID identifier.)\n> \n> b) Require that the SHA-1-based algorithm appear in the first N sigalg\n>    entries, where N is the number of sigalg entries that begin with a\n>    HashAlgorithm that NSS knows how to parse. (Mistake in appending to\n>    an array.)\n\nEven allowing SHA-1 in the list at all was a compromise for backwards compatibility with old broken junk. Attempting to bend over backwards to work around something this broken is a bad idea. At some point, a bug has to break things.\n\n> The upshot is, with SHA-1 at the end, advertising new algorithms like\n> rsa_pss_sha256 or ed25519 will break those servers. This bug does not\n> appear very common (I found 35 hosts in a probe of the Alexa top 1m\n> list), but it is difficult to predict these things ahead of time. At\n> least one affected piece of software targets enterprise customers (it\n> bundles a copy of NSS), where outdated software is prevalent and\n> visibility nil.\n\nThat's extraordinarily rare. If they're broken, then they break. It's not the job of a security protocol spec to account for rare brokeness not being ever patched due to incompetence. If we have to kludge stuff, let's please at least focus on the things affecting measurably large numbers of people. :(\n",
          "createdAt": "2016-08-22T00:46:25Z",
          "updatedAt": "2016-08-22T00:46:25Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(To be clear, that original compromise is completely forced. I had hopes of getting SHA-1 SKX signatures out of TLS 1.2 at one point---you can't implement TLS 1.2 without SHA-2! But it turns out SHA-1-only servers are more common than TLS 1.0 and TLS 1.1 combined. I'm amazed we managed that one, but so it goes. Will revisit it in a couple years.)\n\nIt does seem rare and indeed I had no intention of invoking the SHOULD. But I don't have much confidence in how accurate these top site probes are. In my experience, even client-side metrics have problems. These bugs tend to be concentrated at enterprise deployments which are invisible to top site lists and underrepresented in client-side metrics.\n\nI may well be being unnecessarily paranoid here. Perhaps it's a low enough zeroth-order estimate the spec can just take that risk. I figured there was no need in doing so, especially since placing `rsa_pkcs1_*` at the front didn't actually cost anything. _shrug_\n\n(The risk here is the probe is totally inaccurate and we're left in a bind. I don't want to put `rsa_pkcs1_*` in front, but I would prefer that to fallbacks.)\n",
          "createdAt": "2016-08-22T03:12:31Z",
          "updatedAt": "2016-08-22T03:12:31Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Sunday, August 21, 2016 11:12:33 pm David Benjamin wrote:\n\n> I may well be being unnecessarily paranoid here. Perhaps it's a low enough zeroth-order estimate the spec can just take that risk. I figured there was no need in doing so, especially since placing `rsa_pkcs1_*` at the front didn't actually cost anything. _shrug_\n\nHuh? A client placing it at the front will negotiate it when connecting to a TLS 1.2 server that supports it. In a vacuum where a client is crafting a specific request for a specific server, yeah, this might be safe in some instance, but that's not what the spec can assume. If the value is offered with a high priority, it will be used when it shouldn't.\n",
          "createdAt": "2016-08-22T04:29:27Z",
          "updatedAt": "2016-08-22T04:29:27Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(To clarify in case I was unclear, the workaround, should we need it, would be to put all rsa_pkcs_\\* values at the front, not just rsa_pkcs1_sha1, so preferences relative to that will still be correct.)\n\nIn TLS 1.3, all those entries are no-ops, so it doesn't matter what their order.\n\nFor TLS 1.2, it's not quite a no-op because we decided to backport RSA-PSS, but nearly all cases where it matters will negotiated 1.3 anyway. There is no chance we will be able to get rid of TLS 1.2 + PKCS#1 before we get rid of TLS 1.2. The PSS switch for 1.3 is good, but I feel the backport was basically a no-op. (Note if PKCS#1 is totally bust, whether the server preferentially signs PSS or not won't matter if the client still accepts PKCS#1.)\n\nOr perhaps am I misunderstanding the concern or missing something?\n\nThere's also ordering between, say, RSA and ECDSA. But poking at SSL Labs, it seems every major browser already orders RSA > ECDSA in the sigalgs list anyway. (Amusingly, Chrome is the only browser which actually puts SHA-1 things at the end! BoringSSL inherited OpenSSL's behavior of sorting by hash first. Everyone else does all the RSAs and then all the ECDSAs. Except for Edge which does that but punts all the SHA512s to the end.)\n",
          "createdAt": "2016-08-22T04:52:15Z",
          "updatedAt": "2016-08-22T04:52:15Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Current plan is to just ship the RSA-PSS signature algorithms in Chrome early so we can clear through this mess before it's time to deploy TLS 1.3. Hopefully that'll work out and we won't need anything messy! :-) Closing.\n",
          "createdAt": "2016-08-30T18:19:04Z",
          "updatedAt": "2016-08-30T18:19:04Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 586,
      "id": "MDExOlB1bGxSZXF1ZXN0ODIyOTA0MjA=",
      "title": "Mention HRR in early_data extension definition",
      "url": "https://github.com/tlswg/tls13-spec/pull/586",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "ClientHello mentions that early_data should be removed, but early_data doesn't mention it.  Editorial.\n",
      "createdAt": "2016-08-23T01:33:19Z",
      "updatedAt": "2016-08-27T17:31:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0fc393039fde8d573ff3482bc1e7298f482bc20a",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "no_ed_after_hrr",
      "headRefOid": "1326ca8b00342772b8f5d0e15e977ed1026c8f1e",
      "closedAt": "2016-08-27T17:31:19Z",
      "mergedAt": "2016-08-27T17:31:19Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c18cdc046472797021a3b93624b8d5d9c3f23f1c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 589,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI2NDIzMjA=",
      "title": "Fixing some nits in s1.",
      "url": "https://github.com/tlswg/tls13-spec/pull/589",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Some suggested nits for s1: adding a semi-colon and swapping two whichs for thats.\n",
      "createdAt": "2016-08-25T01:01:17Z",
      "updatedAt": "2016-08-27T18:58:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0fc393039fde8d573ff3482bc1e7298f482bc20a",
      "headRepository": null,
      "headRefName": "s1_nits",
      "headRefOid": "4fdd6ee97c3975b39ef9e3e9f852c857f3256fea",
      "closedAt": "2016-08-25T01:06:48Z",
      "mergedAt": "2016-08-25T01:06:48Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "43a89b6a92be38adb980b24b84bc374b1776ac38"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 590,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI2NDQ2NjQ=",
      "title": "Fixing some nits in s2.",
      "url": "https://github.com/tlswg/tls13-spec/pull/590",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Some suggested edits for s2.\n",
      "createdAt": "2016-08-25T01:36:36Z",
      "updatedAt": "2016-08-27T19:01:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43a89b6a92be38adb980b24b84bc374b1776ac38",
      "headRepository": null,
      "headRefName": "s2_nits",
      "headRefOid": "5e96ff93ad12c15718160df25f885781cbbf2815",
      "closedAt": "2016-08-26T16:03:16Z",
      "mergedAt": "2016-08-26T16:03:16Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "0ee7398494b6362f390a722b4631c02c1b166467"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 591,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI2NDgwNzk=",
      "title": "Fixing KE Phase description.",
      "url": "https://github.com/tlswg/tls13-spec/pull/591",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "At least to me, the KE phase description currently reads like the DH share and PSK are always sent.  It's DH, PSK, or both.\n",
      "createdAt": "2016-08-25T02:27:23Z",
      "updatedAt": "2016-08-27T19:03:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43a89b6a92be38adb980b24b84bc374b1776ac38",
      "headRepository": null,
      "headRefName": "KEPhase_description",
      "headRefOid": "867840350f7239d985865f657071681ab043a2cd",
      "closedAt": "2016-08-26T17:50:06Z",
      "mergedAt": "2016-08-26T17:50:06Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "834e0ad5c2d9c41b899617dddb2cdf9b79bcced5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 592,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI2NDkyMDM=",
      "title": "Tweaking s2 1st para.",
      "url": "https://github.com/tlswg/tls13-spec/pull/592",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "A potential minor tweak to the 1st para in s2.\n",
      "createdAt": "2016-08-25T02:44:36Z",
      "updatedAt": "2016-08-27T18:59:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43a89b6a92be38adb980b24b84bc374b1776ac38",
      "headRepository": null,
      "headRefName": "s2_1stpara",
      "headRefOid": "49ff2f166e4eb32190739385efa223ff2cb3c5d8",
      "closedAt": "2016-08-26T00:41:23Z",
      "mergedAt": "2016-08-26T00:41:23Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "15ae23e1f8356fa98532ad5e6d93869adcf81624"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 593,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI2NDk3NDA=",
      "title": "Nits in s2.1.",
      "url": "https://github.com/tlswg/tls13-spec/pull/593",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2016-08-25T02:52:14Z",
      "updatedAt": "2016-08-27T18:59:05Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43a89b6a92be38adb980b24b84bc374b1776ac38",
      "headRepository": null,
      "headRefName": "s2-1_nits",
      "headRefOid": "4fa12d0577d81055e373479c41436c162ffe2ca5",
      "closedAt": "2016-08-26T00:41:07Z",
      "mergedAt": "2016-08-26T00:41:07Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "8f9f48ed2276f3cda31fd9665431e8a55e48e54a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 594,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI2NTAzNjk=",
      "title": "Nits in s2.2.",
      "url": "https://github.com/tlswg/tls13-spec/pull/594",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2016-08-25T03:01:45Z",
      "updatedAt": "2016-08-27T19:01:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43a89b6a92be38adb980b24b84bc374b1776ac38",
      "headRepository": null,
      "headRefName": "s2-2_nits",
      "headRefOid": "06be7f2f2683c93f00908219947fbbb435a1945e",
      "closedAt": "2016-08-26T15:55:39Z",
      "mergedAt": "2016-08-26T15:55:39Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9e4a0ac14c70fd842b5d123aceda2382a462e1da"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 595,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI2NTExNjE=",
      "title": "Changing Magnus' affiliation.",
      "url": "https://github.com/tlswg/tls13-spec/pull/595",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "I asked Magnus and he said to change his affiliation.\n",
      "createdAt": "2016-08-25T03:14:17Z",
      "updatedAt": "2016-08-27T18:58:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43a89b6a92be38adb980b24b84bc374b1776ac38",
      "headRepository": null,
      "headRefName": "Magnus_affiliation",
      "headRefOid": "8e48db006334fb944fbb38c24951f4cd721102b7",
      "closedAt": "2016-08-25T03:31:27Z",
      "mergedAt": "2016-08-25T03:31:27Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "351706a8c3eb5412b3f1897e3613c67c30ea5c4a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 596,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI3MTAxNTk=",
      "title": "Fis PSK-related types",
      "url": "https://github.com/tlswg/tls13-spec/pull/596",
      "state": "MERGED",
      "author": "Lekensteyn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The PskKeMode and PskAuthMode types were not defined, substitute them by\nthe defined enums. Use non-plural enum names for consistency with other\nenumeration types.\n\nRemove the old opaque psk_identity type in favor of PskIdentity which\nwas otherwise unused. Increase minimum length from 2 to 4 to account for\nthe PskIdentity.identity field length.\n",
      "createdAt": "2016-08-25T12:26:32Z",
      "updatedAt": "2016-11-02T14:49:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d1051e44eda42b10f8a980611ecf35fef1045e2a",
      "headRepository": "Lekensteyn/tls13-spec",
      "headRefName": "psk-editorial",
      "headRefOid": "4ad19f12cb65d9d45b52039c19e95cefa98c9676",
      "closedAt": "2016-08-26T00:39:36Z",
      "mergedAt": "2016-08-26T00:39:36Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4addc6d6e70515bf50b9d0327e4d7b2b2b6e5133"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 597,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI3MTIxNDU=",
      "title": "Allow mk-appendix.py to run on Python 3 system",
      "url": "https://github.com/tlswg/tls13-spec/pull/597",
      "state": "MERGED",
      "author": "Lekensteyn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I also verified that the output for Python 2 and Python 3 are the same.\n",
      "createdAt": "2016-08-25T12:40:55Z",
      "updatedAt": "2016-11-02T14:49:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "351706a8c3eb5412b3f1897e3613c67c30ea5c4a",
      "headRepository": "Lekensteyn/tls13-spec",
      "headRefName": "python3-compat",
      "headRefOid": "ed0e4671e4eeaaf2d088e3c4f4cb76e58857ffda",
      "closedAt": "2016-08-26T00:39:44Z",
      "mergedAt": "2016-08-26T00:39:44Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "72700ab50bce143bed72206fb45c06dee1f2a479"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 598,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI3MjA1MTM=",
      "title": "Swap in \"e.g.\" for \"for example\".",
      "url": "https://github.com/tlswg/tls13-spec/pull/598",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For consistency sake.\n",
      "createdAt": "2016-08-25T13:35:02Z",
      "updatedAt": "2016-08-27T19:03:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "351706a8c3eb5412b3f1897e3613c67c30ea5c4a",
      "headRepository": null,
      "headRefName": "s3-3_nit",
      "headRefOid": "53cc64a34f78b3a824cfeedb4774742d222e6795",
      "closedAt": "2016-08-25T13:35:39Z",
      "mergedAt": "2016-08-25T13:35:39Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5d9e6c0c8894726d4f0c80992514bfb71c69920b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 599,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI3MjcxMjU=",
      "title": "Editorial fix in variants description.",
      "url": "https://github.com/tlswg/tls13-spec/pull/599",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2016-08-25T14:12:30Z",
      "updatedAt": "2016-08-27T19:04:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d1051e44eda42b10f8a980611ecf35fef1045e2a",
      "headRepository": null,
      "headRefName": "s3-6-1_nit",
      "headRefOid": "fc2cbb8724dc14660e90bd03415f99fdb7686862",
      "closedAt": "2016-08-26T00:39:59Z",
      "mergedAt": "2016-08-26T00:39:59Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4c36b95263c96562fe0d64cc5fe1d71106885f76"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 600,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI5MTgyMjU=",
      "title": "2119ing the required in s4.2.1.",
      "url": "https://github.com/tlswg/tls13-spec/pull/600",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Pretty sure that we want this required to use 2119-language.\n",
      "createdAt": "2016-08-26T16:41:02Z",
      "updatedAt": "2016-08-27T19:01:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0ee7398494b6362f390a722b4631c02c1b166467",
      "headRepository": null,
      "headRefName": "s4-1-2_2119-police",
      "headRefOid": "adfd4f61b0e57c4163002ad5593a96b8abd3233f",
      "closedAt": "2016-08-26T17:13:06Z",
      "mergedAt": "2016-08-26T17:13:06Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1a22e3994c2316e736c1c78477d8611987357ee2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 601,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI5OTM2MTM=",
      "title": "Some tweaks for s4.1.1.",
      "url": "https://github.com/tlswg/tls13-spec/pull/601",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "I took this bit out of the 1st paragraph:\n\n-If any of these parameters has no overlap between the\n-client and server parameters, then the handshake\n-will fail.\n\nand moved it to the last para in the section because it doesn't say what alert value is to be returned, there's not something similar in the following paragraph that describes the PSK failure case, and finally the full failure text is included in the final paragraph.  Basically, I just move the failure case to the final paragraph.\n\nAn alternate would be to copy the failure to the PSK paragraph and include the which alert to return in the non-PSK para.\n",
      "createdAt": "2016-08-27T17:29:36Z",
      "updatedAt": "2016-08-27T21:04:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "834e0ad5c2d9c41b899617dddb2cdf9b79bcced5",
      "headRepository": null,
      "headRefName": "s4-1-1_nits",
      "headRefOid": "5cdca50fbd0385bd56dccfbac74b81a18201d5f7",
      "closedAt": "2016-08-27T21:04:13Z",
      "mergedAt": "2016-08-27T21:04:13Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6f518dbfac63871e2ea47e19cb3de4ce7293b057"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 602,
      "id": "MDExOlB1bGxSZXF1ZXN0ODI5OTM4NjE=",
      "title": "Adding () around EarlyDataIndication section reference.",
      "url": "https://github.com/tlswg/tls13-spec/pull/602",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2016-08-27T17:40:49Z",
      "updatedAt": "2016-08-27T18:48:49Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c18cdc046472797021a3b93624b8d5d9c3f23f1c",
      "headRepository": null,
      "headRefName": "s4-2-1_parenthesis",
      "headRefOid": "d02bad0a9d55ffe9d857631a0a03d92e0061934a",
      "closedAt": "2016-08-27T18:48:49Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner please fix merge conflict\n",
          "createdAt": "2016-08-27T18:05:59Z",
          "updatedAt": "2016-08-27T18:05:59Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 604,
      "id": "MDExOlB1bGxSZXF1ZXN0ODMxNTUzMTg=",
      "title": "Change \"supported_groups\" to \"supported_kems\" - supported key exchang\u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/604",
      "state": "CLOSED",
      "author": "zhenfeizhang",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I would like to suggest that we change the terminology \"NamedGroup\" to \"KeyExchangeMethod\". \n\nIn [1], it is suggested that we redefine the syntax, which leads to the separation of public key crypto \nand symmetric crypto during a handshake. Because of this separation, new terminology was defined\nfor key exchange algorithms and authentication algorithms for public key crypto in the key exchange\nextension. \"NamedGroup\" was used to refer the underlying key exchange parameters, which comes \nfrom the \"Supported Elliptic Curves\" in previous versions. \n\nThe use of \"NamedGroup\" implicitly requests the key exchange algorithm to be Deffie-Hellman type. \nWhile it is safe for now, it would be nice to have some crypto agility, and future proof. It would make \nthe transition to other key exchange primitives (such as lattice based key exchange) or methods \n(such as key encapsulation mechanism) easier in the future, if we do not restrict the key exchange\nby certain \"Group\".\n\nKnowing that NIST has planned to standardize quantum-safe cryptography within 7 years of time\n(which can and should be accelerated), and those algorithms cannot be described in terms of \"group\",\nthe current terminology will due for a redesign by then. So I would suggest to change the \"NamedGroup\"\nnow rather than latter.\n\nOverall, this will have the following impact \n1. HelloRetryRequest\n\nChange HelloRetryRequest structure to\n\nstruct {\n       ProtocolVersion server_version;\n       KeyExchangeMethod selected_kem;\n       Extension extensions<0..2^16-1>;\n   } HelloRetryRequest;\n1. Negotiated Groups\n\nThroughout, change \"supported_groups\" to\n\"supported_kems\"; change \"NamedGroupList\" to\n\"KeyExchangeMethodList\"; change \"named_group_list\" to\n\"kem_list\"; change NamedGroup to KeyExchangeMethod\n1. Key Share:\n\nChange KeyShareEntry structure to\n\n struct {\n       KeyExchangeMethod kem;\n       opaque key_exchange<1..2^16-1>;\n   } KeyShareEntry;\n\n[1] https://github.com/ekr/tls13-spec/blob/15126cf5a08c445aeed97c0c25c4f10c2c1b8f26/draft-ietf-tls-tls13.md\n",
      "createdAt": "2016-08-29T19:42:42Z",
      "updatedAt": "2016-09-13T17:23:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6f518dbfac63871e2ea47e19cb3de4ce7293b057",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "d74b8906d1d76909fa5f06d33bcf852243cfd22d",
      "closedAt": "2016-09-13T17:23:58Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed per chair instruction\n",
          "createdAt": "2016-09-13T17:23:58Z",
          "updatedAt": "2016-09-13T17:23:58Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 605,
      "id": "MDExOlB1bGxSZXF1ZXN0ODMxOTY1NDQ=",
      "title": "Lock down the HashAlgorithm registry.",
      "url": "https://github.com/tlswg/tls13-spec/pull/605",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It has been replaced by SignatureScheme which assumes that no more\nHashAlgorithms will ever be allocated. Future allocations will go in\nSignatureScheme.\n\nCloses issue #574.\n",
      "createdAt": "2016-08-30T01:53:29Z",
      "updatedAt": "2016-08-30T04:37:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "404cd99941b677fe7398a08be341193d438b0bc1",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "lock-hash-algorithm",
      "headRefOid": "be4c83eac9c4ab995515dd646dccfd7d10cd2360",
      "closedAt": "2016-08-30T04:37:17Z",
      "mergedAt": "2016-08-30T04:37:17Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ed44c249205c5f04ab21048c2fc809b81b116e33"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 606,
      "id": "MDExOlB1bGxSZXF1ZXN0ODMxOTc2NzU=",
      "title": "Clarify the behavior of no exporter context.",
      "url": "https://github.com/tlswg/tls13-spec/pull/606",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "No context and empty context are now declared to be the same. Add some\nALL CAPS WORDS for future specifications to deprecate no context. I used\nSHOULD to forbid no context because, if some protocol currently uses no\ncontext, switching it to empty context is a breaking change and probably\nnot worth it. We just want new ones to always provide a context.\n\nThis affects the rules for using exporters, so RFC 5705 is added to the\nlist of updated documents.\n\nCloses issue #546.\n",
      "createdAt": "2016-08-30T02:08:36Z",
      "updatedAt": "2016-08-30T13:29:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "404cd99941b677fe7398a08be341193d438b0bc1",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "exporter-no-context",
      "headRefOid": "012778f677944ad6de70099e57f6710ed2b16cd5",
      "closedAt": "2016-08-30T13:29:55Z",
      "mergedAt": "2016-08-30T13:29:55Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b74cccbdfc4d463991c1e3888318dce1efcad9e1"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixes #546\n",
          "createdAt": "2016-08-30T13:29:48Z",
          "updatedAt": "2016-08-30T13:29:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 607,
      "id": "MDExOlB1bGxSZXF1ZXN0ODMyNzQyNjE=",
      "title": "Clarify signature_algorithms extension.",
      "url": "https://github.com/tlswg/tls13-spec/pull/607",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The client and server versions have a different format.\n",
      "createdAt": "2016-08-30T13:46:56Z",
      "updatedAt": "2016-08-30T14:51:49Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b74cccbdfc4d463991c1e3888318dce1efcad9e1",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "clarify-sigalgs",
      "headRefOid": "e6f6aafbd0939c96fe6434737ff2d76c5c36f3e1",
      "closedAt": "2016-08-30T14:51:49Z",
      "mergedAt": "2016-08-30T14:51:49Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "44d231045499bf0a6239b2d964b0ba57fda0697f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 608,
      "id": "MDExOlB1bGxSZXF1ZXN0ODMzMjczOTg=",
      "title": "fix typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/608",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-08-30T18:59:26Z",
      "updatedAt": "2016-08-31T19:17:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "44d231045499bf0a6239b2d964b0ba57fda0697f",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "bab3e8383fd51df08b65d61ad1401040453bee5a",
      "closedAt": "2016-08-30T19:31:25Z",
      "mergedAt": "2016-08-30T19:31:25Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ba2515bb843cdbf5c919956b73605c5e53fccb37"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 609,
      "id": "MDExOlB1bGxSZXF1ZXN0ODMzODk1MzA=",
      "title": "Remove note about representing integers as opaque vectors.",
      "url": "https://github.com/tlswg/tls13-spec/pull/609",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It looks like this is carried over from TLS 1.2---seems I was wrong and\nTLS 1.2 did actually say whether there were leading zeros in front of\nDHE parameters---but I believe it is no longer used.\n\nInstead our crypto primitives all act on byte strings. Any conversion\nbetween byte strings and the primitive's internal structures is handled\nby the primitive itself. (RFC 7748 natively acts on byte strings,\n4.2.4.1 specifies how FFDHE is encoded, RSA-PSS comes with a byte string\nform, etc.)\n",
      "createdAt": "2016-08-31T05:09:48Z",
      "updatedAt": "2016-08-31T13:13:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ba2515bb843cdbf5c919956b73605c5e53fccb37",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "integer-vectors",
      "headRefOid": "500a7625e8c17c3879003f600cd6c96c9908e018",
      "closedAt": "2016-08-31T13:13:00Z",
      "mergedAt": "2016-08-31T13:13:00Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "05cedab548fbd7fbb325a988f23422a56f814a3d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 610,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM0NTIyMzA=",
      "title": "fix few typos",
      "url": "https://github.com/tlswg/tls13-spec/pull/610",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-08-31T13:27:35Z",
      "updatedAt": "2016-08-31T16:04:46Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "05cedab548fbd7fbb325a988f23422a56f814a3d",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "typo-fix",
      "headRefOid": "ac981839474265fc9f28ef1fd464b673dfecf112",
      "closedAt": "2016-08-31T16:01:39Z",
      "mergedAt": "2016-08-31T16:01:39Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f76531b85e32457c208fdc65fd9abe09629b239a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 611,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM1MTY1NTk=",
      "title": "Dual keying ladders, plus limit number of KeyUpdates.",
      "url": "https://github.com/tlswg/tls13-spec/pull/611",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The idea here is that you can be silently receiving, receive a pile\nof KeyUpdates, and then respond with just one. Because there are\ndual ladders, this doesn't cause PFS problem.\n\n@davidben PTAL\n",
      "createdAt": "2016-08-31T19:45:52Z",
      "updatedAt": "2016-09-21T17:48:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f76531b85e32457c208fdc65fd9abe09629b239a",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "dual_ladders",
      "headRefOid": "306ccd2eea84f2120b2e61ef3a675c9eacb5e2bb",
      "closedAt": "2016-09-21T17:48:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "DavidBen and I talked offline and concluded that a boolean would be better (though still not ideal). This PR embodies that.\n\n@davidben PTAL\n",
          "createdAt": "2016-09-01T16:23:39Z",
          "updatedAt": "2016-09-01T16:23:39Z"
        },
        {
          "author": "keithw",
          "authorAssociation": "NONE",
          "body": "I think we have to oppose a change to KeyUpdate that adds P4 (bounded write obligations) but not P3 (ability to learn that a KeyUpdate was read by other side). These are orthogonal and achievable simultaneously with little disruption.  Here are four options that would each be perfectly fine with us:\n1. Forbid implementations from sending an `update_not_requested` KeyUpdate unless it is triggered by an `update_requested` KeyUpdate.\n2. add a uint8 field to KeyUpdate representing the sender's current receive generation (lower 8 bits) \n3. keep request_update an 8-bit field (same width as it is already), and define the high bit as representing the update_requested boolean, and the remaining bits represent the lower 7 bits of the sender's current receive generation\n4. keep request_update an 8-bit field (same width as it is already), define the high bit as representing the update_requested boolean, and the remaining bits represent a 7-bit nonce that must be echoed in the response. (If multiple update_requested KeyUpdates arrive, any of their nonces can be the one that gets echoed.)\n\nApproach 1 seems like it might be acceptable, even understanding the concerns of the list. I am happy to send sample text if helpful.\n",
          "createdAt": "2016-09-01T20:59:36Z",
          "updatedAt": "2016-09-01T20:59:36Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You should raise these concerns on the mailing list, not here on Github.\n\nWith that said, I did not perceive much WG enthusiasm for P3, and there was explicit opposition, which is why I did not include it. I will of course defer to the judgement of the chairs.\n",
          "createdAt": "2016-09-01T21:04:50Z",
          "updatedAt": "2016-09-01T21:04:50Z"
        },
        {
          "author": "keithw",
          "authorAssociation": "NONE",
          "body": "Will reply on-list.\n",
          "createdAt": "2016-09-01T21:07:46Z",
          "updatedAt": "2016-09-01T21:07:46Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner Please advise on how you want this resolved.\n",
          "createdAt": "2016-09-03T20:11:07Z",
          "updatedAt": "2016-09-03T20:11:07Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Separately merged\n",
          "createdAt": "2016-09-21T17:48:42Z",
          "updatedAt": "2016-09-21T17:48:42Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 612,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM1MjE0MTI=",
      "title": "TLS 1.3 -> TLS 2.0",
      "url": "https://github.com/tlswg/tls13-spec/pull/612",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There appears to be significant support on the mailing list for rebranding TLS 1.3 as TLS 2.0. See thread for rationale, specific proposed changes, and discussion:\nhttps://www.ietf.org/mail-archive/web/tls/current/msg20938.html\n\nHere is a PR for consideration pending discussion and evaluation of WG consensus.\n",
      "createdAt": "2016-08-31T20:17:09Z",
      "updatedAt": "2016-12-12T19:11:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f13926026820a890bdc5c639043cba91ac8215f8",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "tls2rebranding",
      "headRefOid": "361527b64815d6d85949c142f0767ab36fda876d",
      "closedAt": "2016-12-12T19:11:26Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As to this repository itself, apparently you can just rename it and the old name will continue to be an alias of the new name:\nhttps://help.github.com/articles/renaming-a-repository/\n\nThe associated repository description would also need a minor update.\n\nAfter scouring things for more places renaming would be needed, I ~think~ that's the last spot (both literally the last spot that should be updated, and figuratively the last spot to worry about). If we do this change, however, updating everything will be best to avoid confusion, and just as a matter of proper record.\n\nJust posting this here for completeness and as a reminder, in the event that we get consensus to make the change.\n",
          "createdAt": "2016-08-31T20:58:15Z",
          "updatedAt": "2016-08-31T20:59:02Z"
        },
        {
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "<del>index.html in gh-pages branch also needs to be updated</del> (No, that's automatically updated).\n\nBut files in GitHub Pages need to be updated: \n- https://github.com/tlswg/tlswg.github.io/blob/master/_includes/navbar.html\n- https://github.com/tlswg/tlswg.github.io/blob/master/index.md. \n\nAnother thing is that draft-ietf-tls-tls13 is [referenced by](https://datatracker.ietf.org/doc/draft-ietf-tls-tls13/referencedby/) some other IETF drafts. Especially [draft-ietf-netconf-call-home](https://datatracker.ietf.org/doc/draft-ietf-netconf-call-home/) is currently in RFC Editor publishing queue. After the rename is done, do we need to inform these working groups, authors or RFC Editors to have their text updated?  \n",
          "createdAt": "2016-08-31T21:01:52Z",
          "updatedAt": "2016-08-31T21:23:49Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "After the rename is done, yeah, we should probably have the chair spam contact emails for a variety of other drafts to inform them of the update, though, they should also catch it if TLS 2.0 goes to RFC first.\n\nI don't think we necessarily need to update the \"draft-ietf-tls-tls13\" token, though.\n",
          "createdAt": "2016-08-31T21:42:40Z",
          "updatedAt": "2016-08-31T21:42:40Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Version ID registry split off to PR #634. This PR is now based on PR #634 which is rebased onto current master.\n",
          "createdAt": "2016-09-09T06:10:41Z",
          "updatedAt": "2016-09-09T06:10:41Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There was too much bitrot to rebase easily, so I've redone the needed changeset. Should be able to merge to current master if accepted, now.\n\n@xiaoyinl Another quick review to make sure I didn't miss anything on this pass would be appreciated.\n\nEdited to add: This PR is no longer based on any other PR.\n",
          "createdAt": "2016-10-20T19:04:43Z",
          "updatedAt": "2016-10-20T19:09:07Z"
        },
        {
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett It looks good to me.\n",
          "createdAt": "2016-10-20T21:35:23Z",
          "updatedAt": "2016-10-20T21:35:23Z"
        },
        {
          "author": "jrchamp",
          "authorAssociation": "NONE",
          "body": "Did this ever get resolved? I heard \"TLS 2017\" or \"TLS 4\" so as to be a larger, different number when mentioned alongside SSL2 and SSL3. The 2017 one is nice because you get a sense for the actual time period that the standard was finalized. Thank you for the work being done to make this all possible.",
          "createdAt": "2016-12-05T18:49:10Z",
          "updatedAt": "2016-12-05T18:49:10Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Did this ever get resolved?\r\n\r\nThere was a long thread on the mailing list in a comment period that just ended, so the chairs are still reviewing the thread and attempting to determine consensus.",
          "createdAt": "2016-12-05T18:50:11Z",
          "updatedAt": "2016-12-05T18:50:11Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "At this point, the only possibilities I see happening are TLS 4 or TLS 1.3, with the latter being more likely. One way or another, this PR is obsolete and will either be closed and/or redone. I'm just leaving it open until we come to a final conclusion.",
          "createdAt": "2016-12-06T22:21:50Z",
          "updatedAt": "2016-12-06T22:22:12Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing this to keep my TODO list clear.",
          "createdAt": "2016-12-12T19:11:26Z",
          "updatedAt": "2016-12-12T19:11:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 613,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM2Mjk5NzQ=",
      "title": "Typo fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/613",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-09-01T13:14:29Z",
      "updatedAt": "2016-09-01T19:59:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f76531b85e32457c208fdc65fd9abe09629b239a",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "typo-fix",
      "headRefOid": "c74a08eeeed1c69c3466a98c0490ac3c26745e2c",
      "closedAt": "2016-09-01T19:46:58Z",
      "mergedAt": "2016-09-01T19:46:58Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a6ca117e6f1c7056b8f8074295360410578ebce7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 614,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM2NjY1MTI=",
      "title": "prohibit use of renegotiation to negotiate TLSv1.3",
      "url": "https://github.com/tlswg/tls13-spec/pull/614",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "the renegotiation mechanism from TLSv1.2 and earlier is\ndeprecated, that deprecation extends to the ability to\nrenegotiate existing TLSv1.2 (or earlier) session to TLSv1.3\n",
      "createdAt": "2016-09-01T16:37:47Z",
      "updatedAt": "2016-09-02T13:13:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a6ca117e6f1c7056b8f8074295360410578ebce7",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "prohibit-tls-12-to-tls-13-renegotiation",
      "headRefOid": "1416a074d1bf1f66ce0f25a65542a6b6049fabd6",
      "closedAt": "2016-09-02T12:44:32Z",
      "mergedAt": "2016-09-02T12:44:32Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c1cd6daf7333b5253cfc9c7ffc30d6fa57a964a9"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, but I just realized you can't do this.  You need to prohibit negotiating back _up_ to 1.3, but the client has to be able to offer 1.3.\n\nHere's the Bugzilla thread on this\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1292898\n",
          "createdAt": "2016-09-01T16:58:04Z",
          "updatedAt": "2016-09-01T16:58:04Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "so the client MAY send a TLSv1.3 Client Hello in a TLSv1.2 session, but server MUST NOT negotiate TLSv1.3 then?\n",
          "createdAt": "2016-09-01T17:08:46Z",
          "updatedAt": "2016-09-01T17:08:46Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How about this?\n",
          "createdAt": "2016-09-01T17:29:25Z",
          "updatedAt": "2016-09-01T17:29:25Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OpenSSL derived implementations don't even allow you to switch versions on renego at all because that would be insane. We do send the higher ClientHello version for the reasons EKR pointed out, but the ServerHello version must match.\n\nI would actually argue that it is fair game to assume version-related things are implicitly forked and locked (a 1.1 session implicitly cannot be resumed at 1.2, etc.), but the spec should be much clearer on this, so saying it explicitly now is a good idea.\n",
          "createdAt": "2016-09-01T18:40:52Z",
          "updatedAt": "2016-09-01T18:40:52Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes.\n\nOn Thu, Sep 1, 2016 at 10:08 AM, Hubert Kario notifications@github.com\nwrote:\n\n> so the client MAY send a TLSv1.3 Client Hello in a TLSv1.2 session, but\n> server MUST NOT negotiate TLSv1.3 then?\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/614#issuecomment-244146025, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/ABD1oZEeLqisracMuOaKUQAFxmsRU-Pyks5qlwaggaJpZM4Jy5Ee\n> .\n",
          "createdAt": "2016-09-01T18:53:44Z",
          "updatedAt": "2016-09-01T18:53:44Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree, resuming sessions must be _at the same version_ and text saying so is a good idea.\n",
          "createdAt": "2016-09-01T20:26:19Z",
          "updatedAt": "2016-09-01T20:26:19Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@richsalz: This is actually about negotiating at TLS 1.2 and then renegotiating to TLS 1.3. It's not clear how you would even manage to resume a TLS 1.2 session at TLS 1.3 or vice versa, but explicit text to this effect would be good. It has certainly historically been a mess.\n",
          "createdAt": "2016-09-01T20:35:39Z",
          "updatedAt": "2016-09-01T20:35:39Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, that should fix all the comments.\n",
          "createdAt": "2016-09-02T09:45:19Z",
          "updatedAt": "2016-09-02T09:45:19Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged. @tomato42 please send me a PR adding yourself to Contributors\n",
          "createdAt": "2016-09-02T12:44:59Z",
          "updatedAt": "2016-09-02T12:44:59Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr here it is: #617 \n",
          "createdAt": "2016-09-02T13:13:02Z",
          "updatedAt": "2016-09-02T13:13:02Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 615,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM3MTUwMjI=",
      "title": "Attempt to add Finished to the ClientHello.",
      "url": "https://github.com/tlswg/tls13-spec/pull/615",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "1. Only allow one PSK\n2. Add a Finished extension\n3. Remove the explicit 0-RTT Finished.\n\nThe idea here is:\n- Eliminate a key change because you don't need to encrypt\n  this Finished. Also remove a state machine entry.\n- Prove that the client knows the PSK even without 0-RTT\n- Avoid the somewhat clunky resumption_context mechanism\n  by adding a function of the PSK directly into the handshake transcript.\n\nThere are a bunch of open questions here:\n1. We are now computing the early_traffic_secret as a function of\n   a transcript which was already partly derived from PSK, which is\n   creepy. OTOH, we were already doing that for a number of other\n   secrets.\n2. Can we in fact get rid of resumption_context here (Antoine\n   argued yes, but I believe there were some concerns about the\n   use of HKDF this way)\n3. This is clunky to implement.\n4. Should we move ticket_age into a separate extension so it can\n   be used without 0-RTT.\n\nProbably some other stuff I have forgotten.\n",
      "createdAt": "2016-09-01T22:03:48Z",
      "updatedAt": "2016-10-07T15:11:30Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a6ca117e6f1c7056b8f8074295360410578ebce7",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "finished_stuffing",
      "headRefOid": "b38f5d8561748a6f9e8ed7ccdf297b2a89eda0d0",
      "closedAt": "2016-10-07T15:11:30Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Various editorial nitpicks aside, I think this looks good. No opinions on whether we hash a ClientHello prefix or stick zeros in there. If we pick one and it's more natural for an implementation to do the other, they can just subtract 32 or call HashUpdate(\"\\x00\" x 32).\n",
          "createdAt": "2016-09-06T18:49:38Z",
          "updatedAt": "2016-09-06T18:49:38Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 616,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM3NzYxNzk=",
      "title": "add SHA-3 hashes",
      "url": "https://github.com/tlswg/tls13-spec/pull/616",
      "state": "CLOSED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "since SHA-3 is now finished, we can define signatures that use it\n",
      "createdAt": "2016-09-02T10:05:41Z",
      "updatedAt": "2016-09-10T16:05:53Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a6ca117e6f1c7056b8f8074295360410578ebce7",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "sha-3",
      "headRefOid": "4382dbaf40657a69e081ba257a1979d9784c6a25",
      "closedAt": "2016-09-10T16:05:53Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@tomato42 I'm not seeing WG consensus for this. @seanturner can you advise?\n",
          "createdAt": "2016-09-03T20:10:08Z",
          "updatedAt": "2016-09-03T20:10:08Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr Based on this [email](https://mailarchive.ietf.org/arch/msg/tls/OSzZcLuSyO7n87iKti4DZI-oMKo) you can close this out.\n",
          "createdAt": "2016-09-10T13:35:06Z",
          "updatedAt": "2016-09-10T13:35:06Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 617,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM3OTkxODE=",
      "title": "add Hubert Kario to contributors",
      "url": "https://github.com/tlswg/tls13-spec/pull/617",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-09-02T13:12:23Z",
      "updatedAt": "2016-09-02T16:26:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1943f7dd90402b7dffc6237a74bb05788c18fc00",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "contributors",
      "headRefOid": "37ddb28e9572d6980566add3f6480e1a55718c40",
      "closedAt": "2016-09-02T13:45:16Z",
      "mergedAt": "2016-09-02T13:45:16Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "37ddb28e9572d6980566add3f6480e1a55718c40"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 618,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM4MTM5ODg=",
      "title": "Remove remnant of old cipher suite negotiation.",
      "url": "https://github.com/tlswg/tls13-spec/pull/618",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-09-02T14:47:03Z",
      "updatedAt": "2016-09-02T18:53:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cb305ff889a9d9e402e2239603222e008c7f09ea",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "sigalg-ciphers",
      "headRefOid": "bfbfdb508d5561fd075cb015463f0af58c5e3a43",
      "closedAt": "2016-09-02T18:53:31Z",
      "mergedAt": "2016-09-02T18:53:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "bb96670773ebc86acfb54a9f3407d5e162fa12ea"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 619,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM4NDY4ODY=",
      "title": "warn about RSA-CRT key leaks in Implementation Pitfalls",
      "url": "https://github.com/tlswg/tls13-spec/pull/619",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-09-02T18:40:50Z",
      "updatedAt": "2016-10-12T19:45:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cb305ff889a9d9e402e2239603222e008c7f09ea",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "rsa-crt-key-leaks",
      "headRefOid": "20f981bdb4936bf8b8be4d03f925a3d73afc00a2",
      "closedAt": "2016-10-12T16:10:53Z",
      "mergedAt": "2016-10-12T16:10:53Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "af3daeea8304da454bf72887aacaad897e0c1493"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben: do you guys do this? I don't think NSS does.\n",
          "createdAt": "2016-10-12T15:46:56Z",
          "updatedAt": "2016-10-12T15:46:56Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: We do this, yeah.\n",
          "createdAt": "2016-10-12T18:53:07Z",
          "updatedAt": "2016-10-12T18:53:07Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "NSS does as well. Merged\n",
          "createdAt": "2016-10-12T19:45:26Z",
          "updatedAt": "2016-10-12T19:45:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 620,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM4NDgyMTc=",
      "title": "simplify used language",
      "url": "https://github.com/tlswg/tls13-spec/pull/620",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "reading standards is hard enough without use of advanced English, use simple words\n",
      "createdAt": "2016-09-02T18:50:19Z",
      "updatedAt": "2016-09-02T18:54:04Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cb305ff889a9d9e402e2239603222e008c7f09ea",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "simple-english",
      "headRefOid": "2bde4920b5302177087673de299c991e34d47cf7",
      "closedAt": "2016-09-02T18:53:04Z",
      "mergedAt": "2016-09-02T18:53:04Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c1fa6d35006d6caf0c1f8c908274b01f24690cc4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 621,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM4NTAyNzQ=",
      "title": "Error handling specification",
      "url": "https://github.com/tlswg/tls13-spec/pull/621",
      "state": "CLOSED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "While the specification already details a lot of situations that \"MUST NOT\" happen or that are errors, it doesn't specify how those situations should be handled by peers.\n\nAdd those details.\n",
      "createdAt": "2016-09-02T19:06:04Z",
      "updatedAt": "2016-09-05T19:19:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bb96670773ebc86acfb54a9f3407d5e162fa12ea",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "error-handling",
      "headRefOid": "6879e3a1829873c0a0ed3de34bdb83e621be0f0e",
      "closedAt": "2016-09-05T19:19:23Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@tomato42. Thanks for this PR, but I think I want to go in a different direction. In general, I'd like the descriptions of the alerts to be clear enough that you can infer which alert to send without us having to tell you explicitly. That won't always be true, in which case we will need to specify, but I'd like to avoid calling out each error condition. This applies in particular to \"illegal_parameter\" and \"decode_error\". If you'd like to suggest clarifications to those alert descriptions and then reduce this PR to just the cases which seem to be underspecified, I can take a look\n",
          "createdAt": "2016-09-02T19:21:02Z",
          "updatedAt": "2016-09-02T19:21:02Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Reading the current draft I had a feeling as if error handling for 70 or 80% of cases was already specified, the patches just put the description of an error with the way to handle it. I can't guarantee that they don't duplicate the error handling description (I have read the draft from cover to cover just once...).\n\nAnd actually, I found some places where on first read you'd think that you need to send alerts where you don't, so I think that being explicit in all places is clearer for an implementer.\n\nIn case that didn't convince you: I guess you'd like to start with 1cfa45e and go from there?\n",
          "createdAt": "2016-09-02T19:46:19Z",
          "updatedAt": "2016-09-02T19:46:19Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I decided to give this a quick review in case it was pruned down to the point where we'd want to take it. (I'm generally in favor of more explicitness in error specifying than Eric, but I do agree that there's probably too much here.) Unfortunately, there are significant grammatical issues here. I counted about 14 more cases where a sentence was missing a \"the\" or \"a\" word, in addition to those I already noted. I'm going to guess that Czech does not have counterparts for those words (at least in the given cases). Poke me in the future if/when you do a revision and I'll do a recheck.\n",
          "createdAt": "2016-09-03T00:19:22Z",
          "updatedAt": "2016-09-03T00:19:22Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@tomato42 I've put up a new PR  #625 that moves in the direction I want to go here, which is to provide general rules and only specific alerts where it's unobvious or where I already have to say that you should abort. So I'm going to close this one. Please feel free to call out any cases where you believe that that PR still isn't specific enough so we can evaluate case-by-case\n",
          "createdAt": "2016-09-05T19:19:23Z",
          "updatedAt": "2016-09-05T19:19:23Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 622,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM4NTM2MjY=",
      "title": "don't specify what to do if there are duplicated extensions",
      "url": "https://github.com/tlswg/tls13-spec/pull/622",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "since server hello says that presence of extra extensions is\na illegal_parameter and encrypted extensions say that presence\nof server hello specific extensions is illegal_parameter\nthere is no reason to specify what to do with situation that\nMUST generate fatal alert\n",
      "createdAt": "2016-09-02T19:33:33Z",
      "updatedAt": "2016-09-02T19:37:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bb96670773ebc86acfb54a9f3407d5e162fa12ea",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "duplicated-extensions",
      "headRefOid": "596edca35a0813c00d2169abc1b87e2991ab6550",
      "closedAt": "2016-09-02T19:36:36Z",
      "mergedAt": "2016-09-02T19:36:36Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "0ff54363933f1c339b335c5d14a3384a532f3ccb"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 624,
      "id": "MDExOlB1bGxSZXF1ZXN0ODM5MDQzNTE=",
      "title": "Forbid RFC 4681 and RFC 5878. Fixes #623",
      "url": "https://github.com/tlswg/tls13-spec/pull/624",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-09-03T19:53:18Z",
      "updatedAt": "2016-10-07T15:24:16Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d4dccff6b8e7dca1c2fa6ccdfed29b5141aec030",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue623_remove_supp_auth",
      "headRefOid": "0eabd11c0b6f3888c3d68f44ccc85322db6367ee",
      "closedAt": "2016-10-07T15:24:16Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Update: MSFT needs RFC 4681, so it's just 5878 that's on the table\n",
          "createdAt": "2016-09-04T00:53:29Z",
          "updatedAt": "2016-09-04T00:53:29Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Here are the three references to RFC 5878:\nhttps://datatracker.ietf.org/doc/rfc5878/referencedby/\n\nAny chance we could check with these folks before prohibiting it?\n",
          "createdAt": "2016-09-06T20:27:31Z",
          "updatedAt": "2016-09-06T20:27:31Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner Can you take that?\n",
          "createdAt": "2016-09-21T17:47:52Z",
          "updatedAt": "2016-09-21T17:47:52Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 625,
      "id": "MDExOlB1bGxSZXF1ZXN0ODQwMjk3MzY=",
      "title": "Clean up alert requirements. Fixes #254. This is a long-delayed chang\u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/625",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026e from the\n\n9/2015 interim. Specifically:\n- Use common language for failures\n- Don't require implementations to send alerts, but do require them\n  to send specific alerts if they send them.\n",
      "createdAt": "2016-09-05T17:56:30Z",
      "updatedAt": "2016-09-20T01:00:53Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43352b73cc4f4a0edc829168d7df8bb7ef2256a7",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue254_alert_requirements",
      "headRefOid": "1c722f8af02932ce3c3467881956bf9059a1f5c8",
      "closedAt": "2016-09-20T01:00:53Z",
      "mergedAt": "2016-09-20T01:00:53Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2fabbf6262a90f59bcd332ce0771f7ea9268ffbe"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should we have a blurb somewhere stating a recommendation for what sort of use cases we would expect a silent fail? The main one that comes to mind is a server expecting PSK for client auth which could just reject invalid connections with no further response.\n\n(side-note: I wish GitHub had a \"submit all comments\" button to allow reviewing and sending all at once in with a single notification. Instead, I just comment as I go, but that can get spammy quickly. :/ )\n",
          "createdAt": "2016-09-05T21:38:41Z",
          "updatedAt": "2016-09-05T21:38:41Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My sense is that it's not any particular use case that has a silent fail but rather implementations that do.\n",
          "createdAt": "2016-09-05T22:36:35Z",
          "updatedAt": "2016-09-05T22:36:35Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The first time alerts come up in the current document is in the \"Incorrect DHE Share\" section.\nI would consider adding a note at the end of the first paragraph in section 2 like \"A failure of the handshake or other protocol error triggers the termination of the connection, optionally preceded by an alert message that may or may not be authenticated depending on how far the handshake progressed.\"\n",
          "createdAt": "2016-09-09T22:32:19Z",
          "updatedAt": "2016-09-09T22:32:19Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 626,
      "id": "MDExOlB1bGxSZXF1ZXN0ODQwNjE1ODc=",
      "title": "Layout and syntax",
      "url": "https://github.com/tlswg/tls13-spec/pull/626",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixing minor layout and syntax problems.\n",
      "createdAt": "2016-09-06T05:16:21Z",
      "updatedAt": "2016-10-18T04:09:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43352b73cc4f4a0edc829168d7df8bb7ef2256a7",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "layout-only",
      "headRefOid": "475e76b7f66590e7dc09a7b4eb34777276e193bf",
      "closedAt": "2016-09-06T13:48:07Z",
      "mergedAt": "2016-09-06T13:48:07Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f7d386c620624f39feeecbdcacd42c63a02f17f0"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 628,
      "id": "MDExOlB1bGxSZXF1ZXN0ODQxNDg5NjM=",
      "title": "Editorial: Fix syntax errors",
      "url": "https://github.com/tlswg/tls13-spec/pull/628",
      "state": "MERGED",
      "author": "manuels",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "According to the Section 3.5. Enumerateds there must be a comma before the\nwidth definition (I found this mistake by writing an source-to-source compiler\nfor the presentation language).\n",
      "createdAt": "2016-09-06T15:56:37Z",
      "updatedAt": "2016-09-06T16:23:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f7d386c620624f39feeecbdcacd42c63a02f17f0",
      "headRepository": "manuels/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "793664dfdb792dc65f1bfcf120ae08a5b0791ea9",
      "closedAt": "2016-09-06T16:10:31Z",
      "mergedAt": "2016-09-06T16:10:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c2cfd76d7307f37afeda90e13b266bd93e9a9675"
      },
      "comments": [
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@manuels cool!  Have you seen https://github.com/richsalz/tlsparser ?\n",
          "createdAt": "2016-09-06T15:57:38Z",
          "updatedAt": "2016-09-06T15:57:38Z"
        },
        {
          "author": "manuels",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the quick response.\nGreat project! Wish I had seen it before.\nNow I already implement the whole grammar myself (https://github.com/manuels/rusty-tls-rfc-parser).\n",
          "createdAt": "2016-09-06T16:17:06Z",
          "updatedAt": "2016-09-06T16:17:06Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Neat!\n",
          "createdAt": "2016-09-06T16:23:31Z",
          "updatedAt": "2016-09-06T16:23:31Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 629,
      "id": "MDExOlB1bGxSZXF1ZXN0ODQyMjM0OTQ=",
      "title": "Cleanup",
      "url": "https://github.com/tlswg/tls13-spec/pull/629",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Cleaning up the meanings of structure members.\n",
      "createdAt": "2016-09-07T01:31:59Z",
      "updatedAt": "2016-10-18T04:08:59Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c2cfd76d7307f37afeda90e13b266bd93e9a9675",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "cleanup",
      "headRefOid": "85892311dd8ba587213da9803e225c609d05cc2b",
      "closedAt": "2016-09-21T19:28:09Z",
      "mergedAt": "2016-09-21T19:28:09Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "85892311dd8ba587213da9803e225c609d05cc2b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 632,
      "id": "MDExOlB1bGxSZXF1ZXN0ODQ1MDYzMjI=",
      "title": "Versions in extensions",
      "url": "https://github.com/tlswg/tls13-spec/pull/632",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-09-08T16:02:16Z",
      "updatedAt": "2016-09-21T17:41:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c2cfd76d7307f37afeda90e13b266bd93e9a9675",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "versions_in_extensions",
      "headRefOid": "964f6faada465897b70affec1c89cfe575c7e05b",
      "closedAt": "2016-09-21T17:41:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Separately merged\n",
          "createdAt": "2016-09-21T17:41:48Z",
          "updatedAt": "2016-09-21T17:41:48Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwMzg0Mw==",
          "commit": {
            "abbreviatedOid": "964f6fa"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-21T17:40:46Z",
          "updatedAt": "2016-09-21T17:40:46Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "Done.\n",
              "createdAt": "2016-09-21T17:40:46Z",
              "updatedAt": "2016-09-21T17:40:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwMzg2Nw==",
          "commit": {
            "abbreviatedOid": "964f6fa"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-21T17:40:54Z",
          "updatedAt": "2016-09-21T17:40:54Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "Done.\n",
              "createdAt": "2016-09-21T17:40:54Z",
              "updatedAt": "2016-09-21T17:40:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 633,
      "id": "MDExOlB1bGxSZXF1ZXN0ODQ1MzQ2ODk=",
      "title": "Remove server_name from the 0-RTT section.",
      "url": "https://github.com/tlswg/tls13-spec/pull/633",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This seems to have just been a mistake? Unlike ALPN, server_name isn't a\nvalue that is selected by the server, so there's no need to match it\nagainst a value stored in the session.\n\nThere is the issue of whether sessions are resumable across names or\nother application-level contexts (for instance, whether we send client\ncertificates, different cipher profiles, etc.), but that is a more\ncomplex issue than simply matching on server_name on the server side.\nMoreover, any rules there would want to apply to resumption as a whole.\nIt seems there's no reason to have 0-RTT-specific rules over resumption\nones here.\n",
      "createdAt": "2016-09-08T19:03:08Z",
      "updatedAt": "2016-09-21T17:49:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c2cfd76d7307f37afeda90e13b266bd93e9a9675",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "server-name-0rtt",
      "headRefOid": "2d014c9dde1ca77ba68c41c32e453ac6c060f055",
      "closedAt": "2016-09-21T17:49:11Z",
      "mergedAt": "2016-09-21T17:49:11Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "71e1528cf58c429d5288f9d5c4558a4d4e411041"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 634,
      "id": "MDExOlB1bGxSZXF1ZXN0ODQ1OTU5ODc=",
      "title": "define protocol version ID registry",
      "url": "https://github.com/tlswg/tls13-spec/pull/634",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This pulls a couple cleanup commits out of PR #612 that explicitly renames the protocol version fields as IDs and defines a registry for all values, as they're really just arbitrary codepoints at this point. With PR #632 now doing an updated version of my proposed list-based version negotiation extension, we've got these IDs in entirely too many places and need to just define a formal list to make things less messy.\n\nIANA registry idea initially proposed on-list by @dkg.\n",
      "createdAt": "2016-09-09T05:33:10Z",
      "updatedAt": "2016-10-20T18:36:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ebcc361cc37bd8ed32ffb33c17813218f0499956",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "tlsversionformalregistry",
      "headRefOid": "6a5fd988af46bd1801ee3079f1a6a51134945d15",
      "closedAt": "2016-10-18T23:07:09Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't believe that the source of negotiation failures has in any way been that people somehow thought that the code points were in fact the versions, and this change doesn't seem to me to aid comprehension.\n",
          "createdAt": "2016-09-09T13:58:50Z",
          "updatedAt": "2016-09-09T13:58:50Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Re the IANA registry: that seems like explicitly the wrong idea. Only new versions of TLS are going to be able to register here, not random new RFCs defining \"blah\"\n",
          "createdAt": "2016-09-09T14:01:24Z",
          "updatedAt": "2016-09-09T14:01:24Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hrm. Is there no way to add a registry that only TLS gets to extend? It seems we do want an experimental range for all the draft_version games we play. (And of course I'd like to burn some GREASE values.) Or do we just make values up since there won't be that many and 2^16 is a big number?\n",
          "createdAt": "2016-09-09T14:17:22Z",
          "updatedAt": "2016-09-09T14:17:22Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, a registry won't help with draft_version, right?\n\nI think we just need to specify the appropriate use of the ranges.\n",
          "createdAt": "2016-09-09T14:32:35Z",
          "updatedAt": "2016-09-09T14:32:35Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Make it an expert review registry and make the TLSWG chairs be the experts?\n",
          "createdAt": "2016-09-09T14:45:32Z",
          "updatedAt": "2016-09-09T14:45:32Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You can even supply guidance to the expert as to what criteria are to be used for approval.\n",
          "createdAt": "2016-09-09T18:03:53Z",
          "updatedAt": "2016-09-09T18:03:53Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, I've pushed a revised version (multiple commits squashed to one, here). This reverts the name change of the type to keep it consistent with past specs, but leaves in the explicit use of the term \"ID\" when talking about it. This also formally reserves a block of 256 for private experimental use, using the same language copy/pasted from the other registry definitions above it. The main block is set to \"Standards Action\", which essentially just covers new TLS version standards (or some sort of other standards track RFC the TLS WG were to publish).\n",
          "createdAt": "2016-09-09T21:11:45Z",
          "updatedAt": "2016-09-09T21:11:45Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased, though, I get the sense that we're leaning towards not doing a formal registry.\n",
          "createdAt": "2016-10-17T23:52:13Z",
          "updatedAt": "2016-10-17T23:52:13Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing per chairs\n",
          "createdAt": "2016-10-18T23:07:08Z",
          "updatedAt": "2016-10-18T23:07:08Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 635,
      "id": "MDExOlB1bGxSZXF1ZXN0ODQ3OTI1MzI=",
      "title": "Clarify point format vs point negotiation removal.",
      "url": "https://github.com/tlswg/tls13-spec/pull/635",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "TLS still permits shared point negotiation via ECDH, TLS 1.3 removes point _format_ negotiation.\n",
      "createdAt": "2016-09-11T17:35:20Z",
      "updatedAt": "2016-09-11T18:31:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2ccc2373494c3badf597f96b0ab1bbcf8919f9d7",
      "headRepository": "dconnolly/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "13617a334b7b891a2bd3720a7c03b77b9714f574",
      "closedAt": "2016-09-11T18:31:35Z",
      "mergedAt": "2016-09-11T18:31:35Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9866db1219fafc7aea265f57890ff5942abf0738"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 636,
      "id": "MDExOlB1bGxSZXF1ZXN0ODQ3OTI3OTQ=",
      "title": "Editorial: Select on Handshake.msg_type",
      "url": "https://github.com/tlswg/tls13-spec/pull/636",
      "state": "MERGED",
      "author": "manuels",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The select statement in Handshake should be based on Handshake.msg_type since the field is already defined and the select statement is unnamed and does not define its own field.\n",
      "createdAt": "2016-09-11T17:45:58Z",
      "updatedAt": "2016-09-11T18:31:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2ccc2373494c3badf597f96b0ab1bbcf8919f9d7",
      "headRepository": "manuels/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "d2ed1c3dd4e45185566cf6d1c070a5bf3eccd13d",
      "closedAt": "2016-09-11T18:31:51Z",
      "mergedAt": "2016-09-11T18:31:51Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7670686f3f14e7b57699a89c273eb182328847c8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 637,
      "id": "MDExOlB1bGxSZXF1ZXN0ODQ3OTQ1Mjg=",
      "title": "Move 'Unauthenticated Operation' to backwards compatibility section.",
      "url": "https://github.com/tlswg/tls13-spec/pull/637",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Right now it's under 'Cipher Suites' which is weird with the cipher\nsuite split. Backwards compatibility seems a better place for it since\nwe're talking about features in older versions of TLS that are now gone.\n",
      "createdAt": "2016-09-11T18:55:09Z",
      "updatedAt": "2016-09-22T03:35:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7670686f3f14e7b57699a89c273eb182328847c8",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "unauthenticated-operation-move",
      "headRefOid": "9719a187d493be2e373171571606423f88d95c7e",
      "closedAt": "2016-09-21T18:24:53Z",
      "mergedAt": "2016-09-21T18:24:53Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "709a74cb0ea481250eb08e38fbaa071624137033"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also noticed there were some uses of 'cipher suites' that were off, so I've replaced them with more generic words.\n",
          "createdAt": "2016-09-11T18:57:38Z",
          "updatedAt": "2016-09-11T18:57:38Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It doesn't belong in backwards compatibility, either. It's primarily about ways to do unauthenticated in TLS 1.3; just the first sentence mentions that the old suites are gone. Not sure where this should go now, though.\n",
          "createdAt": "2016-09-11T23:03:49Z",
          "updatedAt": "2016-09-11T23:03:49Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The end of \"Cryptographic Negotiation\", perhaps?\nhttps://tlswg.github.io/tls13-spec/#rfc.section.4.1.1\n\nI guess backwards compatibility here currently only talks about protocol-level backwards compatibility. There's also semantic backwards compatibility like the fact that 1.2 and 1.3 PSKs aren't the same animal.\n",
          "createdAt": "2016-09-11T23:09:07Z",
          "updatedAt": "2016-09-11T23:09:07Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with @davegarrett that this doesn't belong in backward compatibility. @davidben how about implementation notes?\n",
          "createdAt": "2016-09-21T17:47:22Z",
          "updatedAt": "2016-09-21T17:47:22Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "SGTM. Implementation notes it is!\n",
          "createdAt": "2016-09-21T18:21:29Z",
          "updatedAt": "2016-09-21T18:21:29Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Wednesday, September 21, 2016 02:21:32 pm David Benjamin wrote:\n\n> SGTM. Implementation notes it is!\n\nDitto. Sounds like a good enough spot.\n",
          "createdAt": "2016-09-22T03:35:01Z",
          "updatedAt": "2016-09-22T03:35:01Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 638,
      "id": "MDExOlB1bGxSZXF1ZXN0ODQ3OTU3MzU=",
      "title": "Tidy up the text around AEADs and ciphers.",
      "url": "https://github.com/tlswg/tls13-spec/pull/638",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We are inconsistent about \"AEAD cipher\" and \"AEAD algorithm\". RFC 5116\nuses \"AEAD algorithm\" and \"AEAD cipher\" is confusing with \"cipher\nsuite\", so standardize on algorithm.\n\nIANA considerations were never updated to actually add the cipher\nsuites. Fix that. Match the cipher suite name column with the IANA name\nso we can reuse the table.\n\nFinally, since we are defining new cipher suites, we should take care to\ncite where our AEADs come from. Do so.\n",
      "createdAt": "2016-09-11T19:39:42Z",
      "updatedAt": "2016-09-21T17:45:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7670686f3f14e7b57699a89c273eb182328847c8",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "aead-tidy",
      "headRefOid": "15a0485f8f05a26f604f435df54586d3fecfe600",
      "closedAt": "2016-09-21T17:45:15Z",
      "mergedAt": "2016-09-21T17:45:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "15a0485f8f05a26f604f435df54586d3fecfe600"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 640,
      "id": "MDExOlB1bGxSZXF1ZXN0ODU2ODQ4Mzg=",
      "title": "Add certificate_required alert.",
      "url": "https://github.com/tlswg/tls13-spec/pull/640",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There is no alert for a server which requested a client certificate,\nrequired it, but was not sent one. Servers today send a generic\nhandshake_failure which means clients must use heuristics to show error\nmessages to the user.\n\nUnlike nearly every other negotiation in TLS, client certificate\nselection is actually sometimes a user-level decision, so it is arguably\nthe most important place for us to have a dedicated alert.\n\n(Also remove a \"This alert is always fatal\" note on\nbad_certificate_status_response. All alerts are now fatal, so this is\nredundant.)\n",
      "createdAt": "2016-09-17T19:37:21Z",
      "updatedAt": "2016-09-21T18:12:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7670686f3f14e7b57699a89c273eb182328847c8",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "certificate-required",
      "headRefOid": "795524baf7dc3536294e6b9b7371e9a1f212205c",
      "closedAt": "2016-09-21T18:12:27Z",
      "mergedAt": "2016-09-21T18:12:27Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "795524baf7dc3536294e6b9b7371e9a1f212205c"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1\n",
          "createdAt": "2016-09-20T15:09:45Z",
          "updatedAt": "2016-09-20T15:09:45Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NDMz",
          "commit": {
            "abbreviatedOid": "f6f752f"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-18T04:48:07Z",
          "updatedAt": "2016-09-18T04:48:07Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Stick a \"[[TODO: IANA Considerations.]]\" here or amend IANA Considerations for this (and also missing_extension, possibly).\n",
              "createdAt": "2016-09-18T04:48:07Z",
              "updatedAt": "2016-09-19T04:07:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMzY3",
          "commit": {
            "abbreviatedOid": "f6f752f"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-19T04:07:54Z",
          "updatedAt": "2016-09-19T04:07:54Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Added a TODO since there's a bunch of new alerts that all need this.\n",
              "createdAt": "2016-09-19T04:07:54Z",
              "updatedAt": "2016-09-19T04:07:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 641,
      "id": "MDExOlB1bGxSZXF1ZXN0ODU5OTI4NTU=",
      "title": "Renumber new SignatureSchemes.",
      "url": "https://github.com/tlswg/tls13-spec/pull/641",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Avoid both starting with an existing hash AND ending with an existing\nSignatureAlgorithm. In principle, this should not be necessary, but TLS\n1.2 says:\n\n>   signature\n>      This field indicates the signature algorithm that may be used.\n>      The values indicate anonymous signatures, RSASSA-PKCS1-v1_5\n>      [PKCS1] and DSA [DSS], and ECDSA [ECDSA], respectively.  The\n>      \"anonymous\" value is meaningless in this context but used in\n>      Section 7.4.3.  It MUST NOT appear in this extension.\n\nBouncy Castle appears to have been enforcing this, causing interop\nissues. As this was a straight-up MUST NOT, it seems prudent to\nrenumber. And if we're renumbering anyway, may as well avoid all the old\nSignatureAlgorithms and avoid confusing tools like Wireshark.\n",
      "createdAt": "2016-09-20T14:57:38Z",
      "updatedAt": "2016-09-21T18:21:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2fabbf6262a90f59bcd332ce0771f7ea9268ffbe",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "sig-scheme-renumber",
      "headRefOid": "9392d712331c62c4b6d6034bd95cbbf94a38819d",
      "closedAt": "2016-09-21T18:21:03Z",
      "mergedAt": "2016-09-21T18:21:02Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9392d712331c62c4b6d6034bd95cbbf94a38819d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODAzNjk2",
          "commit": {
            "abbreviatedOid": "af59c9c"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-20T17:54:28Z",
          "updatedAt": "2016-09-20T17:54:28Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "We already have a \"Values with the first byte...\" sentence in its definition. Just add a second:\n\n\"Values with the second byte in the range 0-3 that are not currently allocated are reserved for backwards compatibility.\"\n",
              "createdAt": "2016-09-20T17:54:28Z",
              "updatedAt": "2016-09-20T18:38:21Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODEyODAx",
          "commit": {
            "abbreviatedOid": "af59c9c"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-20T18:38:24Z",
          "updatedAt": "2016-09-20T18:38:25Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Done.\n",
              "createdAt": "2016-09-20T18:38:24Z",
              "updatedAt": "2016-09-20T18:38:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNDE3MA==",
          "commit": {
            "abbreviatedOid": "9392d71"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-21T17:42:38Z",
          "updatedAt": "2016-09-21T17:42:38Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "NIT: [SHALL update/has updated]\n",
              "createdAt": "2016-09-21T17:42:38Z",
              "updatedAt": "2016-09-21T17:42:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 642,
      "id": "MDExOlB1bGxSZXF1ZXN0ODYxMDY4MTE=",
      "title": "Fix error in NamedGroupList",
      "url": "https://github.com/tlswg/tls13-spec/pull/642",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Each value in NamedGroup enum has 2 bytes. So the lower limit for named_group_list should be 2. Similar as [Errata 4633](https://www.rfc-editor.org/errata_search.php?eid=4633).\n",
      "createdAt": "2016-09-21T06:52:48Z",
      "updatedAt": "2016-09-21T13:35:09Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2fabbf6262a90f59bcd332ce0771f7ea9268ffbe",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "ff13a73a1557ebc892b53fbc7ad37b18ea586f6b",
      "closedAt": "2016-09-21T12:38:13Z",
      "mergedAt": "2016-09-21T12:38:13Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e0d1acdb1b852bacc482e22567fba0a70055837c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 643,
      "id": "MDExOlB1bGxSZXF1ZXN0ODYyMjM0MzY=",
      "title": "Tighten and clarify KeyShareEntry ordering.",
      "url": "https://github.com/tlswg/tls13-spec/pull/643",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The text already says that both supported_groups and key_shares are in\norder of \"client preference\". Supposing \"client preference\" is a\nwell-defined notion, we are already requiring the order match.\n\nThe SHOULD was also unclear on whether the list may be a general\nsubsequence. Clarify that this is allowed. This may be useful if, say,\nwe define some very large NamedGroup (post-quantum?) in the future that\nis still preferable over the existing options. Clients would likely wish\nto NOT offer it initially because it would be a waste of bandwidth for\nthe vast majority of servers which don't support it. (Not to mention\nintolerance problems.)\n\nIn that scenario, a client would likely not predict a key_share by\ndefault and instead use some kind of server info cache (either caching\nwhat the server chose or using the full server supported_groups list).\nBut that client would still wish to advertise the new group first.\n",
      "createdAt": "2016-09-21T19:11:58Z",
      "updatedAt": "2016-09-21T19:18:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "709a74cb0ea481250eb08e38fbaa071624137033",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "key-share-ordering",
      "headRefOid": "a9a1f116beefea4ba409f682f8bdd65cb55b957b",
      "closedAt": "2016-09-21T19:18:28Z",
      "mergedAt": "2016-09-21T19:18:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "269478a46e13f06d24e7ba7f80115aaf641cea2b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 645,
      "id": "MDExOlB1bGxSZXF1ZXN0ODYyMjg1MDQ=",
      "title": "Add draft version section",
      "url": "https://github.com/tlswg/tls13-spec/pull/645",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-09-21T19:44:19Z",
      "updatedAt": "2016-09-21T20:39:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d909da442f93fe11f6219ae1bb6e1fb6dd6b9931",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "draft_version",
      "headRefOid": "04f9a4ffb6045a212038bc9e182db9c377bc0fe8",
      "closedAt": "2016-09-21T20:10:12Z",
      "mergedAt": "2016-09-21T20:10:12Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "30b0c53e30d253def5e9d80413201cc8d0fa07c0"
      },
      "comments": [
        {
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "By the way, you also need to update Version Negotiation section of the [wiki page](https://github.com/tlswg/tls13-spec/wiki/Implementations#version-negotiation).\n",
          "createdAt": "2016-09-21T20:02:19Z",
          "updatedAt": "2016-09-21T20:02:19Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "lgtm\n",
          "createdAt": "2016-09-21T20:03:18Z",
          "updatedAt": "2016-09-21T20:03:18Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done\n\nOn Wed, Sep 21, 2016 at 1:02 PM, Xiaoyin Liu notifications@github.com\nwrote:\n\n> By the way, you also need to update Version Negotiation section of the wiki\n> page\n> https://github.com/tlswg/tls13-spec/wiki/Implementations#version-negotiation\n> .\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/645#issuecomment-248726145, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/ABD1oSuKav6E2P7FFlcNx-oldcON9vIOks5qsY1NgaJpZM4KDM52\n> .\n",
          "createdAt": "2016-09-21T20:39:57Z",
          "updatedAt": "2016-09-21T20:39:57Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODQ5Mg==",
          "commit": {
            "abbreviatedOid": "63723a9"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-21T19:48:37Z",
          "updatedAt": "2016-09-21T19:48:38Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Probably should clarify that this also figures into the ServerHello (and HelloRetryRequest) version.\n",
              "createdAt": "2016-09-21T19:48:37Z",
              "updatedAt": "2016-09-21T20:00:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyOTA3OA==",
          "commit": {
            "abbreviatedOid": "63723a9"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-21T19:51:53Z",
          "updatedAt": "2016-09-21T19:51:53Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I hadn't thought through the multi-version case. You think (I assume) that we should shove it into ServerHello.version?\n",
              "createdAt": "2016-09-21T19:51:53Z",
              "updatedAt": "2016-09-21T20:00:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyOTc1Mw==",
          "commit": {
            "abbreviatedOid": "63723a9"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-21T19:55:42Z",
          "updatedAt": "2016-09-21T19:55:42Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Yeah. Even without multi-version, it seems sanest just to say that client and server version spellings always match. Versions are opaque u16s (I guess u8[2]s. Whatever.) which are offered by the client and selected by the server. The draft defines version {0x7f, blah} and the final will define version {3, 4}.\n",
              "createdAt": "2016-09-21T19:55:42Z",
              "updatedAt": "2016-09-21T20:00:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 646,
      "id": "MDExOlB1bGxSZXF1ZXN0ODYyNDE1ODA=",
      "title": "Fix error in Version Extension",
      "url": "https://github.com/tlswg/tls13-spec/pull/646",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "ClientHello.version -> ClientHello.legacy_version\n",
      "createdAt": "2016-09-21T21:07:26Z",
      "updatedAt": "2016-09-21T21:49:08Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "30b0c53e30d253def5e9d80413201cc8d0fa07c0",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "dd7a4233d57e3736dfedc9304c1ce0c233e62917",
      "closedAt": "2016-09-21T21:14:39Z",
      "mergedAt": "2016-09-21T21:14:39Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "8385360321696fb2e73665454bfcc7dbebbf4205"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged. Please send me a PR adding yourself to Contributors in alphabetical order\n",
          "createdAt": "2016-09-21T21:14:41Z",
          "updatedAt": "2016-09-21T21:14:41Z"
        },
        {
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr Thank you! Done in PR #647.\n",
          "createdAt": "2016-09-21T21:49:08Z",
          "updatedAt": "2016-09-21T21:49:08Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 647,
      "id": "MDExOlB1bGxSZXF1ZXN0ODYyNDc2NjY=",
      "title": "Add Xiaoyin Liu to contributors",
      "url": "https://github.com/tlswg/tls13-spec/pull/647",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add myself to contributors.\n",
      "createdAt": "2016-09-21T21:48:29Z",
      "updatedAt": "2016-09-22T00:25:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8385360321696fb2e73665454bfcc7dbebbf4205",
      "headRepository": null,
      "headRefName": "patch-2",
      "headRefOid": "8bd9e0839311509272dc18a9a747c3785af1b48f",
      "closedAt": "2016-09-22T00:15:45Z",
      "mergedAt": "2016-09-22T00:15:45Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "be5f99f9f8419b9a0952b75c60786a2869bfa9dd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 648,
      "id": "MDExOlB1bGxSZXF1ZXN0ODYyNTQ4NTc=",
      "title": "Fix typo in Key Share section",
      "url": "https://github.com/tlswg/tls13-spec/pull/648",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "MUST by generated independently -> MUST be generated independently\n",
      "createdAt": "2016-09-21T22:46:38Z",
      "updatedAt": "2016-09-22T00:28:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8385360321696fb2e73665454bfcc7dbebbf4205",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "0638cc91e533184f6846bd0d71d76fd9a1d65c14",
      "closedAt": "2016-09-22T00:15:33Z",
      "mergedAt": "2016-09-22T00:15:33Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "404a01bc0bb6faefc98a43b89b591645a4909790"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 649,
      "id": "MDExOlB1bGxSZXF1ZXN0ODYyNjgyNTc=",
      "title": "Add guidance for draft versions on the anti-downgrade mechanism.",
      "url": "https://github.com/tlswg/tls13-spec/pull/649",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Folks have already gotten this wrong, so add a note here.\n",
      "createdAt": "2016-09-22T01:33:52Z",
      "updatedAt": "2016-09-22T06:29:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "be5f99f9f8419b9a0952b75c60786a2869bfa9dd",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "draft-version-downgrade",
      "headRefOid": "13048c08af6b8b202c237450e74630c2eed37bda",
      "closedAt": "2016-09-22T06:16:48Z",
      "mergedAt": "2016-09-22T06:16:48Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ba66e9dfe6164effee4bd818ef46d00cd4346e07"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA4NjI0MA==",
          "commit": {
            "abbreviatedOid": "13048c0"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-22T06:24:33Z",
          "updatedAt": "2016-09-22T06:24:33Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Note that this won't be a following paragraph, it's markdown, so this will be part of the same paragraph :)\n",
              "createdAt": "2016-09-22T06:24:33Z",
              "updatedAt": "2016-09-22T06:24:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA4NjY0OA==",
          "commit": {
            "abbreviatedOid": "13048c0"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-22T06:29:22Z",
          "updatedAt": "2016-09-22T06:29:22Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I'd noticed that, but the one in section 1 did the same thing, so I figured you all had decided that's what \"following paragraph\" meant. :-)\n\nhttps://tlswg.github.io/tls13-spec/#rfc.section.1\n",
              "createdAt": "2016-09-22T06:29:22Z",
              "updatedAt": "2016-09-22T06:29:22Z"
            }
          ]
        }
      ]
    },
    {
      "number": 650,
      "id": "MDExOlB1bGxSZXF1ZXN0ODYyODI0NjQ=",
      "title": "Editorial update for Client Hello section",
      "url": "https://github.com/tlswg/tls13-spec/pull/650",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the first paragraph, remove \"that selects cryptographic parameters that don\u2019t match the client\u2019s 'key_share' extension\".\n\nReason: According to section 4.2.5, HelloRetryRequest might not include the \u201ckey_share\u201d extension. Also there is a whole section for Hello Retry Request. So I don't think we need to explain what a HelloRetryRequest is here.\n",
      "createdAt": "2016-09-22T05:54:03Z",
      "updatedAt": "2016-09-22T10:47:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "be5f99f9f8419b9a0952b75c60786a2869bfa9dd",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "59697455ba867eaf581e1e8af0bca3aa1dcd61c0",
      "closedAt": "2016-09-22T06:17:19Z",
      "mergedAt": "2016-09-22T06:17:19Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e339b3310062076784b9236bd3c82e3042397799"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 651,
      "id": "MDExOlB1bGxSZXF1ZXN0ODYyODQ2MzE=",
      "title": "Adding me to the contributor list.",
      "url": "https://github.com/tlswg/tls13-spec/pull/651",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Response to https://github.com/tlswg/tls13-spec/issues/627#issuecomment-248734788\n",
      "createdAt": "2016-09-22T06:25:50Z",
      "updatedAt": "2016-10-18T04:08:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e339b3310062076784b9236bd3c82e3042397799",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "credit",
      "headRefOid": "eb1b015846cc44817474e69f4376de8e54aad5ed",
      "closedAt": "2016-09-22T06:35:17Z",
      "mergedAt": "2016-09-22T06:35:17Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ff852e500ddd2b895d89af15967dad738155294b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 652,
      "id": "MDExOlB1bGxSZXF1ZXN0ODYzOTg2MjE=",
      "title": "Clarify g,p are predefined",
      "url": "https://github.com/tlswg/tls13-spec/pull/652",
      "state": "CLOSED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think the current spec doesn't explicitly say what the values of g and p (for finite field DHE) are. So I want to add a link to RFC 7919 in Diffie-Hellman Parameters section to make it clear.\n",
      "createdAt": "2016-09-22T19:24:22Z",
      "updatedAt": "2016-10-12T21:50:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ff852e500ddd2b895d89af15967dad738155294b",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "2c1535de714b79f643d8659f4f2bf4a0282679c5",
      "closedAt": "2016-09-26T11:39:49Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good suggestion, but I fixed this a bit differently in https://github.com/tlswg/tls13-spec/commit/76b800c5574ef12cde67bcc8b09059dcc5d1ce86\n",
          "createdAt": "2016-09-26T11:39:33Z",
          "updatedAt": "2016-09-26T11:39:33Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 653,
      "id": "MDExOlB1bGxSZXF1ZXN0ODY0MDE0NTM=",
      "title": "update changelog for PR #641",
      "url": "https://github.com/tlswg/tls13-spec/pull/653",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "PR #641 changed enum values which would need updating by any experimental implementations that were actually using them. Even if this doesn't come up in practice, it should be listed in the changelog.\n",
      "createdAt": "2016-09-22T19:42:47Z",
      "updatedAt": "2016-09-22T19:50:09Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ff852e500ddd2b895d89af15967dad738155294b",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "dcb3707976af9888d1c3e6c28fdf65dd2b5e0eed",
      "closedAt": "2016-09-22T19:48:51Z",
      "mergedAt": "2016-09-22T19:48:51Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "bbee4571e596c24143e70ca6c77e2b0a5e3d232c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 654,
      "id": "MDExOlB1bGxSZXF1ZXN0ODY0MzgwNjg=",
      "title": "Move OCSP and SCT into Certificate message",
      "url": "https://github.com/tlswg/tls13-spec/pull/654",
      "state": "MERGED",
      "author": "grittygrease",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This change adds a set of extensions to the Certificate message. This is\nintended to hold all extension messages that are certificate-specific\nas opposed to extensions that apply to the entire connection. This\nchange facilitates future extensions to the protocol for post-handshake\nserver authentication and resolves the anomaly of OCSP messages\nappearing before certificates in the handshake.\n",
      "createdAt": "2016-09-23T00:40:00Z",
      "updatedAt": "2016-10-07T16:37:53Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d29b3f1a491303efca5e1503c3af43a69021bcbf",
      "headRepository": "grittygrease/tls13-spec",
      "headRefName": "nick/certificate-extensions",
      "headRefOid": "832b864f78784b7d06e300148c478877a4398d6e",
      "closedAt": "2016-10-07T16:37:53Z",
      "mergedAt": "2016-10-07T16:37:53Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "46b212ff1a9ded6e48e51acf421006bffb24b89a"
      },
      "comments": [
        {
          "author": "grittygrease",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Changed SingleCertificate to CertificateEntry\n",
          "createdAt": "2016-10-07T16:21:41Z",
          "updatedAt": "2016-10-07T16:21:41Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjIxMzkyNw==",
          "commit": {
            "abbreviatedOid": "beb1387"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-29T19:36:17Z",
          "updatedAt": "2016-09-29T19:36:18Z",
          "comments": [
            {
              "originalPosition": 108,
              "body": "Might be worth a parenthetical that the Certificate message contents are also encrypted.\n",
              "createdAt": "2016-09-29T19:36:17Z",
              "updatedAt": "2016-10-07T16:21:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIzMzQ1MQ==",
          "commit": {
            "abbreviatedOid": "beb1387"
          },
          "author": "grittygrease",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-07T01:17:52Z",
          "updatedAt": "2016-10-07T01:17:52Z",
          "comments": [
            {
              "originalPosition": 108,
              "body": "I'm not sure this is necessary.\n",
              "createdAt": "2016-10-07T01:17:52Z",
              "updatedAt": "2016-10-07T16:21:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMyMjM5NQ==",
          "commit": {
            "abbreviatedOid": "a5f9884"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "@grittygrease this seems ready to land from my side modulo the rename I propose. Do you have any changes to make?\n",
          "createdAt": "2016-10-07T15:20:50Z",
          "updatedAt": "2016-10-07T15:22:45Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I think \"CertificateEntry\" is the convention here.\n",
              "createdAt": "2016-10-07T15:20:50Z",
              "updatedAt": "2016-10-07T16:21:01Z"
            },
            {
              "originalPosition": 108,
              "body": "+1 to grittygrease here.\n",
              "createdAt": "2016-10-07T15:21:40Z",
              "updatedAt": "2016-10-07T16:21:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMyMzgwOQ==",
          "commit": {
            "abbreviatedOid": "beb1387"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-07T15:28:22Z",
          "updatedAt": "2016-10-07T15:28:22Z",
          "comments": [
            {
              "originalPosition": 108,
              "body": "I'm fine if we land on the \"might not be worth\" side.\n",
              "createdAt": "2016-10-07T15:28:22Z",
              "updatedAt": "2016-10-07T16:21:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMzMTg3Mg==",
          "commit": {
            "abbreviatedOid": "a5f9884"
          },
          "author": "grittygrease",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-07T16:13:23Z",
          "updatedAt": "2016-10-07T16:13:23Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Fine by me. I'll make the change and then I think it's ready to merge.\n",
              "createdAt": "2016-10-07T16:13:23Z",
              "updatedAt": "2016-10-07T16:21:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 655,
      "id": "MDExOlB1bGxSZXF1ZXN0ODY0Mzg4MTE=",
      "title": "Allow empty TicketExtensions.",
      "url": "https://github.com/tlswg/tls13-spec/pull/655",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Other extensions are allowed to be empty. We may end up needing to\nmerely store an indicator someday.\n",
      "createdAt": "2016-09-23T00:49:55Z",
      "updatedAt": "2016-09-23T02:05:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0a19cd3a6f67ed68a8c1c8a6fb6d1020eb3bf081",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "ticket-xtn-limit",
      "headRefOid": "cb9a3a924cfe9ee0d2505d2419ef96fe345496ea",
      "closedAt": "2016-09-23T02:05:06Z",
      "mergedAt": "2016-09-23T02:05:06Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1edbdc857d535cae5269b66d6198029728808a22"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 656,
      "id": "MDExOlB1bGxSZXF1ZXN0ODY0NDExMTE=",
      "title": "Use TLS-style extensions in CertificateRequest.",
      "url": "https://github.com/tlswg/tls13-spec/pull/656",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Differences:\n- Easier to tell which matchers are and aren't defined (look in the\n  registry).\n- We can define other matchers that affect the same X.509 extension. If,\n  say, someone needs a EKU matcher which describes an OR on the\n  acceptable OIDs rather than an AND, we can simply define another one.\n- If someone needs to match something that's not an extension (RSA\n  public key size?), we can define it.\n- The mechanism doesn't depend on X.509, so it's more usable for crazier\n  things like RFC 7250. (Clllleeeaaaarrrly this means we should move\n  certificate_authorities to an extension.)\n- Remove MUST-level requirements on the client since they're toothless.\n  As the old text already noted, a client is free to \"not recognize\" any\n  extension anyway.\n- More compact. OIDs are big.\n",
      "createdAt": "2016-09-23T01:24:33Z",
      "updatedAt": "2016-10-07T15:16:44Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "164d3d61ebaf3587926baa20d4b87cad6d5cd288",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "cert-req-xtns",
      "headRefOid": "dbbd2489a503eb7b25a59440822dcdbb62309072",
      "closedAt": "2016-10-07T15:16:44Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My sense is that this is not getting consensus. David doesn't seem to feel strongly, so I am closing. @davidben please feel free to re-raise on list if you want the chairs to do a formal call for consenss\n",
          "createdAt": "2016-10-07T15:16:44Z",
          "updatedAt": "2016-10-07T15:16:44Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 657,
      "id": "MDExOlB1bGxSZXF1ZXN0ODY2MTEwNTY=",
      "title": "fixing indentation spaces.",
      "url": "https://github.com/tlswg/tls13-spec/pull/657",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "7 spaces are necessary.\n",
      "createdAt": "2016-09-24T07:49:48Z",
      "updatedAt": "2016-10-18T04:08:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1edbdc857d535cae5269b66d6198029728808a22",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "cleanup2",
      "headRefOid": "c96b14a192f8945829d835a80c39f2a45c8ecc35",
      "closedAt": "2016-09-24T13:55:39Z",
      "mergedAt": "2016-09-24T13:55:39Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "47dca06340de6f31a994e78f8074ba3cce57b7a5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 658,
      "id": "MDExOlB1bGxSZXF1ZXN0ODY2OTEyODM=",
      "title": "Fixing #627",
      "url": "https://github.com/tlswg/tls13-spec/pull/658",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Criteria for one member structure / non structure is as follows:\n\nNon structure: basic type -- not messages nor extensions\nOne member structure: others such as messages or extensions\n",
      "createdAt": "2016-09-26T07:11:06Z",
      "updatedAt": "2016-10-18T04:08:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "47dca06340de6f31a994e78f8074ba3cce57b7a5",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "fix627",
      "headRefOid": "f5eed2c5f7b61cf3b48ba44fdf29c4967bf39e93",
      "closedAt": "2016-09-26T10:53:28Z",
      "mergedAt": "2016-09-26T10:53:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9ef4278aeaf3cdc5af8f48da1fb3eb44b44c3e90"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2016-09-26T07:41:16Z",
          "updatedAt": "2016-09-26T07:41:16Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 659,
      "id": "MDExOlB1bGxSZXF1ZXN0ODY4NDc3ODI=",
      "title": "Fixing #630",
      "url": "https://github.com/tlswg/tls13-spec/pull/659",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This patches ensure that the described syntax and examples are consistent. In other words, parsers implementing Section 3 can parse all examples.\n",
      "createdAt": "2016-09-27T01:23:56Z",
      "updatedAt": "2016-10-18T04:08:25Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "76b800c5574ef12cde67bcc8b09059dcc5d1ce86",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "fix630",
      "headRefOid": "88a6b2aca23bbf896d8fdcddf4ee989c735ab075",
      "closedAt": "2016-10-07T15:15:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think I prefer it as-is.\n",
          "createdAt": "2016-10-07T15:15:52Z",
          "updatedAt": "2016-10-07T15:15:52Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2MTI0MQ==",
          "commit": {
            "abbreviatedOid": "00d18f3"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-27T03:31:52Z",
          "updatedAt": "2016-09-27T03:31:52Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "If we used this notation in more places, maybe, however just doing things like this feels like excessive indirection. A simpler simplification would be to just drop the word \"struct\" and state the payload as \"{}\". I don't feel like this is a particularly useful thing to fiddle with, however. It's fine as-is.\n",
              "createdAt": "2016-09-27T03:31:52Z",
              "updatedAt": "2016-09-27T03:31:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2MTM3Mw==",
          "commit": {
            "abbreviatedOid": "88a6b2a"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-27T03:35:05Z",
          "updatedAt": "2016-09-27T03:35:05Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "For enums we use parens rather than angle brackets, so this would be \"(floor..ceiling)\". (we've generally used angle brackets for size ranges and parens for value ranges) With this tweak, I think this is a logical clarification to add.\n",
              "createdAt": "2016-09-27T03:35:05Z",
              "updatedAt": "2016-09-27T03:35:05Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2Mzk0Mw==",
          "commit": {
            "abbreviatedOid": "88a6b2a"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-27T04:23:58Z",
          "updatedAt": "2016-09-27T04:23:58Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Sorry. This is my mistake and you are right.\n",
              "createdAt": "2016-09-27T04:23:58Z",
              "updatedAt": "2016-09-27T04:23:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2NDg5OQ==",
          "commit": {
            "abbreviatedOid": "00d18f3"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-09-27T04:41:58Z",
          "updatedAt": "2016-09-27T04:41:58Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "But \"{}\" is not defined in Section 3. In my opinion, such an ill-defined notation is much confusing than this indirection. I would vote for `None` (or `Empty`) even if it is redundant.\n",
              "createdAt": "2016-09-27T04:41:58Z",
              "updatedAt": "2016-09-27T04:41:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 662,
      "id": "MDExOlB1bGxSZXF1ZXN0ODc0NTk5NjQ=",
      "title": "s/suported_versions/supported_versions",
      "url": "https://github.com/tlswg/tls13-spec/pull/662",
      "state": "MERGED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes a small typo.\n",
      "createdAt": "2016-09-30T09:17:36Z",
      "updatedAt": "2016-09-30T12:58:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "76b800c5574ef12cde67bcc8b09059dcc5d1ce86",
      "headRepository": null,
      "headRefName": "patch-4",
      "headRefOid": "d362c05ed093702b9b3c1f29bd3620c430373926",
      "closedAt": "2016-09-30T12:58:06Z",
      "mergedAt": "2016-09-30T12:58:06Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a50c8170fde4076ec799b2743a2f6a7392b9468d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 663,
      "id": "MDExOlB1bGxSZXF1ZXN0ODc1OTk3NDc=",
      "title": "Fix a few more typos",
      "url": "https://github.com/tlswg/tls13-spec/pull/663",
      "state": "MERGED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-10-01T11:39:55Z",
      "updatedAt": "2016-10-01T13:15:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a50c8170fde4076ec799b2743a2f6a7392b9468d",
      "headRepository": null,
      "headRefName": "patch-5",
      "headRefOid": "19ed33be7b63f918a9dddd3def88dca26bbca76e",
      "closedAt": "2016-10-01T13:15:11Z",
      "mergedAt": "2016-10-01T13:15:11Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f27e4e547263735922a38b86821a82e694622809"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 664,
      "id": "MDExOlB1bGxSZXF1ZXN0ODc2NjI3MDg=",
      "title": "update credits",
      "url": "https://github.com/tlswg/tls13-spec/pull/664",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just amending my listing in the credits to add a contact email address.\n",
      "createdAt": "2016-10-03T04:37:01Z",
      "updatedAt": "2016-10-07T21:09:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f27e4e547263735922a38b86821a82e694622809",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "d2465df8a188d45681946956aaced047efd65b48",
      "closedAt": "2016-10-03T12:16:55Z",
      "mergedAt": "2016-10-03T12:16:55Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b09e0dd6f3e41519f0419d41c07f22a2c71606be"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 665,
      "id": "MDExOlB1bGxSZXF1ZXN0ODc3NzEzODA=",
      "title": "Added language to Extensions for session resumption",
      "url": "https://github.com/tlswg/tls13-spec/pull/665",
      "state": "CLOSED",
      "author": "kmad",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Added to the ClientHello Extensions information from section 2.2 to cover session resumption mechanisms.\n",
      "createdAt": "2016-10-03T18:59:43Z",
      "updatedAt": "2016-10-08T23:04:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b09e0dd6f3e41519f0419d41c07f22a2c71606be",
      "headRepository": "kmad/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "60453453e70b3fb0cdbca5facda3244e5968ca10",
      "closedAt": "2016-10-08T23:04:55Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd prefer not to duplicate this guidance, and I tend to think it's better where it is. If you think there's something deficient there, please add a PR for that region instead.\n",
          "createdAt": "2016-10-07T15:17:33Z",
          "updatedAt": "2016-10-07T15:17:54Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYwMTE4NA==",
          "commit": {
            "abbreviatedOid": "6045345"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-03T20:40:40Z",
          "updatedAt": "2016-10-03T20:40:40Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I think this is better with the (original) colon than full stop.\n",
              "createdAt": "2016-10-03T20:40:40Z",
              "updatedAt": "2016-10-03T20:40:40Z"
            }
          ]
        }
      ]
    },
    {
      "number": 666,
      "id": "MDExOlB1bGxSZXF1ZXN0ODc4MzA4MTQ=",
      "title": "Make a cookie have a minimum size",
      "url": "https://github.com/tlswg/tls13-spec/pull/666",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The spec requires that a cookie (or key_share) be present in HRR, but it's possible to send an empty cookie.  That's just inviting errors.\n",
      "createdAt": "2016-10-04T04:08:48Z",
      "updatedAt": "2016-10-04T14:18:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b09e0dd6f3e41519f0419d41c07f22a2c71606be",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "cookie_mine",
      "headRefOid": "ea966841ae4bc86605d7f5273874b997f69994aa",
      "closedAt": "2016-10-04T14:18:30Z",
      "mergedAt": "2016-10-04T14:18:30Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "347c8625f5e690daee64aae1ed928606af151a9f"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I was under the impression that we needed to be capable of having a client include an empty cookie extension so that a server could reply with a cookie, as server's aren't allowed to use extensions without them first being offered by the client.\n",
          "createdAt": "2016-10-04T06:57:18Z",
          "updatedAt": "2016-10-04T06:57:18Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The cookie remains the exception to the rule.  Option 2 is to force the client to send a cookie extension.\n",
          "createdAt": "2016-10-04T10:25:15Z",
          "updatedAt": "2016-10-04T10:25:15Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 667,
      "id": "MDExOlB1bGxSZXF1ZXN0ODgwNTU3OTA=",
      "title": "Fix typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/667",
      "state": "MERGED",
      "author": "ghedo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-10-05T10:54:01Z",
      "updatedAt": "2016-10-05T16:01:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de0fd39d452ce8f99e560dfa9eccc7232663672d",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "55523866835cabcdea86b5455fa408487fb991c2",
      "closedAt": "2016-10-05T16:01:02Z",
      "mergedAt": "2016-10-05T16:01:02Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d64b146e63aa30e323b69f54a74d369e5b14c3eb"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 668,
      "id": "MDExOlB1bGxSZXF1ZXN0ODgxMTIyODU=",
      "title": "Allowing Zero-RTT with PSK",
      "url": "https://github.com/tlswg/tls13-spec/pull/668",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I am proposing that a client can also use the Zero-RTT with PSK-based authentication without having to rely on a previously obtained ticket.\n",
      "createdAt": "2016-10-05T16:29:06Z",
      "updatedAt": "2016-10-12T15:18:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d64b146e63aa30e323b69f54a74d369e5b14c3eb",
      "headRepository": "hannestschofenig/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "91e5b39e5f0ce62a90effdbaf4e3c90ed0d81245",
      "closedAt": "2016-10-12T15:18:21Z",
      "mergedAt": "2016-10-12T15:18:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "91e5b39e5f0ce62a90effdbaf4e3c90ed0d81245"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Surely there would need to be additional security considerations for this behavior?!\n",
          "createdAt": "2016-10-05T16:32:00Z",
          "updatedAt": "2016-10-05T16:32:00Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems reasonable and was my intent, at least. Can you fix the build problem.\n",
          "createdAt": "2016-10-05T16:34:06Z",
          "updatedAt": "2016-10-05T16:34:06Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Could you please add linebreaks to wrap to about 80 character or so lines? Our line length is often rather inconsistent, but we do generally try to keep lines shorter than in the current changeset.\n",
          "createdAt": "2016-10-08T00:54:29Z",
          "updatedAt": "2016-10-08T00:54:29Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This LGTM. I'll let it sit for a little but in case anyone wants to weigh in (@mt, @davegarrett, @davidben)\n",
          "createdAt": "2016-10-11T16:20:48Z",
          "updatedAt": "2016-10-11T16:20:48Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTk2MA==",
          "commit": {
            "abbreviatedOid": "91e5b39"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "That's the sort of additional considerations that I was expecting to see, yes.\n",
          "createdAt": "2016-10-11T16:24:43Z",
          "updatedAt": "2016-10-11T16:25:38Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "MUST and optionally; two great tastes that go together.\n",
              "createdAt": "2016-10-11T16:24:43Z",
              "updatedAt": "2016-10-11T16:25:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNzc5MQ==",
          "commit": {
            "abbreviatedOid": "91e5b39"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-11T17:47:30Z",
          "updatedAt": "2016-10-11T17:55:07Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "nit: should be a comma after \"mode\"\n",
              "createdAt": "2016-10-11T17:47:30Z",
              "updatedAt": "2016-10-11T17:55:07Z"
            },
            {
              "originalPosition": 18,
              "body": "cipher suite should be two words\n",
              "createdAt": "2016-10-11T17:49:05Z",
              "updatedAt": "2016-10-11T17:55:07Z"
            },
            {
              "originalPosition": 36,
              "body": "This repeats the same thought twice. (\"solely\" twice with different wording) If we want to add the wording of the new sentence here, then a suggested replacement:\n\n\"\n1. This data is not forward secret, as it is encrypted solely under keys derived using the offered PSK as the static secret.\n\"\n",
              "createdAt": "2016-10-11T17:54:29Z",
              "updatedAt": "2016-10-11T17:55:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTg4Mw==",
          "commit": {
            "abbreviatedOid": "91e5b39"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think that you got the list basically right, though there are a few things here that could be clearer.\n",
          "createdAt": "2016-10-12T00:17:44Z",
          "updatedAt": "2016-10-12T00:22:17Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "I suspect that the SNI line needs to be \"the Server Name Indication (SNI), if any is to be used\"\n",
              "createdAt": "2016-10-12T00:17:44Z",
              "updatedAt": "2016-10-12T00:22:17Z"
            },
            {
              "originalPosition": 13,
              "body": "You also have to provision the key.  So maybe, \"In addition to the pre-shared key, ...\" or \"In order to use 0-RTT with a pre-shared key that is obtained out-of-band, the following information MUST be associated with the key by both parties:\"\n",
              "createdAt": "2016-10-12T00:18:53Z",
              "updatedAt": "2016-10-12T00:22:17Z"
            },
            {
              "originalPosition": 13,
              "body": "Note here that there is an important consideration: this only applies to the use of PSK for 0-RTT.  A PSK for 1-RTT only needs the key, the identity and the PRF hash function since the other properties can be negotiated.  I would add that as a note following this list.\n",
              "createdAt": "2016-10-12T00:21:51Z",
              "updatedAt": "2016-10-12T00:22:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 669,
      "id": "MDExOlB1bGxSZXF1ZXN0ODgxMTY4NTk=",
      "title": "Finished stuffing 2",
      "url": "https://github.com/tlswg/tls13-spec/pull/669",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Work in progress. \n",
      "createdAt": "2016-10-05T16:57:48Z",
      "updatedAt": "2016-10-07T15:11:30Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d64b146e63aa30e323b69f54a74d369e5b14c3eb",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "finished_stuffing_2",
      "headRefOid": "92704ca04ecf009e4a2196b5b7f648bf6077cf64",
      "closedAt": "2016-10-07T15:11:30Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm a little iffy on this \"multiple PSKs in PSK binder\" thing. @mt @davidben would be interested in your view. Note that it's now very easy to change to only one PSK allowed, because we just make this singular\n",
          "createdAt": "2016-10-07T03:46:17Z",
          "updatedAt": "2016-10-07T03:46:17Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Three notes here:\n1. Karthik suggests combining PSK and psk_binder. I agree, so I'll do that in a bit.\n2. We may want to have a separate ticket_age_add and edi_allowed extension in NST because that will let us do freshness in 0.5RTT\n3. We should compute the binder separately for resumption and external PSK. A different label will do it.\n",
          "createdAt": "2016-10-07T04:43:50Z",
          "updatedAt": "2016-10-07T04:43:50Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI0MTUwMw==",
          "commit": {
            "abbreviatedOid": "90a7cef"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Dropping the exporter changes from this was a good idea.\n",
          "createdAt": "2016-10-07T03:47:43Z",
          "updatedAt": "2016-10-07T05:39:56Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "it knows _each_ PSK\n",
              "createdAt": "2016-10-07T03:47:43Z",
              "updatedAt": "2016-10-07T14:13:19Z"
            },
            {
              "originalPosition": 71,
              "body": "'a'\n",
              "createdAt": "2016-10-07T03:48:01Z",
              "updatedAt": "2016-10-07T14:13:19Z"
            },
            {
              "originalPosition": 42,
              "body": "I would move key_share above pre_shared_key so that you are grouping the PSK extensions in a block (maybe key_share, psk_modes, psk_identities, psk_binder).  I guess you wanted to put pre_shared_key in front of key_share to indicate that it was preferred, but I think that the logical grouping has more value now that you need to read all the way to the end to decide about PSK.\n",
              "createdAt": "2016-10-07T03:50:46Z",
              "updatedAt": "2016-10-07T14:13:19Z"
            },
            {
              "originalPosition": 23,
              "body": "thinking more about this, I think that you want to create a clause that says: \"one or both of a set of Diffie-Hellman key shares and pre-shared key extensions (pre_shared_key, psk_key_exchange_modes, and psk_binder)\" - the value of the binder part is diminished now\n",
              "createdAt": "2016-10-07T03:53:35Z",
              "updatedAt": "2016-10-07T14:13:19Z"
            },
            {
              "originalPosition": 47,
              "body": "As above, you probably need to start treating the three PSK extensions as a coherent block.\n",
              "createdAt": "2016-10-07T03:54:18Z",
              "updatedAt": "2016-10-07T14:13:19Z"
            },
            {
              "originalPosition": 195,
              "body": "It also includes the psk_ke_modes extension, right?\n",
              "createdAt": "2016-10-07T04:01:40Z",
              "updatedAt": "2016-10-07T14:13:19Z"
            },
            {
              "originalPosition": 201,
              "body": "We should remind the client to check the cipher suite too.\n",
              "createdAt": "2016-10-07T04:38:06Z",
              "updatedAt": "2016-10-07T14:13:19Z"
            },
            {
              "originalPosition": 279,
              "body": "\"Handshake Context, i.e., \"\n",
              "createdAt": "2016-10-07T05:33:02Z",
              "updatedAt": "2016-10-07T14:13:19Z"
            },
            {
              "originalPosition": 328,
              "body": "Missing period\n",
              "createdAt": "2016-10-07T05:33:59Z",
              "updatedAt": "2016-10-07T14:13:19Z"
            },
            {
              "originalPosition": 428,
              "body": "+psk_binder\n",
              "createdAt": "2016-10-07T05:34:47Z",
              "updatedAt": "2016-10-07T14:13:19Z"
            },
            {
              "originalPosition": 413,
              "body": "- psk_binder\n",
              "createdAt": "2016-10-07T05:35:03Z",
              "updatedAt": "2016-10-07T14:13:19Z"
            },
            {
              "originalPosition": 413,
              "body": "Though I have to ask whether you don't need to revisit this section.  It's possible not to support PSK.\n",
              "createdAt": "2016-10-07T05:35:50Z",
              "updatedAt": "2016-10-07T14:13:19Z"
            },
            {
              "originalPosition": 418,
              "body": "Note that this isn't based on cipher suites any more, it's based on key exchange modes.  I would rearrange this section and say:\n\nIf you support Diffie-Hellman key exchange, you need key_share, supported_groups, and signature_algorithms.  If you support PSK, you need pre_shared_key, psk_key_exchange_modes and psk_binder.  It's also possible to support a a combination of both that excludes support for signature_algorithms if you only support DHE+PSK with PSK authentication...\n",
              "createdAt": "2016-10-07T05:38:48Z",
              "updatedAt": "2016-10-07T14:13:19Z"
            }
          ]
        }
      ]
    },
    {
      "number": 670,
      "id": "MDExOlB1bGxSZXF1ZXN0ODgxNDgxNzc=",
      "title": "Early ems",
      "url": "https://github.com/tlswg/tls13-spec/pull/670",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@mt PTAL\n",
      "createdAt": "2016-10-05T20:13:21Z",
      "updatedAt": "2016-10-07T15:11:30Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d64b146e63aa30e323b69f54a74d369e5b14c3eb",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "early_ems",
      "headRefOid": "cd2d73ecfddb567abd9d4687af01d22ebd334213",
      "closedAt": "2016-10-07T15:11:30Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAzNzg1OQ==",
          "commit": {
            "abbreviatedOid": "bdc3b75"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Generally looks good.  I would despair if I had only this spec and I had to interoperate on psk_binding though.\n",
          "createdAt": "2016-10-06T02:27:24Z",
          "updatedAt": "2016-10-06T02:55:30Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "nit, extra space after exchange\n",
              "createdAt": "2016-10-06T02:27:24Z",
              "updatedAt": "2016-10-07T15:04:10Z"
            },
            {
              "originalPosition": 28,
              "body": "you need to mention the binder on line 806 (github doesn't let me comment there)\n",
              "createdAt": "2016-10-06T02:29:26Z",
              "updatedAt": "2016-10-07T15:04:10Z"
            },
            {
              "originalPosition": 92,
              "body": "I assume that this is provisional and you would prefer to go back to multiple PSKs.\n",
              "createdAt": "2016-10-06T02:30:47Z",
              "updatedAt": "2016-10-07T15:04:10Z"
            },
            {
              "originalPosition": 107,
              "body": "trailing space\n",
              "createdAt": "2016-10-06T02:31:10Z",
              "updatedAt": "2016-10-07T15:04:10Z"
            },
            {
              "originalPosition": 101,
              "body": "also provisional\n",
              "createdAt": "2016-10-06T02:31:38Z",
              "updatedAt": "2016-10-07T15:04:10Z"
            },
            {
              "originalPosition": 151,
              "body": "s/labels/a label\n",
              "createdAt": "2016-10-06T02:32:30Z",
              "updatedAt": "2016-10-07T15:04:10Z"
            },
            {
              "originalPosition": 180,
              "body": "Nit: I think that the \"MUST be\" here can be simply \"is\" and a MUST can be added to \"For externally established PSKs, the Hash algorithm MUST be set when the PSK is established.\"\n",
              "createdAt": "2016-10-06T02:34:21Z",
              "updatedAt": "2016-10-07T15:04:10Z"
            },
            {
              "originalPosition": 231,
              "body": "Any point in reiterating that the psk_binder needs to be checked?\n",
              "createdAt": "2016-10-06T02:36:40Z",
              "updatedAt": "2016-10-07T15:04:10Z"
            },
            {
              "originalPosition": 257,
              "body": "errant period here\n",
              "createdAt": "2016-10-06T02:38:30Z",
              "updatedAt": "2016-10-07T15:04:10Z"
            },
            {
              "originalPosition": 284,
              "body": "This needs to be even more clear, because the risk of getting this wrong is very high.\n\nYou need to make it clear that this includes the ClientHello that the \"psk_binder\" extension is carried.  And that the ClientHello length fields are constructed as though the \"psk_binder\" extension were present.  And that the entire extension including identifier and length is omitted from the hash.\n\nI think that an example, or illustration would help.  Making the same point several different ways will avoid mistakes and misinterpretations.\n\nFor the same reason, you should include a formula for the calculation:\n\n```\nHMAC(Hash, PSK, [ClientHello + HelloRetryRequest +] Truncated ClientHello)\n```\n",
              "createdAt": "2016-10-06T02:45:15Z",
              "updatedAt": "2016-10-07T15:04:10Z"
            },
            {
              "originalPosition": 485,
              "body": "You are turning this into a wall of text.  There are several key pieces of information here: exporters produce unique secrets (1); exporters with different labels/contexts produce independent values (1); exporters can produce arbitrary output, but large values are needed to provide collision resistance which is important for channel bindings (3); the early exporter shares all the limitations of 0-RTT keys (4); exporters don't cover the client's certificate, only the client's fresh entropy (2).  I would arrange that as I have noted in parentheses.\n\nAlso, this section needs sub-sections.  It's a lot of information to wade through.\n",
              "createdAt": "2016-10-06T02:54:44Z",
              "updatedAt": "2016-10-07T15:04:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEyNDA2OA==",
          "commit": {
            "abbreviatedOid": "bdc3b75"
          },
          "author": "hannestschofenig",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-06T14:26:55Z",
          "updatedAt": "2016-10-06T14:27:06Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "Would it be OK to replace the following sentence \n\n---\n\nThe \"psk_binder\" extension is used to carry a binding between the PSK and the current handshake. as well as between the session where the PSK was established and the session where it was used.\n\n---\n\nwith \n\n---\n\nThe \"psk_binder\" extension carries the output of an HMAC-based digest computed over the portion of the handshake transcript up to but not including PskBinder.binding_data as the Handshake Context. As such, the PskBinder.binding_data is computed using the same way as the Finished.verify data value, using the PSK as the base key and. If the handshake includes a HelloRetryRequest, the initial ClientHello and HelloRetryRequest are included in the transcript.  The actual ClientHello, complete with the full \"psk_binder\" extension is included in all other handshake hash computations.\n\n---\n\nI would move the text that relates more to the security properties to the end of the section, such as this text: \n\"\nThis requires that both the KDF used to produce the RMS\n +and the MAC used to compute the psk_binder be collision\n +resistant. These are properties of HKDF and HMAC respectively when\n +used with collision resistant hash functions and producing output of\n +at least 256 bits.  Any future replacement of these functions MUST\n +also provide collision resistance.\n\"\n",
              "createdAt": "2016-10-06T14:26:55Z",
              "updatedAt": "2016-10-07T15:04:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIxMjg3NQ==",
          "commit": {
            "abbreviatedOid": "bdc3b75"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-06T21:53:36Z",
          "updatedAt": "2016-10-06T21:53:36Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "yes\n",
              "createdAt": "2016-10-06T21:53:36Z",
              "updatedAt": "2016-10-07T15:04:10Z"
            }
          ]
        }
      ]
    },
    {
      "number": 671,
      "id": "MDExOlB1bGxSZXF1ZXN0ODgzOTQwMDk=",
      "title": "Clarification for the certificate_request_context definition",
      "url": "https://github.com/tlswg/tls13-spec/pull/671",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I wanted to clarify in what part of the exchange the certificate_request_context field has a zero length.\n",
      "createdAt": "2016-10-07T07:48:10Z",
      "updatedAt": "2016-10-07T15:11:40Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d64b146e63aa30e323b69f54a74d369e5b14c3eb",
      "headRepository": "hannestschofenig/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "fd6973d62b8c2d0f8501e054d7de918bcdf0518e",
      "closedAt": "2016-10-07T15:11:40Z",
      "mergedAt": "2016-10-07T15:11:40Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d29b3f1a491303efca5e1503c3af43a69021bcbf"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 672,
      "id": "MDExOlB1bGxSZXF1ZXN0ODg0NTMxNzA=",
      "title": "Remove 0-RTT Finished and add a PSK binder instead",
      "url": "https://github.com/tlswg/tls13-spec/pull/672",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-10-07T14:55:41Z",
      "updatedAt": "2016-10-16T20:26:12Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0353994e038cfbf15becc68c412644789d2e3009",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "psk_binders",
      "headRefOid": "21951c55c5b826c38fba1db3718d6dcaf66422c6",
      "closedAt": "2016-10-16T20:26:12Z",
      "mergedAt": "2016-10-16T20:26:12Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "21951c55c5b826c38fba1db3718d6dcaf66422c6"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note: I rebased for easier processing.\n",
          "createdAt": "2016-10-12T22:34:10Z",
          "updatedAt": "2016-10-12T22:34:10Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMzNDQ0OQ==",
          "commit": {
            "abbreviatedOid": "f66ab85"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Some mostly editorial stuff inline\n",
          "createdAt": "2016-10-07T16:28:07Z",
          "updatedAt": "2016-10-07T17:00:06Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "Should probably be consistent about \"PSK\" vs \"a PSK\" (vs. \"a PSK mode\"?) here and L1364\n",
              "createdAt": "2016-10-07T16:28:07Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 104,
              "body": "Looks like the \"authentication\" got dropped from \"authentication parameters\".\n",
              "createdAt": "2016-10-07T16:29:19Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 191,
              "body": "Do we want to set an alert to use in this case?\n",
              "createdAt": "2016-10-07T16:36:24Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 192,
              "body": "This behavior (select, then verify) could lead to cases where the connection aborts when it could have succeeded, but I am okay with that, since it involves tampering or a misbehaving client.\n",
              "createdAt": "2016-10-07T16:38:12Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 195,
              "body": "\"with\" implies that it echos back the raw contents; maybe \"indicating\" or \"indicating the index of\"?  (I hope we specify 0- vs. 1-indexing somewhere...)\n",
              "createdAt": "2016-10-07T16:42:16Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 204,
              "body": "I will try to restrain myself from repeating my previous comments on this topic.\n",
              "createdAt": "2016-10-07T16:45:11Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 210,
              "body": "Why not just say that the server's selected_identity is zero?\n",
              "createdAt": "2016-10-07T16:46:04Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 219,
              "body": "And this answers my question about why it's a separate list of binders with matching index, as opposed to a list of structures with identity and binder together.\n",
              "createdAt": "2016-10-07T16:46:58Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 225,
              "body": "binder_key/binding_key don't match; pick one.\n",
              "createdAt": "2016-10-07T16:47:48Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 245,
              "body": "Missing '2'.\n",
              "createdAt": "2016-10-07T16:48:40Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 330,
              "body": "I think this change was spurious?\n",
              "createdAt": "2016-10-07T16:53:02Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 527,
              "body": "Missing sentence break\n",
              "createdAt": "2016-10-07T16:58:46Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODkzMw==",
          "commit": {
            "abbreviatedOid": "3c54a34"
          },
          "author": "nharper",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-11T21:29:54Z",
          "updatedAt": "2016-10-11T21:36:35Z",
          "comments": [
            {
              "originalPosition": 231,
              "body": "This should be ClientHello2 instead of ClientHello (for the second one)?\n",
              "createdAt": "2016-10-11T21:29:54Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 75,
              "body": "\"which contains a symmetric keys\": something sounds off in that wording to me. Is it \"a list of symmetric keys\" or \"a symmetric key\" or something else?\n",
              "createdAt": "2016-10-11T21:31:20Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDgyOA==",
          "commit": {
            "abbreviatedOid": "5b46c59"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "A number of niggles here, but otherwise LGTM.\n",
          "createdAt": "2016-10-12T02:46:06Z",
          "updatedAt": "2016-10-12T03:04:16Z",
          "comments": [
            {
              "originalPosition": 183,
              "body": "...and only validate the binder that corresponds to that PSK.\n",
              "createdAt": "2016-10-12T02:46:06Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 210,
              "body": "Probably worth pointing out that the length fields for ClientHello.extensions and the pre_shared_key extension are set as though the binder were present.\n",
              "createdAt": "2016-10-12T02:49:03Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 489,
              "body": "Check the alignment on these changes, I think that it's a character off on several of these lines.\n",
              "createdAt": "2016-10-12T02:51:40Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 499,
              "body": "You need to be clearer here about what this implies.  With 0-RTT, only one of the the possible values of Early Secret is relevant.  And I believe that is the only relevant factor, since early exporters aren't useful without 0-RTT.\n\nThe main implication is that if a client attempts to use 0-RTT but the server either picks a different PSK or rejects PSK, then the Early Secret has to be re-calculated.\n",
              "createdAt": "2016-10-12T02:56:08Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 504,
              "body": "Nit, neither of these paragraphs need to be a note.\n",
              "createdAt": "2016-10-12T02:56:40Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 538,
              "body": "MUST ?\n",
              "createdAt": "2016-10-12T02:57:35Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 537,
              "body": "I'm not 100% clear on whether the server is required to send this.  It seems not.  But you missed it from the IANA considerations table, so I can't verify.\n",
              "createdAt": "2016-10-12T03:01:29Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 540,
              "body": "s/./,\n",
              "createdAt": "2016-10-12T03:01:54Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 563,
              "body": "Nit: capitalize the T.\n",
              "createdAt": "2016-10-12T03:03:24Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            },
            {
              "originalPosition": 552,
              "body": "It's not an extension now.\n",
              "createdAt": "2016-10-12T03:03:28Z",
              "updatedAt": "2016-10-12T22:33:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MzMzNA==",
          "commit": {
            "abbreviatedOid": "f66ab85"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-13T13:36:54Z",
          "updatedAt": "2016-10-13T13:36:54Z",
          "comments": [
            {
              "originalPosition": 191,
              "body": "+1\n\nexplicit aborts should result in sending Alert messages\n",
              "createdAt": "2016-10-13T13:36:54Z",
              "updatedAt": "2016-10-13T13:36:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjIyMw==",
          "commit": {
            "abbreviatedOid": "21951c5"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "editorial (modulo hash output length question)\n",
          "createdAt": "2016-10-14T17:38:56Z",
          "updatedAt": "2016-10-14T20:42:56Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "I think it's better to keep \"identities\" here.\n",
              "createdAt": "2016-10-14T17:38:56Z",
              "updatedAt": "2016-10-14T20:42:56Z"
            },
            {
              "originalPosition": 89,
              "body": "The server does not send a psk_key_exchange_modes extension in its ServerHello/EncryptedExtensions, so the client has to figure out which mode is in use based on the messages the server sends.  That's probably workable for now, but might cramp future extensibility.\nHowever, in the CH-only world, this text should probably be cleaned up a bit, like \"only be used with one of the establishment modes indicated by the client's psk_key_exchange_modes extension\"\n",
              "createdAt": "2016-10-14T17:50:03Z",
              "updatedAt": "2016-10-14T20:42:56Z"
            },
            {
              "originalPosition": 92,
              "body": "grammar needs help from 1411 to 1412\n",
              "createdAt": "2016-10-14T17:50:31Z",
              "updatedAt": "2016-10-14T20:42:56Z"
            },
            {
              "originalPosition": 104,
              "body": "I'm not sure why it's helpful to lose this text.\n",
              "createdAt": "2016-10-14T17:51:26Z",
              "updatedAt": "2016-10-14T20:42:56Z"
            },
            {
              "originalPosition": 149,
              "body": "Is the zero length ever attainable given that the identities array must be nonempty and a binder is needed for each PSK offered?\n",
              "createdAt": "2016-10-14T20:13:25Z",
              "updatedAt": "2016-10-14T20:42:56Z"
            },
            {
              "originalPosition": 189,
              "body": "Same cipher suite as what?\n",
              "createdAt": "2016-10-14T20:15:21Z",
              "updatedAt": "2016-10-14T20:42:56Z"
            },
            {
              "originalPosition": 190,
              "body": "first comma is not needed.\n",
              "createdAt": "2016-10-14T20:15:36Z",
              "updatedAt": "2016-10-14T20:42:56Z"
            },
            {
              "originalPosition": 212,
              "body": "\"extension\", and there's two spaces after the paren.\n",
              "createdAt": "2016-10-14T20:18:44Z",
              "updatedAt": "2016-10-14T20:42:56Z"
            },
            {
              "originalPosition": 572,
              "body": "Wasn't there a comment about this being the hash output length and not necessarily 256 bits?  I forget how that got resolved.\n",
              "createdAt": "2016-10-14T20:41:58Z",
              "updatedAt": "2016-10-14T20:42:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDU0NA==",
          "commit": {
            "abbreviatedOid": "21951c5"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-16T05:58:08Z",
          "updatedAt": "2016-10-16T05:58:08Z",
          "comments": [
            {
              "originalPosition": 572,
              "body": "This is how it was resolved.\n",
              "createdAt": "2016-10-16T05:58:08Z",
              "updatedAt": "2016-10-16T05:58:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM0MDc5OA==",
          "commit": {
            "abbreviatedOid": "f66ab85"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-07T17:09:18Z",
          "updatedAt": "2016-10-16T20:26:05Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "Yes, that's correct. Because I removed psk_auth_modes, signature or not is decided entirely by whether PSK is in use.\n",
              "createdAt": "2016-10-07T17:09:18Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 191,
              "body": "I would be willing to, but I figured it was the usual ones\n",
              "createdAt": "2016-10-07T17:09:41Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 192,
              "body": "Yes, that's intentional.\n",
              "createdAt": "2016-10-07T17:09:47Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 195,
              "body": "Yes, indicating would be an improvement\n",
              "createdAt": "2016-10-07T17:10:02Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 204,
              "body": "It's appreciated.\n",
              "createdAt": "2016-10-07T17:10:09Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 210,
              "body": "sGTM\n",
              "createdAt": "2016-10-07T17:10:16Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 330,
              "body": "yeah, thanks\n",
              "createdAt": "2016-10-07T17:10:46Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 32,
              "body": "@mt, @davidben: Please take a look at this change and LMK what you think\n",
              "createdAt": "2016-10-11T21:06:44Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 499,
              "body": "This would actually be true in any case.\n",
              "createdAt": "2016-10-12T20:36:48Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 72,
              "body": "Done\n",
              "createdAt": "2016-10-16T20:19:25Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 89,
              "body": "That's intentional, so we don't have duplicate and possible-conflicting indicators.\n",
              "createdAt": "2016-10-16T20:20:11Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 92,
              "body": "Cleaned this up a bit\n",
              "createdAt": "2016-10-16T20:21:14Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 104,
              "body": "me neither. reverted.\n",
              "createdAt": "2016-10-16T20:21:36Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 149,
              "body": "nope. In fact I made it 33 so that we force binders to be >= 32 bytes long\n",
              "createdAt": "2016-10-16T20:22:25Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            },
            {
              "originalPosition": 191,
              "body": "I added the relevant text to decrypt_error.\n",
              "createdAt": "2016-10-16T20:23:34Z",
              "updatedAt": "2016-10-16T20:26:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 673,
      "id": "MDExOlB1bGxSZXF1ZXN0ODg0NTUwODA=",
      "title": "Early ems2",
      "url": "https://github.com/tlswg/tls13-spec/pull/673",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Various changes to make exporters/resumption work better. The rationale is to be able to do stuff in 0/0.5RTT.\n- Add a 0-RTT exporter and change the transcript for the regular exporter (*).\n- Explicitly allow predicting ClientFinished for NST when not doing\n  Client auth.\n",
      "createdAt": "2016-10-07T15:06:04Z",
      "updatedAt": "2016-10-12T15:12:44Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a8619dfe02a8c82686ba5f777da3355ab6031b4a",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "early_ems2",
      "headRefOid": "2e92278a8d2ae1e25802eeb15fecaa1bbeea925f",
      "closedAt": "2016-10-12T15:12:43Z",
      "mergedAt": "2016-10-12T15:12:43Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2e92278a8d2ae1e25802eeb15fecaa1bbeea925f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMyMjYxOQ==",
          "commit": {
            "abbreviatedOid": "cd2d73e"
          },
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-07T15:22:01Z",
          "updatedAt": "2016-10-07T15:23:15Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "are you missing \"in\", or \"with\" after \"provided\" here?\n",
              "createdAt": "2016-10-07T15:22:01Z",
              "updatedAt": "2016-10-12T15:12:00Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MzEyNg==",
          "commit": {
            "abbreviatedOid": "cd2d73e"
          },
          "author": "nharper",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-07T21:36:01Z",
          "updatedAt": "2016-10-07T21:36:02Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "Can this be expanded to say when early_exporter_secret should be used vs exporter_secret? E.g. something like exporter_secret must be used for providing the RFC 5705 interface?\n",
              "createdAt": "2016-10-07T21:36:01Z",
              "updatedAt": "2016-10-12T15:12:00Z"
            }
          ]
        }
      ]
    },
    {
      "number": 674,
      "id": "MDExOlB1bGxSZXF1ZXN0ODg0NzAzMDU=",
      "title": "Add max_early_data_size to TicketEarlyDataInfo",
      "url": "https://github.com/tlswg/tls13-spec/pull/674",
      "state": "CLOSED",
      "author": "FiloSottile",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Email to list coming.\n",
      "createdAt": "2016-10-07T16:38:45Z",
      "updatedAt": "2016-10-11T00:08:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "46b212ff1a9ded6e48e51acf421006bffb24b89a",
      "headRepository": null,
      "headRefName": "patch-6",
      "headRefOid": "c15235303678177a82cdd9bd0bf1803d71a1b9dd",
      "closedAt": "2016-10-11T00:08:27Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@FiloSottile this needs a rebase.\n\ncorrection: Github just was freaking out\n",
          "createdAt": "2016-10-07T16:48:46Z",
          "updatedAt": "2016-10-07T16:49:46Z"
        },
        {
          "author": "FiloSottile",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr done, the damned GitHub editor doesn't detect conflicts. This is a bit ridiculous.\n",
          "createdAt": "2016-10-07T16:49:46Z",
          "updatedAt": "2016-10-07T16:49:46Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@FiloSottile Don't forget to email the list.\n",
          "createdAt": "2016-10-07T17:42:32Z",
          "updatedAt": "2016-10-07T17:42:32Z"
        },
        {
          "author": "FiloSottile",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://www.ietf.org/mail-archive/web/tls/current/msg21486.html\n",
          "createdAt": "2016-10-07T18:43:04Z",
          "updatedAt": "2016-10-07T18:43:04Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand\n",
          "createdAt": "2016-10-10T20:46:55Z",
          "updatedAt": "2016-10-10T20:46:55Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MjgxNQ==",
          "commit": {
            "abbreviatedOid": "c152353"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-07T21:33:22Z",
          "updatedAt": "2016-10-07T21:34:08Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "(editorial nit: do we really need to have the number here?  Could it just be \"Its contents are:\"?)\n",
              "createdAt": "2016-10-07T21:33:22Z",
              "updatedAt": "2016-10-07T21:34:08Z"
            },
            {
              "originalPosition": 21,
              "body": "A serer receiving more than this many bytes of 0-RTT data will abort the connection with a XYZ alert.\n",
              "createdAt": "2016-10-07T21:33:49Z",
              "updatedAt": "2016-10-07T21:34:08Z"
            }
          ]
        }
      ]
    },
    {
      "number": 675,
      "id": "MDExOlB1bGxSZXF1ZXN0ODg1MDcxNzU=",
      "title": "update MTI Extensions section for new negotiation",
      "url": "https://github.com/tlswg/tls13-spec/pull/675",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The MTI Extensions section is currently out-of-date. It wasn't updated with the new negotiation and still refers to the old cipher suites system. This PR cleans that up.\n\nI also drop the cookie extension universal send requirement, as that was in there as an alternative to allowing a server to send a cookie without first being prompted. We have that in as an explicit exception, currently.\n",
      "createdAt": "2016-10-07T21:00:11Z",
      "updatedAt": "2016-10-17T02:35:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "46b212ff1a9ded6e48e51acf421006bffb24b89a",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "cleanupmtinegotiation",
      "headRefOid": "c380e9fdfdb86ef98b935d79a38e4712f75548cf",
      "closedAt": "2016-10-17T00:42:27Z",
      "mergedAt": "2016-10-17T00:42:27Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c380e9fdfdb86ef98b935d79a38e4712f75548cf"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I already did some of this in PR#672, so I'm going to hold this PR until that has landed and then we can take stock\n",
          "createdAt": "2016-10-07T21:49:04Z",
          "updatedAt": "2016-10-07T21:49:04Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sure, I hadn't read that PR yet.\n\nA notable difference in the language here is that I'm replacing the \"MAY abort the connection\" line with specific requirements, as that high level of generalization is counterproductive now that cipher suites and feature extensions are decoupled.\n",
          "createdAt": "2016-10-07T23:43:45Z",
          "updatedAt": "2016-10-07T23:43:45Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 676,
      "id": "MDExOlB1bGxSZXF1ZXN0ODg1Mjc5MDA=",
      "title": "Make all post-handshake messages optional",
      "url": "https://github.com/tlswg/tls13-spec/pull/676",
      "state": "CLOSED",
      "author": "grittygrease",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This change adds a new extension to advertise support for different post-handshake messages.\n",
      "createdAt": "2016-10-08T00:57:34Z",
      "updatedAt": "2016-10-11T17:22:43Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "46b212ff1a9ded6e48e51acf421006bffb24b89a",
      "headRepository": "grittygrease/tls13-spec",
      "headRefName": "nick/post-handshake-extension",
      "headRefOid": "258bc836742141f20eaf3e8e337a5d246bef6bd7",
      "closedAt": "2016-10-11T17:22:43Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing this per offline discussion. See PR #680 for the current thinking on alternate approaches.\n",
          "createdAt": "2016-10-11T17:22:43Z",
          "updatedAt": "2016-10-11T17:22:43Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDEyNA==",
          "commit": {
            "abbreviatedOid": "258bc83"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-10T16:44:50Z",
          "updatedAt": "2016-10-10T16:53:42Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "If it's going to be \"which includes at least one MessageType\", this should be 1..2^8-1, not 0...\n",
              "createdAt": "2016-10-10T16:44:50Z",
              "updatedAt": "2016-10-10T16:53:42Z"
            },
            {
              "originalPosition": 39,
              "body": "The decision on whether to send EncryptedExtensions is not just based on PostHandshake; \"it includes a post_handshake extension in the EncryptedExtensions it returns to the client.  The returned post_hanshake extension contains\" might be a better wording.\n",
              "createdAt": "2016-10-10T16:46:34Z",
              "updatedAt": "2016-10-10T16:53:42Z"
            },
            {
              "originalPosition": 40,
              "body": "Given the next sentence, maybe no change is needed here, but it could be \"supports in common with the client\" or similar.\n",
              "createdAt": "2016-10-10T16:47:33Z",
              "updatedAt": "2016-10-10T16:53:42Z"
            },
            {
              "originalPosition": 76,
              "body": "Thinking about consistency amongst the various paragraphis similar to this one; should this one specify clients as receiving NST?\n",
              "createdAt": "2016-10-10T16:51:35Z",
              "updatedAt": "2016-10-10T16:53:42Z"
            },
            {
              "originalPosition": 119,
              "body": "This seems to allow the scenario where a client advertises KeyUpdate support, a server does not include KeyUpdate in its EncryptedExtensions, but then the server goes and sends a KeyUpdate anyway.\nThat's a pretty silly scenario, but is an asymmetry that could be smoothed over.\n",
              "createdAt": "2016-10-10T16:53:22Z",
              "updatedAt": "2016-10-10T16:53:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 678,
      "id": "MDExOlB1bGxSZXF1ZXN0ODg4MzU5Njc=",
      "title": "Issue644 remove hrr reconstruction",
      "url": "https://github.com/tlswg/tls13-spec/pull/678",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-10-11T13:50:19Z",
      "updatedAt": "2016-10-16T19:57:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a8619dfe02a8c82686ba5f777da3355ab6031b4a",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue644_remove_hrr_reconstruction",
      "headRefOid": "49e6e44148a4d54234f4ec01aa0c99d280c6b6ce",
      "closedAt": "2016-10-16T19:57:14Z",
      "mergedAt": "2016-10-16T19:57:14Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "49e6e44148a4d54234f4ec01aa0c99d280c6b6ce"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Tuesday, October 11, 2016 08:14:32 pm Martin Thomson wrote:\n\n> - no extensions (decode_error)\n\nor missing_extension\n",
          "createdAt": "2016-10-12T01:57:07Z",
          "updatedAt": "2016-10-12T01:57:07Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that missing_extension would be OK, but we would hit the lower-level decode_error first, since HRR is defined with:\n\n```\n       Extension extensions<2..2^16-1>;\n```\n",
          "createdAt": "2016-10-12T02:06:50Z",
          "updatedAt": "2016-10-12T02:06:50Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTU5OQ==",
          "commit": {
            "abbreviatedOid": "70b3f7b"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-12T00:14:29Z",
          "updatedAt": "2016-10-12T00:14:29Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "So the thing to note here is that HRR can't include extensions that you don't agree should be there.  So, if extensions are present, then they have to be ones that change the ClientHello (we shouldn't define any that don't).  That means the only way for HRR to be wrong is:\n- no extensions (decode_error)\n- unknown extension (unsupported_extension)\n- extension doesn't cause a change, for instance key_share uses an unknown group, or one that already had a share\n\nIn the last case, I chose to make this an illegal_parameter alert.\n\nAnd yes, if you receive a second HRR, then unexpected_message is correct (note that you missed the underscore there).\n\nI chose to send illegal_parameter\n",
              "createdAt": "2016-10-12T00:14:29Z",
              "updatedAt": "2016-10-16T19:54:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 679,
      "id": "MDExOlB1bGxSZXF1ZXN0ODg4NjEwMzY=",
      "title": "Merged ticket and regular extensions. Fixes #677",
      "url": "https://github.com/tlswg/tls13-spec/pull/679",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-10-11T16:00:07Z",
      "updatedAt": "2016-10-12T15:24:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a8619dfe02a8c82686ba5f777da3355ab6031b4a",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue677_merge_extensions",
      "headRefOid": "160a592c653c0bdf28367804ed62a90e8d75e986",
      "closedAt": "2016-10-12T15:24:34Z",
      "mergedAt": "2016-10-12T15:24:34Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "160a592c653c0bdf28367804ed62a90e8d75e986"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 680,
      "id": "MDExOlB1bGxSZXF1ZXN0ODg4NzQxMzk=",
      "title": "Forbid post-handshake client authentication except when permitted by",
      "url": "https://github.com/tlswg/tls13-spec/pull/680",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "application profile.\n",
      "createdAt": "2016-10-11T17:19:56Z",
      "updatedAt": "2017-04-16T17:20:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a8619dfe02a8c82686ba5f777da3355ab6031b4a",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "handshake_auth_app_property",
      "headRefOid": "f1157e7255e571a0d4a77f88f1610731fe9d99c2",
      "closedAt": "2017-04-16T17:20:51Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, you need the request context. It takes the place of the server nonce\nfor anti-replay purposes\n\nOn Wed, Oct 12, 2016 at 8:07 AM, David Benjamin notifications@github.com\nwrote:\n\n> ## _@davidben_ commented on this pull request.\n> \n> In draft-ietf-tls-tls13.md\n> https://github.com/tlswg/tls13-spec/pull/680#pullrequestreview-3892558:\n> \n> > @@ -3073,10 +3073,15 @@ max_early_data_size\n> \n>  The server is permitted to request client authentication at any time\n> \n> I'd probably also drop \"at any time\" since that kind of conflicts with the\n> \n> ## MUST NOT.\n> \n> In draft-ietf-tls-tls13.md\n> https://github.com/tlswg/tls13-spec/pull/680#pullrequestreview-3892558:\n> \n> > @@ -3073,10 +3073,15 @@ max_early_data_size\n> \n>  The server is permitted to request client authentication at any time\n>  after the handshake has completed by sending a CertificateRequest\n> -message. The client SHOULD respond with the appropriate Authentication\n> -messages. If the client chooses to authenticate, it MUST send\n> -Certificate, CertificateVerify, and Finished. If it declines, it\n> -MUST send a Certificate message containing no certificates followed by Finished.\n> +message. Servers MUST NOT send this message unless explicitly allowed\n> +by an application profile. Clients who receive a disallowed CertificateRequest\n> \n> Do we want some text about the request context too? That too inherently\n> has meaning specific to the application profile. (Alternatively, do we even\n> need it? The old renego-based hack didn't use it.)\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/680#pullrequestreview-3892558,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ABD1oQ4cAb2ZPVkVtdvxm0rpgr8mJ8Lzks5qzPeogaJpZM4KT4j8\n> .\n",
          "createdAt": "2016-10-12T15:27:20Z",
          "updatedAt": "2016-10-12T15:27:20Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah! Should there be an explicit random field then? It seems not immediately obvious that if I'm writing how to use this in my protocol that I need entropy in there and not just identifying information.\n",
          "createdAt": "2016-10-12T18:55:54Z",
          "updatedAt": "2016-10-12T18:55:54Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No, you just need it to be fresh/unique which is what it requires\n\nOn Wed, Oct 12, 2016 at 11:55 AM, David Benjamin notifications@github.com\nwrote:\n\n> Ah! Should there be an explicit random field then? It seems not\n> immediately obvious that if I'm writing how to use this in my protocol that\n> I need entropy in there and not just identifying information.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/680#issuecomment-253305060, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/ABD1od5tDB-2JJfSBWJL5JNkEkkPe-d4ks5qzS08gaJpZM4KT4j8\n> .\n",
          "createdAt": "2016-10-12T19:43:51Z",
          "updatedAt": "2016-10-12T19:43:51Z"
        },
        {
          "author": "grittygrease",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Can we also be explicit that any other unexpected post-handshake message is fatal to the connection?\n",
          "createdAt": "2016-10-18T18:38:27Z",
          "updatedAt": "2016-10-18T18:38:27Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@grittygrease that is probably OK.  Generally speaking, unexpected handshake messages are treated as fatal by implementations (NSS sends a fatal alert I believe).\n",
          "createdAt": "2016-10-19T03:17:14Z",
          "updatedAt": "2016-10-19T03:17:14Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There didn't seem to be consensus to make this change, so I'm parking it.\n",
          "createdAt": "2016-10-26T05:18:50Z",
          "updatedAt": "2016-10-26T05:18:50Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Changed in -20",
          "createdAt": "2017-04-16T17:20:51Z",
          "updatedAt": "2017-04-16T17:20:51Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjU0Nw==",
          "commit": {
            "abbreviatedOid": "f1157e7"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "@davidben should be happy :)\n",
          "createdAt": "2016-10-11T17:21:01Z",
          "updatedAt": "2016-10-11T17:22:11Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "I wonder if we want s/is permitted to/can/\n",
              "createdAt": "2016-10-11T17:21:01Z",
              "updatedAt": "2016-10-11T17:22:11Z"
            },
            {
              "originalPosition": 10,
              "body": "unexpected_message?\n",
              "createdAt": "2016-10-11T17:21:21Z",
              "updatedAt": "2016-10-11T17:22:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzU4NA==",
          "commit": {
            "abbreviatedOid": "f1157e7"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-11T17:26:08Z",
          "updatedAt": "2016-10-11T17:26:08Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Yes, but I think it's clear from the general rules\n",
              "createdAt": "2016-10-11T17:26:08Z",
              "updatedAt": "2016-10-11T17:26:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjU1OA==",
          "commit": {
            "abbreviatedOid": "f1157e7"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-12T15:03:15Z",
          "updatedAt": "2016-10-12T15:07:18Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "I'd probably also drop \"at any time\" since that kind of conflicts with the MUST NOT.\n",
              "createdAt": "2016-10-12T15:03:16Z",
              "updatedAt": "2016-10-12T15:07:18Z"
            },
            {
              "originalPosition": 9,
              "body": "Do we want some text about the request context too? That too inherently has meaning specific to the application profile. (Alternatively, do we even need it? The old renego-based hack didn't use it.)\n",
              "createdAt": "2016-10-12T15:06:37Z",
              "updatedAt": "2016-10-12T15:07:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 681,
      "id": "MDExOlB1bGxSZXF1ZXN0ODkwODExNTU=",
      "title": "Clarify interaction of ALPN with 0-RTT data.",
      "url": "https://github.com/tlswg/tls13-spec/pull/681",
      "state": "CLOSED",
      "author": "knekritz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently the draft specifies that the ALPN must be \"the same\" as in the connection that established the PSK used with 0-RTT, and that the server must check that the selected ALPN matches what was previously used. I find this unclear if\n1) the client should select and offer one (and only one) application protocol\n2) the client can offer multiple protocols, but use the most preferred one offered for 0-RTT data\n3) the client must send the exact same ALPN extension as in the previous connection, but must use the ALPN previously selected by the server (even if it was not the client's first offer).\n",
      "createdAt": "2016-10-12T19:47:46Z",
      "updatedAt": "2016-10-17T17:54:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "af3daeea8304da454bf72887aacaad897e0c1493",
      "headRepository": "knekritz/tls13-spec",
      "headRefName": "master",
      "headRefOid": "548d66073348523e604111497f97b686d1d01267",
      "closedAt": "2016-10-17T17:54:11Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My sense is that there's not consensus for this change. I'll defer to the chairs to let me know if they read it differently\n",
          "createdAt": "2016-10-16T20:16:21Z",
          "updatedAt": "2016-10-16T20:16:37Z"
        },
        {
          "author": "knekritz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm fine with the current intended behavior, I still think it could be clarified what the intended behavior is, I'll put up a new PR to clarify that.\n",
          "createdAt": "2016-10-17T17:53:22Z",
          "updatedAt": "2016-10-17T17:53:22Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODM1OQ==",
          "commit": {
            "abbreviatedOid": "540b2d4"
          },
          "author": "knekritz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-12T19:48:44Z",
          "updatedAt": "2016-10-12T19:48:44Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "I also changed the ref to RFC7301, I assume that is what was intended.\n",
              "createdAt": "2016-10-12T19:48:44Z",
              "updatedAt": "2016-10-12T20:00:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTIyNQ==",
          "commit": {
            "abbreviatedOid": "548d660"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-12T21:01:02Z",
          "updatedAt": "2016-10-12T21:05:50Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "There's no such thing as a \"PSK cipher suite\" anymore. Please update this text while you're here. I guess just drop this part and make it \"...server MUST select the first key offered...\"\n",
              "createdAt": "2016-10-12T21:01:02Z",
              "updatedAt": "2016-10-12T21:05:50Z"
            },
            {
              "originalPosition": 114,
              "body": "the the\n",
              "createdAt": "2016-10-12T21:01:12Z",
              "updatedAt": "2016-10-12T21:05:50Z"
            },
            {
              "originalPosition": 143,
              "body": "Why is this referring to a section by number? Fix this with a section reference.\n",
              "createdAt": "2016-10-12T21:04:47Z",
              "updatedAt": "2016-10-12T21:05:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwOTM4Nw==",
          "commit": {
            "abbreviatedOid": "548d660"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-13T16:12:33Z",
          "updatedAt": "2016-10-13T16:26:33Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Not your change, but I wonder whether pure PSK should be limited to a single ALPN (for 0RTT).\n",
              "createdAt": "2016-10-13T16:12:33Z",
              "updatedAt": "2016-10-13T16:26:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MzMxNg==",
          "commit": {
            "abbreviatedOid": "548d660"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-14T00:51:36Z",
          "updatedAt": "2016-10-14T00:51:36Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "My view is that external PSK (I think that's the term that's been used in the draft) has one set of requirements for 1-RTT with a stricter set of requirements if it is to be used for 0-RTT.\n\n1-RTT only needs identity and hash; whereas 0-RTT needs identity, cipher suite (instead of hash), ALPN (if any), key exchange modes, and SNI (if any).  In 1-RTT, most of those parameters are negotiated; they don't need to be fixed.  (They could be, of course.)\n",
              "createdAt": "2016-10-14T00:51:36Z",
              "updatedAt": "2016-10-14T00:51:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 683,
      "id": "MDExOlB1bGxSZXF1ZXN0ODkxMDA1ODc=",
      "title": "Make RFC7919 a normative reference",
      "url": "https://github.com/tlswg/tls13-spec/pull/683",
      "state": "CLOSED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "According to the IESG statement [1]:\n\n> Normative references specify documents that must be read to understand or implement the technology in the new RFC.\n> Even references that are relevant only for optional features must be classified as normative if they meet the above conditions for normative references. \n\nSo I think it is better to categorize RFC 7919 as normative rather than informative, because it is a must-read to implement [section 4.2.5.1](https://tlswg.github.io/tls13-spec/#ffdhe-param) Diffie-Hellman Parameters.\n\n[1] https://www.ietf.org/iesg/statement/normative-informative.html\n",
      "createdAt": "2016-10-12T21:49:24Z",
      "updatedAt": "2016-10-12T23:19:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0353994e038cfbf15becc68c412644789d2e3009",
      "headRepository": null,
      "headRefName": "patch-2",
      "headRefOid": "e7cbfe4ec323daba3a6da04e67eabf126378379c",
      "closedAt": "2016-10-12T23:19:01Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged separately\n",
          "createdAt": "2016-10-12T23:19:01Z",
          "updatedAt": "2016-10-12T23:19:01Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 684,
      "id": "MDExOlB1bGxSZXF1ZXN0ODkxMDgxNjY=",
      "title": "Move ticket age",
      "url": "https://github.com/tlswg/tls13-spec/pull/684",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This sits on top of PSK binder.\n\n@mt, @davidben PTAL\n",
      "createdAt": "2016-10-12T22:48:35Z",
      "updatedAt": "2016-10-16T20:41:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0353994e038cfbf15becc68c412644789d2e3009",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "move_ticket_age",
      "headRefOid": "3ad1df1dbeba28938ea10263d74493b2af3e82a4",
      "closedAt": "2016-10-16T20:41:56Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I know we want to have something in the ticket extensions to exercise it, but the case for max_early_data_size vs ticket_age_add is not overwhelming ... the age can be some input into whether the CH is fresh but max_early_data_size only helps if you accept early data, I suppose ... is there anything else?\n\nYes. max_early_data_size is an extension because you don't need it if you aren't doing 0-RTT. ticket_age_add is (in this PR) not an extension because you need it with every ticket.\n",
          "createdAt": "2016-10-13T17:26:06Z",
          "updatedAt": "2016-10-13T17:26:06Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased and merged by hand\n",
          "createdAt": "2016-10-16T20:41:56Z",
          "updatedAt": "2016-10-16T20:41:56Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDYzNg==",
          "commit": {
            "abbreviatedOid": "3ad1df1"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I know we want to have something in the ticket extensions to exercise it, but the case for max_early_data_size vs ticket_age_add is not overwhelming ... the age can be some input into whether the CH is fresh but max_early_data_size only helps if you accept early data, I suppose ... is there anything else?\n",
          "createdAt": "2016-10-13T17:12:20Z",
          "updatedAt": "2016-10-13T17:19:50Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "There is no \"ticket_age\" right now; you have to say how to compute it.\n",
              "createdAt": "2016-10-13T17:12:20Z",
              "updatedAt": "2016-10-13T17:19:50Z"
            },
            {
              "originalPosition": 109,
              "body": "You didn't actually remove ticket_age_add from the struct on line 3114 (LHS).\n",
              "createdAt": "2016-10-13T17:16:43Z",
              "updatedAt": "2016-10-13T17:19:50Z"
            }
          ]
        }
      ]
    },
    {
      "number": 685,
      "id": "MDExOlB1bGxSZXF1ZXN0ODkxMTA1NzQ=",
      "title": "Remove unused references",
      "url": "https://github.com/tlswg/tls13-spec/pull/685",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "RFC0793, RFC1948, RFC4302, RFC4303 and RFC5763 are not referenced by any text in the body of the current draft. So remove them from the reference section.\n",
      "createdAt": "2016-10-12T23:08:55Z",
      "updatedAt": "2016-10-12T23:28:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0353994e038cfbf15becc68c412644789d2e3009",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "bbe4eb6ad7dcb5fca437c9b72a8cfada3866bd44",
      "closedAt": "2016-10-12T23:16:56Z",
      "mergedAt": "2016-10-12T23:16:56Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9c1d2055ae1cf7d3c111182e6aed799535348246"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well... I had the same idea: PR #686 ;)\n\nI've got these and more over there.\n",
          "createdAt": "2016-10-12T23:17:46Z",
          "updatedAt": "2016-10-12T23:19:12Z"
        },
        {
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett Yeah, what a coincidence! I realized I forgot to check the normative section after seeing your PR. Both are merged anyway.\n",
          "createdAt": "2016-10-12T23:21:52Z",
          "updatedAt": "2016-10-12T23:21:52Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@xiaoyinl Yep. I had just read your other PR and noticed that we never culled out all the cipher suite refs after the changeover. Just lines removed, so no merge conflict on mid-air collision, and merged before I even noticed.\n",
          "createdAt": "2016-10-12T23:28:14Z",
          "updatedAt": "2016-10-12T23:28:14Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 686,
      "id": "MDExOlB1bGxSZXF1ZXN0ODkxMTA5NDY=",
      "title": "drop unused references",
      "url": "https://github.com/tlswg/tls13-spec/pull/686",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I went through and did a check of our current references usage. There's quite a few that need to be cleaned up. The 7 normative refs this PR drops are for cipher suites that are no longer applicable to TLS 1.3 in the new negotiation. (for the replaced ones, we cite the algorithm RFC rather than the cipher RFC, now) There's also 5 informative refs we just don't cite anymore.\n\nBeyond those currently in this changeset, we also have the GCM, PKCS6, & PKCS7 refs which are currently unused as well. Not sure if we want to drop them too or stick them in where appropriate now.\n",
      "createdAt": "2016-10-12T23:12:11Z",
      "updatedAt": "2016-10-12T23:19:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0353994e038cfbf15becc68c412644789d2e3009",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "cullrefs",
      "headRefOid": "3be5c2d35d2f242e32dabc1195805f3971311cd4",
      "closedAt": "2016-10-12T23:17:18Z",
      "mergedAt": "2016-10-12T23:17:18Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "197a9cee1b7be416d359f3d63893634523f8edaf"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 687,
      "id": "MDExOlB1bGxSZXF1ZXN0ODkxMzg0OTA=",
      "title": "fixing the mismatch of ASN1Cert and ASN1CertData.",
      "url": "https://github.com/tlswg/tls13-spec/pull/687",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "832b864f78784b7d06e300148c478877a4398d6e introduced this syntax error.\n",
      "createdAt": "2016-10-13T05:24:38Z",
      "updatedAt": "2016-10-18T04:08:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6d923f44d44166868fec88dca9cf0447c60f6078",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "fix-asn1",
      "headRefOid": "4e6ffb72f8d8788c0a7d14b04678c4009ce16f6d",
      "closedAt": "2016-10-13T12:06:47Z",
      "mergedAt": "2016-10-13T12:06:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "370a953343cc150243e378d0ef0585f9ee9091d7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 689,
      "id": "MDExOlB1bGxSZXF1ZXN0ODkzMTQzNTg=",
      "title": "Clarifying syntax",
      "url": "https://github.com/tlswg/tls13-spec/pull/689",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To fix #630, let's add some explanations to Section 3.\n",
      "createdAt": "2016-10-14T02:21:49Z",
      "updatedAt": "2016-10-18T04:09:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "370a953343cc150243e378d0ef0585f9ee9091d7",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "clarifying-syntax",
      "headRefOid": "7b3b3661cb9bf80a7029696b065c601855cbca43",
      "closedAt": "2016-10-16T20:01:51Z",
      "mergedAt": "2016-10-16T20:01:51Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7b3b3661cb9bf80a7029696b065c601855cbca43"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 690,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk0MTE1NjI=",
      "title": "fix copypaste error in SIGMA title",
      "url": "https://github.com/tlswg/tls13-spec/pull/690",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-10-14T16:08:22Z",
      "updatedAt": "2016-10-14T16:14:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "370a953343cc150243e378d0ef0585f9ee9091d7",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "fix-DH-copypaste-error",
      "headRefOid": "c9cab3a2e4925900d41fd6e17f43ecbd03ebf886",
      "closedAt": "2016-10-14T16:09:35Z",
      "mergedAt": "2016-10-14T16:09:35Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "554786b8718305828fd37793f6711f7112529360"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 691,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk0MTc1NjM=",
      "title": "don't specify that enumerateds can assume only specified values",
      "url": "https://github.com/tlswg/tls13-spec/pull/691",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "with few possible exceptions, enumerateds will assume values\ndifferent than the ones they were originally defined with.\nBackwards compatibility of Client Hello is dependent on\nimplementations being able to ignore values they do not\nknow about.\n",
      "createdAt": "2016-10-14T16:49:06Z",
      "updatedAt": "2016-10-17T13:01:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "80a45ebbb2af20c72ff05a6df05ec50967aa4589",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "future-enumerateds",
      "headRefOid": "ca38a2a2d49765ce805b728e25ff58a8ea68ab55",
      "closedAt": "2016-10-16T20:04:33Z",
      "mergedAt": "2016-10-16T20:04:33Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ca38a2a2d49765ce805b728e25ff58a8ea68ab55"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This doesn't seem quite right. Some enums are complete in the sense that you should not ignore unknown ones (HandshakeType) and some are not complete (ExtensionType, CipherSuite).\n",
          "createdAt": "2016-10-14T17:02:28Z",
          "updatedAt": "2016-10-14T17:02:28Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How about then \"...to parse and ignore them unless the their deifnition states otherwise\".?\n",
          "createdAt": "2016-10-14T17:06:53Z",
          "updatedAt": "2016-10-14T17:06:53Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "sure that would be fine\n",
          "createdAt": "2016-10-14T22:32:05Z",
          "updatedAt": "2016-10-14T22:32:05Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNTEzMg==",
          "commit": {
            "abbreviatedOid": "042deaf"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-14T16:53:52Z",
          "updatedAt": "2016-10-14T16:53:52Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "The new values are the important part, not the types that they indicate.\n",
              "createdAt": "2016-10-14T16:53:52Z",
              "updatedAt": "2016-10-15T18:44:00Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNTU4MA==",
          "commit": {
            "abbreviatedOid": "042deaf"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-14T16:56:33Z",
          "updatedAt": "2016-10-14T16:56:33Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "done a simple s/types/values/\n",
              "createdAt": "2016-10-14T16:56:33Z",
              "updatedAt": "2016-10-15T18:44:00Z"
            }
          ]
        }
      ]
    },
    {
      "number": 692,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk0MTkxMDc=",
      "title": "fix editing error - don't duplicate text from previous sentence",
      "url": "https://github.com/tlswg/tls13-spec/pull/692",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-10-14T16:59:48Z",
      "updatedAt": "2016-10-14T17:07:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "554786b8718305828fd37793f6711f7112529360",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "remove-duplication",
      "headRefOid": "eee8da804f944e3efd3ba3a047454ac35ac86b87",
      "closedAt": "2016-10-14T17:04:46Z",
      "mergedAt": "2016-10-14T17:04:46Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "80a45ebbb2af20c72ff05a6df05ec50967aa4589"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 693,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk0NTQxODI=",
      "title": "Deprecate alert level",
      "url": "https://github.com/tlswg/tls13-spec/pull/693",
      "state": "CLOSED",
      "author": "knekritz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "After PR #625 all alerts are required to be sent with fatal AlertLevel except for close_notify, end_of_early_data, and user_canceled. Since those three alerts all have separate specified behavior, the AlertLevel field is not serving much purpose, other than providing potential for misuse. We (Facebook) currently receive a number of alerts at incorrect levels from clients (internal_error warning alerts, etc.). I propose deprecating this field to simplify implementations and require that any misuse be ignored.\n",
      "createdAt": "2016-10-14T21:01:42Z",
      "updatedAt": "2016-10-20T15:27:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "80a45ebbb2af20c72ff05a6df05ec50967aa4589",
      "headRepository": "knekritz/tls13-spec",
      "headRefName": "alerts",
      "headRefOid": "d4aeecf10aebcb359ac43aff1449e65c3e957c3c",
      "closedAt": "2016-10-20T15:27:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@knekritz can you raise this on-list?\n",
          "createdAt": "2016-10-14T21:06:48Z",
          "updatedAt": "2016-10-14T21:06:48Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks!\n",
          "createdAt": "2016-10-14T21:16:08Z",
          "updatedAt": "2016-10-14T21:16:08Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner: instructions?\n",
          "createdAt": "2016-10-18T23:08:03Z",
          "updatedAt": "2016-10-18T23:08:03Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing per:\nhttps://www.ietf.org/mail-archive/web/tls/current/msg21641.html\n",
          "createdAt": "2016-10-20T15:27:54Z",
          "updatedAt": "2016-10-20T15:27:54Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjU4Ng==",
          "commit": {
            "abbreviatedOid": "35f27c2"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-14T22:50:06Z",
          "updatedAt": "2016-10-14T22:50:06Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "This \"should\" needs to be uppercase per RFC2119 language.\n\nalso, nit: \"fatal(2)\" or just \"a value of 2\", rather than \"{2}\", please\n",
              "createdAt": "2016-10-14T22:50:06Z",
              "updatedAt": "2016-10-18T15:06:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzA0Ng==",
          "commit": {
            "abbreviatedOid": "35f27c2"
          },
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-16T21:20:52Z",
          "updatedAt": "2016-10-16T21:20:52Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I prefer \"This field **MUST** be set to 2 for all alerts\", because we use \"MUST\" for most other deprecated fields, such as ClientHello.legacy_version, ClientHello.legacy_compression_methods,  TLSPlaintext.legacy_record_version.\n",
              "createdAt": "2016-10-16T21:20:52Z",
              "updatedAt": "2016-10-18T15:06:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzUwOA==",
          "commit": {
            "abbreviatedOid": "2fd127c"
          },
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-17T23:18:59Z",
          "updatedAt": "2016-10-17T23:19:42Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "{ 2 } should be changed to 2. It is a number, not a struct.\n",
              "createdAt": "2016-10-17T23:18:59Z",
              "updatedAt": "2016-10-18T15:06:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 694,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk0NzU0MDk=",
      "title": "Include text warning of 0RTT properties",
      "url": "https://github.com/tlswg/tls13-spec/pull/694",
      "state": "CLOSED",
      "author": "wbl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Based on list conversations, I'm including some API guidance.\n",
      "createdAt": "2016-10-15T00:47:59Z",
      "updatedAt": "2016-10-16T20:09:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "80a45ebbb2af20c72ff05a6df05ec50967aa4589",
      "headRepository": "wbl/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "4b4e9d3103a9195d6eb325d01cef7547625ee191",
      "closedAt": "2016-10-16T20:09:14Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I like that you have included a requirement to have a profile for each protocol that intends to use 0-RTT, that's a fine thing to have (and it will make some people happier), but the first paragraph is a bit woolly.  You have a lowercase must, followed by a few SHOULD/SHOULD NOT statements.  You really need to be clearer and more definitive here:\n\n> Protocols MUST NOT use 0-RTT data without a profile that defines its use.  That profile needs to identify which messages or interactions are safe to use with 0-RTT.\n> \n> In addition, to avoid accidental misuse, implementations SHOULD NOT enable 0-RTT unless specifically requested.  Special functions for 0-RTT data are RECOMMENDED to ensure that an application is always aware that it is sending or receiving data that might be replayed.\n",
          "createdAt": "2016-10-16T09:47:26Z",
          "updatedAt": "2016-10-16T09:47:26Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I adopted Martin Thomson's text.\n",
          "createdAt": "2016-10-16T20:09:14Z",
          "updatedAt": "2016-10-16T20:09:14Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NjI5Ng==",
          "commit": {
            "abbreviatedOid": "4b4e9d3"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-15T03:31:59Z",
          "updatedAt": "2016-10-15T03:38:10Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "missing space after comma\n",
              "createdAt": "2016-10-15T03:31:59Z",
              "updatedAt": "2016-10-15T03:38:10Z"
            },
            {
              "originalPosition": 5,
              "body": "'I' before 'E' except after 'C', so the correct spellings are \"receiving\" and \"received\".\n\"preappend\" should be \"prepend\"\n\n(also, wrap lines to around 80 characters, please)\n",
              "createdAt": "2016-10-15T03:32:42Z",
              "updatedAt": "2016-10-15T03:38:10Z"
            },
            {
              "originalPosition": 8,
              "body": "This sentence is a bit superfluous down here. Might be better to put a comma at the end of the first new sentence up top and stick this sentence fragment there. e.g. \"... treated by applications, and protocols on top of ...\" \n",
              "createdAt": "2016-10-15T03:37:57Z",
              "updatedAt": "2016-10-15T03:38:10Z"
            }
          ]
        }
      ]
    },
    {
      "number": 695,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk0NzY3NjA=",
      "title": "\"Application data\" -> \"Application Data\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/695",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Normalize the case of \"Application data\" into \"Application Data\".\n",
      "createdAt": "2016-10-15T01:23:08Z",
      "updatedAt": "2016-10-16T20:13:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "80a45ebbb2af20c72ff05a6df05ec50967aa4589",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "9d460287f6b458a564a50513b9a7d5f85af2a8ef",
      "closedAt": "2016-10-16T19:57:54Z",
      "mergedAt": "2016-10-16T19:57:54Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "39c369da7c731141baffc1352b4dabe57d6da61d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 696,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk0NzcyNjY=",
      "title": "Clarify what to do when TLSPlaintext.length is too large",
      "url": "https://github.com/tlswg/tls13-spec/pull/696",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Before record protection is established, if an endpoint receives a TLSPlaintext structure whose \"length\" field is too large (>2^14), should it send a \"record_overflow\" alert?\n",
      "createdAt": "2016-10-15T01:38:17Z",
      "updatedAt": "2016-10-16T20:13:52Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "80a45ebbb2af20c72ff05a6df05ec50967aa4589",
      "headRepository": null,
      "headRefName": "patch-2",
      "headRefOid": "fb37b92376b7f5b3862ca016ab36c098f4bbf73f",
      "closedAt": "2016-10-16T20:05:40Z",
      "mergedAt": "2016-10-16T20:05:40Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "bed1e95f67177359905beffd5046ace20f31d647"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NjM5Ng==",
          "commit": {
            "abbreviatedOid": "0da599f"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-15T03:41:12Z",
          "updatedAt": "2016-10-15T03:41:12Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "please replace these with standard quote characters\n",
              "createdAt": "2016-10-15T03:41:12Z",
              "updatedAt": "2016-10-15T04:05:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NjY0Ng==",
          "commit": {
            "abbreviatedOid": "0da599f"
          },
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-15T04:05:49Z",
          "updatedAt": "2016-10-15T04:05:49Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "@davegarrett Fixed. Thanks!\n",
              "createdAt": "2016-10-15T04:05:49Z",
              "updatedAt": "2016-10-15T04:05:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 697,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk1NDA5NTM=",
      "title": "legacy_session_id: SHOULD -> MUST",
      "url": "https://github.com/tlswg/tls13-spec/pull/697",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "All other fields deprecated by this spec use \"MUST be set to ...\", such as ClientHello.legacy_version, ClientHello.legacy_compression_methods, TLSPlaintext.legacy_record_version. Only ClientHello.legacy_session_id \"SHOULD be set as [...]\" So I suggest changing this to \"MUST\" as well.\n",
      "createdAt": "2016-10-16T21:40:43Z",
      "updatedAt": "2016-10-17T00:47:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "32c9b78954919b6ad6b770b4e7a647e254ea414a",
      "headRepository": null,
      "headRefName": "sessionid",
      "headRefOid": "c08c108165edd82ea7617838d6232e97eba21bcb",
      "closedAt": "2016-10-17T00:46:52Z",
      "mergedAt": "2016-10-17T00:46:52Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "766d7069d6d9ed6847e6748d5ce90daacd076b98"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 698,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk1NDE0NzU=",
      "title": "[README.md] Update home page link",
      "url": "https://github.com/tlswg/tls13-spec/pull/698",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It seems https://trac.tools.ietf.org/wg/tls/trac/wiki is no longer in use. Can we change the link to https://datatracker.ietf.org/wg/tls/documents/?\n",
      "createdAt": "2016-10-16T21:56:07Z",
      "updatedAt": "2016-10-17T00:52:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "32c9b78954919b6ad6b770b4e7a647e254ea414a",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "3dadc682a5dae95f8d2eacbdf5be34412c76e94c",
      "closedAt": "2016-10-17T00:49:09Z",
      "mergedAt": "2016-10-17T00:49:09Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c7ba5796c83b5a43a588508699af90354e2df116"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 699,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk1NDc1MDY=",
      "title": "Clean up key expansion",
      "url": "https://github.com/tlswg/tls13-spec/pull/699",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-10-17T00:49:33Z",
      "updatedAt": "2016-10-19T14:29:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c7ba5796c83b5a43a588508699af90354e2df116",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "clean_up_key_expansion",
      "headRefOid": "fccd1c48c12cb481205db5b74eaa4e22a67ceadf",
      "closedAt": "2016-10-19T14:29:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson @davidben This came from Valdez's suggestion. This seems super-simple but should be safe now. Can you make sure I haven't missed anything?\n",
          "createdAt": "2016-10-17T00:58:52Z",
          "updatedAt": "2016-10-17T00:58:52Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM.  Extra layers of key separation is no longer needed now that we don't need to split the early secret into multiple keys.\n",
          "createdAt": "2016-10-17T01:05:10Z",
          "updatedAt": "2016-10-17T01:05:10Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The key/iv table (next table following the edited table) is verbosity overkill. Could you just scrap that table and state that it's one of two short strings inline, instead?\n",
          "createdAt": "2016-10-17T02:44:04Z",
          "updatedAt": "2016-10-17T02:44:04Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM, existing editorial comments aside.\n\nPerhaps just write something like:\n\n---\n\nThe traffic keying material is generated from an input traffic secret value using:\n\n```\n  [sender]_write_key = HKDF-Expand-Label(Secret, \"key\", \"\", key_length)\n  [sender]_write_iv = HKDF-Expand-Label(Secret, \"iv\", \"\", iv_length)\n```\n\n[sender] denotes the sending side. The following table specifies the input traffic secret for each class of traffic keys:\n\n[the table in this PR]\n\nAll the traffic keying material is recomputed whenever the underlying traffic secret changes (e.g., when changing from the handshake to application data keys or upon a key update).\n\n---\n\nThis matches the `iv_length` and `[sender]_write_key` naming used elsewhere in the spec.\n",
          "createdAt": "2016-10-17T18:36:30Z",
          "updatedAt": "2016-10-17T18:36:30Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand\n",
          "createdAt": "2016-10-19T14:29:03Z",
          "updatedAt": "2016-10-19T14:29:03Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTY3Mg==",
          "commit": {
            "abbreviatedOid": "fccd1c4"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-17T02:38:45Z",
          "updatedAt": "2016-10-17T02:38:46Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "last '_' should be a ')'\n",
              "createdAt": "2016-10-17T02:38:45Z",
              "updatedAt": "2016-10-17T02:38:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 701,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk2NDY1NTE=",
      "title": "[Editorial] add missing space",
      "url": "https://github.com/tlswg/tls13-spec/pull/701",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-10-17T15:29:43Z",
      "updatedAt": "2016-10-17T15:58:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c7ba5796c83b5a43a588508699af90354e2df116",
      "headRepository": null,
      "headRefName": "fixtypo",
      "headRefOid": "d56bb940dae171f97b5b20d4cd575ccfcaf96b6b",
      "closedAt": "2016-10-17T15:56:02Z",
      "mergedAt": "2016-10-17T15:56:02Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d77c570dfc0c3209a28e53fe8611d9ddbf615e40"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 702,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk2NTA2ODA=",
      "title": "Make inappropriate_fallback reserved",
      "url": "https://github.com/tlswg/tls13-spec/pull/702",
      "state": "CLOSED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The \"inappropriate_fallback\" alert is no longer needed for TLS 1.3, since it already has the downgrade protection mechanism of checking the server's random value.\n",
      "createdAt": "2016-10-17T15:50:48Z",
      "updatedAt": "2016-10-17T23:02:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c7ba5796c83b5a43a588508699af90354e2df116",
      "headRepository": null,
      "headRefName": "alert",
      "headRefOid": "8fdd19d7cfa1324e0007b6fb6f77337782f1525e",
      "closedAt": "2016-10-17T23:02:24Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This doesn't seem right to me. If you have the SCSV you should still be sending this alter.\n",
          "createdAt": "2016-10-17T22:39:51Z",
          "updatedAt": "2016-10-17T22:39:51Z"
        },
        {
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You are right. I missed the case when a TLS 1.3 client fallback to TLS 1.1 with SCSV. In this case TLS 1.3 server does need to send this alert, because it doesn't know whether the client knows to check the server random.\n",
          "createdAt": "2016-10-17T23:02:24Z",
          "updatedAt": "2016-10-17T23:02:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 703,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk2NTY4NDA=",
      "title": "Alert clarifications",
      "url": "https://github.com/tlswg/tls13-spec/pull/703",
      "state": "CLOSED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix few typos and clarify when and if alerts should be sent.\n",
      "createdAt": "2016-10-17T16:23:58Z",
      "updatedAt": "2016-10-17T22:57:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d77c570dfc0c3209a28e53fe8611d9ddbf615e40",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "alert-clarifications",
      "headRefOid": "f36e3e0b61f1d50ca6ae5942a9900712b8c8302e",
      "closedAt": "2016-10-17T22:57:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This PR does not match the WG consensus which is that sending alerts was optional\n",
          "createdAt": "2016-10-17T16:32:18Z",
          "updatedAt": "2016-10-17T16:32:18Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "But it does say that sending alerts is optional, it just explains why its not good thing to do: https://github.com/tlswg/tls13-spec/pull/703/files#diff-9d84740dcc569a0a5a359d0fba461a05R3656\n",
          "createdAt": "2016-10-17T17:42:44Z",
          "updatedAt": "2016-10-17T17:42:44Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See above.\n",
          "createdAt": "2016-10-17T20:25:57Z",
          "updatedAt": "2016-10-17T20:25:57Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "new line 3656 clearly states that not sending alerts is acceptable, the patches do not modify the existing text in line 3632/3645\n\nso which line nullifies this?\n",
          "createdAt": "2016-10-17T22:33:57Z",
          "updatedAt": "2016-10-17T22:33:57Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The line where you removed the word \"optional\"\n\nOn Mon, Oct 17, 2016 at 6:33 PM, Hubert Kario notifications@github.com\nwrote:\n\n> new line 3656 clearly states that not sending alerts is acceptable, the\n> patches do not modify the existing text in line 3632/3645\n> \n> so which line nullifies this?\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/703#issuecomment-254354467, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/ABD1oUtku2TpMLMJYXMY0MdjF7H6Y102ks5q0_fXgaJpZM4KY0yn\n> .\n",
          "createdAt": "2016-10-17T22:35:57Z",
          "updatedAt": "2016-10-17T22:35:57Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That is general description of the protocol, there are no RFC 2119 keywords there. The whole section is very low on details\n\nI don't see how that overrides the text in line 3622/364:\n\n>  Whenever an implementation encounters a fatal error condition, it\n> SHOULD send an appropriate fatal alert and MUST close the connection\n> without sending or receiving any additional data.\n\ntext which  the patches don't modify\n",
          "createdAt": "2016-10-17T22:41:34Z",
          "updatedAt": "2016-10-17T22:41:34Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I took the parts of this that I think are useful improvements. I don't think that the text exhorting people harder to send alerts helps and that the alerts to send in the cases of fragment errors are clear enough already.\n",
          "createdAt": "2016-10-17T22:57:43Z",
          "updatedAt": "2016-10-17T22:57:43Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 704,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk2NjkzODk=",
      "title": "add missing space",
      "url": "https://github.com/tlswg/tls13-spec/pull/704",
      "state": "CLOSED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-10-17T17:43:31Z",
      "updatedAt": "2016-10-17T18:11:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d77c570dfc0c3209a28e53fe8611d9ddbf615e40",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "missing-space",
      "headRefOid": "e07c2e2f047f5f2e0c25bae887d175b2baa8dc7c",
      "closedAt": "2016-10-17T18:11:34Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This PR is identical to the recently merged PR #701.\n",
          "createdAt": "2016-10-17T18:08:33Z",
          "updatedAt": "2016-10-17T18:08:33Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looks like I was too slow :)\n",
          "createdAt": "2016-10-17T18:11:34Z",
          "updatedAt": "2016-10-17T18:11:34Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 705,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk2NzM3MDI=",
      "title": "MarkDown to specify a constant-width text must be in first column",
      "url": "https://github.com/tlswg/tls13-spec/pull/705",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-10-17T18:10:25Z",
      "updatedAt": "2016-10-17T22:27:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d77c570dfc0c3209a28e53fe8611d9ddbf615e40",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "diagram-style",
      "headRefOid": "94da2ec4633f5d2dba589f9422848908ada540c5",
      "closedAt": "2016-10-17T20:26:18Z",
      "mergedAt": "2016-10-17T20:26:18Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "03369159cd30a65f27690953d9b615daeb1d0bca"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 706,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk2NzU4MTc=",
      "title": "Clarify ALPN with 0-RTT (existing behavior).",
      "url": "https://github.com/tlswg/tls13-spec/pull/706",
      "state": "MERGED",
      "author": "knekritz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "1) Switches uses of ALPN label/value to \"ALPN protocol\" (to clarify this is referring to a single protocol, not the entire extension)\n2) Remove plural from external PSK case (if there's not way for the client to select which protocol the 0-RTT data uses, it doesn't make sense for there to be multiple options)\n3) Switch reference from RFC7443 to RFC7301 (I assume this is what was intended)\n\nI think this makes the intended behavior of the spec a bit more clear.\n",
      "createdAt": "2016-10-17T18:23:40Z",
      "updatedAt": "2016-10-17T20:36:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d77c570dfc0c3209a28e53fe8611d9ddbf615e40",
      "headRepository": "knekritz/tls13-spec",
      "headRefName": "alpn_clarify",
      "headRefOid": "cbc6bff36aa97860ba179fef17cc9b7c48754bba",
      "closedAt": "2016-10-17T20:36:10Z",
      "mergedAt": "2016-10-17T20:36:10Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3444dec07d5409b855a8120cd6d87d1467dc9144"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 707,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk2OTU2MzM=",
      "title": "Refer to RFC 5226",
      "url": "https://github.com/tlswg/tls13-spec/pull/707",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "RFC 5226 obsoleted RFC 2434 so we should refer to that to avoid a GENART review comment.\n",
      "createdAt": "2016-10-17T20:24:08Z",
      "updatedAt": "2016-10-17T20:26:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d77c570dfc0c3209a28e53fe8611d9ddbf615e40",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "rfc5226",
      "headRefOid": "18c2c3ad2399b3e36d36fc829bd63cf60cbcbf36",
      "closedAt": "2016-10-17T20:26:38Z",
      "mergedAt": "2016-10-17T20:26:38Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "11400b72effbfd0b2ceba957296ee1cb7b0089aa"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 708,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk3MDM1OTY=",
      "title": "Update Server Hello section to match section 4.2.1",
      "url": "https://github.com/tlswg/tls13-spec/pull/708",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It seems section 4.1.3 Server Hello has not been updated to reflect the new version negotiation mechanism. [Section 4.2.1](https://tlswg.github.io/tls13-spec/#supported-versions) says \"servers [...] MUST only select a version of TLS present in that extension\", whereas the current [section 4.1.3](https://tlswg.github.io/tls13-spec/#server-hello) says \"servers MUST [...] negotiate the highest mutually supported version\".\n",
      "createdAt": "2016-10-17T21:09:01Z",
      "updatedAt": "2016-10-17T21:15:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3444dec07d5409b855a8120cd6d87d1467dc9144",
      "headRepository": null,
      "headRefName": "version",
      "headRefOid": "f27ccc3ab4e738ae03dddab15b141ee08d349206",
      "closedAt": "2016-10-17T21:15:04Z",
      "mergedAt": "2016-10-17T21:15:04Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "712c68cb24c57ef01ace77e90dc8384040682154"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks, I caught a few of these on my reread yesterday too, but I probably missed some too, so keep them coming!\n",
          "createdAt": "2016-10-17T21:15:02Z",
          "updatedAt": "2016-10-17T21:15:02Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 709,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk3NTY3OTU=",
      "title": "Explicitly saying that a case can have multiple fields. (#700)",
      "url": "https://github.com/tlswg/tls13-spec/pull/709",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This patch clarifies the presentation language to fix issue 700.\n",
      "createdAt": "2016-10-18T06:58:24Z",
      "updatedAt": "2016-10-20T00:26:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ebcc361cc37bd8ed32ffb33c17813218f0499956",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "fix-700",
      "headRefOid": "176f0b653aab26167eeef4bef841de3695d5be56",
      "closedAt": "2016-10-18T09:10:06Z",
      "mergedAt": "2016-10-18T09:10:06Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "0909ff42d4c250471a70b129493c8eddbad5c5cc"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 710,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk3NTgwMTg=",
      "title": "fixing wrong spaces.",
      "url": "https://github.com/tlswg/tls13-spec/pull/710",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This patch fixes wrong numbers of spaces.\n",
      "createdAt": "2016-10-18T07:09:46Z",
      "updatedAt": "2016-10-20T00:26:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ebcc361cc37bd8ed32ffb33c17813218f0499956",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "spaces",
      "headRefOid": "8c9bee54d6c6b3be018a8236a98c95d60ac83977",
      "closedAt": "2016-10-18T09:10:31Z",
      "mergedAt": "2016-10-18T09:10:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a671daf3a3eb387c2c4228b101a140b7b0090c5c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 712,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk5NDY0Nzc=",
      "title": "using struct to defined PskBinderEntry.",
      "url": "https://github.com/tlswg/tls13-spec/pull/712",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "According our criteria of one-field-struct vs non-struct, this should be a one-field-struct. (My parser warns this.)\n",
      "createdAt": "2016-10-19T05:59:56Z",
      "updatedAt": "2016-10-20T00:26:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3a5680890932e5044c90c9eb74e6df95df70df7a",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "pskbinder",
      "headRefOid": "dd42c7b73c558c6196bed4d1d0cf14ddb39c2187",
      "closedAt": "2016-10-20T00:20:09Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems like an incorrect application. It's not a standalone message, just a field\n",
          "createdAt": "2016-10-19T12:17:22Z",
          "updatedAt": "2016-10-19T12:17:22Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK. Let's close this.\n",
          "createdAt": "2016-10-20T00:20:09Z",
          "updatedAt": "2016-10-20T00:20:09Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 713,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk5NTIwMDY=",
      "title": "fixing #711.",
      "url": "https://github.com/tlswg/tls13-spec/pull/713",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- s/ticket_extensions/extensions/\n- Explicitly saying that Extension is identical to hello extensions.\n- Adding comments to ExtensionType.\n",
      "createdAt": "2016-10-19T07:00:28Z",
      "updatedAt": "2016-10-20T00:26:04Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3a5680890932e5044c90c9eb74e6df95df70df7a",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "extensions",
      "headRefOid": "01df21cf0dd127c481fa31183a51be2a601dec85",
      "closedAt": "2016-10-19T12:44:07Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I merged this withotu the comments on the struct which seemed superfluous.\n",
          "createdAt": "2016-10-19T12:44:07Z",
          "updatedAt": "2016-10-19T12:44:07Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 714,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk5NTI1Mzc=",
      "title": "fixing typos.",
      "url": "https://github.com/tlswg/tls13-spec/pull/714",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some extension names are incorrect.\n",
      "createdAt": "2016-10-19T07:05:22Z",
      "updatedAt": "2016-10-20T00:26:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3a5680890932e5044c90c9eb74e6df95df70df7a",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "typo",
      "headRefOid": "e7d968554356c61fd2c498519fe8ae1c17a231c0",
      "closedAt": "2016-10-19T12:18:32Z",
      "mergedAt": "2016-10-19T12:18:32Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "8f7624ed61fdb284971131094b374bc552b62933"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 715,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk5NTM1NDM=",
      "title": "removing an empty section.",
      "url": "https://github.com/tlswg/tls13-spec/pull/715",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This section is empty. I think this should be removed.\n",
      "createdAt": "2016-10-19T07:14:37Z",
      "updatedAt": "2016-10-20T00:26:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3a5680890932e5044c90c9eb74e6df95df70df7a",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "empty-section",
      "headRefOid": "c9083c052069e992ca5d0d9b65e1529ef1a2209c",
      "closedAt": "2016-10-19T12:18:47Z",
      "mergedAt": "2016-10-19T12:18:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "80da7e8b82dc2d33b9717090e0298b2a7f8364bc"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 716,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk5NTg2MzM=",
      "title": "s/TLS v1.x/TLS v1.0/",
      "url": "https://github.com/tlswg/tls13-spec/pull/716",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The comment of legacy_version in ClientHello was updated and fixed.\nRecord layer should follow this.\n",
      "createdAt": "2016-10-19T07:57:42Z",
      "updatedAt": "2016-10-20T00:26:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3a5680890932e5044c90c9eb74e6df95df70df7a",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "record-version",
      "headRefOid": "0f792d99f2caddd0c60a451b0e3b654422075846",
      "closedAt": "2016-10-19T12:19:15Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No, I think that's correct as this value is shared with all the TLS versions since TLSv1.0 up to and including TLSv1.3. So that value indicates that it's negotiating a TLS connection, not SSL 3 one.\n",
          "createdAt": "2016-10-19T10:10:56Z",
          "updatedAt": "2016-10-19T10:10:56Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I concur with @tomato42 \n",
          "createdAt": "2016-10-19T12:19:15Z",
          "updatedAt": "2016-10-19T12:19:15Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 717,
      "id": "MDExOlB1bGxSZXF1ZXN0OTAwNDE2MTg=",
      "title": "Revise syntax description",
      "url": "https://github.com/tlswg/tls13-spec/pull/717",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- The caveats at the beginning are silly\n- We don't seem to every use  Foo = { A, B} but we do use Foo = A;\n",
      "createdAt": "2016-10-19T16:08:38Z",
      "updatedAt": "2016-10-19T17:56:12Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ec4c13a987528b384cb75746c0e7dc9554a719cc",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "syntax_update",
      "headRefOid": "6e816d2eb33a66e976263aebfc99b87c015e85d1",
      "closedAt": "2016-10-19T17:56:12Z",
      "mergedAt": "2016-10-19T17:56:12Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "32455c264d8cfd03d9ed31a5a422cca03889ec95"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed, thanks\n",
          "createdAt": "2016-10-19T17:55:58Z",
          "updatedAt": "2016-10-19T17:55:58Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjAzMg==",
          "commit": {
            "abbreviatedOid": "c782821"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-19T17:34:39Z",
          "updatedAt": "2016-10-19T17:34:39Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This is the only reference to RFC4506 in this document, so you can also remove it from the informative references list.\n",
              "createdAt": "2016-10-19T17:34:39Z",
              "updatedAt": "2016-10-19T17:45:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 718,
      "id": "MDExOlB1bGxSZXF1ZXN0OTAwNzIzOTU=",
      "title": "Address EKR's comments from pre-17 readthrough. Changes include:",
      "url": "https://github.com/tlswg/tls13-spec/pull/718",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- Harmonize requirements for resumption cipher suites:\n  With 0-RTT you have to use the whole cipher suite but with\n  resumption you only need to match the KDF (which is a crypto\n  requirement). This allows you to use PSKs but still negotiate\n  new cipher suites.\n- Clarify that extensions are generally freshly negotiated in\n  resumption.\n- Flesh out IANA Considerations.\n- Remove some TODO markers, including the one on recommending specific\n  groups. If the WG wants to come to consensus on this, I will take\n  a PR for it.\n",
      "createdAt": "2016-10-19T19:14:20Z",
      "updatedAt": "2016-10-20T12:50:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5413666004e8e4d52ab4f77feca558432edf85df",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "ekr_pre17_readthrough",
      "headRefOid": "4517d205f0b2326623f18e0ed4b00f4e9ae7b240",
      "closedAt": "2016-10-20T12:50:34Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Updated to the merged version.\n",
          "createdAt": "2016-10-20T12:50:39Z",
          "updatedAt": "2016-10-20T12:50:39Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0MzAyMQ==",
          "commit": {
            "abbreviatedOid": "abb7bd4"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-19T19:23:19Z",
          "updatedAt": "2016-10-19T19:34:05Z",
          "comments": [
            {
              "originalPosition": 378,
              "body": "full stop\n",
              "createdAt": "2016-10-19T19:23:19Z",
              "updatedAt": "2016-10-20T12:50:34Z"
            },
            {
              "originalPosition": 379,
              "body": "comma after \"validate\"?\n",
              "createdAt": "2016-10-19T19:23:32Z",
              "updatedAt": "2016-10-20T12:50:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTQ3Nw==",
          "commit": {
            "abbreviatedOid": "abb7bd4"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-19T19:37:10Z",
          "updatedAt": "2016-10-19T19:54:45Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "It seems that indentation for this is rather inconsistent. If you're changing it above, I'd suggest making this and others match as well.\n",
              "createdAt": "2016-10-19T19:37:10Z",
              "updatedAt": "2016-10-20T12:50:34Z"
            },
            {
              "originalPosition": 290,
              "body": "missing period\n",
              "createdAt": "2016-10-19T19:37:28Z",
              "updatedAt": "2016-10-20T12:50:34Z"
            },
            {
              "originalPosition": 288,
              "body": "Missing capitalization for first word of sentence. I suggest just dropping the quotes and the dash.\n",
              "createdAt": "2016-10-19T19:38:18Z",
              "updatedAt": "2016-10-20T12:50:34Z"
            },
            {
              "originalPosition": 323,
              "body": "double \"and\"\n",
              "createdAt": "2016-10-19T19:40:07Z",
              "updatedAt": "2016-10-20T12:50:34Z"
            },
            {
              "originalPosition": 378,
              "body": "missing period at end of sentence\n",
              "createdAt": "2016-10-19T19:40:57Z",
              "updatedAt": "2016-10-20T12:50:34Z"
            },
            {
              "originalPosition": 756,
              "body": "accidental removal of a correct period\n",
              "createdAt": "2016-10-19T19:47:37Z",
              "updatedAt": "2016-10-20T12:50:34Z"
            },
            {
              "originalPosition": 285,
              "body": "I suggest dropping the parenthesis here to match the styling of the exception in the first sentence of the next paragraph.\n",
              "createdAt": "2016-10-19T19:51:12Z",
              "updatedAt": "2016-10-20T12:50:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MTMzOQ==",
          "commit": {
            "abbreviatedOid": "abb7bd4"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-19T21:04:57Z",
          "updatedAt": "2016-10-19T21:04:57Z",
          "comments": [
            {
              "originalPosition": 285,
              "body": "I had to rewrite this anyway.\n",
              "createdAt": "2016-10-19T21:04:57Z",
              "updatedAt": "2016-10-20T12:50:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2Njc4NA==",
          "commit": {
            "abbreviatedOid": "3b859de"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-19T21:36:39Z",
          "updatedAt": "2016-10-19T21:40:43Z",
          "comments": [
            {
              "originalPosition": 285,
              "body": "nit: comma after \"ClientHello\"\n",
              "createdAt": "2016-10-19T21:36:39Z",
              "updatedAt": "2016-10-20T12:50:34Z"
            },
            {
              "originalPosition": 286,
              "body": "errant closing paren leftover\n",
              "createdAt": "2016-10-19T21:36:58Z",
              "updatedAt": "2016-10-20T12:50:34Z"
            },
            {
              "originalPosition": 289,
              "body": "Wording nitpicking: \"dummy\" doesn't feel like the ideal word here, as it does have meaning. Maybe instead be explicit: \"an extension with zero-length extension_data\"\n",
              "createdAt": "2016-10-19T21:40:32Z",
              "updatedAt": "2016-10-20T12:50:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzY5Mw==",
          "commit": {
            "abbreviatedOid": "87bf17e"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2016-10-19T23:51:21Z",
          "updatedAt": "2016-10-19T23:51:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 723,
      "id": "MDExOlB1bGxSZXF1ZXN0OTAxMTA4MTc=",
      "title": "A bunch of minor editorial fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/723",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I believe that these are just cleanup, though you might want to check the PSK one a little more carefully (happy to separate it if it is a problem).\n",
      "createdAt": "2016-10-19T23:44:14Z",
      "updatedAt": "2016-10-20T12:53:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "32455c264d8cfd03d9ed31a5a422cca03889ec95",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "editorial",
      "headRefOid": "54ba4d48bc01998efb03bfa34a475f5095d7bfef",
      "closedAt": "2016-10-20T12:53:50Z",
      "mergedAt": "2016-10-20T12:53:50Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "54ba4d48bc01998efb03bfa34a475f5095d7bfef"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzQzMg==",
          "commit": {
            "abbreviatedOid": "ac4a7b1"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-19T23:48:41Z",
          "updatedAt": "2016-10-19T23:48:59Z",
          "comments": [
            {
              "originalPosition": 135,
              "body": "Yeah, so I explicitly went the other way in my latest PR. It was inconsistent between external PSKs and resumption. And if you bind a PSK to the cipher suite than it means that you can't have a PSK that you establish externally and then have any negotiation, so you're stuck with (e.g., GCM) forever.\n\nThere are three choices:\n1. Bind it to cipher suite always\n2. Bind it to KDF always (and then require AEAD match for 0-RTT)\n3. Bind to KDF for external PSK and cipher suite for resumption (ugh).\n\nI went for #2, but I can see people feeling differently.\n",
              "createdAt": "2016-10-19T23:48:41Z",
              "updatedAt": "2016-10-19T23:52:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5OTY2Nw==",
          "commit": {
            "abbreviatedOid": "ac4a7b1"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-20T03:44:16Z",
          "updatedAt": "2016-10-20T03:44:16Z",
          "comments": [
            {
              "originalPosition": 135,
              "body": "I like that we are able to negotiate as much as possible myself.  I think that what you chosen would be my first choice.  I just thought that the decision to bind to cipher suite (which remains a valid choice for an implementation) was the product of a discussion.  I have removed the commit.\n",
              "createdAt": "2016-10-20T03:44:16Z",
              "updatedAt": "2016-10-20T03:44:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 724,
      "id": "MDExOlB1bGxSZXF1ZXN0OTAyNjYxMjI=",
      "title": "drop unnecessary definition of valueless enums",
      "url": "https://github.com/tlswg/tls13-spec/pull/724",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We don't actually use this syntax, and having it in here just adds useless complexity. Defining syntax we don't actually use just risks confusing people reading the document for the first time.\n",
      "createdAt": "2016-10-20T19:33:24Z",
      "updatedAt": "2016-10-20T19:53:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f13926026820a890bdc5c639043cba91ac8215f8",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "novaluelessenums",
      "headRefOid": "b6f3c5b819bf16b423a4fd977ebd8780408c6b22",
      "closedAt": "2016-10-20T19:52:05Z",
      "mergedAt": "2016-10-20T19:52:05Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4f726687910ceeaf4c9c0593b88c6d191a6d3e18"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 725,
      "id": "MDExOlB1bGxSZXF1ZXN0OTAyODI3ODY=",
      "title": "fix Presentation Language sectioning",
      "url": "https://github.com/tlswg/tls13-spec/pull/725",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Variants is not a subsection of Constants; just have them all be subsections of same depth within Presentation Language\n\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-17#section-3.7\n",
      "createdAt": "2016-10-20T21:16:42Z",
      "updatedAt": "2016-10-20T21:33:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4f726687910ceeaf4c9c0593b88c6d191a6d3e18",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "85965dfad81ddfe782be116e114fdf2c46f9b32f",
      "closedAt": "2016-10-20T21:25:21Z",
      "mergedAt": "2016-10-20T21:25:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "bcf0d13e2ec8c9649c743ca220814773a3782ffd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 726,
      "id": "MDExOlB1bGxSZXF1ZXN0OTAyODU0ODM=",
      "title": "minor cleanup Early Data Indication",
      "url": "https://github.com/tlswg/tls13-spec/pull/726",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This extension is now empty. Minor cleanup.\n",
      "createdAt": "2016-10-20T21:33:45Z",
      "updatedAt": "2016-10-21T03:00:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bcf0d13e2ec8c9649c743ca220814773a3782ffd",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "a1d7a82ca20c001abfd42176f13bd5964dd4793a",
      "closedAt": "2016-10-21T00:34:35Z",
      "mergedAt": "2016-10-21T00:34:35Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "05b83c5ac1b5889ed9ef96a0219cb8bd1b76541a"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think \"it's own\" is useful, but my instinct is that having the empty struct makes life easier.\n",
          "createdAt": "2016-10-20T21:42:31Z",
          "updatedAt": "2016-10-20T21:42:31Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If you would rather keep the empty struct, I don't have a strong objection. Repushed with just the minor wording tweak.\n",
          "createdAt": "2016-10-20T21:47:24Z",
          "updatedAt": "2016-10-20T21:47:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 728,
      "id": "MDExOlB1bGxSZXF1ZXN0OTAyOTAzMjQ=",
      "title": "specify what to do when receive wrong fragments",
      "url": "https://github.com/tlswg/tls13-spec/pull/728",
      "state": "CLOSED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This clarifies what to do when an endpoint receives a zero-length fragment of Handshake or Alert type, or a fragmented Alert message [1]. This addresses the issue that @tomato42 posted on list [2].\n\n[1] https://www.ietf.org/mail-archive/web/tls/current/msg21631.html.\n[2] https://www.ietf.org/mail-archive/web/tls/current/msg21629.html\n",
      "createdAt": "2016-10-20T22:07:57Z",
      "updatedAt": "2016-10-26T10:21:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bcf0d13e2ec8c9649c743ca220814773a3782ffd",
      "headRepository": null,
      "headRefName": "wrong_fragments",
      "headRefOid": "e348b95999457ffd04a72a7e8f2ed066dc4201a7",
      "closedAt": "2016-10-26T05:16:56Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is clear enough in the decode_error text.\n",
          "createdAt": "2016-10-26T05:16:56Z",
          "updatedAt": "2016-10-26T05:16:56Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "decode_error only talks about incorrect message lengths, not incorrect record lengths\n",
          "createdAt": "2016-10-26T10:21:26Z",
          "updatedAt": "2016-10-26T10:21:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 729,
      "id": "MDExOlB1bGxSZXF1ZXN0OTAzODA2MzQ=",
      "title": "extend insufficient_security to not apply only to ciphers",
      "url": "https://github.com/tlswg/tls13-spec/pull/729",
      "state": "CLOSED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "not only ciphers are negotiatied during handshake, also group\nparameters and signature algorithms, all of which can cause\nabort because the intersection between ones supported by server\nand ones advertised by client is null.\n",
      "createdAt": "2016-10-21T13:15:27Z",
      "updatedAt": "2016-10-26T05:12:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "05b83c5ac1b5889ed9ef96a0219cb8bd1b76541a",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "insufficient_security",
      "headRefOid": "11ee89e9f4b8c00d767d3ea56b81f150888ecbc2",
      "closedAt": "2016-10-26T05:12:51Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is a good idea since the new negotiation split up the cipher suites in favor of individual algorithm negotiation. I would suggest adding blurbs in the actual sections that would be applicable, rather than just changing the definition. (also, please add a changelog entry)\n",
          "createdAt": "2016-10-21T19:41:44Z",
          "updatedAt": "2016-10-21T19:41:44Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't have a problem with expanding the set of things you send insufficient parameters for, but this seems like a larger change than needed. All that's needed here is to replace \"ciphers\" with \"security parameters\" in the second block.\n",
          "createdAt": "2016-10-21T19:53:55Z",
          "updatedAt": "2016-10-21T19:53:55Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I made the change indicated in my comment above\n",
          "createdAt": "2016-10-26T05:12:51Z",
          "updatedAt": "2016-10-26T05:12:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 730,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA0OTIzOTY=",
      "title": "drop old text about old low security cipher suites",
      "url": "https://github.com/tlswg/tls13-spec/pull/730",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "TLS 1.3 only has a handful of cipher suites, and no low security ones. This text is obsolete, so this PR removes it and bumps the certificate part of this small section up to the previous section on certificates.\n",
      "createdAt": "2016-10-22T19:17:39Z",
      "updatedAt": "2016-10-22T19:32:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "05b83c5ac1b5889ed9ef96a0219cb8bd1b76541a",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "implsuitescruft",
      "headRefOid": "111e2821527ddc27d85afc054bcc3db0c1b29242",
      "closedAt": "2016-10-22T19:24:30Z",
      "mergedAt": "2016-10-22T19:24:30Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e9f34811cfb497d8f3ff2d0a6542888a2016f0c8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 731,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA0OTMwMjE=",
      "title": "add/tweak some references",
      "url": "https://github.com/tlswg/tls13-spec/pull/731",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just noticed that the MTI suites section didn't link to the suites, so here's a minor PR with some reference fiddling for this section:\n- Add a link in MTI suites to the suites section, now that they're defined in this document.\n- Nitpick ordering of extensions in MTI extensions to have them in same order as sections (so numbers in links are consistient).\n- Change plaintext reference to appendices in Security Considerations to actual references.\n",
      "createdAt": "2016-10-22T19:39:14Z",
      "updatedAt": "2016-10-25T19:19:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e9f34811cfb497d8f3ff2d0a6542888a2016f0c8",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "tweakrefs",
      "headRefOid": "27a6ee93983f624da10772d508d952404a4385ab",
      "closedAt": "2016-10-25T04:05:56Z",
      "mergedAt": "2016-10-25T04:05:56Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f0aaf88c6a255c67d96c9444353464dbb3a4408c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NTMzNA==",
          "commit": {
            "abbreviatedOid": "27a6ee9"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-22T19:45:54Z",
          "updatedAt": "2016-10-22T19:46:28Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Why did you move this?\n",
              "createdAt": "2016-10-22T19:45:54Z",
              "updatedAt": "2016-10-22T19:46:28Z"
            },
            {
              "originalPosition": 6,
              "body": "This seems unnecesary.\n",
              "createdAt": "2016-10-22T19:46:19Z",
              "updatedAt": "2016-10-22T19:46:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NjEwOA==",
          "commit": {
            "abbreviatedOid": "27a6ee9"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-22T20:39:13Z",
          "updatedAt": "2016-10-22T20:39:13Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "https://tools.ietf.org/html/draft-ietf-tls-tls13-17#section-8.2\n\nWhen linkified, it currently goes Section 4.2.1, 4.2.3, 4.2.4, 4.2.5, 4.2.6, 4.2.2. Just putting them in order. (as I said, just a nitpick)\n",
              "createdAt": "2016-10-22T20:39:13Z",
              "updatedAt": "2016-10-22T20:39:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NjE0Nw==",
          "commit": {
            "abbreviatedOid": "27a6ee9"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-22T20:42:27Z",
          "updatedAt": "2016-10-22T20:42:27Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "They're bran new suites, so to someone first reading this document, nothing about that has really been stated as of yet. It occurred to me that could be confusing, hence the PR just to add a ref here. It's a big spec; cross-referencing can help, where applicable.\n",
              "createdAt": "2016-10-22T20:42:27Z",
              "updatedAt": "2016-10-22T20:42:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 732,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA1MTEzNTE=",
      "title": "Remove out-of-date note about helloretry extensions",
      "url": "https://github.com/tlswg/tls13-spec/pull/732",
      "state": "MERGED",
      "author": "ctz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think this aside is out-of-date: extensions cannot be empty, and there are now defined extensions to put here.\n",
      "createdAt": "2016-10-23T10:38:13Z",
      "updatedAt": "2016-10-23T13:22:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e9f34811cfb497d8f3ff2d0a6542888a2016f0c8",
      "headRepository": "ctz/tls13-spec",
      "headRefName": "patch-3",
      "headRefOid": "75dfb1d39417743cceca1130d21e975d51e40c3f",
      "closedAt": "2016-10-23T13:22:37Z",
      "mergedAt": "2016-10-23T13:22:37Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d62a64dd95c458dba1ec5265b34667ea246a8400"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 735,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA3MzU3OTk=",
      "title": "Remove unncessary key derivation stage making RPSK from RMS",
      "url": "https://github.com/tlswg/tls13-spec/pull/735",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@kazuho, @martinthomson  PTAL\n",
      "createdAt": "2016-10-25T04:04:57Z",
      "updatedAt": "2016-10-26T05:34:30Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8364f5717b312c8d9b6464fe5c67b6b1ac4254a0",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "simplify_resumption_psk",
      "headRefOid": "486718710772c528b0d79904fa16ca916b447927",
      "closedAt": "2016-10-26T05:34:30Z",
      "mergedAt": "2016-10-26T05:34:30Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "486718710772c528b0d79904fa16ca916b447927"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 736,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA3MzY4OTA=",
      "title": "Clean up Finished handshake table. No semantic change. Fixes #733",
      "url": "https://github.com/tlswg/tls13-spec/pull/736",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-10-25T04:18:28Z",
      "updatedAt": "2016-10-26T05:32:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f0aaf88c6a255c67d96c9444353464dbb3a4408c",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "clean_up_finished_table",
      "headRefOid": "7660ec160500a518edc3617abb8c0f8aeddc9bf7",
      "closedAt": "2016-10-26T05:32:21Z",
      "mergedAt": "2016-10-26T05:32:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "78043d6ad8eb8644d96d1b1f9338b65e07d5ae1c"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson please double-check\n",
          "createdAt": "2016-10-25T18:59:26Z",
          "updatedAt": "2016-10-25T18:59:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 737,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA4NDg4ODY=",
      "title": "[Editorial] Capitalize \"not\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/737",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\"MUST not\" -> \"MUST NOT\"\n",
      "createdAt": "2016-10-25T16:58:13Z",
      "updatedAt": "2016-10-25T17:58:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f0aaf88c6a255c67d96c9444353464dbb3a4408c",
      "headRepository": null,
      "headRefName": "capitalization",
      "headRefOid": "2fd696995e462974c821e71de909ae8952e0de17",
      "closedAt": "2016-10-25T17:57:29Z",
      "mergedAt": "2016-10-25T17:57:29Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e95c55933a77192415c6841895b4ce2d91f38f83"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 738,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA5MzQ0OTY=",
      "title": "clarifying that the server authenticate *itself*.",
      "url": "https://github.com/tlswg/tls13-spec/pull/738",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Adding \"itself\" makes the sentence much easier to understand.\nActually, two Japanese, who are implementing TLS 1.3 independently,\ntook a long time to understand this.\n",
      "createdAt": "2016-10-26T04:24:35Z",
      "updatedAt": "2016-10-27T06:04:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e95c55933a77192415c6841895b4ce2d91f38f83",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "itself",
      "headRefOid": "afe97620f9d40dddd69f33adecf96d7c55fc8ae1",
      "closedAt": "2016-10-26T05:10:45Z",
      "mergedAt": "2016-10-26T05:10:45Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "79e46e132e1c2ad8f529dcd3765faabed7480bf4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 739,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA5NDI1MzA=",
      "title": "fix arrows to be positioned/sized consistently",
      "url": "https://github.com/tlswg/tls13-spec/pull/739",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I noticed that some of the arrows were off, so I did a quick check on the others. This fixes:\n- arrows in the key schedule chart aren't all the same length\n- an arrow in resumption isn't lined up with the others\n- a few charts have arrows a couple characters off-center (this just aligns all these arrows to start at char 34)\n- one instance of a right column message not fully right-aligned (\"[Application Data]\" in HRR)\n",
      "createdAt": "2016-10-26T06:16:48Z",
      "updatedAt": "2016-10-26T07:30:12Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e15c01ba70db1ccdc5649fdee511d6411bb6930b",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "fixarrows",
      "headRefOid": "08285d569f3383060cbf697db10e850185528a26",
      "closedAt": "2016-10-26T06:21:20Z",
      "mergedAt": "2016-10-26T06:21:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c1eb65c4c0795fa72527864f066d4c910ade174d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 740,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA5NTIzNTE=",
      "title": "fix section reference",
      "url": "https://github.com/tlswg/tls13-spec/pull/740",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix a reference to a section that's directly citing a section number in plain text. (not linkified and will break if sections change) I assume this is a copy/paste error.\n",
      "createdAt": "2016-10-26T07:49:27Z",
      "updatedAt": "2016-10-26T21:42:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c1eb65c4c0795fa72527864f066d4c910ade174d",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "fixref",
      "headRefOid": "79847ddf22fba1efd47dbcab6109421e3c37bb1f",
      "closedAt": "2016-10-26T09:29:03Z",
      "mergedAt": "2016-10-26T09:29:03Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "08755c7aea507071695ea020cd6b2ab63ff329ce"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 741,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA5Nzc3MDM=",
      "title": "make \"insufficient_security\" replacement for \"handshake_failure\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/741",
      "state": "CLOSED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In all cases where handshake_failure is valid, insufficient_security\nis also logically acceptable. Make this explicit.\n\n(as per @davegarrett suggestion from https://github.com/tlswg/tls13-spec/pull/729#issuecomment-255448836)\n",
      "createdAt": "2016-10-26T10:34:38Z",
      "updatedAt": "2016-10-27T17:09:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "08755c7aea507071695ea020cd6b2ab63ff329ce",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "insufficient_security-alert",
      "headRefOid": "507c4928f48d7fe1c08d2fb084876819d8af20ce",
      "closedAt": "2016-10-26T17:28:30Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This isn't correct.\n\nSay that the client only offers P521 but the server only supports P384. That would be handshake_failure but not insufficient_security. Another example would be if the client\nonly offered pre_shared_key but not key_shares, and the server didn't accept PSK.\n",
          "createdAt": "2016-10-26T17:28:30Z",
          "updatedAt": "2016-10-26T17:28:30Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "the alert description says when insufficient_security should be used, but the standard doesn't say that in all cases the handshake_failure is applicable the insufficient_security MAY be used\n\nbut yes, it is highly dependent on what server has enabled and what client advertised\n\nwe can add examples saying when you should send insufficient_security and when you should send handshake_failure\n",
          "createdAt": "2016-10-26T19:35:36Z",
          "updatedAt": "2016-10-26T19:35:36Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think we should have inssuficient_security.  Just like we no longer say \"right user, wrong password\" kinds of messages.  Sadly, the world kinda stinks these days.\n",
          "createdAt": "2016-10-26T19:37:58Z",
          "updatedAt": "2016-10-26T19:37:58Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "we also didn't have a tls test suite that could suggest implementing it. I don't think we tried hard enough to abandon it just yet\n",
          "createdAt": "2016-10-26T19:39:35Z",
          "updatedAt": "2016-10-26T19:39:35Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry I was not clear.  My point is that this gives out too much information these days.\n",
          "createdAt": "2016-10-26T19:41:39Z",
          "updatedAt": "2016-10-26T19:41:39Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "how is saying \"I see you've advertised export grade ciphersuites and RC4 only, I won't use this garbage\" giving \"too much information\"?\n",
          "createdAt": "2016-10-26T19:43:17Z",
          "updatedAt": "2016-10-26T19:43:17Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"the alert description says when insufficient_security should be used, but the standard doesn't say that in all cases the handshake_failure is applicable the insufficient_security MAY be used\".\n\nIt doesn't say that because it's not true, as I indicated in my initial comment. If you feel strongly about this, you need to raise it on the list and get consensus.\n",
          "createdAt": "2016-10-26T20:00:20Z",
          "updatedAt": "2016-10-26T20:00:20Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "but it is true the other way round, with client supporting only P384 and server supporting only P521, or more likely, client advertising only aes-128 and server supporting aes-256 and chacha20 only, then it is applicable\n",
          "createdAt": "2016-10-26T20:06:18Z",
          "updatedAt": "2016-10-26T20:06:18Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, and that's the difference between \"sometimes\" and \"in all cases\"\n",
          "createdAt": "2016-10-26T20:08:19Z",
          "updatedAt": "2016-10-26T20:08:19Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "that's why I used \"or\" instead of replacing all instances...\n",
          "createdAt": "2016-10-26T20:09:28Z",
          "updatedAt": "2016-10-26T20:09:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You use \"in all instances\" in your comment 10 hours ago.\n\nIn any case, I believe that this is an issue of editor discretion.\n",
          "createdAt": "2016-10-26T20:30:00Z",
          "updatedAt": "2016-10-26T20:30:00Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "by that I meant all instances of \"handshake_failure\" occurrence in the text, not all instances when \"handshake_failure\" can be sent\n\nread it as \"I inspected all places where there are references to 'handshake_failure', given my analysis, in all situations where sending that alert is required there can exist situations in which 'insufficient_security' is also valid alert to send\".\n\nI intended the note to be for You/editor, not implementer. The implementer should refer only to RFC text, shouldn't it?\n",
          "createdAt": "2016-10-27T13:30:09Z",
          "updatedAt": "2016-10-27T13:30:09Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Those ciphers aren't defined in TLS 1.3 :)  But maybe it's not export grade, but maybe it's a particular curve or DHparam size.\n\nANY information other than \"no\" can, apparently, be turned into some kind of oracle.\n",
          "createdAt": "2016-10-27T15:49:42Z",
          "updatedAt": "2016-10-27T15:49:42Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Those ciphers aren't defined in TLS 1.3 :)\n\nIt was just an example, in future it may be AES-128 and P-256 instead of RC-4\n\nThe point is to differentiate the failure of \"I (the server) know the ciphers you've advertised but I don't implement them or don't enable them because they are too weak\" (insufficient_security) from \"None of the ciphers you've listed match the ones I have enabled, but I see also ones I don't know of, so we may be unable to negotiate because _I_ implement too old ciphers or a different set of ciphers\" (handshake_failure)\n\n> ANY information other than \"no\" can, apparently, be turned into some kind of oracle.\n\nyes, including the information how quickly you have rejected the connection...\n",
          "createdAt": "2016-10-27T17:09:31Z",
          "updatedAt": "2016-10-27T17:09:31Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 742,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA5NzgyNjk=",
      "title": "extend \"decode_error\" to records with invalid length",
      "url": "https://github.com/tlswg/tls13-spec/pull/742",
      "state": "CLOSED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "see also https://github.com/tlswg/tls13-spec/pull/728#issuecomment-256307450\n",
      "createdAt": "2016-10-26T10:38:28Z",
      "updatedAt": "2016-11-28T14:56:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7c1df575275c8ee2df2ff21806ad6aecf7248162",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "decode-error-for-malformed-records",
      "headRefOid": "deaef49e950931bbe4a59d7fbd3a8f9d104c3495",
      "closedAt": "2016-11-28T14:56:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is clear enough already",
          "createdAt": "2016-11-28T14:56:54Z",
          "updatedAt": "2016-11-28T14:56:54Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk1NTQxMw==",
          "commit": {
            "abbreviatedOid": "3db033a"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-26T21:46:22Z",
          "updatedAt": "2016-10-26T21:46:22Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "add a comma after \"incorrect\"\n",
              "createdAt": "2016-10-26T21:46:22Z",
              "updatedAt": "2016-10-27T13:31:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA1Nzk2NA==",
          "commit": {
            "abbreviatedOid": "3db033a"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-10-27T13:31:45Z",
          "updatedAt": "2016-10-27T13:31:45Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "done\n",
              "createdAt": "2016-10-27T13:31:45Z",
              "updatedAt": "2016-10-27T13:31:45Z"
            }
          ]
        }
      ]
    },
    {
      "number": 743,
      "id": "MDExOlB1bGxSZXF1ZXN0OTExMzgyMzE=",
      "title": "fixing a typo.",
      "url": "https://github.com/tlswg/tls13-spec/pull/743",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Found by Tatsuhiro Tsujikawa.\n",
      "createdAt": "2016-10-27T06:06:38Z",
      "updatedAt": "2016-10-27T06:10:30Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "08755c7aea507071695ea020cd6b2ab63ff329ce",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "typo",
      "headRefOid": "91a5e3d622fe58d960dcc499712858da9423b8b5",
      "closedAt": "2016-10-27T06:10:30Z",
      "mergedAt": "2016-10-27T06:10:30Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7c1df575275c8ee2df2ff21806ad6aecf7248162"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 744,
      "id": "MDExOlB1bGxSZXF1ZXN0OTEzMjY3MzY=",
      "title": "Raising minimim length of PskIdentity.identity",
      "url": "https://github.com/tlswg/tls13-spec/pull/744",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-10-28T06:04:34Z",
      "updatedAt": "2016-10-28T06:09:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7c1df575275c8ee2df2ff21806ad6aecf7248162",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "psk_identity_min",
      "headRefOid": "1d761958849d9b996c275525867cd47b9f7daae0",
      "closedAt": "2016-10-28T06:09:19Z",
      "mergedAt": "2016-10-28T06:09:19Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "986b421c9d987ff5f851ebc61034ec030839511d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 745,
      "id": "MDExOlB1bGxSZXF1ZXN0OTE1MzM3Mjk=",
      "title": "[README.md] Update WG link",
      "url": "https://github.com/tlswg/tls13-spec/pull/745",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I overlooked this link in #698. Let's change the link in the top section to https://datatracker.ietf.org/wg/tls/documents/ as well.\n",
      "createdAt": "2016-10-30T19:52:05Z",
      "updatedAt": "2016-10-30T19:56:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "986b421c9d987ff5f851ebc61034ec030839511d",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "358e1cc9cca96be060c106946d236cab39f8a1a5",
      "closedAt": "2016-10-30T19:55:24Z",
      "mergedAt": "2016-10-30T19:55:23Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a683e6845acd852fb761cd4b4d245f85d6a0a473"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 747,
      "id": "MDExOlB1bGxSZXF1ZXN0OTE2NjY2Mjc=",
      "title": "minor tweak for issue #746",
      "url": "https://github.com/tlswg/tls13-spec/pull/747",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current text works, but tweaking it to be more general for issue #746 is simple.",
      "createdAt": "2016-10-31T18:45:09Z",
      "updatedAt": "2016-11-03T00:50:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a683e6845acd852fb761cd4b4d245f85d6a0a473",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "tweak",
      "headRefOid": "370fa0915f802be43e7a66d79b3e4ef2bcbdfc78",
      "closedAt": "2016-11-02T20:42:47Z",
      "mergedAt": "2016-11-02T20:42:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "370fa0915f802be43e7a66d79b3e4ef2bcbdfc78"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 748,
      "id": "MDExOlB1bGxSZXF1ZXN0OTE3MDk1OTE=",
      "title": "Clarify supported_versions",
      "url": "https://github.com/tlswg/tls13-spec/pull/748",
      "state": "CLOSED",
      "author": "mattcaswell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Explain what to do if legacy_version != 0x0303 and supported_versions is present.\r\n\r\nDon't negotiate <TLS1.2 via supported_versions",
      "createdAt": "2016-10-31T23:25:04Z",
      "updatedAt": "2016-12-12T19:10:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a683e6845acd852fb761cd4b4d245f85d6a0a473",
      "headRepository": "mattcaswell/tls13-spec",
      "headRefName": "supp-versions-alt",
      "headRefOid": "21e7090964a8af6bc0a768871281b008c4c7fee0",
      "closedAt": "2016-12-12T19:10:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgwMjAzMw==",
          "commit": {
            "abbreviatedOid": "e0b913f"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-02T12:25:11Z",
          "updatedAt": "2016-11-02T12:25:11Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "what purpose does serve freezing the ClientHello.legacy_version field?\n",
              "createdAt": "2016-11-02T12:25:11Z",
              "updatedAt": "2016-11-02T13:04:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgwMjI2Mw==",
          "commit": {
            "abbreviatedOid": "e0b913f"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-02T12:26:40Z",
          "updatedAt": "2016-11-02T12:26:40Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I think this should be 0x0303 here\n",
              "createdAt": "2016-11-02T12:26:40Z",
              "updatedAt": "2016-11-02T13:04:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgwNzUyNw==",
          "commit": {
            "abbreviatedOid": "e0b913f"
          },
          "author": "mattcaswell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-02T13:02:18Z",
          "updatedAt": "2016-11-02T13:02:18Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "TLS1.3 capable clients are already required to send a ClentHello.legacy_version value of 0x0303, so this just enforces that servers check it. The thinking here is to avoid corner cases where things in the current spec are unclear, e.g. where there are discrepancies between the legacy_version and the highest version in supported_version (consider legacy_version == TLS1.1 but supported_versions == TLS1.2...what should happen, what client version should be used in RSA key exchange etc?) I think it is better to prevent use of supported_versions by older protocol versions altogether (<TLS1.2).\n",
              "createdAt": "2016-11-02T13:02:18Z",
              "updatedAt": "2016-11-02T13:04:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgwNzc5Mw==",
          "commit": {
            "abbreviatedOid": "e0b913f"
          },
          "author": "mattcaswell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-02T13:04:05Z",
          "updatedAt": "2016-11-02T13:04:05Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Oh, good catch. Fixed.\n",
              "createdAt": "2016-11-02T13:04:05Z",
              "updatedAt": "2016-11-02T13:04:05Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgzNTg2Mw==",
          "commit": {
            "abbreviatedOid": "e0b913f"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-02T15:14:30Z",
          "updatedAt": "2016-11-02T15:14:30Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "yes, for legacy_version <TLS1.2 supported_version MUST be ignored, but I don't see a reason to prohibit use of >0x0303 in legacy_version. We won't ever be able to use them in the future this way.\n",
              "createdAt": "2016-11-02T15:14:30Z",
              "updatedAt": "2016-11-02T15:14:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgzNjYzMQ==",
          "commit": {
            "abbreviatedOid": "e0b913f"
          },
          "author": "mattcaswell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-02T15:17:47Z",
          "updatedAt": "2016-11-02T15:17:47Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I'm not sure I understand what you are trying to say?\n",
              "createdAt": "2016-11-02T15:17:47Z",
              "updatedAt": "2016-11-02T15:17:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzgwNDI1Nw==",
          "commit": {
            "abbreviatedOid": "e0b913f"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-09T12:30:11Z",
          "updatedAt": "2016-11-09T12:30:11Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I'm not sure what I wrote myself either :sweat_smile: \n\nSo I agree that if legacy_version is lower than TLS1.2 (0x0303), supported_versions should not be inspected. But looking for and inspecting supported_version when legacy_version is at least equal to or higher than 0x0303 is no different to what servers are supposed to do currently\n",
              "createdAt": "2016-11-09T12:30:11Z",
              "updatedAt": "2016-11-09T12:30:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzgwNjIzNQ==",
          "commit": {
            "abbreviatedOid": "21e7090"
          },
          "author": "mattcaswell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-09T12:46:27Z",
          "updatedAt": "2016-11-09T12:46:27Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I'd be happy with it simply saying that if legacy_version < 0x0303 then supported_versions should not be inspected, and if it is higher than or equal to 0x0303 then it should, i.e. change this first two sentences to say:\n\n\"Servers which are compliant with this specification MUST ignore any supported_versions extension if ClientHello.legacy_version is less than 0x0303. If ClientHello.legacy_version is 0x0303 or greater and a supported_versions extension is present, then servers MUST only select a version of TLS present in that extension.\"\n",
              "createdAt": "2016-11-09T12:46:27Z",
              "updatedAt": "2016-11-09T12:46:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzgwNzU4Ng==",
          "commit": {
            "abbreviatedOid": "e0b913f"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-09T12:56:59Z",
          "updatedAt": "2016-11-09T12:56:59Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": ":+1: \n",
              "createdAt": "2016-11-09T12:56:59Z",
              "updatedAt": "2016-11-09T12:56:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 750,
      "id": "MDExOlB1bGxSZXF1ZXN0OTE5NTQ1MDc=",
      "title": "Add Missing certificate_required on IANA change",
      "url": "https://github.com/tlswg/tls13-spec/pull/750",
      "state": "MERGED",
      "author": "alagoutte",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\r\nand fix also not needed comma",
      "createdAt": "2016-11-02T11:44:39Z",
      "updatedAt": "2016-11-28T14:35:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9ff38ebb7c0b8d80418511a1e53d8df04788c9b9",
      "headRepository": "alagoutte/tls13-spec",
      "headRefName": "master",
      "headRefOid": "456f73877010f3f17ae69ce60fb76a0ed076ba23",
      "closedAt": "2016-11-28T14:35:19Z",
      "mergedAt": "2016-11-28T14:35:19Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4258bb9eb388c6b52c12bac72baf4dd52d31c489"
      },
      "comments": [
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": ":+1: was about to fix this too.\n\nChange was introduced by @davidben in f6f752f9af24f99241ba98510cfb1dd758bf4bf9 (included with draft 16).\n",
          "createdAt": "2016-11-02T14:50:39Z",
          "updatedAt": "2016-11-02T14:50:39Z"
        },
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi,\n\nI have update the change !\n",
          "createdAt": "2016-11-03T13:43:31Z",
          "updatedAt": "2016-11-03T13:43:31Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg3MzQ3OA==",
          "commit": {
            "abbreviatedOid": "134908b"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-02T17:53:53Z",
          "updatedAt": "2016-11-02T17:57:03Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "add a comma after \"missing_extension\"\n",
              "createdAt": "2016-11-02T17:53:53Z",
              "updatedAt": "2016-11-03T13:36:28Z"
            },
            {
              "originalPosition": 11,
              "body": "Please leave the Oxford comma alone. This is correct as-is.\n",
              "createdAt": "2016-11-02T17:56:59Z",
              "updatedAt": "2016-11-03T13:36:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 751,
      "id": "MDExOlB1bGxSZXF1ZXN0OTIyOTQ5MzA=",
      "title": "fixing a typo.",
      "url": "https://github.com/tlswg/tls13-spec/pull/751",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think this is a typo. But I'm not sure since I'm not a native English speaker. Please check it out.",
      "createdAt": "2016-11-04T07:32:46Z",
      "updatedAt": "2016-11-29T01:41:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9ff38ebb7c0b8d80418511a1e53d8df04788c9b9",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "typo",
      "headRefOid": "f0ae08c58fa51d11c8cf9ace40855c260427a785",
      "closedAt": "2016-11-04T13:17:14Z",
      "mergedAt": "2016-11-04T13:17:14Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 752,
      "id": "MDExOlB1bGxSZXF1ZXN0OTI0NzU3OTA=",
      "title": "Fix typo in Section 5.2",
      "url": "https://github.com/tlswg/tls13-spec/pull/752",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "1. TLSCiphertext.fragment is undefined. I guess it should be \"TLSCiphertext.encrypted_record\"?\r\n2. This sentence \"due to the inclusion of TLSPlaintext.type and however much padding is supplied by the sender\" is unclear to me. Does it mean \"due to the inclusion of TLSPlaintext.type and the padding\"?",
      "createdAt": "2016-11-06T03:27:48Z",
      "updatedAt": "2016-11-28T19:59:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": null,
      "headRefName": "typo",
      "headRefOid": "718191e1670fbc709f88e1e5d4e37622fc35cf1f",
      "closedAt": "2016-11-28T14:33:21Z",
      "mergedAt": "2016-11-28T14:33:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "769be07e64b2b3216a6b6c4a7b1e72f802ed704c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMyNjQ3Mg==",
          "commit": {
            "abbreviatedOid": "f5b240a"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-06T04:05:34Z",
          "updatedAt": "2016-11-06T04:05:34Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "If you want to simplify the grammar here, then I'd suggest \"any\" instead of \"the\" in order to keep the same meaning. (I can see how the current text is easily confusing; simplifying it would be an improvement)\n",
              "createdAt": "2016-11-06T04:05:34Z",
              "updatedAt": "2016-11-06T04:13:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMyNjU0MA==",
          "commit": {
            "abbreviatedOid": "f5b240a"
          },
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-06T04:14:12Z",
          "updatedAt": "2016-11-06T04:14:12Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "@davegarrett Done. Thanks!\n",
              "createdAt": "2016-11-06T04:14:12Z",
              "updatedAt": "2016-11-06T04:14:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 753,
      "id": "MDExOlB1bGxSZXF1ZXN0OTI1MTI5NzY=",
      "title": "Clarifying the concatenation rule",
      "url": "https://github.com/tlswg/tls13-spec/pull/753",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When I was implementing the key schedule, it was unclear to me what `Hash(Messages)` stands for. This additional note would help other implementors. \r\nKazuho Oku pointed out the similarity to Handshake Context. So, I updated that part, too.",
      "createdAt": "2016-11-07T01:43:32Z",
      "updatedAt": "2016-11-29T01:41:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "messages",
      "headRefOid": "e96f9d2fc4516c81a2c0196023360c5cffcdb151",
      "closedAt": "2016-11-28T14:34:47Z",
      "mergedAt": "2016-11-28T14:34:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1ae50b32e49c1e66d098473400e11c05c720b50a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 755,
      "id": "MDExOlB1bGxSZXF1ZXN0OTI2NTUxNzk=",
      "title": "Add PSK binder values to list of ClientHello updates after HelloRetry\u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/755",
      "state": "MERGED",
      "author": "knekritz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026Request.\r\n\r\nTo match 4.2.6.1.",
      "createdAt": "2016-11-07T20:12:50Z",
      "updatedAt": "2016-11-28T14:37:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": "knekritz/tls13-spec",
      "headRefName": "retry_binder",
      "headRefOid": "71f48454b8a157625ec988f01ea9d474cb7fd918",
      "closedAt": "2016-11-28T14:37:15Z",
      "mergedAt": "2016-11-28T14:37:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5f99b79addedd1125c5f5ab1f3c2ae36b61ef73d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 756,
      "id": "MDExOlB1bGxSZXF1ZXN0OTMwNDk0Nzc=",
      "title": "Editorial",
      "url": "https://github.com/tlswg/tls13-spec/pull/756",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It's less overwhelming to do this in chunks as I make a review pass over the -18 for WGLC.\r\nI may add more commits as I progress, but feel free to merge before I am done.",
      "createdAt": "2016-11-09T22:16:33Z",
      "updatedAt": "2016-11-28T17:58:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "master",
      "headRefOid": "f6858d2a59ff406acfb661a62210626a54371cbe",
      "closedAt": "2016-11-28T17:57:30Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You'll probably want to make this build\n",
          "createdAt": "2016-11-09T23:53:18Z",
          "updatedAt": "2016-11-09T23:53:18Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It probably does build.  kramdown-rfc2629 has been getting consistent certificate errors from xml2rfc.tools.ietf.org.  I've told Henrik that he needs to add an intermediate.\n",
          "createdAt": "2016-11-10T06:03:48Z",
          "updatedAt": "2016-11-10T06:03:48Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Build should now succeed if another commit is pushed (maybe one to remove the new notation Dave identified).\n",
          "createdAt": "2016-11-10T09:56:02Z",
          "updatedAt": "2016-11-10T09:56:02Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Thursday, November 10, 2016 10:34:02 am kaduk wrote:\n\n> It's not new syntax; Section 3.2 notes that optional components are denoted by enclosing them in double brackets.\n\nI stand corrected. It appears to only be used in the Presentation Language section. It's valid, but underused. If we're ok with not using it, I would still prefer to avoid it. Adding some note in a comment would be my preference vs. the current state.\n",
          "createdAt": "2016-11-11T01:47:03Z",
          "updatedAt": "2016-11-11T01:47:03Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> It appears to only be used in the Presentation Language section\n\nRight.  It occurred to me after I wrote the previous note, that perhaps the intent was to only\nuse the double-brackets-for-optional syntax when describing the presentation language itself (i.e., for optional struct tags), and not necessarily for structures defined using the presentation language.  Maybe @ekr has a better sense?\n",
          "createdAt": "2016-11-11T15:45:14Z",
          "updatedAt": "2016-11-11T15:45:14Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I merged most of this, and then did some more editorial work. Note in particular I didn't take the \"compliant\" piece because I don't think that makes sense in a spec context.\r\n\r\nYes, I read [[]] as being for the presentation language.",
          "createdAt": "2016-11-28T17:58:27Z",
          "updatedAt": "2016-11-28T17:58:27Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk1MzM1OQ==",
          "commit": {
            "abbreviatedOid": "2418f7d"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-10T06:53:24Z",
          "updatedAt": "2016-11-10T06:53:24Z",
          "comments": [
            {
              "originalPosition": 124,
              "body": "I don't think inventing new syntax is a good idea here. Adding a comment on the line stating \"OPTIONAL in old versions\" would be better.\n",
              "createdAt": "2016-11-10T06:53:24Z",
              "updatedAt": "2016-11-10T20:18:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk3NTQ2Nw==",
          "commit": {
            "abbreviatedOid": "2418f7d"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-10T09:57:39Z",
          "updatedAt": "2016-11-10T09:57:43Z",
          "comments": [
            {
              "originalPosition": 124,
              "body": "Or we could take the 8 (is it only 8?) on the basis that we are describing what a TLS 1.3 client has to send, which always includes key_share or pre_shared_key and signature_algorithms.\n",
              "createdAt": "2016-11-10T09:57:39Z",
              "updatedAt": "2016-11-10T20:18:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODAzMTc3MQ==",
          "commit": {
            "abbreviatedOid": "2418f7d"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-10T15:34:01Z",
          "updatedAt": "2016-11-10T15:34:01Z",
          "comments": [
            {
              "originalPosition": 124,
              "body": "It's not new syntax; Section 3.2 notes that optional components are denoted by enclosing them in double brackets.\n",
              "createdAt": "2016-11-10T15:34:01Z",
              "updatedAt": "2016-11-10T20:18:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 757,
      "id": "MDExOlB1bGxSZXF1ZXN0OTMxODU4NjI=",
      "title": "Clarify encoding of sequence number",
      "url": "https://github.com/tlswg/tls13-spec/pull/757",
      "state": "CLOSED",
      "author": "siyengar",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Clarify encoding of sequence number in nonce. I believe the intention of it is to be little endian. \r\nThis could help offer a hint to implementations to \"do the right thing\"",
      "createdAt": "2016-11-10T16:39:30Z",
      "updatedAt": "2016-11-28T14:36:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": "siyengar/tls13-spec",
      "headRefName": "patch-3",
      "headRefOid": "8f00c157ad4211c9eac0d50b4fc9175d7b05fb24",
      "closedAt": "2016-11-28T14:36:32Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Unless I'm completely confused, it's big endian. RFC 7905 even explicitly says big endian.\n",
          "createdAt": "2016-11-10T16:53:42Z",
          "updatedAt": "2016-11-10T16:53:42Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's big-endian. That's certainly what we do\n",
          "createdAt": "2016-11-10T17:38:37Z",
          "updatedAt": "2016-11-10T17:38:37Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "CONTRIBUTOR",
          "body": "ah i misunderstood then, ill change the text to be big-endian :).  It does serve its purpose.\n",
          "createdAt": "2016-11-10T17:56:32Z",
          "updatedAt": "2016-11-10T17:59:32Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for pointing out rfc7905 @davidben. Would be useful to have that big endian text here too.\n",
          "createdAt": "2016-11-10T18:16:03Z",
          "updatedAt": "2016-11-10T18:16:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 759,
      "id": "MDExOlB1bGxSZXF1ZXN0OTM0NTg3ODk=",
      "title": "Sequence numbers do not wrap",
      "url": "https://github.com/tlswg/tls13-spec/pull/759",
      "state": "CLOSED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If the sequence number is incremented by 1 each time an endpoint sends a record, how could it wrap, since it is so large (64-bit)?",
      "createdAt": "2016-11-13T01:47:25Z",
      "updatedAt": "2016-11-29T05:49:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": null,
      "headRefName": "seq_num",
      "headRefOid": "aabaf9a6890aeaade454ae094ea44d327be27416",
      "closedAt": "2016-11-28T19:28:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sending enough records to need to wrap is a real possibility, and has come up in discussion at some point, I think. Long running servers could eventually hit the limit in some specific use-case, theoretically. In any case, how to handle needs to be specified. The current text is fine, as-is.\n",
          "createdAt": "2016-11-13T01:55:19Z",
          "updatedAt": "2016-11-13T01:57:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sending at 1Tbps with 1 octet records would take 93 years to reach the limit.  This assumes that we remove the three redundant bytes in the record header.  Maybe we shouldn't worry about this.\n",
          "createdAt": "2016-11-13T02:16:10Z",
          "updatedAt": "2016-11-13T02:16:10Z"
        },
        {
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let's say there is a 4 GHz (=2^32 clock cycles/s) processor continuing executing this code only: \n`while (true) sequence_number++;`\nIt still takes 136.2 years (=2^32 s) to overflow a uint64.\n",
          "createdAt": "2016-11-13T04:57:16Z",
          "updatedAt": "2016-11-13T04:57:44Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 762,
      "id": "MDExOlB1bGxSZXF1ZXN0OTM1MTA2MzA=",
      "title": "Preliminary PR to remove the fixed three-byte header pending",
      "url": "https://github.com/tlswg/tls13-spec/pull/762",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "measurements.\r\n\r\nThis is a placeholder for discussion.",
      "createdAt": "2016-11-14T05:38:27Z",
      "updatedAt": "2017-03-31T14:07:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "strip_record_header",
      "headRefOid": "a0e07c1161a8c69bb1064ed753d9f615ed02fa52",
      "closedAt": "2017-03-31T14:07:39Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Why not using a `ContentType encrypted_type = 24` to replace `opaque_type`.\r\n\r\nThis would make it easier to differentiate it from a `TLSPlaintext` message as well.\r\n\r\nPS: Also note that the `legacy_record_version` variable appears in many parts of the spec, mostly in appendices on backward compatibility. (So this PR would not be enough.)",
          "createdAt": "2017-01-22T22:41:44Z",
          "updatedAt": "2017-01-22T22:46:23Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, this PR is intended to remove that byte entirely.\r\n\r\nYou still need to have legacy_record_version in unencrypted records.",
          "createdAt": "2017-01-22T22:47:35Z",
          "updatedAt": "2017-01-22T22:47:35Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Well, this PR is intended to remove that byte entirely.\r\n\r\nI just find it cleaner (and it would add some sense to the specification as well) compared to a \"hack\" bit inside of an already used `uint16`. But I have no real argument for it :)\r\n\r\n> You still need to have legacy_record_version in unencrypted records.\r\n\r\nRight, although there are still some mentions to `TLSCiphertext.legacy_record_version`.\r\n\r\n",
          "createdAt": "2017-01-22T22:52:43Z",
          "updatedAt": "2017-01-22T22:52:43Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed per WG consensus in Chicago",
          "createdAt": "2017-03-31T14:07:39Z",
          "updatedAt": "2017-03-31T14:07:39Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODM0MDA5Mw==",
          "commit": {
            "abbreviatedOid": "a0e07c1"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2016-11-14T05:44:08Z",
          "updatedAt": "2016-11-14T05:44:08Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODM0MDE0NA==",
          "commit": {
            "abbreviatedOid": "a0e07c1"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-14T05:45:13Z",
          "updatedAt": "2016-11-14T05:45:13Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Might want to point out that plaintext packets are always either alerts or handshake content types, which don't set the high bit.\n",
              "createdAt": "2016-11-14T05:45:13Z",
              "updatedAt": "2016-11-14T05:45:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAzMjYyMDg=",
          "commit": {
            "abbreviatedOid": "a0e07c1"
          },
          "author": "tmshort",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-28T14:39:07Z",
          "updatedAt": "2016-11-28T14:43:09Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "A 32-bit header would be better for crypto off-loading, but 16-bits is better than 5 bytes.",
              "createdAt": "2016-11-28T14:39:07Z",
              "updatedAt": "2016-11-28T14:43:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 763,
      "id": "MDExOlB1bGxSZXF1ZXN0OTM1OTU0Njc=",
      "title": "EC point validation (not yet compiled)",
      "url": "https://github.com/tlswg/tls13-spec/pull/763",
      "state": "CLOSED",
      "author": "matthewdgreen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This pull request includes additional text and references specifying public value validation when using EC Diffie-Hellman. This PR has not been compiled (because my environment is set up wrong and I'm lazy) so I'm throwing it over the fence as is.",
      "createdAt": "2016-11-14T16:10:37Z",
      "updatedAt": "2016-12-12T19:45:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": "matthewdgreen/tls13-spec",
      "headRefName": "master",
      "headRefOid": "f3867f5ab22c03c6ed5757f9f402bbdd46d36d31",
      "closedAt": "2016-12-12T19:45:19Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rather than add new text saying that the points must be validated, the specification should just say that the key agreement must be implemented according to the specification for that key agreement protocol. Then give the NIST document and the X25519/X448 document as the specifications for the specific groups.\n\nIn particular, the NIST document has a lot more to say about correctly implementing ECDH than just the public key validation. IMO it doesn't make sense to call out only one requirement of the NIST document and ignore the other requirements in the spec.\n",
          "createdAt": "2016-11-14T20:59:27Z",
          "updatedAt": "2016-11-14T20:59:27Z"
        },
        {
          "author": "matthewdgreen",
          "authorAssociation": "NONE",
          "body": "The text already says that Finite Field DH points have to be validated. So that bridge has already been crossed. There's no good reason to omit it for ECDH. The question is whether it's enough to chuck the reader at a complex NIST document, or if we can summarize the important points. \n\n(My feeling on this issue: go look at every small TLS library that is not OpenSSL or by Thomas Pornin and see if they screwed it up, despite the availability of FIPS documents. Hint: they did.)\n",
          "createdAt": "2016-11-14T21:55:43Z",
          "updatedAt": "2016-11-14T21:55:43Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@matthewdgreen: assuming WG consensus, I am happy to accept this PR with a placeholder for X25519/X448 validation\n",
          "createdAt": "2016-11-14T22:06:46Z",
          "updatedAt": "2016-11-14T22:06:46Z"
        },
        {
          "author": "FiloSottile",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As an implementer, please call this out explicitly, not just by referencing an ANSI document.\n",
          "createdAt": "2016-11-14T22:15:01Z",
          "updatedAt": "2016-11-14T22:15:01Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since RFC7748 is lacking a bit in this area and linking to NIST-800-38D hasn't worked well in the past, summarizing validation inline here sounds better for implementers.\n",
          "createdAt": "2016-11-14T22:30:33Z",
          "updatedAt": "2016-11-14T22:30:33Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODQ0NDgzMQ==",
          "commit": {
            "abbreviatedOid": "d75b7b7"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-14T17:30:25Z",
          "updatedAt": "2016-11-14T17:30:25Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "This reads as requiring X25519 and X448 to validate Y too, albeit with a different procedure than for the NIST curves, but that procedure is not linked. While X25519/X448 are supposed to be twist-secure, does this text require point validation for them? If so, the technique should be referenced here.\n",
              "createdAt": "2016-11-14T17:30:25Z",
              "updatedAt": "2016-11-15T14:33:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODQ3NjA2MQ==",
          "commit": {
            "abbreviatedOid": "d75b7b7"
          },
          "author": "matthewdgreen",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-14T20:13:01Z",
          "updatedAt": "2016-11-14T20:13:01Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "My view is that there is a validation procedure for X25519/X448, and it involves a range check and a few comparison checks for a limited number of generators of small subgroups. I can add this if you think it would be helpful, though I expect people will immediately start fighting about it.\n",
              "createdAt": "2016-11-14T20:13:01Z",
              "updatedAt": "2016-11-15T14:33:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODQ4NDE1MA==",
          "commit": {
            "abbreviatedOid": "d75b7b7"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-14T20:58:27Z",
          "updatedAt": "2016-11-14T20:58:27Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "If this is going to be a specification requirement it does need to be clear. That means either:\n1. Specify a procedure\n2. Point to a procedure\n3. Rewrite the text so it doesn't require this for X25519/X448 and say why.\n",
              "createdAt": "2016-11-14T20:58:27Z",
              "updatedAt": "2016-11-15T14:33:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODQ5NDU3Mw==",
          "commit": {
            "abbreviatedOid": "d75b7b7"
          },
          "author": "matthewdgreen",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-14T21:57:25Z",
          "updatedAt": "2016-11-14T21:57:26Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "I am fine with specifying the details for X25519 and X448. But I really need to research it before we include anything. In particular, there are some bad points in Curve25519 that may have implications for things like Triple-Handshake style attacks. I don't know if these cases are already handled by the X25519 specification, so I'll try to figure it out.\n",
              "createdAt": "2016-11-14T21:57:25Z",
              "updatedAt": "2016-11-15T14:33:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODQ5Njc3MQ==",
          "commit": {
            "abbreviatedOid": "d75b7b7"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-14T22:09:50Z",
          "updatedAt": "2016-11-14T22:09:51Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Some relevant but not completely fleshed-out bits that might be good to reference:\nhttps://tools.ietf.org/html/rfc7748#section-7\n\n> Designers should also be aware that implementations of these curves\n>    might not use the Montgomery ladder as specified in this document,\n>    but could use generic, elliptic-curve libraries instead.  These\n>    implementations could reject points on the twist and could reject\n>    non-minimal field elements.  While not recommended, such\n>    implementations will interoperate with the Montgomery ladder\n>    specified here but may be trivially distinguishable from it.  For\n>    example, sending a non-canonical value or a point on the twist may\n>    cause such implementations to produce an observable error while an\n>    implementation that follows the design in this text would\n>    successfully produce a shared key.\n",
              "createdAt": "2016-11-14T22:09:50Z",
              "updatedAt": "2016-11-15T14:33:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODQ5NjkzNA==",
          "commit": {
            "abbreviatedOid": "d75b7b7"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-14T22:10:50Z",
          "updatedAt": "2016-11-14T22:10:50Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "@matthewdgreen the X25519/X448 RFC linked above does not mention Triple Handshake attacks.\n",
              "createdAt": "2016-11-14T22:10:50Z",
              "updatedAt": "2016-11-15T14:33:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODYwMzI0OA==",
          "commit": {
            "abbreviatedOid": "d75b7b7"
          },
          "author": "matthewdgreen",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-15T13:40:04Z",
          "updatedAt": "2016-11-15T13:40:04Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "I checked the X25519 specification, and it does include an _optional_ check in Section 6.1 that detects when the DH share is in a small subgroup. My proposal is to cite the X25519/X448, and specify that the small subgroup check should be mandatory. \n\nThe argument is that even if TLS does not specifically require this behavior, many different applications _around_ TLS (e.g., channel bindings, RFC 5929) may assume contributory behavior. This is an inexpensive check that may kill a whole class of attacks.\n",
              "createdAt": "2016-11-15T13:40:04Z",
              "updatedAt": "2016-11-15T14:33:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODY4MDE2NQ==",
          "commit": {
            "abbreviatedOid": "f3867f5"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM\n",
          "createdAt": "2016-11-15T19:41:03Z",
          "updatedAt": "2016-11-15T19:41:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 764,
      "id": "MDExOlB1bGxSZXF1ZXN0OTM5NDQ2ODU=",
      "title": "TLSCiphertext has no member called \"fragment\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/764",
      "state": "MERGED",
      "author": "mattcaswell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-11-16T11:04:49Z",
      "updatedAt": "2016-11-28T14:29:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": "mattcaswell/tls13-spec",
      "headRefName": "ciphertext-fragment",
      "headRefOid": "df6f150deed07456ca7d082007d1ad86dbd6ec98",
      "closedAt": "2016-11-28T14:29:17Z",
      "mergedAt": "2016-11-28T14:29:17Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3257f899ce6f0e2545b3081c77e658c43d9c6832"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes.  There is a fair amount of other cleanup needed in this area; I have lots of red pen markings on a printout but haven't translated them into a patch yet.\n",
          "createdAt": "2016-11-16T14:54:44Z",
          "updatedAt": "2016-11-16T14:54:44Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes.  There is a fair amount of other cleanup needed in this area; I have lots of red pen markings on a printout but haven't translated them into a patch yet.\n",
          "createdAt": "2016-11-16T15:03:58Z",
          "updatedAt": "2016-11-16T15:03:58Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Bah, github was angry-unicorning on me and did not indicate that the comment went through.\nI guess github doesn't like me this week...\n",
          "createdAt": "2016-11-16T15:07:00Z",
          "updatedAt": "2016-11-16T15:07:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 765,
      "id": "MDExOlB1bGxSZXF1ZXN0OTQwODI1OTc=",
      "title": "(for Quynh) Limits on Key Usage",
      "url": "https://github.com/tlswg/tls13-spec/pull/765",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a PR for Quynh to address this thread on the TLS WG list:\r\nhttps://mailarchive.ietf.org/arch/msg/tls/OB47E9Qltiry2e5ec0sjskkn-1I",
      "createdAt": "2016-11-17T00:57:19Z",
      "updatedAt": "2017-03-10T02:31:46Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "gcm_limit",
      "headRefOid": "649fb92ca244fb33aeb557238099448b680a88c3",
      "closedAt": "2017-03-10T02:31:46Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc @wbl for further checking\n",
          "createdAt": "2016-11-17T01:16:00Z",
          "updatedAt": "2016-11-17T01:16:00Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's also worth noting that if people are only rekeying after LARGENUM records, then the rekeying code may ossify.  Sure, we can mention it in the \"Implementation Pitfalls\" section, but if we the big implementations are rekeying after every (say) 4 GB, interop testing is more likely to exercise the rekeying codepath.\n",
          "createdAt": "2016-11-17T01:36:01Z",
          "updatedAt": "2016-11-17T01:36:01Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Unfortunately, according to the paper on this, rekeying is optimal at 2^(128/3) blocks.  Less than that has other problems (that I don't understand).\n",
          "createdAt": "2016-11-17T07:32:44Z",
          "updatedAt": "2016-11-17T07:32:44Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson What rekeying problems? I'd like to see that paper.\n",
          "createdAt": "2016-11-17T19:29:53Z",
          "updatedAt": "2016-11-17T19:29:53Z"
        },
        {
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> So is the data limit that the implementation is maintaining either bytes or records? I think we need more clarity that they should count bytes and rekey before then.\n\nI recommend that the limit be specified precisely, which seems to mean specifying it in blocks, not bytes or records. The attempts to put this into byte or record terms have only created a lot of unnecessary confusion.\n",
          "createdAt": "2016-11-17T20:34:00Z",
          "updatedAt": "2016-11-17T20:34:00Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 to Brian's recommendation.\n",
          "createdAt": "2016-11-17T20:40:27Z",
          "updatedAt": "2016-11-17T20:40:27Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "body": "Rich and Brian, \n\nAgree. But, somebody wants bytes, somebody else wants records. When saying blocks, we must assume that the record size is multiple of blocks and there is at least one person not happy about that.  The revised text should provide the answer. \n",
          "createdAt": "2016-11-17T21:12:32Z",
          "updatedAt": "2016-11-17T21:12:32Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've got no objection to counting blocks: It might be easier to implement that way.\n",
          "createdAt": "2016-11-17T21:15:04Z",
          "updatedAt": "2016-11-17T21:15:04Z"
        },
        {
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Agree. But, somebody wants bytes, somebody else wants records. When saying blocks, we must assume that the record size is multiple of blocks and there is at least one person not happy about that. The revised text should provide the answer.\n\nEvery record is potentially a different size, so specifying the limit in terms of records simply doesn't make sense. I think it should be relatively easy to get people to agree on that.\n\nStating something like \"The number of blocks in an AES-GCM TLSCiphertext is (len(TLSCiphertext.encrypted_record) + 15) / 16 where \"/\" denotes integer division.\" is sufficient to allow people to convert from bytes to blocks to do the counting.\n",
          "createdAt": "2016-11-17T21:22:25Z",
          "updatedAt": "2016-11-17T21:23:26Z"
        },
        {
          "author": "brainhub",
          "authorAssociation": "NONE",
          "body": "I have a few concerns with the original text. \n- \"2^48 128-bit blocks\" is not 2^64 bytes. It is 2^48 \\* 16 = 2^52 bytes (needed for 2^-32 probability of collision).\n- The original text makes claims about beyond birthday bound security (BBB), e.g.:\n\n> \"This fact does not seem to create a practical security weakness of using AES GCM.\" \n\nAES GCM is not a BBB block cipher. I think discussion of BBB security of AES-GCM is beyond the scope of this document. For example, the padding feature in TLS 1.3, which provides privacy of plaintext size, is broken at BBB limits of AES-GCM, as noted [here](https://www.ietf.org/mail-archive/web/cfrg/current/msg07516.html) . If one cares about hiding the plaintext size, the suggestion above is misleading.\n- It is not clear to me that the formula for partial blocks is correct. This use is basically a small-domain encryption. I can't make sense of 2^(64-x) x l/128 . What's x here? Is l=8 in my scenario? Note that with probability 2^-8 we know each plaintext, well before the 2^-32 margin assumed at the beginning. \n",
          "createdAt": "2016-11-17T22:49:41Z",
          "updatedAt": "2016-11-17T22:50:16Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "body": "The probability for a collision of 2^(-32) was already taken into account.  Right, can't get much of a margin for a plaintext of a few bits.  That was why I wrote \"Generally\" and the revised text was \"  Generally, if l is the length of the (padded or not) record size in bits, y = 128 \u2013 (l mod 128), then the data limit for GCM is ((l \u2013 y) / l) x 2^64 bytes. \". Counting the amount of plaintext, the last block could be a partial block (less than 128 bits), encrypting this partial block is still considered as one query. And, that was what Martin asked about. \n\nI don't see anything wrong about saying this \" Since the block size of AES is 128 bits, there will be collisions among different sets of ciphertext from multiple sessions using GCM (or any other modes of AES) when the total amount of the ciphertext of all considered sessions is more than 2^64 128-bit blocks. This fact does not seem to create a practical security weakness of using AES GCM.  \" \n",
          "createdAt": "2016-11-17T23:30:28Z",
          "updatedAt": "2016-11-17T23:30:28Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "body": "Consider how much AES has been used, specifically how much AES GCM has been used, of course there are collisions in the collection of all ciphertext. \n",
          "createdAt": "2016-11-18T00:11:19Z",
          "updatedAt": "2016-11-18T00:11:19Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@wbl check out the citation in #761 for more info on when to rekey.  The paper says that the optimal time to rekey is after 2^(Q/3) blocks, where Q is the block size.  I confess that I haven't read all the paper, just the conclusions.\n",
          "createdAt": "2016-11-18T05:05:54Z",
          "updatedAt": "2016-11-18T05:05:54Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "body": "Brian, \nWhat you suggested makes sense to me. To address the ciphertext limit in term of blocks, we could add text like this \"The limit of total ciphertext under a single key is ( (TLSCipherText.length / 16) / ceiling (TLSCipherText.length / 16) ) . 2^48 128-bit blocks.\"\n\nThe calculation took into account the partial block situation. \n",
          "createdAt": "2016-11-19T22:10:02Z",
          "updatedAt": "2016-11-19T22:10:02Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODk0MzQ4MA==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I would prefer if we instead change the text to make the record count limits a recommendation.\n",
          "createdAt": "2016-11-17T01:04:35Z",
          "updatedAt": "2016-11-17T01:15:34Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "This is incorrect.  The reduction happens whenever a record contains a partial block.  The formula is therefore not simple.\n",
              "createdAt": "2016-11-17T01:04:35Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            },
            {
              "originalPosition": 16,
              "body": "Nit: 1^(-32) is 1, which is hardly negligible.\n\nThis analysis contradicts the citation we have, which will create confusion.\n\nThe AEAD-LIMITS paper suggests that for a 2^-32 margin, you need to limit data to 2^38.5 records, which is 2^48.5 blocks or 2^52.5 octets.\n\nThe last sentence is incorrect in the same way.  It's even more incorrect for x<4.\n\nAs for assuming that records are multiples of 128 bits, that hides the fact that partial blocks still count toward the limit.\n",
              "createdAt": "2016-11-17T01:15:22Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODk1NTE1NQ==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-17T03:25:10Z",
          "updatedAt": "2016-11-17T03:25:10Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "My calculation is correct as I explained in the email. 1^(-32) was a typo, it should have been 2^(-32).\n\nWhy did you say that the last sentence is incorrect?\n\nWhen padded record size is much larger than 128 bits (one block), then the few bits padding done by AES (due to the partial last block) is negligible comparing to the record size. \n\nWhen a (padded or not) record is less than 1 AES block, then the data limit is reduced to the ration of the x (bits) over 128 because each AES encryption produces 128-bit output. \n",
              "createdAt": "2016-11-17T03:25:10Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODk1NTM2NA==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-17T03:28:19Z",
          "updatedAt": "2016-11-17T03:28:19Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "See my explanation above. That was why I wrote \"The recommended maximum amount of data (2^64 bytes) is made with the assumption that the (padded) record size is either 128 bits, a multiple of 128 bits or a lot larger than 128 bits.\"\n",
              "createdAt": "2016-11-17T03:28:19Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODk1OTI3Mw==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-17T04:31:05Z",
          "updatedAt": "2016-11-17T04:31:05Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "We should not be building these recommendations based on assumptions that we know to be false (that blocks are multiples of 128 bits), and we should definitely not be taking shortcuts (assuming that blocks are always much larger than 128 bits).  This guidance is important.\n",
              "createdAt": "2016-11-17T04:31:05Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODk2MDM0Mg==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-17T04:48:14Z",
          "updatedAt": "2016-11-17T04:48:14Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I gave a recommended number when the (padded or not) record size is less than 128 bits. If you want a precise number for each record size, then you could do this. Let's say x be the length of (padded or not) record size (in bits), y = 128- (x mod 128), then the data limit is ((x - y) / x ) . 2^64 bytes. \n",
              "createdAt": "2016-11-17T04:48:14Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODk2MTM0NA==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-17T04:58:41Z",
          "updatedAt": "2016-11-17T04:58:41Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Interesting? When someone else gave a recommendation with the assumption that the record size was the max record size, you did not raise any issue. \n",
              "createdAt": "2016-11-17T04:58:41Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODk2MjY1Nw==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-17T05:19:05Z",
          "updatedAt": "2016-11-17T05:19:05Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I did not because it was clear that it was erring on the safe side.  Here you imply that you can count bytes, but that is misleading.\n",
              "createdAt": "2016-11-17T05:19:05Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODk3MjY3MQ==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-17T07:35:01Z",
          "updatedAt": "2016-11-17T07:35:01Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "There are nothings misleading here. You count 128-bit blocks generally, but at the meeting yesterday KDG asked about what if the record was 1 byte. \n",
              "createdAt": "2016-11-17T07:35:01Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTA5NzI5OA==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-17T19:18:19Z",
          "updatedAt": "2016-11-17T19:18:20Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Typo: \" If the (padded) record size is 2^x bytes, then the data limit with GCM for each key is 2^(64-x) records.\" should have been \"If the (padded) record size is 2^x 128-bit blocks, then the data limit with GCM for each key is 2^(48-x) records.\"\n",
              "createdAt": "2016-11-17T19:18:19Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTA5ODcyNA==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-17T19:25:28Z",
          "updatedAt": "2016-11-17T19:25:28Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Again here: \" 2^64 x l /128 bytes or 2^(64-x) x l/128 records.\" should have been \" 2^64 x l /128 bytes \".\n",
              "createdAt": "2016-11-17T19:25:28Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTA5OTU0NA==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-17T19:29:13Z",
          "updatedAt": "2016-11-17T19:29:13Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I used a record count instead of a block count. This isn't critical. But it is crucial we only overestimate. If implementations are counting encrypted bytes they should round up to multiples of 16, then count those.\n",
              "createdAt": "2016-11-17T19:29:13Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTEwOTc2MA==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-17T20:21:15Z",
          "updatedAt": "2016-11-17T20:21:15Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Ok. I revised the text above as below. The text stated the record count with the max record size of 2^14 bytes. \n\n\"  \nUsing AES-GCM to provide authenticity of authenticated data, content of the plaintext and information leakage [0] protection for the plaintext, the maximum amount of data (padded records) which can be safely encrypted with a single key is 2^48 128-bit blocks (2^64 bytes). When the maximum amount of data is reached, the chance of having a collision among 128-bit blocks of the ciphertext is below 1^(-32) which is negligible. The recommended maximum amount of data (2^64 bytes) is made with the assumption that the (padded) record size is either 128 bits, a multiple of 128 bits or a lot larger than 128 bits. If the (padded) record size is 2^x 128-bit blocks, then the data limit with GCM for each key is 2^(48-x) records.  When the record size is 2^14 bytes (2^10 128-bit blocks), the data limit with GCM for each key is 2^38 records. \n\nGenerally, if l is the length of the (padded or not) record size in bits, y = 128 \u2013 (l mod 128), then the data limit for GCM is ((l \u2013 y) / l) x 2^64 bytes. \n\n \" \n",
              "createdAt": "2016-11-17T20:21:15Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTExMDMzOA==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-17T20:24:50Z",
          "updatedAt": "2016-11-17T20:24:50Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "So is the data limit that the implementation is maintaining either bytes or records? I think we need more clarity that they should count bytes and rekey before then.\n",
              "createdAt": "2016-11-17T20:24:50Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTExMjEwMQ==",
          "commit": {
            "abbreviatedOid": "0661e13"
          },
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-17T20:35:28Z",
          "updatedAt": "2016-11-17T20:35:28Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Counting bytes would be ok. The problem is that when the record is not multiple of 128-bit block, the last partial block could be 1 byte and encrypting 1 byte or 128-bit block is considered the same as 1 query.  So, if the record size is 1 byte, the data limit would need to be reduced to 16 times. \n",
              "createdAt": "2016-11-17T20:35:28Z",
              "updatedAt": "2017-01-02T16:53:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 766,
      "id": "MDExOlB1bGxSZXF1ZXN0OTQwODM0NTQ=",
      "title": "change language on retransmission on 0-RTT data",
      "url": "https://github.com/tlswg/tls13-spec/pull/766",
      "state": "CLOSED",
      "author": "siyengar",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The previous language made it seem like if a TLS stack would choose to retransmit the data on 0-RTT rejection, it was doing the wrong thing. However TLS stacks should be free to choose how they want to deal with these cases. For example they could tear down the connection if ALPN changes. Practically these cases should almost never happen so these cases are very rare.\r\n\r\nI think putting this restriction on TLS implementations is a bit unfair. As far as I can tell, cases where it's hard to retransmit 0-RTT data happen in cases where the abstraction boundary is violated when application features add TLS features as a performance optimization, for example in the case of ALPN and token binding. As with any performance optimization it's fair to ask for a slow path when the optimization fails.",
      "createdAt": "2016-11-17T01:05:37Z",
      "updatedAt": "2016-11-29T23:22:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": "siyengar/tls13-spec",
      "headRefName": "patch-4",
      "headRefOid": "fb3310f1d7245f892fc91a781b6774e1a0bc76d2",
      "closedAt": "2016-11-29T23:22:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that the SHOULD NOT is good, I don't want to lose that.\n",
          "createdAt": "2016-11-17T01:19:03Z",
          "updatedAt": "2016-11-17T01:19:03Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "CONTRIBUTOR",
          "body": "were you suggesting keeping the existing phrasing, or were you suggesting an alternate phrasing @martinthomson \n\nThe SHOULD NOT makes it looks like there are only particular circumstances where this behavior might be valid. Practically these conditions always remains the same and instead there are particular conditions in which this is invalid. This phrasing replaces it with a TLS implementation SHOULD consider the implications of doing this instead, which mirrors more the more practical story and I think reduces the burden on the TLS implementation and its use by an application protocol library.\n\nThe SHOULD NOT language makes it seem okay for new application protocols that rely on TLS negotiation not define a fallback for when this assumption fails and say \"hey you should have not done that\". For example till recently Token binding failures were fatal to the connection. My concern is that it's an extra burden put on a TLS implementation to deal with these decisions that an application protocol has made. Maybe Application protocols should just deal with these failures when they happen. \n",
          "createdAt": "2016-11-17T01:45:27Z",
          "updatedAt": "2016-11-17T01:45:27Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How does this read:\n\n> A TLS implementation MUST NOT automatically re-send early data unless the negotiated connection selects the same ALPN protocol.  An application is required to construct different messages if a different protocol is selected.  Before replaying early data, additional checks might be necessary to verify that the resulting connection is compatible with expections; this will vary based on context.  For example, a change to the server certificate is possible if a pre-shared key is rejected.\n",
          "createdAt": "2016-11-17T04:46:49Z",
          "updatedAt": "2016-11-17T04:46:49Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ya i'm cool with this update. Changed the diff to have your proposed text @martinthomson \n",
          "createdAt": "2016-11-17T05:17:44Z",
          "updatedAt": "2016-11-17T05:17:44Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There is a reason we have this restriction, and it isn't ALPN.\n\nAutomatic resending as 1-RTT makes it difficult to determine what is and is\nnot 0-RTT data.\n\nOn Wed, Nov 16, 2016 at 9:17 PM, Subodh Iyengar notifications@github.com\nwrote:\n\n> Ya i'm cool with this update. Changed the diff to have your proposed text\n> @martinthomson https://github.com/martinthomson\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/766#issuecomment-261157836, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/ABEl49wXGInQLXpYyPcP54_DCKQkyfDJks5q--N4gaJpZM4K0s0F\n> .\n\n## \n\n\"Man is born free, but everywhere he is in chains\".\n--Rousseau.\n",
          "createdAt": "2016-11-17T05:35:22Z",
          "updatedAt": "2016-11-17T05:35:22Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Automatic resending as 1-RTT makes it difficult to determine what is and is not 0-RTT data.\n\nI assume here that the goal is for the server to be able to tell that a given piece of data might have been replayed elsewhere.  After all, once the 1-RTT connection is established, the data that is sent might be completely new or changed.\n\nThat was already true if the client was willing to replay it, in several ways:\n- If 0-RTT data is rejected, the client will probably re-send that data as 1-RTT.  Then there is no easy way to determine if the 1-RTT data was replayed, or completely new (the client TLS stack won't know).\n- Even without 0-RTT, failures and other circumstances mean that data is replayed.  Robust applications replay things.\n",
          "createdAt": "2016-11-17T05:54:04Z",
          "updatedAt": "2016-11-17T05:54:04Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In some sense it seems like a philosophical question, whether it is the application or the TLS stack that makes the decision to replay the data.  To me, the intenet of the restriction seems to be to say that a generic TLS stack should not automatically replay things and should force the application to make the decision to replay.  (That might be just a flag to the \"send 0-RTT data\" function that indicates \"replay as 1-RTT data if 0-RTT fails\", but is still the application requesting the replay.)",
          "createdAt": "2016-11-23T21:07:07Z",
          "updatedAt": "2016-11-23T21:07:07Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I tend to agree with @wbl (and I think @kaduk). This shouldn't be a default TLS stack behavior but is something you could have with a flag. @martinthomson @siyengar ?",
          "createdAt": "2016-11-28T19:35:19Z",
          "updatedAt": "2016-11-28T19:35:19Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Coming back to this with semi-fresh eyes, I think that it's dangerous.  It basically implies that TLS stacks replay 0-RTT.  As Watson notes, that makes the status of those octets suspicious.\r\n\r\nWhat we need here is text that we can agree on.  I think that these are the (rough) consensus points:\r\n* early data can't be replayed if ALPN changes\r\n* early data SHOULD NOT be replayed automatically\r\n* replaying automatically might be risky if connection parameters change in ways that affect early data semantics (see token binding for an example)\r\n\r\nYes, Subodh disagrees with the latter, but he is allowed to ignore a SHOULD if he thinks he knows better, so he shouldn't be unhappy about that.\r\n\r\nThat leads me to suggest:\r\n\r\n> A TLS implementation SHOULD NOT automatically re-send early data.  Automatic re-transmission of early data could result in assumptions about the status of the connection being incorrect.  In particular, a TLS implementation MUST NOT automatically re-send early data unless the negotiated connection selects the same ALPN protocol. An application might need to construct different messages if a different protocol is selected. Similarly, if early data assumes anything about the connection state, it might be sent in error after the handshake completes.\r\n\r\nI was going to also suggest \"A TLS MUST NOT automatically re-transmit early data unless an application that is aware of the semantics of the early data has explicited opted in to re-transmission.\"  But that seems obvious from the prelude, and it's already getting unwieldy.",
          "createdAt": "2016-11-29T00:41:30Z",
          "updatedAt": "2016-11-29T00:41:30Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think I would be happy with Martin's new text.  But, in\r\n\r\n> In particular, a TLS implementation MUST NOT automatically re-send early data unless the negotiated connection selects the same ALPN protocol. An application might need to construct different messages if a different protocol is selected.\r\n\r\nperhaps we should be more generic with something about \"same ALPN protocol and any other negotiated extensions that affect the subsequent protocol\"?  Though, I guess the text I just wrote is a bit clunky, so maybe not.",
          "createdAt": "2016-11-29T00:45:16Z",
          "updatedAt": "2016-11-29T00:45:16Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(Oh, and just to make it explicit, I agree with Martin's list of consesus points.)",
          "createdAt": "2016-11-29T00:45:45Z",
          "updatedAt": "2016-11-29T00:45:45Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk:\r\n> perhaps we should be more generic with something about \"same ALPN protocol and any other negotiated extensions that affect the subsequent protocol\"? Though, I guess the text I just wrote is a bit clunky, so maybe not.\r\n\r\nThat was my intent with the last sentence: \"Similarly, if early data assumes anything about the connection state, it might be sent in error after the handshake completes.\"  I'm not that happy with the sentence, but I think that you are right that there is something needed here.  Basically, you can't automatically re-send because of unknowable *stuff*.",
          "createdAt": "2016-11-29T00:49:30Z",
          "updatedAt": "2016-11-29T00:49:30Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 to MT's new text. There is enough \"unknowable stuff\" and peril around automatic retransmission to justify at least a SHOULD NOT. (Even if all the parameters are the same, if you touched early exporters, you probably shouldn't retransmit.) A general-purpose implementation really should not be doing this.\r\n\r\nIf you know a priori all this \"unknowable stuff\" is fine and, for whatever reason, you can tolerate the failure modes, as is apparently the case for Subodh's case, well, that's what SHOULD NOTs over MUST NOTs are for.\r\n\r\nMinor suggestion: It's getting long, but perhaps add a sentence to the effect of \"Instead, this should be deferred to higher-level application logic\"? This is to clarify we're not discouraging repeating the HTTP request or whatever. We're just saying that you want to bubble this up a few layers to clear all the perilous bits. Or that 0-RTT inherently has a \"that didn't work, act like everything you wrote was thrown away\" case.\r\n[Edit: above paragraph was missing a \"not\".]",
          "createdAt": "2016-11-29T01:59:28Z",
          "updatedAt": "2016-11-29T02:00:02Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson plus one on your text as well, especially with @davidben's comments. If you send me a PR, I will merge it",
          "createdAt": "2016-11-29T22:37:51Z",
          "updatedAt": "2016-11-29T22:37:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 767,
      "id": "MDExOlB1bGxSZXF1ZXN0OTQ0NzE2Mjg=",
      "title": "update backwards compatible suites language",
      "url": "https://github.com/tlswg/tls13-spec/pull/767",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "TLS 1.3 uses new cipher suites; there's no longer any overlap. Updating this line to carry the same meaning it had before the new negotiation was introduced.",
      "createdAt": "2016-11-19T05:30:27Z",
      "updatedAt": "2016-11-28T23:27:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "updateoldciphersuitelanguage",
      "headRefOid": "aa660c288c029da6caf696f334d22163651892f2",
      "closedAt": "2016-11-28T14:29:47Z",
      "mergedAt": "2016-11-28T14:29:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "83e6eb4bbf5f935452187dc9cf3171f3ec70a963"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 768,
      "id": "MDExOlB1bGxSZXF1ZXN0OTQ1MTM0MzI=",
      "title": "D-H key re-use considerations",
      "url": "https://github.com/tlswg/tls13-spec/pull/768",
      "state": "CLOSED",
      "author": "yoavnir",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Added a subsection to the Security Considerations section. It discusses key reuse (do it carefully or do it not).\r\nIt has the \"don't do this or this grape juice might ferment\" weasel words suggested by someone at the meeting.",
      "createdAt": "2016-11-20T10:19:28Z",
      "updatedAt": "2017-03-31T14:07:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": "yoavnir/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "20aae51d23c87e3278092c8cbbac4b1becd95432",
      "closedAt": "2017-03-31T14:07:26Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From the paper:\r\n> Safe prime groups. In these groups, G is the subgroup of prime order q of the multiplicative group of a prime field Zp, where p = 2q+ 1. If A checks that the public key B is an integer in the interval [2, p\u22122] then, since the multiplicative group of Zp has order 2q, attacks like the ones described above can reveal at most a single bit of a. Thus small-subgroup attacks are not effective in the case of safe prime groups.\r\n\r\nAnd for ECDHE:\r\n> Let E:V2=U3+\u03b1U+\u03b2 be an elliptic curve of prime order q defined over a prime field Fp, (...)A can easily thwart the attack by checking that B is a point in E(Fp) (and is not the point at infinity).\r\n\r\nGiven the simplicity of checks, I don't see why they shouldn't be mandatory in the first place. Secondly, the ecdhe section (#ecdhe-param) doesn't specify what kind of checks should be performed on the share...",
          "createdAt": "2016-11-21T11:45:06Z",
          "updatedAt": "2016-11-21T11:45:06Z"
        },
        {
          "author": "yoavnir",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@tomato42 \r\n\r\n> Given the simplicity of checks, I don't see why they shouldn't be mandatory in the first place. \r\n\r\nI agree.\r\n\r\n> Secondly, the ecdhe section (#ecdhe-param) doesn't specify what kind of checks should be performed on the share...\r\n\r\nWell, there's #763 that proposes this, and the feeling in the room was that people liked this. My PR is a little forward-looking then.",
          "createdAt": "2016-11-21T12:42:02Z",
          "updatedAt": "2016-11-21T12:42:02Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed per WG consensus in Chicago",
          "createdAt": "2017-03-31T14:07:26Z",
          "updatedAt": "2017-03-31T14:07:26Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTM3OTA1NQ==",
          "commit": {
            "abbreviatedOid": "c5ec63e"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Sounds like a reasonable statement to make.",
          "createdAt": "2016-11-21T01:09:40Z",
          "updatedAt": "2016-11-21T01:15:36Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Consistent capital Letters?",
              "createdAt": "2016-11-21T01:09:41Z",
              "updatedAt": "2016-11-21T06:56:08Z"
            },
            {
              "originalPosition": 26,
              "body": "The simplest and safest way to achieve this is to generate a new Diffie-Hellman share for each TLS handshake, **and to destroy keys after they are used**.",
              "createdAt": "2016-11-21T01:10:35Z",
              "updatedAt": "2016-11-21T06:56:08Z"
            },
            {
              "originalPosition": 28,
              "body": "I would drop \"Alternatively, \"",
              "createdAt": "2016-11-21T01:10:59Z",
              "updatedAt": "2016-11-21T06:56:08Z"
            },
            {
              "originalPosition": 39,
              "body": "Possession of **either a client or server Diffie-Hellman private key** will allow an attacker to decrypt the contents of any TLS connection [...]",
              "createdAt": "2016-11-21T01:13:28Z",
              "updatedAt": "2016-11-21T06:56:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTM5ODAwOQ==",
          "commit": {
            "abbreviatedOid": "c5ec63e"
          },
          "author": "yoavnir",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-21T06:53:41Z",
          "updatedAt": "2016-11-21T06:53:41Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "OK",
              "createdAt": "2016-11-21T06:53:41Z",
              "updatedAt": "2016-11-21T06:56:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTM5ODA4OQ==",
          "commit": {
            "abbreviatedOid": "c5ec63e"
          },
          "author": "yoavnir",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-21T06:54:50Z",
          "updatedAt": "2016-11-21T06:54:50Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I'm changing the text, but you want to destroy the keys after use whether they are single-use or not.",
              "createdAt": "2016-11-21T06:54:50Z",
              "updatedAt": "2016-11-21T06:56:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTM5ODA5MA==",
          "commit": {
            "abbreviatedOid": "c5ec63e"
          },
          "author": "yoavnir",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-21T06:54:50Z",
          "updatedAt": "2016-11-21T06:54:50Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "OK",
              "createdAt": "2016-11-21T06:54:50Z",
              "updatedAt": "2016-11-21T06:56:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTM5ODA5NA==",
          "commit": {
            "abbreviatedOid": "c5ec63e"
          },
          "author": "yoavnir",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-21T06:54:57Z",
          "updatedAt": "2016-11-21T06:54:57Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "OK",
              "createdAt": "2016-11-21T06:54:57Z",
              "updatedAt": "2016-11-21T06:56:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NTI4MDE=",
          "commit": {
            "abbreviatedOid": "20aae51"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-17T20:50:52Z",
          "updatedAt": "2016-12-17T20:50:52Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "@tvdmerwe @prosecco @adl, I'd like to get some guidance here. Do your proofs assume that the DH keys are fresh?",
              "createdAt": "2016-12-17T20:50:52Z",
              "updatedAt": "2016-12-17T20:50:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NzE5OTI=",
          "commit": {
            "abbreviatedOid": "20aae51"
          },
          "author": "tvdmerwe",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-18T20:53:35Z",
          "updatedAt": "2016-12-18T20:53:35Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Yes, our symbolic proofs assume that the DH keys are fresh. This needs to be true to achieve PFS as defined in [DOW92]. The definition in [DOW92] refers to the 'safety' (secrecy) of exchanged keys from earlier runs; perhaps the definition in Appendix D should be altered to reflect this, the current phrasing is strange. \r\n\r\nAlso, this phrasing seems somewhat odd to me \"Keeping the private key secret forever is necessary for the property of Perfect Forward Secrecy.\" As phrased here, this suggests that compromise should never occur but PFS is defined in terms of a compromise.  ",
              "createdAt": "2016-12-18T20:53:35Z",
              "updatedAt": "2016-12-18T20:53:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NzIxODg=",
          "commit": {
            "abbreviatedOid": "20aae51"
          },
          "author": "prosecco",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-18T21:05:10Z",
          "updatedAt": "2016-12-18T21:05:10Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "It isn't clear whether we need ephemeral keys to be fresh in our proofs (we use a variant of the Gap Diffie-Hellman assumption). For classic AKE properties (confidentiality and integrity) we need the peer's DH key to be \"honest\" and \"strong\", not necessarily fresh.  For PFS, we need all the secrets of the session to be destroyed, not just the ephemerals. After the keys are derived, we destroy all master secrets and ephemeral secrets. After the connection is closed, we destroy the connection keys and EMS. This still leaves RMS whose compromise would break PFS for resumed sessions. \r\n",
              "createdAt": "2016-12-18T21:05:10Z",
              "updatedAt": "2016-12-18T21:05:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NzIyNjA=",
          "commit": {
            "abbreviatedOid": "20aae51"
          },
          "author": "tvdmerwe",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-18T21:09:50Z",
          "updatedAt": "2016-12-18T21:09:50Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "But you don't get PFS if you're using the RMS only, right? That's why you need new DH shares. ",
              "createdAt": "2016-12-18T21:09:50Z",
              "updatedAt": "2016-12-18T21:09:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NzI0MzY=",
          "commit": {
            "abbreviatedOid": "20aae51"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-18T21:20:46Z",
          "updatedAt": "2016-12-18T21:20:46Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "@prosecco @tvdmerwe thanks.\r\n\r\nI agree it's clear that you don't get PFS if you don't use fresh DH keys. I think the question is whether the AKE properties of your proofs depend on the DH keys being fresh. @tvdmerwe is this something you could relax in the Tamarin model easily?\r\n\r\nBasically, my concern here is that this text seems to say that it's OK to use non-fresh DH shares for 1.3, with the cost being PFS. If we're to incorporate text like that, it would be nice to have some analytic results which indicate that it's true.\r\n\r\n",
              "createdAt": "2016-12-18T21:20:46Z",
              "updatedAt": "2016-12-18T21:20:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NzI3MDg=",
          "commit": {
            "abbreviatedOid": "20aae51"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-18T21:37:13Z",
          "updatedAt": "2016-12-18T21:37:13Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "@tvdmerwe: I believe the properties wrt the RMS are as follows:\r\n\r\n- Knowledge of the RMS established in connection N is not sufficient to decrypt N\r\n- If you establish a new connection N+1 with the RMS as the PSK and do not do DH, then knowledge of the RMS is sufficient to decrypt N+1. However, N+1 generates its own RMS and that is not sufficient to decryption N+1 (though of course you can use it for N+2).\r\n- If you operate a session cache type system, then the server can delete the RMS once it has been used to establish the session, giving you PFS even w/o DH\r\n- If you operate a ticket-based system, you don't get PFS until the ticket key has been destroyed.",
              "createdAt": "2016-12-18T21:37:13Z",
              "updatedAt": "2016-12-18T21:37:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NzI3NTA=",
          "commit": {
            "abbreviatedOid": "20aae51"
          },
          "author": "tvdmerwe",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-18T21:40:21Z",
          "updatedAt": "2016-12-18T21:40:21Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Quick answer: yes (barring any complications that don't immediately come to mind). \r\n\r\nRemind me, if DH shares aren't fresh, what secrets will be new? The RMS? ",
              "createdAt": "2016-12-18T21:40:21Z",
              "updatedAt": "2016-12-18T21:40:21Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NzI4MzA=",
          "commit": {
            "abbreviatedOid": "20aae51"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-18T21:45:06Z",
          "updatedAt": "2016-12-18T21:45:06Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "I believe that in a non-resumed connection, the DH shared secret would be non-unique but the Handshake Secret and anything derived from it will be unique as long as the nonces are fresh. This also implies that the RMS will be different for two handshakes where the client and server both reuse DH shares.",
              "createdAt": "2016-12-18T21:45:06Z",
              "updatedAt": "2016-12-18T21:45:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NzI4ODM=",
          "commit": {
            "abbreviatedOid": "20aae51"
          },
          "author": "tvdmerwe",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-18T21:48:34Z",
          "updatedAt": "2016-12-18T21:48:34Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Thanks. Sounds about right!",
              "createdAt": "2016-12-18T21:48:34Z",
              "updatedAt": "2016-12-18T21:48:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 769,
      "id": "MDExOlB1bGxSZXF1ZXN0OTQ1NzIzOTE=",
      "title": "Updated the last checkin \"(for Quynh) Limits on Key Usage\":",
      "url": "https://github.com/tlswg/tls13-spec/pull/769",
      "state": "CLOSED",
      "author": "brainhub",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "- corrected arithmetic errors;\r\n- clarified normative text;\r\n- removed statements that don't seem to be necessary;\r\n- consistent with http://www.isg.rhul.ac.uk/~kp/TLS-AEbounds.pdf\r\n\r\nI kept the content intact, in principle. I will respectfully note that this version is shorter and goes to the point of the problem.",
      "createdAt": "2016-11-21T08:35:17Z",
      "updatedAt": "2017-03-10T02:31:46Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "gcm_limit",
      "baseRefOid": "0661e137946fa17973f028ffa9ddad3fa54e1998",
      "headRepository": "brainhub/tls13-spec",
      "headRefName": "gcm_limit",
      "headRefOid": "ada1fa416113221f9c2a33075546ab54c5ffcfc1",
      "closedAt": "2017-03-10T02:31:46Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It seems like there are two substantive changes here:\r\n\r\n1. Converting from records to bytes.\r\n2. Lowering the safety margin to 2^{-32}\r\n\r\nThe first of these seems sensible, but the second seems just as unprincipled as our initial selection of 2^{24.5} (which was selected by roughly matching encryption and AE). What's the rationale for 2^{-32}\r\n\r\n",
          "createdAt": "2016-11-28T19:43:56Z",
          "updatedAt": "2016-11-28T19:43:56Z"
        },
        {
          "author": "brainhub",
          "authorAssociation": "NONE",
          "body": "Correct for your 1, with small caveat that bytes should be rounded up to the nearest block (and thus we have to mention blocks). \r\n\r\nFor your 2: The previous estimate didn't state the security margin used. I used 2^-32 that NIST is using [(SP 800-38D)](http://dx.doi.org/10.6028/NIST.SP.800-38D).\r\n\r\nWhere did the 2^24.5 come from? As I wrote, the fractional exponent looks overkill on implementation complexity grounds.   \r\n\r\nAs the recent SWEET32 attack on 3DES shows, as expected, 2^-1 is the practical value. 2^-10 or 0.1% is what I would use as the lowest margin for 3DES. \r\n\r\nAnything in the range 2^-32 .. 2^-10 seems OK for AES, but why not go with 2^-32 because NIST already uses it? The only reason I see to accept the higher probability is because we rekey too fast, but this is not the case with 128-bit block ciphers (as it is with 3DES).\r\n\r\nDo you have a concrete probability / security margin in mind? ",
          "createdAt": "2016-11-28T20:36:55Z",
          "updatedAt": "2016-11-28T20:39:24Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "2^24.5 is the low entry in the AEBounds paper table 1. I chose it for rough parity with the provided 2^{-57} integrity bound. Given that we have to multiple all these values by the number of extant sessions (S 1.3) 2^{-32} seems fairly aggressive.\r\n\r\n",
          "createdAt": "2016-11-28T20:42:26Z",
          "updatedAt": "2016-11-28T20:42:26Z"
        },
        {
          "author": "quynh97",
          "authorAssociation": "NONE",
          "body": "As explained before, it does not make a lot of sense to worry about the distinguishing attack for multiple sessions because AES has been used a lot and will be used a lot more and its block size is 128 bits. More than 2^64 blocks of AES have a lot of collisions. In a nutshell, my suggestion for the data limit is \"\"The limit of total ciphertext under a single key is ( (TLSCipherText.length / 16) / ceiling (TLSCipherText.length / 16) ) . 2^48 128-bit blocks.\". It is safe for the chance of a collision below 1/2^32 which is practically zero. ",
          "createdAt": "2016-11-29T18:20:38Z",
          "updatedAt": "2016-11-29T18:20:38Z"
        },
        {
          "author": "quynh97",
          "authorAssociation": "NONE",
          "body": "Hi Eric and all,\r\n\r\nBased on the discussions we have had in the last 2-3 weeks, below is my revised suggestion text.\r\n\r\n\"  To use AES-GCM to provide authenticity of authenticated data, content of the plaintext and information leakage [0] protection for the plaintext safely, the limit of total ciphertext under a single key is ( (TLSCipherText.length / 16) / ceiling (TLSCipherText.length / 16) ) times 2^48 128-bit blocks.\r\n\r\nWhen the data limit is reached, the chance of having a collision among 128-bit blocks of the ciphertext is below 2^(-32) which is negligible. \r\n\r\nSince the block size of AES is 128 bits, there will be collisions among different sets of ciphertext from multiple sessions using GCM (or any other modes of AES) when the total amount of the ciphertext of all considered sessions is more than 2^64 128-bit blocks. This fact does not seem to create a practical security weakness of using AES GCM. \r\n\r\nFor ChaCha20/Poly1305, the record sequence number would wrap before the safety limit is reached. See [AEAD-LIMITS] for further analysis.  \r\n\r\n[0]: Information leakage in the context of TLS is a chosen-plaintext distinguishing attack where the attacker provides 2 128-bit plaintext blocks to a GCM encryption engine, after seeing one encrypted block for one of the 2 plaintext blocks, the attacker knows which plaintext block was encrypted. Or, it means that there is a collision among 128-bit blocks of the ciphertext.  \" \r\n\r\n1. The text above uses blocks instead of bytes or records of ciphertext. \r\n2. The partial block situation is taken into account.",
          "createdAt": "2016-11-29T19:07:57Z",
          "updatedAt": "2016-11-29T19:07:57Z"
        },
        {
          "author": "brainhub",
          "authorAssociation": "NONE",
          "body": "@ekr, please let me get back to you on your comment. Give me a day or so...",
          "createdAt": "2016-11-29T19:21:25Z",
          "updatedAt": "2016-11-29T19:21:46Z"
        },
        {
          "author": "quynh97",
          "authorAssociation": "NONE",
          "body": "Martin,\r\n\r\nWhen the data limit is reached, the collision probability is around 42% times 2^(-32) and that is why I say below 2^(-32).  ",
          "createdAt": "2016-11-29T19:31:51Z",
          "updatedAt": "2016-11-29T19:31:51Z"
        },
        {
          "author": "quynh97",
          "authorAssociation": "NONE",
          "body": "brainhub,\r\n\r\nA repeat of (key, IV) is a complete kill for GCM, in TLS 1.3, that is equivalent to a collision in a domain of 2^224 elements which won't happen \"any time soon\" including the multiple sessions situation. Keeping the chance of a repeat of a (key, IV) below 2^(-32), the total of TLS 1.3 sessions can be 2^192 in total. ",
          "createdAt": "2016-11-29T19:48:13Z",
          "updatedAt": "2016-11-29T19:48:13Z"
        },
        {
          "author": "quynh97",
          "authorAssociation": "NONE",
          "body": "Correction: 2^192/2 = 2^96 sessions.",
          "createdAt": "2016-11-29T20:55:42Z",
          "updatedAt": "2016-11-29T20:55:42Z"
        },
        {
          "author": "brainhub",
          "authorAssociation": "NONE",
          "body": "@ekr a day ago wrote:\r\n> 2^24.5 is the low entry in the AEBounds paper table 1. I chose it for rough parity with the provided 2^{-57} integrity bound.\r\n\r\nI see. 2^24.5 records assumes a substantial \"Attack Success Probability\" at 2^-60 (which then means that fewer bytes can be sent before rekey). 2^-60 is grantees guessing any DES key in one try and I think is excessive.\r\n\r\nI am not fixated on any given probability, but I think it needs to a reasonable value and this needs to be a single choice. I chose 2^-32. This is about IND-CPA side of the argument.\r\n\r\nOn **integrity**, or INT-CTXT.\r\n\r\nThe integrity is discussed on p.5 and p.6 of that paper.\r\n\r\nAssuming that we are capped at the proposed 2^48 cipher blocks (less than 2^64 is what matters here), the paper shows that the formula is simplified as follows. The success probability is then capped by (2^10+1)/2^127 < 1/2^116 for TLS 1.3, which is essentially negligible. Compare this with the assumed 1/2^32 above.\r\n\r\nFor DTLS, which allows unlimited verifications, the formula changes. This is out of scope for this document and I will leave this aside. (However, I ran the numbers and see that for 2^-32 probability one needs v~=2^130 DTLS failed verification attempts, assuming the cap at 2^48 encryption blocks).\r\n\r\nIn summary, I don't see that we need to worry about lower limits due to integrity concerns with DTLS and definitely with TLS 1.3. Encryption data limits are tighter. DTLS may need new language, though, regarding unconstrained failed verifications.\r\n\r\n> Given that we have to multiple all these values by the number of extant sessions (S 1.3) 2^{-32} seems fairly aggressive.\r\n\r\nCould you elaborate on your concern here? ( I assume you consider how multiple sessions affect the estimates. Multiple sessions use different keys, but the data limits are per key. In a set of 2^48 AES128-GCM sessions a pair of AES keys will collide with probability 1/2^32. Are you concerned that 2^48 sessions is too low? )",
          "createdAt": "2016-11-30T06:38:20Z",
          "updatedAt": "2016-12-01T05:09:50Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "body": "Martin,\r\n\r\nAs explained above,  2^96 sessions are actually 2^96 pairs of (key, IV), if all TLS 1.3 sessions (of all connections) are configured to be rekeyed too often than needed, not only that no practical security gain can be obtained, we'll also hurt security because that would consume the (key, IV) pair space a lot quicker than needed. ",
          "createdAt": "2016-11-30T10:05:57Z",
          "updatedAt": "2016-11-30T10:05:57Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "body": "Hi all,\r\n\r\nFor the standard notion, when we talk about distinguishing attacks (indistinguishability) of AES, we treat each element in a set as a 128-bit value because the output of each AES encryption is 128 bits. But, if we treat the output (ciphertext) coming out of an AES engine is a stream of bits, then when we try to distinguish 32 or 64-bit values of the output bits, collisions occur very quickly. \r\n\r\nBut, if somebody cares about distinguishing attacks on 256-bit values (instead of 128-bit values) in the ciphertext, then he/she would not need to worry about a collision until the amount of ciphertext reaches 2^112 256-bit blocks. \r\n\r\nThe point is that it is hard to see if there are any practical consequences from a particular distinguishing attack on 128-bit values of the ciphertext even though when there is a distinguishing attack on a cipher, the guarantee that there won't be any breaks on the cipher (as long as the assumptions underlining the cipher are held and the security proof of the cipher is correct), is broken. ",
          "createdAt": "2016-11-30T10:40:57Z",
          "updatedAt": "2016-11-30T10:40:57Z"
        },
        {
          "author": "brainhub",
          "authorAssociation": "NONE",
          "body": "The last paragraph above by @QuynhDangNIST above means that  TLS 1.3 sec \"5.4. Record Padding\" feature is completely broken when there is a distinguishing attack.\r\n\r\nI also don't follow the argument of simply looking at 2 blocks at a time.\r\n\r\nThe original issue here is that AES, the underlying block cipher of AES-GCM, is a secret **permutation on 128 bits**. In AES-GCM the input to the AES block cipher permutation is a unique plaintext, which is based on the IV. By definition, the permutation will produce a different value when the input is different (and it always is for AES in AES-GCM, in any given session).  This fact is used in a distinguishing attack.\r\n\r\nConsidering a pair of adjacent blocks in an AES-GCM stream is not the right way to look at the problem. We don't get a 256-permutation by adopting this view. There are wide cipherblocks modes exist, e.g.  [WCFB](https://eprint.iacr.org/2014/281.pdf) and related, see references, but we are not doing AES-2x-WCFB-GCM of sort here. Thus, AES-GCM limits need to address the issues of the 128-bit permutation only.",
          "createdAt": "2016-12-20T02:13:39Z",
          "updatedAt": "2016-12-20T02:15:55Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "body": "brainhub,\r\n\r\nI agree with you and with the standard security notion. If you think fully about what I wrote, there was nothing contradicting your view.\r\n\r\n\"  The point is that it is hard to see if there are any practical consequences from a particular distinguishing attack... \" \r\n\r\nFor example (theoretically for now), plaintext is a string of 64-bit values, the attack is to find out if 2 64-bit values are the same or not (or which 64-bit value is encrypted from 2 chosen 64-bit values). In this case, finding an distinguishing attack on 128-bit output values does not make sense.\r\n\r\nSimilarly, if the values I care are 256-bit values and the plaintext is a string of these values, the attack is to find out if 2 256-bit values are the same or not (or which 256-bit value is encrypted from 2 chosen 256-bit values). In this case, finding an distinguishing attack on 128-bit output values does not make sense.\r\n",
          "createdAt": "2016-12-20T13:37:43Z",
          "updatedAt": "2016-12-20T13:37:43Z"
        },
        {
          "author": "brainhub",
          "authorAssociation": "NONE",
          "body": "We can't escape the birthday bound limitation of the AES-GCM mode by considering \"virtual\" blocks. AES-GCM mode of operation is a mode with a 128-bit internal state, due to the AES block size.  The problem is a textbook limitation of a counter mode of operation with a 128-bit block cipher.\r\n\r\nWhile GCM seems to have fewer practical problems than CBC at birthday bound limit, this is not good enough.",
          "createdAt": "2016-12-20T19:51:23Z",
          "updatedAt": "2016-12-20T19:51:23Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "body": " Agree, many other ciphers can tolerate a lot more ciphertext under a given key than GCM can with regards to keeping distinguishing attacks at zero chance of success practically.  ",
          "createdAt": "2016-12-20T20:00:21Z",
          "updatedAt": "2016-12-20T20:00:21Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTU3OTczNg==",
          "commit": {
            "abbreviatedOid": "6940b4f"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "So the problem I have with this is that it *still* doesn't use the numbers from the cited paper.  The number I get from the paper is 2^48.5 blocks.  If you are rounding down, please say so.  Though I will note that an extra 40% is a non-trivial increment.",
          "createdAt": "2016-11-22T01:23:20Z",
          "updatedAt": "2016-11-22T01:27:11Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I would drop this last sentence on the basis that it is misleading.",
              "createdAt": "2016-11-22T01:23:20Z",
              "updatedAt": "2016-11-23T21:58:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTc3NzQ0MA==",
          "commit": {
            "abbreviatedOid": "6940b4f"
          },
          "author": "brainhub",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-22T23:03:32Z",
          "updatedAt": "2016-11-22T23:03:32Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I am OK to drop it. \r\n\r\nIt's here primarily because I wanted to preserve Quynh's text to the degree I could. \r\n\r\n**Minimum** doesn't work because of Finished. **Maximum** overestimates. It may not be clear how to estimate **Average**. In general, I believe that counting in blocks (v.s. records) in the code is the most efficient method to track data limits. ",
              "createdAt": "2016-11-22T23:03:32Z",
              "updatedAt": "2016-11-23T21:58:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTc3OTU5MA==",
          "commit": {
            "abbreviatedOid": "6940b4f"
          },
          "author": "brainhub",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-22T23:20:11Z",
          "updatedAt": "2016-11-22T23:20:11Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Yes, I am rounding this down for a few reasons:\r\n\r\n- The use of fractional exponents adds unnecessary complexity\r\n- We begin the analysis with somewhat arbitrary assumption of **p**=1/2^32 that NIST happen to use in [SP 800 38D](http://dx.doi.org/10.6028/NIST.SP.800-38D) . \r\n- This doesn't consider multi-session collision concerns, e.g. when two AES-128 keys collide\r\n\r\nThe formula is straightforward: blocks < 2^((128+log2(**p**))/2).\r\n\r\nBecause we primarily work in an exponential scale here, 1 bit ~ 100% of error margin. We can tolerate this margin of error because it's widely recognized that rekeying marginally more often doesn't hurt.\r\n\r\nAre we OK to keep rounded estimate without additional elaboration? ",
              "createdAt": "2016-11-22T23:20:11Z",
              "updatedAt": "2016-11-23T21:58:32Z"
            }
          ]
        }
      ]
    },
    {
      "number": 770,
      "id": "MDExOlB1bGxSZXF1ZXN0OTQ2ODk5NTY=",
      "title": "Fix a couple of leftover pre_shared_key_modes",
      "url": "https://github.com/tlswg/tls13-spec/pull/770",
      "state": "MERGED",
      "author": "FiloSottile",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-11-21T20:25:24Z",
      "updatedAt": "2016-11-21T20:27:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0152fb15d0f68a52fddce33b5e8715ccbaa5f291",
      "headRepository": null,
      "headRefName": "patch-8",
      "headRefOid": "194c257c3d55901041bbe23f9b645f57615685a0",
      "closedAt": "2016-11-21T20:27:57Z",
      "mergedAt": "2016-11-21T20:27:57Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1a684d414183efe0ad1ac417f9e4dfcfc07864ac"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 772,
      "id": "MDExOlB1bGxSZXF1ZXN0OTQ5MDQ5NTU=",
      "title": "Typofixes.",
      "url": "https://github.com/tlswg/tls13-spec/pull/772",
      "state": "MERGED",
      "author": "pictyeye",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This commit fixes several typos.",
      "createdAt": "2016-11-22T21:50:07Z",
      "updatedAt": "2016-11-23T08:29:59Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1a684d414183efe0ad1ac417f9e4dfcfc07864ac",
      "headRepository": "pictyeye/tls13-spec",
      "headRefName": "ol-editorial",
      "headRefOid": "051ec8122b3f5245a5f1b5e4617b6c1fd97666ae",
      "closedAt": "2016-11-22T22:58:57Z",
      "mergedAt": "2016-11-22T22:58:57Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "69a171929100d9b7a19129784a2a6e7ff7f728ee"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 773,
      "id": "MDExOlB1bGxSZXF1ZXN0OTQ5MjUzNjc=",
      "title": "Olivier's review comment on ignoring 0-RTT",
      "url": "https://github.com/tlswg/tls13-spec/pull/773",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-11-23T00:24:17Z",
      "updatedAt": "2016-12-16T19:53:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "69a171929100d9b7a19129784a2a6e7ff7f728ee",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "just_1rtt",
      "headRefOid": "7f41449e171518d13241dce584cdf6ca49269e6d",
      "closedAt": "2016-11-28T14:32:51Z",
      "mergedAt": "2016-11-28T14:32:51Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7f41449e171518d13241dce584cdf6ca49269e6d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0MDAxODY=",
          "commit": {
            "abbreviatedOid": "7f41449"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-16T19:53:45Z",
          "updatedAt": "2016-12-16T19:53:45Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "(also using trial decryption?)",
              "createdAt": "2016-12-16T19:53:45Z",
              "updatedAt": "2016-12-16T19:53:45Z"
            }
          ]
        }
      ]
    },
    {
      "number": 774,
      "id": "MDExOlB1bGxSZXF1ZXN0OTQ5NDU1NTQ=",
      "title": "Set minimum label size in HKDF-Expand-Label to 10 octets",
      "url": "https://github.com/tlswg/tls13-spec/pull/774",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The prefix to the label in HKDF-Expand-Label is 9 octets long.\r\n\r\nThe grammar therefore permits the label to be empty.  That would\r\nbe bad given that it is supposed to disambiguate.\r\n\r\n(Yes, a zero length string is potentially unique, but since only\r\none of them exists and use is more likely the result of an error\r\nthan intent, it seems prudent to forbid its use.)",
      "createdAt": "2016-11-23T05:01:24Z",
      "updatedAt": "2016-11-23T05:26:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "69a171929100d9b7a19129784a2a6e7ff7f728ee",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "label10",
      "headRefOid": "2f1fe764725509e324c81efcf9e26a981a75db8a",
      "closedAt": "2016-11-23T05:26:00Z",
      "mergedAt": "2016-11-23T05:26:00Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2f561c09cbbf61d720e6c93d5105d288e4187aa6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 775,
      "id": "MDExOlB1bGxSZXF1ZXN0OTQ5NjEwODc=",
      "title": "Rewrite the anti-downgrade protection.",
      "url": "https://github.com/tlswg/tls13-spec/pull/775",
      "state": "CLOSED",
      "author": "pictyeye",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Following the mail \"[TLS] Draft 18 review: Downgrade protection\" (https://www.ietf.org/mail-archive/web/tls/current/msg21987.html), this is a proposal to amend the anti-downgrade protection when a TLS 1.3 implementation accepts to use an earlier version.",
      "createdAt": "2016-11-23T08:31:34Z",
      "updatedAt": "2016-11-29T10:28:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2f561c09cbbf61d720e6c93d5105d288e4187aa6",
      "headRepository": "pictyeye/tls13-spec",
      "headRefName": "ol-downgrade-protection",
      "headRefOid": "895e57ebae94cf96c5b765c796762a752910bc38",
      "closedAt": "2016-11-28T14:54:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand",
          "createdAt": "2016-11-28T14:54:52Z",
          "updatedAt": "2016-11-28T14:54:52Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 776,
      "id": "MDExOlB1bGxSZXF1ZXN0OTUwNDY3OTc=",
      "title": "Match \"SHOULD\" for 0-RTT special functions and expanded warning on 0-RTT data",
      "url": "https://github.com/tlswg/tls13-spec/pull/776",
      "state": "CLOSED",
      "author": "colmmacc",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "This PR includes two changes. One small:\r\n\r\nUpdate section 2.3 to use \"SHOULD\" for 0-RTT special functions. This matches the \"SHOULD\" in appendix B.1. API considerations for 0-RTT.\r\n\r\nOne big:\r\nAdd an expanded note on the care which must be taken by applications using 0-RTT data. It adds a recommendation: that applications using such data intentionally generate replays, so as to keep themselves inoculated against replayable data.\r\n",
      "createdAt": "2016-11-23T17:22:42Z",
      "updatedAt": "2017-04-16T17:20:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2f561c09cbbf61d720e6c93d5105d288e4187aa6",
      "headRepository": "colmmacc/tls13-spec",
      "headRefName": "master",
      "headRefOid": "ea2db07a2224f9ca9192a9b606d6c95fdf2c7ba4",
      "closedAt": "2017-04-16T17:20:27Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can take the first one of these, but the \"big\" change needs to go to the list.",
          "createdAt": "2016-11-23T17:32:55Z",
          "updatedAt": "2016-11-23T17:32:55Z"
        },
        {
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm writing the list e-mail now :)",
          "createdAt": "2016-11-23T17:39:48Z",
          "updatedAt": "2016-11-23T17:39:48Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks\n\nOn Wed, Nov 23, 2016 at 9:39 AM, Colm MacC\u00e1rthaigh <notifications@github.com\n\n> wrote:\n> \n> I'm writing the list e-mail now :)\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tlswg/tls13-spec/pull/776#issuecomment-262583176, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/ABD1oRgoucVxCDgWsILDkiicbtrP0g10ks5rBHplgaJpZM4K62f1\n> .\n",
          "createdAt": "2016-11-23T18:34:27Z",
          "updatedAt": "2016-11-23T18:34:27Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Wait, I thought TLS1.2 is already protecting against replay attacks\r\n\r\nYes, because TLS 1.2 does not let the client send application data in the first flight.  TLS 1.3 adds this capability, with the corresponding risk of replay.",
          "createdAt": "2016-11-28T00:02:32Z",
          "updatedAt": "2016-11-28T00:02:32Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I merged the first change. I am marking this parked because I don't see consensus for the other. @seanturner ",
          "createdAt": "2016-11-28T19:07:22Z",
          "updatedAt": "2016-11-28T19:07:22Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing post WGLC",
          "createdAt": "2017-04-16T17:20:27Z",
          "updatedAt": "2017-04-16T17:20:27Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwOTcyODI=",
          "commit": {
            "abbreviatedOid": "ea2db07"
          },
          "author": "ksophocleous",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "Wait, I thought TLS1.2 is already protecting against replay attacks",
          "createdAt": "2016-11-24T23:13:06Z",
          "updatedAt": "2016-11-24T23:13:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 777,
      "id": "MDExOlB1bGxSZXF1ZXN0OTUwOTEyNTE=",
      "title": "Add support for resumption across multiple domains",
      "url": "https://github.com/tlswg/tls13-spec/pull/777",
      "state": "CLOSED",
      "author": "vasilvv",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "This feature provides servers with ability to indicate that the\r\nsession ticket it issued may be used to resume a session with any other\r\ndomain for which the certificate is valid.  This allows performance\r\nimprovement for some important use cases, specifically particular types\r\nof CDNs and multi-homed websites.",
      "createdAt": "2016-11-23T22:44:34Z",
      "updatedAt": "2017-04-16T17:20:04Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2f561c09cbbf61d720e6c93d5105d288e4187aa6",
      "headRepository": "vasilvv/tls13-spec",
      "headRefName": "master",
      "headRefOid": "83a8b2dd832d17fac348a82fb33478acc9ffd1b3",
      "closedAt": "2017-04-16T17:20:04Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Parking based on list discussion.",
          "createdAt": "2016-11-28T18:35:31Z",
          "updatedAt": "2016-11-28T18:35:31Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "WGLC is over, so closing",
          "createdAt": "2017-04-16T17:20:04Z",
          "updatedAt": "2017-04-16T17:20:04Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 778,
      "id": "MDExOlB1bGxSZXF1ZXN0OTUyNDU2OTA=",
      "title": "obfuscated_ticket_age is part of the PSK extension",
      "url": "https://github.com/tlswg/tls13-spec/pull/778",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix incorrect suggestion that `ticket_age_add` of NST affects `early_data` extension.",
      "createdAt": "2016-11-25T03:23:49Z",
      "updatedAt": "2016-11-25T03:26:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2f561c09cbbf61d720e6c93d5105d288e4187aa6",
      "headRepository": "kazuho/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "3131997f0d2fcfd6ff581b8f22e054ce0043244a",
      "closedAt": "2016-11-25T03:25:49Z",
      "mergedAt": "2016-11-25T03:25:49Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "19942f242cf4237366ceaa628deaeb8da926d1b1"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazuho: merged. Please provide a PR adding yourself to the acknowledgements list in alphabetical order.",
          "createdAt": "2016-11-25T03:26:20Z",
          "updatedAt": "2016-11-25T03:26:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 779,
      "id": "MDExOlB1bGxSZXF1ZXN0OTUyNDYwODk=",
      "title": "add kazuho to acknowledgements",
      "url": "https://github.com/tlswg/tls13-spec/pull/779",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "as suggested in https://github.com/tlswg/tls13-spec/pull/778#issuecomment-262873982",
      "createdAt": "2016-11-25T03:31:34Z",
      "updatedAt": "2016-11-25T03:52:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "19942f242cf4237366ceaa628deaeb8da926d1b1",
      "headRepository": "kazuho/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "cca2fa2e2fd6034c3c22e4e111df81a1b786b949",
      "closedAt": "2016-11-25T03:52:15Z",
      "mergedAt": "2016-11-25T03:52:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4a3f517a84d83742e7580f9672c723e72b5c60b4"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you. Merging.",
          "createdAt": "2016-11-25T03:52:14Z",
          "updatedAt": "2016-11-25T03:52:14Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 780,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU0MTUxODY=",
      "title": "Make enum formatting consistent",
      "url": "https://github.com/tlswg/tls13-spec/pull/780",
      "state": "MERGED",
      "author": "ghedo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "...by removing space before (",
      "createdAt": "2016-11-27T20:21:25Z",
      "updatedAt": "2016-11-28T19:33:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4a3f517a84d83742e7580f9672c723e72b5c60b4",
      "headRepository": null,
      "headRefName": "enum",
      "headRefOid": "fb9c9bc94b0d1b4420fd88ceb481da2558e71f51",
      "closedAt": "2016-11-28T19:33:02Z",
      "mergedAt": "2016-11-28T19:33:02Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "39e50121440316dfe983484b9e42ff0b6aacd132"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 781,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU0MTY1MDc=",
      "title": "Slightly improve wording and fix typos in the record protocol section",
      "url": "https://github.com/tlswg/tls13-spec/pull/781",
      "state": "MERGED",
      "author": "ghedo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-11-27T21:01:25Z",
      "updatedAt": "2016-11-28T18:30:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4a3f517a84d83742e7580f9672c723e72b5c60b4",
      "headRepository": null,
      "headRefName": "grammer",
      "headRefOid": "307a10c38bbbe0657809e0792364b6c11297b5f1",
      "closedAt": "2016-11-28T18:30:15Z",
      "mergedAt": "2016-11-28T18:30:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e0ea2954a8f191610f8699f111fe6ced3cdcf960"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I forsee some merge conflicts in the future, as there's already #764 and I have plans to rototill this section a bit more than you do here.",
          "createdAt": "2016-11-28T00:50:07Z",
          "updatedAt": "2016-11-28T00:50:07Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNTE0OTE=",
          "commit": {
            "abbreviatedOid": "307a10c"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This won't conflict with #764.  Git is good at detecting identical changes.",
          "createdAt": "2016-11-28T03:32:49Z",
          "updatedAt": "2016-11-28T03:32:54Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "I think that we want to change the colon to a period instead.",
              "createdAt": "2016-11-28T03:32:49Z",
              "updatedAt": "2016-11-28T03:32:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 782,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU0MTc2MDQ=",
      "title": "Slightly improve wording and fix typo in CertificateVerify section",
      "url": "https://github.com/tlswg/tls13-spec/pull/782",
      "state": "MERGED",
      "author": "ghedo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It could be just me, but the previous wording was kind of confusing (YMMV).",
      "createdAt": "2016-11-27T21:38:16Z",
      "updatedAt": "2016-11-27T21:46:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4a3f517a84d83742e7580f9672c723e72b5c60b4",
      "headRepository": null,
      "headRefName": "cert_verify",
      "headRefOid": "2cfa8c7a0f27660efa63f0df0dc727cb29c00e29",
      "closedAt": "2016-11-27T21:46:28Z",
      "mergedAt": "2016-11-27T21:46:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "810ba8967cdef5a5dbec98cb7d07d8801a743b15"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 783,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU0MTc4MTE=",
      "title": "Clarify subject in one sentence",
      "url": "https://github.com/tlswg/tls13-spec/pull/783",
      "state": "MERGED",
      "author": "ghedo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\"Clients\" is plural, so \"It\" doesn't make sense here.",
      "createdAt": "2016-11-27T21:44:03Z",
      "updatedAt": "2016-11-27T22:10:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4a3f517a84d83742e7580f9672c723e72b5c60b4",
      "headRepository": null,
      "headRefName": "newticket",
      "headRefOid": "240c3f07bd1084b1f38a2ee708520285af820cb6",
      "closedAt": "2016-11-27T22:10:20Z",
      "mergedAt": "2016-11-27T22:10:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9d92311fbea869ee56185d6caf06fd4e337128be"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 786,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU1Njk0OTg=",
      "title": "Add myself to contributors",
      "url": "https://github.com/tlswg/tls13-spec/pull/786",
      "state": "MERGED",
      "author": "ghedo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For my tiny contributions.",
      "createdAt": "2016-11-28T20:20:34Z",
      "updatedAt": "2016-11-29T20:46:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4555da323dfcce01a32b59a5174bb6a0a1427472",
      "headRepository": null,
      "headRefName": "contrib",
      "headRefOid": "5df16ec628b5afb7cde53534448b6dcbc7975cf4",
      "closedAt": "2016-11-29T20:46:38Z",
      "mergedAt": "2016-11-29T20:46:38Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a836d47e3e0d48abed9851091e65b22bdb056bff"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 788,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU2MTE0MDU=",
      "title": "Encrypted extension refers to the table in IANA consideration.",
      "url": "https://github.com/tlswg/tls13-spec/pull/788",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This would help to understand what extensions should be encrypted.",
      "createdAt": "2016-11-29T01:43:57Z",
      "updatedAt": "2016-12-14T01:05:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4555da323dfcce01a32b59a5174bb6a0a1427472",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "table",
      "headRefOid": "2e7bfe0a3af44d7d5c5d680ca3361a6f4b235473",
      "closedAt": "2016-11-29T22:29:03Z",
      "mergedAt": "2016-11-29T22:29:03Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3e1aef8b960827ad0afd10dd0120e62323a9a5a4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 789,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU2MTIzMDk=",
      "title": "Using phrase instead of C function call.",
      "url": "https://github.com/tlswg/tls13-spec/pull/789",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It took time to understand `max(8 bytes, N_MIN)` is a C function call because this is folded in the internet-draft version and because of \"bytes\". I think that using a phrase is safer for folding.",
      "createdAt": "2016-11-29T01:53:54Z",
      "updatedAt": "2016-12-14T01:05:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4555da323dfcce01a32b59a5174bb6a0a1427472",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "max",
      "headRefOid": "b6dfc8d75a76f53a13739cf257212e86e0c23a50",
      "closedAt": "2016-11-29T22:31:14Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, it would also have been less confusing if the closing parenthesis was moved to the right place, after \"for the AEAD algorithm\"",
          "createdAt": "2016-11-29T02:10:31Z",
          "updatedAt": "2016-11-29T02:10:31Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I find and easier.",
          "createdAt": "2016-11-29T22:31:14Z",
          "updatedAt": "2016-11-29T22:31:14Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA0NjA1NjU=",
          "commit": {
            "abbreviatedOid": "b6dfc8d"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-29T02:54:23Z",
          "updatedAt": "2016-11-29T02:54:23Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "nit: I think \"and\" is grammatically correct, but I would change it to \"or\".",
              "createdAt": "2016-11-29T02:54:23Z",
              "updatedAt": "2016-11-29T02:54:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA0NjU4ODQ=",
          "commit": {
            "abbreviatedOid": "b6dfc8d"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-29T04:13:00Z",
          "updatedAt": "2016-11-29T04:13:00Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I would like to accept opinions from English native speakers since my first language is Japanese. I cannot tell the difference.",
              "createdAt": "2016-11-29T04:13:00Z",
              "updatedAt": "2016-11-29T04:13:00Z"
            }
          ]
        }
      ]
    },
    {
      "number": 790,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU3NzA3MjI=",
      "title": "The table of where extensions could appear was getting unweildy and",
      "url": "https://github.com/tlswg/tls13-spec/pull/790",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "was going to get even more so when I added CertificateRequest. I've\r\nchanged it to be a list of messages.",
      "createdAt": "2016-11-29T20:38:39Z",
      "updatedAt": "2016-11-29T22:44:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4555da323dfcce01a32b59a5174bb6a0a1427472",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "fix_ext_table",
      "headRefOid": "5532989450649d51c5d2ff47e7e510c90f8fce77",
      "closedAt": "2016-11-29T22:44:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This shouldn't be a semantic change. @martinthomson can I get a quick once-over",
          "createdAt": "2016-11-29T20:40:13Z",
          "updatedAt": "2016-11-29T20:40:13Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1\r\nI verified that the semantics are the same.",
          "createdAt": "2016-11-29T22:21:45Z",
          "updatedAt": "2016-11-29T22:21:45Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 791,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU3ODc1ODk=",
      "title": "Issue760 certificate request extensions",
      "url": "https://github.com/tlswg/tls13-spec/pull/791",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-11-29T22:17:21Z",
      "updatedAt": "2016-12-12T20:10:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a836d47e3e0d48abed9851091e65b22bdb056bff",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue760_certificate_request_extensions",
      "headRefOid": "ada2b37b6e57df1568571e6385b97a5c295fbff0",
      "closedAt": "2016-12-12T20:09:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think if we are going to have rules we need a table. Merged.",
          "createdAt": "2016-11-29T22:43:22Z",
          "updatedAt": "2016-11-29T22:43:22Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I take it from the editorialish comments that people are generally happy with the substance?",
          "createdAt": "2016-11-29T23:29:06Z",
          "updatedAt": "2016-11-29T23:29:06Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I take it from the editorialish comments that people are generally happy with the substance?\r\n\r\nGenerally, yes.",
          "createdAt": "2016-11-29T23:33:13Z",
          "updatedAt": "2016-11-29T23:33:13Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, I should have approved.",
          "createdAt": "2016-11-29T23:41:38Z",
          "updatedAt": "2016-11-29T23:41:38Z"
        },
        {
          "author": "Andrei-Popov",
          "authorAssociation": "NONE",
          "body": "Overall, I think this can be made to work, but the complexity of TLS 1.3 extensions (which can appear in a variety of messages) is going to make them a pain to implement (even more so than in TLS 1.2).",
          "createdAt": "2016-12-01T19:29:49Z",
          "updatedAt": "2016-12-01T19:29:49Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand",
          "createdAt": "2016-12-12T20:09:52Z",
          "updatedAt": "2016-12-12T20:10:01Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA2NTUxNzY=",
          "commit": {
            "abbreviatedOid": "ada2b37"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-29T22:35:11Z",
          "updatedAt": "2016-11-29T22:35:11Z",
          "comments": [
            {
              "originalPosition": 188,
              "body": "Minor typos:\r\n\r\n\"(Certificate,\" => \"(Certificate),\"\r\n\"HElloRetryRequest\" => \"HelloRetryRequest\"\r\n\").This column\" => \"). This column\"\r\n\"TK (Ticket)\" => \"NST (NewSessionTicket)\"?\r\n\r\n(I do kind of wonder if this table is more trouble than is worth it, but I suppose this works.)",
              "createdAt": "2016-11-29T22:35:11Z",
              "updatedAt": "2016-11-29T22:35:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA2NTg1OTU=",
          "commit": {
            "abbreviatedOid": "ada2b37"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-29T22:56:31Z",
          "updatedAt": "2016-11-29T23:05:10Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "cookie?",
              "createdAt": "2016-11-29T22:56:31Z",
              "updatedAt": "2016-11-29T23:05:10Z"
            },
            {
              "originalPosition": 26,
              "body": "I would split the paragraph before \"Implementations\"",
              "createdAt": "2016-11-29T22:57:03Z",
              "updatedAt": "2016-11-29T23:05:10Z"
            },
            {
              "originalPosition": 58,
              "body": "CertificateAuthoritiesExtension",
              "createdAt": "2016-11-29T22:57:35Z",
              "updatedAt": "2016-11-29T23:05:10Z"
            },
            {
              "originalPosition": 71,
              "body": "MAY?",
              "createdAt": "2016-11-29T22:58:47Z",
              "updatedAt": "2016-11-29T23:05:10Z"
            },
            {
              "originalPosition": 79,
              "body": "s/somewhat//",
              "createdAt": "2016-11-29T22:59:29Z",
              "updatedAt": "2016-11-29T23:05:10Z"
            },
            {
              "originalPosition": 143,
              "body": "I'm having trouble following the structure, so it might be implied, but you should describe where this can appear.  (Not the ClientHello, I hope).",
              "createdAt": "2016-11-29T23:01:23Z",
              "updatedAt": "2016-11-29T23:05:10Z"
            },
            {
              "originalPosition": 188,
              "body": "It's a pain to maintain, but it will be useful for implementations.",
              "createdAt": "2016-11-29T23:02:14Z",
              "updatedAt": "2016-11-29T23:05:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA2NjI1MTA=",
          "commit": {
            "abbreviatedOid": "ada2b37"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-29T23:24:18Z",
          "updatedAt": "2016-11-29T23:24:18Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Oh, thanks.",
              "createdAt": "2016-11-29T23:24:18Z",
              "updatedAt": "2016-11-29T23:24:18Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA2NjIyOTg=",
          "commit": {
            "abbreviatedOid": "ada2b37"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-29T23:22:49Z",
          "updatedAt": "2016-11-29T23:25:23Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "I would s/may/can/ and maybe add \"either\" after \"specify\".",
              "createdAt": "2016-11-29T23:22:49Z",
              "updatedAt": "2016-11-29T23:25:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA2Nzk4NjA=",
          "commit": {
            "abbreviatedOid": "ada2b37"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-30T02:03:41Z",
          "updatedAt": "2016-11-30T02:08:32Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "lose the parens, this is not a side statement but is important.",
              "createdAt": "2016-11-30T02:03:41Z",
              "updatedAt": "2016-11-30T02:08:32Z"
            },
            {
              "originalPosition": 21,
              "body": "if you quote \"request\" above, quote \"response\" here.",
              "createdAt": "2016-11-30T02:03:57Z",
              "updatedAt": "2016-11-30T02:08:32Z"
            },
            {
              "originalPosition": 71,
              "body": "strike \"may\" completely.\r\n",
              "createdAt": "2016-11-30T02:05:42Z",
              "updatedAt": "2016-11-30T02:08:32Z"
            },
            {
              "originalPosition": 80,
              "body": "is that a may or a MUST NOT ?",
              "createdAt": "2016-11-30T02:06:04Z",
              "updatedAt": "2016-11-30T02:08:32Z"
            },
            {
              "originalPosition": 21,
              "body": "I find the construct \"request\" extension and \"response\" extension awkward.  How about extension request and extension reponse, and if an extension is only a signalling thing, then just plain extzension.",
              "createdAt": "2016-11-30T02:08:29Z",
              "updatedAt": "2016-11-30T02:08:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA4MDgzMjA=",
          "commit": {
            "abbreviatedOid": "ada2b37"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-30T17:43:46Z",
          "updatedAt": "2016-11-30T17:43:46Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "The server can send it in CertificateRequest so the client can pick a cert to send back?\r\n(But I'm not sure I'm answering the right question.)",
              "createdAt": "2016-11-30T17:43:46Z",
              "updatedAt": "2016-11-30T17:43:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1Mzc4NzQ=",
          "commit": {
            "abbreviatedOid": "ada2b37"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-12T20:04:42Z",
          "updatedAt": "2016-12-12T20:04:42Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "Clarified",
              "createdAt": "2016-12-12T20:04:42Z",
              "updatedAt": "2016-12-12T20:04:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1MzgyMDk=",
          "commit": {
            "abbreviatedOid": "ada2b37"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-12T20:06:26Z",
          "updatedAt": "2016-12-12T20:06:26Z",
          "comments": [
            {
              "originalPosition": 188,
              "body": "Fixed elsewhere.",
              "createdAt": "2016-12-12T20:06:26Z",
              "updatedAt": "2016-12-12T20:06:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 792,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU3ODc3NTk=",
      "title": "Affiliation update for B.",
      "url": "https://github.com/tlswg/tls13-spec/pull/792",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-11-29T22:18:26Z",
      "updatedAt": "2016-11-29T22:28:36Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a836d47e3e0d48abed9851091e65b22bdb056bff",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "master",
      "headRefOid": "3244a23daed1dc5f89b5cb674567dea8cb022ef2",
      "closedAt": "2016-11-29T22:28:36Z",
      "mergedAt": "2016-11-29T22:28:36Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a035ea62ccef2634bbefab1458d9f1ab9d4f9ca1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 793,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU3OTYxMjM=",
      "title": "Update .travis.yml",
      "url": "https://github.com/tlswg/tls13-spec/pull/793",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think that this will work, maybe wait for travis to finish before merging it.  That won't be definitive, because the error you are having is in the push phase, and I can't push.",
      "createdAt": "2016-11-29T23:15:14Z",
      "updatedAt": "2016-11-30T14:04:59Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "05ab5dd43a0b3a71bbca1e74d4f9d1ec9e004112",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "travis_fix",
      "headRefOid": "fed35784613e650b5e80902177248334d5e8d59b",
      "closedAt": "2016-11-30T14:04:59Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I took a more minimal PR",
          "createdAt": "2016-11-30T14:04:59Z",
          "updatedAt": "2016-11-30T14:04:59Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 794,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU3OTY4MTA=",
      "title": "Text for automatic replay",
      "url": "https://github.com/tlswg/tls13-spec/pull/794",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #766",
      "createdAt": "2016-11-29T23:20:30Z",
      "updatedAt": "2016-11-29T23:22:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "05ab5dd43a0b3a71bbca1e74d4f9d1ec9e004112",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "auto_replay",
      "headRefOid": "ddeda0e4f38adfe75002779eb97e179c03c991c6",
      "closedAt": "2016-11-29T23:22:20Z",
      "mergedAt": "2016-11-29T23:22:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "50418b3c2dfbdce44a103575cdf1005adcd2ca0c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 795,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU3OTY4NTM=",
      "title": "Trailing whitespace",
      "url": "https://github.com/tlswg/tls13-spec/pull/795",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-11-29T23:20:46Z",
      "updatedAt": "2016-11-29T23:23:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "05ab5dd43a0b3a71bbca1e74d4f9d1ec9e004112",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "ws",
      "headRefOid": "0fcafce862ab26acb2e948dd548138f154ccc147",
      "closedAt": "2016-11-29T23:23:15Z",
      "mergedAt": "2016-11-29T23:23:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "07acf2bb3d75619311a02f018b5ae139bb01ae35"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 797,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU4NDE4OTk=",
      "title": "PSK wordings",
      "url": "https://github.com/tlswg/tls13-spec/pull/797",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I feel that wordings relating to PSK are confusing.\r\nI need to guess which words are the same meaning of which words.\r\nThis patches make PSK wordings consistent.\r\nI hope that the draft would be much easier to read.",
      "createdAt": "2016-11-30T07:41:22Z",
      "updatedAt": "2016-12-14T01:05:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "07acf2bb3d75619311a02f018b5ae139bb01ae35",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "psk",
      "headRefOid": "3984b9ae3fbe0edca5a0bb27b5d66e0d532e3523",
      "closedAt": "2016-11-30T15:07:05Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 798,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU4NTUwOTk=",
      "title": "Rewrite the introduction of the Record Layer section.",
      "url": "https://github.com/tlswg/tls13-spec/pull/798",
      "state": "CLOSED",
      "author": "pictyeye",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "As proposed on the mailing list, I propose some rewrites of the rules regarding record splitting/coalescing/merging. Some text has been moved (and more could be). The idea is to get all the relevant information in the same place.\r\n\r\nI did not add constraints on HS splitting/merging (beyond those currently in place).",
      "createdAt": "2016-11-30T09:27:55Z",
      "updatedAt": "2016-12-12T22:21:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "07acf2bb3d75619311a02f018b5ae139bb01ae35",
      "headRepository": "pictyeye/tls13-spec",
      "headRefName": "ol-record-rules",
      "headRefOid": "1b0debb74133cda12a0cbd20d8ac639f278734e9",
      "closedAt": "2016-12-12T22:21:15Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I merged this and made some editorial revisions. @ol-anssi please provide a PR to add yourself to the contributors list.",
          "createdAt": "2016-12-12T22:21:15Z",
          "updatedAt": "2016-12-12T22:21:15Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA3MTgxMjU=",
          "commit": {
            "abbreviatedOid": "1b0debb"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2016-11-30T09:36:35Z",
          "updatedAt": "2016-11-30T09:44:22Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "This is a non-sentence.  You could stop after ContentType.",
              "createdAt": "2016-11-30T09:36:35Z",
              "updatedAt": "2016-11-30T09:44:22Z"
            },
            {
              "originalPosition": 39,
              "body": "\"types\" plural.",
              "createdAt": "2016-11-30T09:37:27Z",
              "updatedAt": "2016-11-30T09:44:22Z"
            },
            {
              "originalPosition": 43,
              "body": "not your text: but application data is transparent to TLS",
              "createdAt": "2016-11-30T09:38:23Z",
              "updatedAt": "2016-11-30T09:44:22Z"
            },
            {
              "originalPosition": 47,
              "body": "larger than a single record (drop content)",
              "createdAt": "2016-11-30T09:39:02Z",
              "updatedAt": "2016-11-30T09:44:22Z"
            },
            {
              "originalPosition": 48,
              "body": "delete \"Moreover\"",
              "createdAt": "2016-11-30T09:39:14Z",
              "updatedAt": "2016-11-30T09:44:22Z"
            },
            {
              "originalPosition": 62,
              "body": "Don't instruct the RFC editor here, just make the change you think best.  FWIW, it is good to repeat this here.",
              "createdAt": "2016-11-30T09:40:17Z",
              "updatedAt": "2016-11-30T09:44:22Z"
            },
            {
              "originalPosition": 42,
              "body": "I don't know where *below* is now.  I think that you could state this more succinctly.\r\n\r\n> Application Data messages contain data that is opaque to TLS.  Application Data messages are always protected.  Zero-length fragments of Application Data MAY [...]",
              "createdAt": "2016-11-30T09:44:18Z",
              "updatedAt": "2016-11-30T09:44:22Z"
            }
          ]
        }
      ]
    },
    {
      "number": 799,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU4OTYzNTY=",
      "title": "Update distribution",
      "url": "https://github.com/tlswg/tls13-spec/pull/799",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-11-30T14:00:47Z",
      "updatedAt": "2016-11-30T14:04:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "07acf2bb3d75619311a02f018b5ae139bb01ae35",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "fix_build",
      "headRefOid": "801cfc5f2a1162cc4a6314ef06bb8426b6b98bd5",
      "closedAt": "2016-11-30T14:04:45Z",
      "mergedAt": "2016-11-30T14:04:45Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ec1057fac1f00178095f6104a49139fd18285ded"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 800,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU5MDMwMjc=",
      "title": "Clarify the supported_versions text as discussed in Seoul. This doesn't",
      "url": "https://github.com/tlswg/tls13-spec/pull/800",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "reflect any normative behavioral change in the negotiation mechanism,\r\nthough we do now recommend that people offer at least TLS 1.2.",
      "createdAt": "2016-11-30T14:38:23Z",
      "updatedAt": "2016-12-12T19:10:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ec1057fac1f00178095f6104a49139fd18285ded",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue748_supported_versions",
      "headRefOid": "8b634111623de617631e3a265c06e996109f99f7",
      "closedAt": "2016-12-12T19:10:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA4MTY4Njc=",
          "commit": {
            "abbreviatedOid": "8b63411"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-11-30T18:27:08Z",
          "updatedAt": "2016-11-30T18:27:08Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "What does \"at least\" mean, here (given the prior of supporting versions prior to 1.3)?\r\nMaybe it is better to say that implementations supporting prior versions SHOULD support 1.2, or say nothing at all.",
              "createdAt": "2016-11-30T18:27:08Z",
              "updatedAt": "2016-11-30T18:27:08Z"
            }
          ]
        }
      ]
    },
    {
      "number": 801,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU5NjU0MDk=",
      "title": "HElloRetryRequest -> HelloRetryRequest",
      "url": "https://github.com/tlswg/tls13-spec/pull/801",
      "state": "MERGED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-11-30T20:15:57Z",
      "updatedAt": "2016-11-30T20:26:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e15aa4b5b6d453eb789d27ed4fd6fffa245ce191",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "134cfd3184d531d029466b6618908dcc5ffe5228",
      "closedAt": "2016-11-30T20:26:50Z",
      "mergedAt": "2016-11-30T20:26:50Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d8a56820ec543ecf540029bcead34543cce7638d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 802,
      "id": "MDExOlB1bGxSZXF1ZXN0OTYwMTMzNjM=",
      "title": "\"PSK idenitity\" is the word used throughout the spec.",
      "url": "https://github.com/tlswg/tls13-spec/pull/802",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-12-01T02:08:35Z",
      "updatedAt": "2016-12-01T03:38:53Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d8a56820ec543ecf540029bcead34543cce7638d",
      "headRepository": "kazuho/tls13-spec",
      "headRefName": "patch-3",
      "headRefOid": "b6beb2342333f27e3d5a5e7c5f1616add412acfe",
      "closedAt": "2016-12-01T03:38:53Z",
      "mergedAt": "2016-12-01T03:38:53Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "80707fbea996938d860f9a070a62731555e34118"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 803,
      "id": "MDExOlB1bGxSZXF1ZXN0OTYwMTM1MDc=",
      "title": "Adding a missing description for \"identity\".",
      "url": "https://github.com/tlswg/tls13-spec/pull/803",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think this explanation is missing.",
      "createdAt": "2016-12-01T02:10:12Z",
      "updatedAt": "2016-12-14T01:04:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d8a56820ec543ecf540029bcead34543cce7638d",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "identity",
      "headRefOid": "a3a5a87dc0436441b062ab91531b25906834a6d9",
      "closedAt": "2016-12-12T19:07:41Z",
      "mergedAt": "2016-12-12T19:07:41Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3fafc6b75e6a2e4aca7c767ebe21827bd7633526"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 804,
      "id": "MDExOlB1bGxSZXF1ZXN0OTYxNTM3MDE=",
      "title": "random values are not used anymore in the cryptographic computations",
      "url": "https://github.com/tlswg/tls13-spec/pull/804",
      "state": "CLOSED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-12-01T19:27:31Z",
      "updatedAt": "2016-12-05T17:13:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "80707fbea996938d860f9a070a62731555e34118",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "6d22ca23892ca9c6bf4d88b5adea446bd5aa250a",
      "closedAt": "2016-12-01T19:57:51Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "They absolutely are used. You just hash in the whole transcript.",
          "createdAt": "2016-12-01T19:57:51Z",
          "updatedAt": "2016-12-01T19:57:51Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This paragraph is I believe only talking about the derivation of keys. In that sense the random values are not used anymore to form the \"pre master secret\" like they used to.\r\n\r\nIf you want to talk about signing the whole transcript, then you need the whole transcript not just the knowledge of the random values.\r\n\r\nUnless I'm missing something?",
          "createdAt": "2016-12-01T22:08:57Z",
          "updatedAt": "2016-12-01T22:08:57Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, the whole transcript is needed as well as the master secret, as inputs to Derive-Secret().  So this text should probably change, but not as the current form of this diff.",
          "createdAt": "2016-12-05T17:13:27Z",
          "updatedAt": "2016-12-05T17:13:27Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 805,
      "id": "MDExOlB1bGxSZXF1ZXN0OTYyMjM0MjQ=",
      "title": "Using Value instead of HashValue.",
      "url": "https://github.com/tlswg/tls13-spec/pull/805",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "HashValue is confusing because this argument is not\r\nalways a hash value. For instance, \"\" is used sometime.",
      "createdAt": "2016-12-02T05:19:50Z",
      "updatedAt": "2016-12-14T01:04:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "80707fbea996938d860f9a070a62731555e34118",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "value",
      "headRefOid": "95f2da4446c29b4020a8e4b05ba724c3df9f0aa0",
      "closedAt": "2016-12-12T19:03:51Z",
      "mergedAt": "2016-12-12T19:03:51Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "8a98173035045ffd7fbd65f24d9b8482003fb80f"
      },
      "comments": [
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Instead of this patch, adding a comment that \"\" is an empty hash value is also fine to me.",
          "createdAt": "2016-12-02T13:31:36Z",
          "updatedAt": "2016-12-02T13:31:36Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTExMjA3OTU=",
          "commit": {
            "abbreviatedOid": "95f2da4"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I don't like this.  An empty value meaning \"absent\" is fine.",
          "createdAt": "2016-12-02T08:24:26Z",
          "updatedAt": "2016-12-02T08:24:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 806,
      "id": "MDExOlB1bGxSZXF1ZXN0OTYzMjg5MjY=",
      "title": "Align end_of_early_data text and diagram with processing order.",
      "url": "https://github.com/tlswg/tls13-spec/pull/806",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The alert is described as being part of the first flight, but it is\r\nreally sent when the server Finished is received, per the processing\r\norder section. Notably, servers MUST NOT wait for end_of_early_data\r\nbefore sending ServerHello through Finished. Group it with the client\r\nFinished flight, and fix the text about it terminating the first flight.\r\n\r\n(The division between the first and second client flight isn't\r\nespecially well-defined because early data may flow in parallel with the\r\nServerHello flight. But if there is to be a division, end_of_early_data\r\ncertainly falls into the second one.)",
      "createdAt": "2016-12-02T18:28:24Z",
      "updatedAt": "2016-12-12T19:01:46Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "80707fbea996938d860f9a070a62731555e34118",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "end-of-early-data-clarify",
      "headRefOid": "31f836238e5968a85c9e4d64d8ab23c0bbed8061",
      "closedAt": "2016-12-12T19:01:46Z",
      "mergedAt": "2016-12-12T19:01:46Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "469bc06c72509b541f6f503182fca338d18bd853"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, this should help avoid one of the most common mistakes in 0-RTT implementations.",
          "createdAt": "2016-12-02T22:07:11Z",
          "updatedAt": "2016-12-02T22:07:11Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE0MzI2ODA=",
          "commit": {
            "abbreviatedOid": "31f8362"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "LGTM.",
          "createdAt": "2016-12-05T17:54:55Z",
          "updatedAt": "2016-12-05T17:55:57Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I thought I had seen ekr move the arrows onto their own line in order to make subsequent diffs less noisy, but it probably doesn't matter at this point.",
              "createdAt": "2016-12-05T17:54:55Z",
              "updatedAt": "2016-12-05T17:55:57Z"
            }
          ]
        }
      ]
    },
    {
      "number": 807,
      "id": "MDExOlB1bGxSZXF1ZXN0OTY3NzQ2NTA=",
      "title": "Clarify authentication message language.",
      "url": "https://github.com/tlswg/tls13-spec/pull/807",
      "state": "MERGED",
      "author": "knekritz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The handshake context here is just the transcript of the handshake messages, not the hash of the transcript. The language makes it seem like the authentication messages are Hash(Hash(handshake messages) + Certificate), etc.",
      "createdAt": "2016-12-06T18:00:26Z",
      "updatedAt": "2016-12-06T18:12:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "80707fbea996938d860f9a070a62731555e34118",
      "headRepository": "knekritz/tls13-spec",
      "headRefName": "hash",
      "headRefOid": "71b0c57186a67b9a3f3c2bc25c969477fcd88531",
      "closedAt": "2016-12-06T18:12:27Z",
      "mergedAt": "2016-12-06T18:12:27Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "0355ec431e706704d253afd5153c64a00eb327c5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 808,
      "id": "MDExOlB1bGxSZXF1ZXN0OTY4NDk2NDQ=",
      "title": "CloudFlare -> Cloudflare",
      "url": "https://github.com/tlswg/tls13-spec/pull/808",
      "state": "MERGED",
      "author": "grittygrease",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "De-camelize Cloudflare in acknowledgements.",
      "createdAt": "2016-12-07T02:53:37Z",
      "updatedAt": "2016-12-07T14:41:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0355ec431e706704d253afd5153c64a00eb327c5",
      "headRepository": "grittygrease/tls13-spec",
      "headRefName": "nick/Ftof",
      "headRefOid": "ddff2f977037df0e1316fce7a5f4882497449750",
      "closedAt": "2016-12-07T14:41:29Z",
      "mergedAt": "2016-12-07T14:41:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e01f44c9cd6ebe8b1c34005dd633199c2804f984"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 809,
      "id": "MDExOlB1bGxSZXF1ZXN0OTY5ODQyNDA=",
      "title": "better introduction to the Cryptographic Computations section",
      "url": "https://github.com/tlswg/tls13-spec/pull/809",
      "state": "CLOSED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Another try to this PR: https://github.com/tlswg/tls13-spec/pull/804\r\n\r\nThis time it should be more representative of the whole section.",
      "createdAt": "2016-12-07T18:51:35Z",
      "updatedAt": "2016-12-13T04:47:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e01f44c9cd6ebe8b1c34005dd633199c2804f984",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "27b86718bff098ca5a4fc3df46d85adf1fb3fa5c",
      "closedAt": "2016-12-12T19:29:30Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Added the change",
          "createdAt": "2016-12-07T22:56:47Z",
          "updatedAt": "2016-12-07T22:56:47Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I rewrote this in a somewhat different fashion",
          "createdAt": "2016-12-12T19:29:30Z",
          "updatedAt": "2016-12-12T19:29:30Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "this is what I see, I think there is a typo:\r\n\r\n> as is the case when +the same PSK is used",
          "createdAt": "2016-12-13T04:47:13Z",
          "updatedAt": "2016-12-13T04:47:13Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE4NzEzNTA=",
          "commit": {
            "abbreviatedOid": "c1d1d95"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-07T18:59:01Z",
          "updatedAt": "2016-12-07T18:59:01Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I would prefer \"at least one of a pre-shared secret and the output of an (EC)DHE key exchange\", since they are only optional if the other one is present.",
              "createdAt": "2016-12-07T18:59:01Z",
              "updatedAt": "2016-12-07T19:18:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE4NzQ0MDg=",
          "commit": {
            "abbreviatedOid": "c1d1d95"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-07T19:14:41Z",
          "updatedAt": "2016-12-07T19:14:41Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "agree",
              "createdAt": "2016-12-07T19:14:41Z",
              "updatedAt": "2016-12-07T19:18:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 810,
      "id": "MDExOlB1bGxSZXF1ZXN0OTc2NTA0MjM=",
      "title": "Editorial (mostly)",
      "url": "https://github.com/tlswg/tls13-spec/pull/810",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Same deal as #756 , more commits may get added as they are ready, but I wanted to get this up so I can avoid having to deal with merge conflicts to the extent possible.\r\n\r\nSome possibly controversial bits are broken out as separate commits.",
      "createdAt": "2016-12-12T22:45:45Z",
      "updatedAt": "2016-12-17T23:52:52Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "92d7018e8fd4b58456ff8bb0e0ac465f75f00fd3",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "master",
      "headRefOid": "63c1d5e0e261d1c037e547c917d14a5fb7062356",
      "closedAt": "2016-12-17T22:40:30Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Okay, that should be all the bits for this pull request.  I skipped a few things from my paper notes that require more research, but those can go into a separate pull request (as can the item or two that I promised in my WGLC feedback).",
          "createdAt": "2016-12-14T01:47:12Z",
          "updatedAt": "2016-12-14T01:47:12Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand.",
          "createdAt": "2016-12-17T22:40:30Z",
          "updatedAt": "2016-12-17T22:40:30Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1Njg3NTY=",
          "commit": {
            "abbreviatedOid": "b0d50d5"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-12T22:46:21Z",
          "updatedAt": "2016-12-12T22:46:21Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "I did not go through and calculate the actual minimum, but I'm pretty sure you need to send at least one extension in the ServerHello.",
              "createdAt": "2016-12-12T22:46:21Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1NzM1OTg=",
          "commit": {
            "abbreviatedOid": "b0d50d5"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-12T23:16:24Z",
          "updatedAt": "2016-12-12T23:16:24Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "Well, you need the minimum to be at least 4 to account for the extension ID and length.\r\n\r\nAnd I think that it is 4.  One of key_share or pre_shared_key is needed.",
              "createdAt": "2016-12-12T23:16:24Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1NzM4ODY=",
          "commit": {
            "abbreviatedOid": "b0d50d5"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-12T23:18:16Z",
          "updatedAt": "2016-12-12T23:23:52Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I considered doing this to legacy_session_id as well, but the understanding is that you might generate a TLS 1.3 ClientHello when resuming a TLS 1.2 sesssion.",
              "createdAt": "2016-12-12T23:18:16Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 21,
              "body": "who must?  TLS 1.3 clients MUST send a field that corresponds to the \"null\" compression method in older versions of TLS (that is, a vector containing a single zero octet: 0x0100).",
              "createdAt": "2016-12-12T23:19:46Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 45,
              "body": "may or MAY or could",
              "createdAt": "2016-12-12T23:20:13Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 74,
              "body": "or groups I think, and what about PSK?",
              "createdAt": "2016-12-12T23:20:50Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 84,
              "body": "SHOULD?",
              "createdAt": "2016-12-12T23:21:30Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 93,
              "body": "s/may/can/",
              "createdAt": "2016-12-12T23:21:55Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 111,
              "body": "I'd drop the \"as well as clause\"",
              "createdAt": "2016-12-12T23:22:29Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 171,
              "body": "You should probably put this in a separate PR, it's fairly uncontroversial, whereas the other changes are significant.",
              "createdAt": "2016-12-12T23:23:44Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1NzYwMzc=",
          "commit": {
            "abbreviatedOid": "b0d50d5"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-12T23:33:33Z",
          "updatedAt": "2016-12-12T23:41:40Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Just to clarify: we cannot do this for legacy_session_id because of the stated case, but it is okay for legacy_compression_methods?  (If you send a 1.3 CH, we say these bytes MUST be exactly as listed.)",
              "createdAt": "2016-12-12T23:33:33Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 21,
              "body": "sure.",
              "createdAt": "2016-12-12T23:34:22Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 45,
              "body": "Hmm, I might go with \"might\" or \"can\" over any of those.",
              "createdAt": "2016-12-12T23:35:26Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 56,
              "body": "The server's pre_shared_key is a uint16 selected_identity, which would make it 6.\r\n(KeyShareEntry has a NamedGroup and a non-empty key_exchange).",
              "createdAt": "2016-12-12T23:38:21Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 74,
              "body": "This was just to match with L1695-1696 (new) which uses parallel wording.",
              "createdAt": "2016-12-12T23:38:59Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 84,
              "body": "It's not related to interoperability, just best practice.  But I would not oppose SHOULD if there is desire to do that.",
              "createdAt": "2016-12-12T23:39:39Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 93,
              "body": "okay.\r\n(I originally noted this spot on my printout because I had it in my head that it only applied to the TLS protocol structures, but the following text seemed to make it apply to certificates as well.)",
              "createdAt": "2016-12-12T23:40:28Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 111,
              "body": "Okay.  (The main point here is that the codepoints have different types in 1.2 and 1.3.)",
              "createdAt": "2016-12-12T23:40:53Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 171,
              "body": "No harm in splitting it off, I suppose.",
              "createdAt": "2016-12-12T23:41:34Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1ODEzODU=",
          "commit": {
            "abbreviatedOid": "b0d50d5"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T00:15:12Z",
          "updatedAt": "2016-12-13T00:15:12Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I wonder why we don't make this uint16 at the same time (same goes for CipherSuite).",
              "createdAt": "2016-12-13T00:15:12Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1ODE2ODM=",
          "commit": {
            "abbreviatedOid": "d614d8a"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T00:17:28Z",
          "updatedAt": "2016-12-13T00:17:28Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "I think that we can use uppercase here: it's a security requirement and we use normative language for that all the time.  In any case, I was just reminding you that using should/must/may is confusing.",
              "createdAt": "2016-12-13T00:17:28Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1ODM3NDU=",
          "commit": {
            "abbreviatedOid": "b0d50d5"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T00:34:00Z",
          "updatedAt": "2016-12-13T00:34:00Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "legacy_compression_methods as opaque[2] feels more natural than uint16 to me, as it's just hardcoding the encoding of a specific vector; it's not really a two-byte integer or constant.  (Well, it is a two-byte constant, but that's \"coincidence\".)  For CipherSuite it seems to make sense, though.",
              "createdAt": "2016-12-13T00:34:00Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1ODQ3MTc=",
          "commit": {
            "abbreviatedOid": "b0d50d5"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T00:43:19Z",
          "updatedAt": "2016-12-13T00:43:19Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "switched to the majuscule in my local copy.",
              "createdAt": "2016-12-13T00:43:19Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI4NTM1NDQ=",
          "commit": {
            "abbreviatedOid": "44035cc"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-14T08:27:16Z",
          "updatedAt": "2016-12-14T08:41:02Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "The grammar here is unnecessarily complex, and could be confusing. I suggest simply \"In TLS 1.3, use of certain extensions is mandatory, ...\".",
              "createdAt": "2016-12-14T08:27:17Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 34,
              "body": "nit: suggest \"previous versions of TLS\"",
              "createdAt": "2016-12-14T08:27:47Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 64,
              "body": "please linkify the reference: \"{{RFC5246}}\" instead of just \"RFC 5246\"",
              "createdAt": "2016-12-14T08:29:26Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 125,
              "body": "I think changing this to hex here is counter productive. Likewise for the next block.",
              "createdAt": "2016-12-14T08:31:00Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 482,
              "body": "I don't see a need to remove this.",
              "createdAt": "2016-12-14T08:34:44Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 669,
              "body": "nit: if capitalizing \"an\", then this parenthetical sentence should also end with a period",
              "createdAt": "2016-12-14T08:36:29Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 768,
              "body": "nit: SSL2 should be before SSL3; if you're moving this around, just stick it after the SSL2 bit below.\r\n\r\nAlternatively, we could just merge them to simplify things a little bit:\r\n\"The security of both SSL 2.0 {{SSL2}} and SSL 3.0 {{SSL3}} are considered insufficient for the reasons enumerated in {{RFC6176}} and {{RFC7568}}, and MUST NOT be negotiated for any reason.\"",
              "createdAt": "2016-12-14T08:38:44Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5NDg5NDU=",
          "commit": {
            "abbreviatedOid": "44035cc"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Inline responses to @davegarrett comments",
          "createdAt": "2016-12-14T16:38:24Z",
          "updatedAt": "2016-12-14T16:46:10Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "sure",
              "createdAt": "2016-12-14T16:38:24Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 64,
              "body": "I waffled a bit about linkifying, but I guess it does make more sense to do so than not.",
              "createdAt": "2016-12-14T16:39:04Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 125,
              "body": "There are all uint16s, and should be presented in a consistent style to be consistent with them being part of the same enumerated type, IMO.",
              "createdAt": "2016-12-14T16:41:34Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 482,
              "body": "The argument is roughly: if we leave it in, a TLS 1.3 server is justified in enforcing the literal bytes and throwing a decode_error if they don't match.  But that means that it will choke hard on (e.g.) certain TLS 1.1 ClientHellos, when it should really be sending an abort noting that the versions don't match (as appropriate).  At least EKR and davidben were in support of the position that you should not be checking these bytes prior to encryption.",
              "createdAt": "2016-12-14T16:43:47Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 669,
              "body": "Indeed; not  sure how I missed that.",
              "createdAt": "2016-12-14T16:44:12Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            },
            {
              "originalPosition": 768,
              "body": "As I noted in the commit message, the point of the move was to bring sslv2 and sslv3 together while keeping sslv2 and v2-compatible ClientHellos together.  I'm somewhat supportive of combining them, but I think I'll leave it as-is for now and let the editor exercise editorial discretion.",
              "createdAt": "2016-12-14T16:45:42Z",
              "updatedAt": "2016-12-14T16:46:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5NTUxNTQ=",
          "commit": {
            "abbreviatedOid": "44035cc"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-14T17:02:44Z",
          "updatedAt": "2016-12-14T17:02:44Z",
          "comments": [
            {
              "originalPosition": 482,
              "body": "If we believe including a value means the receiver is justified in enforcing it (section 3.7 doesn't say much, but I think I agree that's the more natural read), `ClientHello.legacy_version` probably should get the same treatment. It's a little awkward because these two are places where senders always send one value, but receivers must tolerate others.\r\n\r\n(And, yeah, enforcing the record-layer version prior to encryption is fraught with peril..)",
              "createdAt": "2016-12-14T17:02:44Z",
              "updatedAt": "2016-12-14T17:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxMTM4MDA=",
          "commit": {
            "abbreviatedOid": "63c1d5e"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T12:00:25Z",
          "updatedAt": "2016-12-15T12:00:26Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I don't think this is a good idea, it is likely to cause issues on servers that receive client hello messages from TLSv1.2 implementations that do enabled compression methods",
              "createdAt": "2016-12-15T12:00:25Z",
              "updatedAt": "2016-12-15T12:00:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxOTA2ODQ=",
          "commit": {
            "abbreviatedOid": "b0d50d5"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T18:33:04Z",
          "updatedAt": "2016-12-15T18:33:04Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Hmm, that's probably true.  I had wanted to replace some long-ish running text describing what to send with just a literal value, but this may be too far.",
              "createdAt": "2016-12-15T18:33:04Z",
              "updatedAt": "2016-12-15T18:33:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NTI5OTE=",
          "commit": {
            "abbreviatedOid": "63c1d5e"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "@kaduk: I've left a bunch of comments here. I'm stepping out for a bit but plan to merge this w/ the changes I noted today. LMK if you'd prefer to make the changes yourself and I can hold off.",
          "createdAt": "2016-12-17T21:01:13Z",
          "updatedAt": "2016-12-17T21:24:01Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I agree with tomato42. This seems like it is going to make things more confusing",
              "createdAt": "2016-12-17T21:01:13Z",
              "updatedAt": "2016-12-17T21:24:01Z"
            },
            {
              "originalPosition": 5,
              "body": "I see this is a separate commit.",
              "createdAt": "2016-12-17T21:02:04Z",
              "updatedAt": "2016-12-17T21:24:01Z"
            },
            {
              "originalPosition": 74,
              "body": "I think we should just use parameters here. I will adapt.",
              "createdAt": "2016-12-17T21:07:16Z",
              "updatedAt": "2016-12-17T21:24:01Z"
            },
            {
              "originalPosition": 85,
              "body": "What's the point of deleting the cookie? It's not secret because it just went over the wire.",
              "createdAt": "2016-12-17T21:08:18Z",
              "updatedAt": "2016-12-17T21:24:01Z"
            },
            {
              "originalPosition": 93,
              "body": "This seems kinda rdundant.",
              "createdAt": "2016-12-17T21:08:38Z",
              "updatedAt": "2016-12-17T21:24:01Z"
            },
            {
              "originalPosition": 109,
              "body": "It's not corresponding, it's the same.",
              "createdAt": "2016-12-17T21:08:55Z",
              "updatedAt": "2016-12-17T21:24:01Z"
            },
            {
              "originalPosition": 169,
              "body": "Note to self. Merge these two sentences.",
              "createdAt": "2016-12-17T21:09:59Z",
              "updatedAt": "2016-12-17T21:24:01Z"
            },
            {
              "originalPosition": 195,
              "body": "I actually don't think we should be requiring the client to check for KE not being present. It's just an unnecessary check.",
              "createdAt": "2016-12-17T21:10:43Z",
              "updatedAt": "2016-12-17T21:24:01Z"
            },
            {
              "originalPosition": 265,
              "body": "This seems unnecessary",
              "createdAt": "2016-12-17T21:11:45Z",
              "updatedAt": "2016-12-17T21:24:02Z"
            },
            {
              "originalPosition": 322,
              "body": "Good. I'm also going to change presented -> present",
              "createdAt": "2016-12-17T21:12:28Z",
              "updatedAt": "2016-12-17T21:24:02Z"
            },
            {
              "originalPosition": 408,
              "body": "Thanks for this text. We had a sketchier reason for this, so it's nice to have a really solid one. Also, this is a really nice performance benefit of TLS 1.3 over TLS 1.2 with H1, b/c in TLS 1.2 the NST comes in the server's second flight, even with False Start.",
              "createdAt": "2016-12-17T21:15:23Z",
              "updatedAt": "2016-12-17T21:24:02Z"
            },
            {
              "originalPosition": 431,
              "body": "I'm not sure this is correct. Consider the case where it's a database key and we just issue them in sequence. Is that unsafe?",
              "createdAt": "2016-12-17T21:18:32Z",
              "updatedAt": "2016-12-17T21:24:02Z"
            },
            {
              "originalPosition": 452,
              "body": "Nice simplification",
              "createdAt": "2016-12-17T21:18:55Z",
              "updatedAt": "2016-12-17T21:24:02Z"
            },
            {
              "originalPosition": 482,
              "body": "I think @kaduk is right here, unfortunately.",
              "createdAt": "2016-12-17T21:19:30Z",
              "updatedAt": "2016-12-17T21:24:02Z"
            },
            {
              "originalPosition": 669,
              "body": "Ugh, a whole sentence in parens. Note to self, fix on merge.",
              "createdAt": "2016-12-17T21:21:02Z",
              "updatedAt": "2016-12-17T21:24:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NTQ4OTg=",
          "commit": {
            "abbreviatedOid": "63c1d5e"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-17T23:45:24Z",
          "updatedAt": "2016-12-17T23:45:24Z",
          "comments": [
            {
              "originalPosition": 408,
              "body": "Well, my notes just said \"provide a justification/example\", so I had to come up with something.  Now I want to know what the other reason for it was... ;)",
              "createdAt": "2016-12-17T23:45:24Z",
              "updatedAt": "2016-12-17T23:45:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NTQ5ODk=",
          "commit": {
            "abbreviatedOid": "63c1d5e"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-17T23:52:52Z",
          "updatedAt": "2016-12-17T23:52:52Z",
          "comments": [
            {
              "originalPosition": 408,
              "body": "Stateless reject in cases where you wanted to force a RT for anti-DoS (e.g., QUIC or DTLS).\r\n\r\nYou complete the handshake, send an NST, and then don't wait for Finished, using the Ticket as a state token.\r\n",
              "createdAt": "2016-12-17T23:52:52Z",
              "updatedAt": "2016-12-17T23:52:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 811,
      "id": "MDExOlB1bGxSZXF1ZXN0OTc2NTk4MjE=",
      "title": "Add kaduk to Contributors",
      "url": "https://github.com/tlswg/tls13-spec/pull/811",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "split out into a separate pull request per @martinthomson 's comment.",
      "createdAt": "2016-12-12T23:52:44Z",
      "updatedAt": "2016-12-13T00:22:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "146476be2821bc786b8d6c379ec3b2492a93e007",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "kaduk",
      "headRefOid": "bbe2d2b6aaed393945e4da97984609b311a496ee",
      "closedAt": "2016-12-13T00:22:50Z",
      "mergedAt": "2016-12-13T00:22:50Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "92d7018e8fd4b58456ff8bb0e0ac465f75f00fd3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 812,
      "id": "MDExOlB1bGxSZXF1ZXN0OTc2Njc3OTY=",
      "title": "Change end_of_early_data into a handshake message. This makes all",
      "url": "https://github.com/tlswg/tls13-spec/pull/812",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "key changes happen at Handshake boundaries.\r\n\r\nSuggested by David Benjamin",
      "createdAt": "2016-12-13T01:04:34Z",
      "updatedAt": "2016-12-17T22:45:30Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a60dc8e41cab18ffbca51428b35495f6dc99322c",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "eoed_as_handshake",
      "headRefOid": "28e8f89d284b417ee12243ea3f3ada8771182686",
      "closedAt": "2016-12-17T20:13:25Z",
      "mergedAt": "2016-12-17T20:13:25Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d8b29f4fa79c0a2a3cf2235804060066a0cdf9eb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1ODgyNjQ=",
          "commit": {
            "abbreviatedOid": "ab28913"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T01:14:22Z",
          "updatedAt": "2016-12-13T01:14:22Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "Missing period.",
              "createdAt": "2016-12-13T01:14:22Z",
              "updatedAt": "2016-12-17T20:10:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1ODkzODc=",
          "commit": {
            "abbreviatedOid": "ab28913"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T01:25:15Z",
          "updatedAt": "2016-12-13T01:25:15Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "missing article before \"key change\"",
              "createdAt": "2016-12-13T01:25:15Z",
              "updatedAt": "2016-12-17T20:10:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1ODk0Njk=",
          "commit": {
            "abbreviatedOid": "ab28913"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T01:26:01Z",
          "updatedAt": "2016-12-13T01:27:52Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "hello_verify_request_RESERVED?",
              "createdAt": "2016-12-13T01:26:01Z",
              "updatedAt": "2016-12-17T20:10:11Z"
            },
            {
              "originalPosition": 96,
              "body": "[This bit was even kind of a lie before. end_of_early_data did not signal \"that the connection is ending\".]",
              "createdAt": "2016-12-13T01:27:34Z",
              "updatedAt": "2016-12-17T20:10:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI1OTA5MTQ=",
          "commit": {
            "abbreviatedOid": "ab28913"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T01:38:31Z",
          "updatedAt": "2016-12-13T01:38:31Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Gah, yesh",
              "createdAt": "2016-12-13T01:38:31Z",
              "updatedAt": "2016-12-17T20:10:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 813,
      "id": "MDExOlB1bGxSZXF1ZXN0OTc2NjkzNzI=",
      "title": "change \"external ticket\" to \"identities established externally\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/813",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Ticket is a term that refers to a PSK identity established using an handshake. For out-of-band PSK, we do not use the term.",
      "createdAt": "2016-12-13T01:20:07Z",
      "updatedAt": "2016-12-13T01:37:16Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "92d7018e8fd4b58456ff8bb0e0ac465f75f00fd3",
      "headRepository": "kazuho/tls13-spec",
      "headRefName": "patch-4",
      "headRefOid": "ac02f9149eca1e5877fca5b04b7597d61623a382",
      "closedAt": "2016-12-13T01:37:16Z",
      "mergedAt": "2016-12-13T01:37:16Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "add487bb9b22e255881f07d066fa7f2497448cdd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 814,
      "id": "MDExOlB1bGxSZXF1ZXN0OTc2NzE0MjA=",
      "title": "Expand the handshake transcript at least once",
      "url": "https://github.com/tlswg/tls13-spec/pull/814",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This should help clarify things.  Assumes #812 is merged.",
      "createdAt": "2016-12-13T01:41:58Z",
      "updatedAt": "2016-12-17T20:15:49Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "add487bb9b22e255881f07d066fa7f2497448cdd",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "expand_transcript",
      "headRefOid": "1f9a8a589dbdd31b24310cc96a1f0cf2665710a1",
      "closedAt": "2016-12-17T20:15:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased and merged.",
          "createdAt": "2016-12-17T20:15:48Z",
          "updatedAt": "2016-12-17T20:15:48Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI3MTIzOTA=",
          "commit": {
            "abbreviatedOid": "1f9a8a5"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T16:07:19Z",
          "updatedAt": "2016-12-13T16:07:19Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "And there is no problem with the client sending an EndOfEarlyData that the server can't decrypt [to include in its transcript] because the client MUST NOT send one if the server rejects early data.  But do we need to mention that explicitly here?",
              "createdAt": "2016-12-13T16:07:19Z",
              "updatedAt": "2016-12-13T16:07:19Z"
            }
          ]
        }
      ]
    },
    {
      "number": 815,
      "id": "MDExOlB1bGxSZXF1ZXN0OTc2NzE5MjY=",
      "title": "Using \"identity\" instead of \"label\".",
      "url": "https://github.com/tlswg/tls13-spec/pull/815",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\"label\" is a term for derive-key.\r\nWe should avoid using \"label\" for PSK.",
      "createdAt": "2016-12-13T01:47:28Z",
      "updatedAt": "2016-12-14T01:04:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "add487bb9b22e255881f07d066fa7f2497448cdd",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "label",
      "headRefOid": "6136e6eef94860e00fd63c7d018ea9c67cd04910",
      "closedAt": "2016-12-13T01:55:27Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think this is necessary. Label is a common term and the scope is clear enough",
          "createdAt": "2016-12-13T01:49:56Z",
          "updatedAt": "2016-12-13T01:49:56Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK. Let's close.",
          "createdAt": "2016-12-13T01:55:27Z",
          "updatedAt": "2016-12-13T01:55:27Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 816,
      "id": "MDExOlB1bGxSZXF1ZXN0OTc2NzI1NzU=",
      "title": "clarifying what PSK is in key schedule.",
      "url": "https://github.com/tlswg/tls13-spec/pull/816",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I needed to guess what PSK is in this diagram when I implemented PSK handshake.",
      "createdAt": "2016-12-13T01:54:40Z",
      "updatedAt": "2017-03-13T04:53:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "add487bb9b22e255881f07d066fa7f2497448cdd",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "psk-key-schedule",
      "headRefOid": "cc6fda19e01bbd1826ba6722e60dff7eefe0c2b6",
      "closedAt": "2016-12-17T20:28:02Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMyMTk0NTA=",
          "commit": {
            "abbreviatedOid": "cc6fda1"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T20:59:20Z",
          "updatedAt": "2016-12-15T20:59:20Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I don't think this is good if we remove `resumption_secret` as @ekr said [here](https://www.ietf.org/mail-archive/web/tls/current/msg22204.html)\r\n\r\n> This is actually called the resumption master\r\nsecret. I'll clean this up.\r\n\r\n",
              "createdAt": "2016-12-15T20:59:20Z",
              "updatedAt": "2016-12-15T20:59:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMyNTkxOTg=",
          "commit": {
            "abbreviatedOid": "cc6fda1"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-16T01:49:53Z",
          "updatedAt": "2016-12-16T01:49:53Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yes. We should take care of consistency.",
              "createdAt": "2016-12-16T01:49:53Z",
              "updatedAt": "2016-12-16T01:49:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 817,
      "id": "MDExOlB1bGxSZXF1ZXN0OTc2NzI3NTM=",
      "title": "fixing a typo.",
      "url": "https://github.com/tlswg/tls13-spec/pull/817",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is my fault. Sorry about that.",
      "createdAt": "2016-12-13T01:56:40Z",
      "updatedAt": "2016-12-14T01:04:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "add487bb9b22e255881f07d066fa7f2497448cdd",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "typo",
      "headRefOid": "c7b5784853de26f795268f3c246014570dbb7867",
      "closedAt": "2016-12-13T01:58:07Z",
      "mergedAt": "2016-12-13T01:58:07Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "31d804b2a34bc2fc6049f117e3260dce7a1674e6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 818,
      "id": "MDExOlB1bGxSZXF1ZXN0OTc3NDM3MDA=",
      "title": "Consolidate ticket_early_data_info and early_data into a single",
      "url": "https://github.com/tlswg/tls13-spec/pull/818",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "extension, as suggested by Steven Valdez/David Benjamin.",
      "createdAt": "2016-12-13T12:43:11Z",
      "updatedAt": "2016-12-17T20:07:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "31d804b2a34bc2fc6049f117e3260dce7a1674e6",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "remove_edii",
      "headRefOid": "8aebe1d5dc5b0c7f7a8d9ab42f762dd391fe18f1",
      "closedAt": "2016-12-17T20:07:22Z",
      "mergedAt": "2016-12-17T20:07:22Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a60dc8e41cab18ffbca51428b35495f6dc99322c"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM",
          "createdAt": "2016-12-13T16:27:16Z",
          "updatedAt": "2016-12-13T16:27:16Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI2Nzk5NjE=",
          "commit": {
            "abbreviatedOid": "c4f1b74"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T13:47:04Z",
          "updatedAt": "2016-12-13T13:47:04Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Is \"};\" missing?",
              "createdAt": "2016-12-13T13:47:04Z",
              "updatedAt": "2016-12-13T15:08:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI2ODEwNjQ=",
          "commit": {
            "abbreviatedOid": "c4f1b74"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T13:53:21Z",
          "updatedAt": "2016-12-13T13:53:21Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "This is fall through. So, `uint32` is contained in `client_hello`. But the original extension is empty. How should we use `uint32` for `client_hello`?",
              "createdAt": "2016-12-13T13:53:21Z",
              "updatedAt": "2016-12-13T15:08:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI2ODE0ODQ=",
          "commit": {
            "abbreviatedOid": "b2b7299"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T13:55:31Z",
          "updatedAt": "2016-12-13T13:55:31Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Sorry for your convenience but I think that \"};\" is correct. (A semicolon is necessary.)",
              "createdAt": "2016-12-13T13:55:31Z",
              "updatedAt": "2016-12-13T15:08:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI2ODE1NDA=",
          "commit": {
            "abbreviatedOid": "c4f1b74"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T13:55:48Z",
          "updatedAt": "2016-12-13T13:55:48Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "No, that was just pilot error because I hadn't had coffee yet.",
              "createdAt": "2016-12-13T13:55:48Z",
              "updatedAt": "2016-12-13T15:08:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI2ODI1MDI=",
          "commit": {
            "abbreviatedOid": "8195ac9"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T14:00:42Z",
          "updatedAt": "2016-12-13T14:00:42Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "According to our old discussion, I think that `struct {}` is correct.",
              "createdAt": "2016-12-13T14:00:42Z",
              "updatedAt": "2016-12-13T15:08:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI2ODI4ODc=",
          "commit": {
            "abbreviatedOid": "8195ac9"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-13T14:02:49Z",
          "updatedAt": "2016-12-13T14:02:50Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Ugh. I re-ordered instead.",
              "createdAt": "2016-12-13T14:02:49Z",
              "updatedAt": "2016-12-13T15:08:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 819,
      "id": "MDExOlB1bGxSZXF1ZXN0OTc3OTYyNzY=",
      "title": "Add Olivier Levillain (ANSSI) to the contributors list.",
      "url": "https://github.com/tlswg/tls13-spec/pull/819",
      "state": "MERGED",
      "author": "pictyeye",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "As asked in PR#798, here is a PR to add my name to the list.\r\n\r\nBy the way, thank you @ekr for the rewrite of my rewrite, which is clearer and shorter.",
      "createdAt": "2016-12-13T17:21:02Z",
      "updatedAt": "2016-12-13T17:47:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "31d804b2a34bc2fc6049f117e3260dce7a1674e6",
      "headRepository": "pictyeye/tls13-spec",
      "headRefName": "ol-contributors-list",
      "headRefOid": "2847dbede20d88ecae33d56d1b2bfee23c5886b7",
      "closedAt": "2016-12-13T17:26:43Z",
      "mergedAt": "2016-12-13T17:26:43Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "18ecf34ef2af1669eec2e67bf5d0a3a5826df4ea"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 820,
      "id": "MDExOlB1bGxSZXF1ZXN0OTgwNzM2Njc=",
      "title": "Edits from https://www.ietf.org/mail-archive/web/tls/current/msg22203.html",
      "url": "https://github.com/tlswg/tls13-spec/pull/820",
      "state": "MERGED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-12-15T02:01:14Z",
      "updatedAt": "2016-12-16T23:36:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "18ecf34ef2af1669eec2e67bf5d0a3a5826df4ea",
      "headRepository": "mimoo/tls13-spec",
      "headRefName": "edits",
      "headRefOid": "0a7b2f9f73770639ed6cba6c92beae55a359308c",
      "closedAt": "2016-12-16T21:19:01Z",
      "mergedAt": "2016-12-16T21:19:01Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "668a8bbe223349e0ce71145bbce69a02fcd52cda"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Wed, Dec 14, 2016 at 10:31 PM, David Benjamin <notifications@github.com>\nwrote:\n\n> *@davidben* commented on this pull request.\n> ------------------------------\n>\n> In draft-ietf-tls-tls13.md <https://github.com/tlswg/tls13-spec/pull/820>:\n>\n> > @@ -1566,7 +1566,9 @@ cipher_suites\n>    order of client preference. If the list contains cipher suites\n>    the server does not recognize, support, or wish to use, the server\n>    MUST ignore those cipher suites, and process the remaining ones as\n> -  usual. Values are defined in {{cipher-suites}}.\n> +  usual. Values are defined in {{cipher-suites}}. If the client is\n> +  attempting a PSK key establishment, it MUST only advertise the single\n> +  cipher suite associated with the PSK.\n>\n> Now that the PSK / cipher matching is weakened to just the PRF hash\n> needing to match, can we even say that the client MUST offer \"the\" cipher\n> for the PSK? \"The\" cipher isn't well-defined. Agreed with EKR that the\n> server is responsible for making the handshake succeed, even if that means\n> declining the PSK. Anything else will make TLS 1.3 a deployment hazard. (It\n> must never be the case that statefulness like session resumption prevents\n> servers from rolling back a configuration change.)\n>\n> Our implementation, for instance, first negotiates the cipher\n> independently of the resumption offer, then it only accepts the resumption\n> if the cipher suite it chose matches the session. That means we don't\n> actually care if the client offered ciphers that match the session.\n>\nThis is how NSS behaves as well.\n\n\n> Say we fixed it to say the client MUST offer at least one cipher suite\n> with a matching PRF. A server cannot take advantage of this. If it sees no\n> PRF-matching ciphers, maybe this is just because the only matching ones\n> were ciphers it didn't know about. If this rule is unenforceable and can't\n> be relied on, it's better to leave it alone.\n>\n\nThis seems like a reasonable argument.\n\n-Ekr\n\n\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/pull/820>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1ofpkBThOTV06ifrqcjAzwDd-COCtks5rINDBgaJpZM4LNocq>\n> .\n>\n",
          "createdAt": "2016-12-15T05:38:18Z",
          "updatedAt": "2016-12-15T05:38:18Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "added the changes previously discussed.",
          "createdAt": "2016-12-15T07:10:41Z",
          "updatedAt": "2016-12-15T07:10:41Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I did not verify that the moved text is only move and no edits, but the other chunks seem okay.",
          "createdAt": "2016-12-16T20:30:02Z",
          "updatedAt": "2016-12-16T20:30:02Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben are you OK with this SHOULD?",
          "createdAt": "2016-12-16T20:35:43Z",
          "updatedAt": "2016-12-16T20:35:43Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sounds reasonable. Mostly I just don't want to encourage servers to enforce anything about this.",
          "createdAt": "2016-12-16T21:05:31Z",
          "updatedAt": "2016-12-16T21:05:31Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNDg0NDI=",
          "commit": {
            "abbreviatedOid": "ba34af0"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T02:07:35Z",
          "updatedAt": "2016-12-15T02:07:35Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "This actually isn't correct. You MUST advertise it, but it's not right to require that you MUST only advertise it because this makes it impossible for servers to disable any cipher while a ticket is still valid because it might be in use by some client.",
              "createdAt": "2016-12-15T02:07:35Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNDg0Njc=",
          "commit": {
            "abbreviatedOid": "ba34af0"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "See above",
          "createdAt": "2016-12-15T02:07:55Z",
          "updatedAt": "2016-12-15T02:07:55Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNTAyNTg=",
          "commit": {
            "abbreviatedOid": "ba34af0"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T02:28:06Z",
          "updatedAt": "2016-12-15T02:28:06Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I'm not sure I follow, if you do that and: \r\n\r\n* the server accepts your PSK\r\n* the server picks the wrong cipher suite\r\n\r\nthen the wrong KDF will be used in the computation of the keys. It won't work. So you end up re-trying without the PSK.\r\n\r\n(The same would happen in your scenario.)",
              "createdAt": "2016-12-15T02:28:06Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNjMyNjg=",
          "commit": {
            "abbreviatedOid": "ba34af0"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T05:21:05Z",
          "updatedAt": "2016-12-15T05:21:05Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "The server is responsible for only picking PSK if it also selects a compatible cipher suite. So the situation you describe is a bug in the server. The critical concern is that the handshake has to complete successfully if at all possible. If you compute the wrong key, get a MAC error and retry, then you have problems.\r\n\r\nConsider the case where the client offers A and B, and the server selects A. If the client's attempt to resume only includes A, then if the server has disabled A, then you will have a negotiation failure even if you could have connected. By contrast, if the client offers both A and B but the PSK can only be used with A, then if the server has disabled B then you just get no resumption but B.\r\n\r\n\r\n\r\n",
              "createdAt": "2016-12-15T05:21:05Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNjM5MDY=",
          "commit": {
            "abbreviatedOid": "ba34af0"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T05:31:43Z",
          "updatedAt": "2016-12-15T05:31:43Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Now that the PSK / cipher matching is weakened to just the PRF hash needing to match, can we even say that the client MUST offer \"the\" cipher for the PSK? \"The\" cipher isn't well-defined. Agreed with EKR that the server is responsible for making the handshake succeed, even if that means declining the PSK. Anything else will make TLS 1.3 a deployment hazard. (It must never be the case that statefulness like session resumption prevents servers from rolling back a configuration change.)\r\n\r\nOur implementation, for instance, first negotiates the cipher independently of the resumption offer, then it only accepts the resumption if the cipher suite it chose matches the session. That means we don't actually care if the client offered ciphers that match the session.\r\n\r\nSay we fixed it to say the client MUST offer at least one cipher suite with a matching PRF. A server cannot take advantage of this. If it sees no PRF-matching ciphers, maybe this is just because the only matching ones were ciphers it didn't know about. If this rule is unenforceable and can't be relied on, it's better to leave it alone.",
              "createdAt": "2016-12-15T05:31:43Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNjU5Njc=",
          "commit": {
            "abbreviatedOid": "ba34af0"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T06:00:01Z",
          "updatedAt": "2016-12-15T06:00:01Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "@ekr: are you saying that the server should understand that the very first cipher suite, in the client hello's cipher suites list, is the one to be used with the PSK? And that if the server does not support that first choice, it should then dismiss the PSK and continue with whatever other choice of cipher suite exist? I do not see this in the spec.",
              "createdAt": "2016-12-15T06:00:01Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNjYzMjM=",
          "commit": {
            "abbreviatedOid": "ba34af0"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T06:04:26Z",
          "updatedAt": "2016-12-15T06:04:26Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "@davidben: true, only the hash part needs to be the one associated to the PSK.\r\n\r\n@ekr: from the spec: \"Prior to accepting PSK key establishment, the server MUST validate the corresponding binder value (see Section 4.2.6.1 below). If this value is not present or does not validate, the server MUST abort the handshake.\" \r\n\r\nthis contradicts your scenario.",
              "createdAt": "2016-12-15T06:04:26Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNjY0NTU=",
          "commit": {
            "abbreviatedOid": "ba34af0"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T06:05:25Z",
          "updatedAt": "2016-12-15T06:05:25Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I don't think I'm quite saying that. What the spec says is that you can't resume without the cipher suite having the same PRF:\r\n\r\n\"Any ticket MUST only be resumed with a cipher suite that has the same KDF hash as that used to establish the original connection, and if the client provides the same SNI value as described in Section 3 of [RFC6066].\"\r\n\r\nIt's up to the server to implement this requirement however it chooses. As @davidben says, the way that NSS and BoringSSL implement this is to negotiate the cipher suite first (using whatever their conventional mechanism is, which may be server's preference, client's preference, or something else) and then condition resumption on whether the PSK has the appropriate KDF. Note that this cipher suite might be the client's last choice if, for instance, it's the server's first choice.\r\n\r\n\r\n\r\n",
              "createdAt": "2016-12-15T06:05:25Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNjY3OTI=",
          "commit": {
            "abbreviatedOid": "ba34af0"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T06:09:57Z",
          "updatedAt": "2016-12-15T06:09:57Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "\"@ekr: from the spec: \"Prior to accepting PSK key establishment, the server MUST validate the corresponding binder value (see Section 4.2.6.1 below). If this value is not present or does not validate, the server MUST abort the handshake.\"\r\n\r\nthis contradicts your scenario.\"\r\n\r\nHm.... I don't think so... Here's one order of operations.\r\n\r\n1. Negotiate the cipher suite.\r\n2. If a PSK is present, check to see that it has the same hash. If not, do a full handshake.\r\n3. If a PSK is present and has the same hash, check the binder. If that fails, abort the handshake. If it succeeds, accept the PSK.\r\n\r\nThe key point here is that you don't get a mismatch in the binder unless something is really wrong (just like with the Finished MAC) and then you should just generate an error, not try to fall back to a non-PSK handshake.",
              "createdAt": "2016-12-15T06:09:57Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNjcxNzQ=",
          "commit": {
            "abbreviatedOid": "ba34af0"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T06:14:22Z",
          "updatedAt": "2016-12-15T06:14:22Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "in your 2., you presume that the server knows what hash is associated with a PSK. Is that always the case?",
              "createdAt": "2016-12-15T06:14:22Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNjc0Njc=",
          "commit": {
            "abbreviatedOid": "ba34af0"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T06:18:43Z",
          "updatedAt": "2016-12-15T06:18:43Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Yes. This is a requirement for TLS 1.3 PSK, just like it is typically a requirement that servers know whether this blob of bytes is a ECDSA P-256 private key or an RSA private key.",
              "createdAt": "2016-12-15T06:18:43Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNjg3MjE=",
          "commit": {
            "abbreviatedOid": "ba34af0"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T06:34:48Z",
          "updatedAt": "2016-12-15T06:34:48Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "OK I understand this better. I did not know that. Also reading the spec it's hard to see it.\r\n\r\nFrom the [New Session Ticket](https://tlswg.github.io/tls13-spec/#NewSessionTicket) section:\r\n\r\n> The value of the ticket to be used as the PSK identity. The ticket itself is an opaque label. It MAY either be a database lookup key or a self-encrypted and self-authenticated value. Section 4 of [RFC5077] describes a recommended ticket construction mechanism. \r\n\r\nNote here the usage of \"MAY\" as well as \"recommended\".\r\n\r\nThere is also nothing in the current draft that talks about how the server should do that: \"If a PSK is present, check to see that it has the same hash. If not, do a full handshake.\"\r\n\r\nFrom the [Pre Shared Key extension](https://tlswg.github.io/tls13-spec/#pre-shared-key-extension) section, I think this is one more mention to the \"cipher suite associated with the PSK\" that could be changed to something along the lines of \"a cipher suite with a hash function associated with the PSK\".\r\n\r\n> Clients MUST verify that the server\u2019s selected_identity is within the range supplied by the client, that the server selected the cipher suite associated with the PSK",
              "createdAt": "2016-12-15T06:34:48Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNzAwNDk=",
          "commit": {
            "abbreviatedOid": "ba34af0"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T06:50:21Z",
          "updatedAt": "2016-12-15T06:50:21Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Alright, found this from the spec that clarifies this part for me:\r\n\r\n> Each PSK is associated with a single Hash algorithm. For PSKs established via the ticket mechanism ({{NewSessionTicket}}), this is the Hash used for the KDF. For externally established PSKs, the Hash algorithm MUST be set when the PSK is established.",
              "createdAt": "2016-12-15T06:50:21Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxMjQ1NzQ=",
          "commit": {
            "abbreviatedOid": "653a72a"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T13:15:10Z",
          "updatedAt": "2016-12-15T13:15:10Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "So, what is the intent of this MUST here? Any server which either uses this to simplify processing or tries to enforce it is necessarily broken. Consider if you receive:\r\n\r\n    cipher suites = {0x1234, AES_128_GCM_SHA256}\r\n    psk_identity = {previous session which established AES_256_GCM_SHA384}\r\n\r\nThe server can't reject this ClientHello. For all it knows, 0x1234 is AWESOME_NEW_AEAD_SHA384 and the client hasn't violated things. I think it's better to not say anything. Otherwise we risk encouraging servers to try to detect this case and will, as a result, probably get it wrong and incorrectly reject those ClientHellos.",
              "createdAt": "2016-12-15T13:15:10Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNzA1NzM=",
          "commit": {
            "abbreviatedOid": "653a72a"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T16:52:45Z",
          "updatedAt": "2016-12-15T16:52:45Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "It's an asymmetric MUST. Only the Client needs to enforce it. (There is really no point sending a PSK if no \"compatible\" cipher suite is sent with it as well.)\r\n\r\nBy the way if we make this change, this will create a difference between this and early_data where the client needs to send the same cipher suite, not the same Hash... I think it's safer to revert to \"cipher suite\" instead of Hash. What do you think?",
              "createdAt": "2016-12-15T16:52:45Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNzM0NDg=",
          "commit": {
            "abbreviatedOid": "653a72a"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T17:05:12Z",
          "updatedAt": "2016-12-15T17:05:12Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Weren't you objecting in your thread that asymmetric MUSTs are confusing? It seems this particular asymmetric MUST doesn't serve much purpose and only risks encouraging servers towards an unsound decision algorithm.\r\n\r\nHash vs ciphers was an intentional change to align the rules for external PSKs (where expecting an externally-configured AEAD is a bit much) and ticket-based PSKs. And, yes, it means 0-RTT has stricter requirements than resumption. That is already the case, and necessarily so, because 0-RTT cannot change ALPN or basically any property at all. One reasonable selection algorithm is:\r\n\r\n1. Decide if you were going to resume or not.\r\n2. Select all other parameters. ALPN, etc.\r\n3. If all of the following are true, acknowledge 0-RTT. Otherwise, decline it.\r\n   - We are resuming [edit: and we are resuming with the first offered PSK]\r\n   - The client offered 0-RTT and we are willing to accept it.\r\n   - The PSK is okay for use with 0-RTT.\r\n   - All connection parameters associated with the PSK match those selected organically.",
              "createdAt": "2016-12-15T17:05:12Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNzQ3MTI=",
          "commit": {
            "abbreviatedOid": "653a72a"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T17:11:22Z",
          "updatedAt": "2016-12-15T17:11:22Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "> Weren't you objecting in your thread that asymmetric MUSTs are confusing?\r\n\r\nI did but ekr's justification was fine, so I changed my opinion on it :) If you think this is too much I could change it for a SHOULD. What do you think?\r\n\r\n> 0-RTT has stricter requirements than resumption\r\n\r\nI see. Thanks for the explanations!",
              "createdAt": "2016-12-15T17:11:22Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxNzkyODY=",
          "commit": {
            "abbreviatedOid": "653a72a"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T17:34:09Z",
          "updatedAt": "2016-12-15T17:34:09Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I think I would rather it not be mentioned. On a server, the text should be ignored. On a client, it actually should be ignored too. Either you keep all your sessions in-memory, in which case you necessarily satisfy this and send the cipher list you would have sent anyway. Or you have some persistence and might offer a session from a prior configuration, in which case you probably ought to avoid offering that session but if you did, you certainly would still send the cipher list you would have sent anyway and not pick an arbitrary hash-matching cipher.\r\n\r\nMoreover, having clients vary their preferences based on a stateful thing (session resumption) is very dangerous and risks turning TLS 1.3 into a deployment hazard. Deploying a server change and then rolling it back should be as close to a no-op as possible.",
              "createdAt": "2016-12-15T17:34:09Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxODE2MzA=",
          "commit": {
            "abbreviatedOid": "653a72a"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T17:46:19Z",
          "updatedAt": "2016-12-15T17:46:19Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "> On a client, it actually should be ignored too. Either you keep all your sessions in-memory, in which case you necessarily satisfy this and send the cipher list you would have sent anyway.\r\n\r\nHmm... I think this situation doesn't encompass out-of-bands PSKs, or some other non-web scenarios.\r\n\r\n(I would also argue that an indication at least help the implementer.)",
              "createdAt": "2016-12-15T17:46:19Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxODUwNzE=",
          "commit": {
            "abbreviatedOid": "653a72a"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T18:04:23Z",
          "updatedAt": "2016-12-15T18:04:23Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Hrm. Perhaps there should be some text in 4.2.6 then, as guidance when picking parameters? If you're doing out-of-band PSKs where there isn't a cert-based default, you actually want to not just say \"please include some ciphers that match the PSK\" but that \"the only ciphers that will work are ones that match the PSK, so avoid saying silly things like AES_256_GCM_SHA384 when you don't have a cert-based default and all your PSKs are SHA-256 ones\".",
              "createdAt": "2016-12-15T18:04:23Z",
              "updatedAt": "2016-12-15T20:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMyMTMzMDQ=",
          "commit": {
            "abbreviatedOid": "653a72a"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T20:25:16Z",
          "updatedAt": "2016-12-15T20:25:16Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "That section is already pretty loaded though. I still think the mention would be better in that cipher suite definition of the client hello. I tried a change to a SHOULD, if this is really not satisfying I can revert this commit.",
              "createdAt": "2016-12-15T20:25:16Z",
              "updatedAt": "2016-12-15T20:25:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0MTMwMjA=",
          "commit": {
            "abbreviatedOid": "0a7b2f9"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2016-12-16T21:18:54Z",
          "updatedAt": "2016-12-16T21:18:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 821,
      "id": "MDExOlB1bGxSZXF1ZXN0OTgwOTIyNDQ=",
      "title": "editorial cleanup",
      "url": "https://github.com/tlswg/tls13-spec/pull/821",
      "state": "CLOSED",
      "author": "cem-",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I believe these are all non-controversial, editorial changes.",
      "createdAt": "2016-12-15T06:07:15Z",
      "updatedAt": "2016-12-17T20:28:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "18ecf34ef2af1669eec2e67bf5d0a3a5826df4ea",
      "headRepository": "cem-/tls13-spec",
      "headRefName": "master",
      "headRefOid": "402b02b6876d0b27525f9e1ff5ec422a769e22c8",
      "closedAt": "2016-12-17T20:28:39Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased and merged. @cem- please provide a PR adding yourself to contributors in the appropriate location",
          "createdAt": "2016-12-17T20:28:39Z",
          "updatedAt": "2016-12-17T20:28:39Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNjc1MTk=",
          "commit": {
            "abbreviatedOid": "402b02b"
          },
          "author": "cem-",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T06:19:20Z",
          "updatedAt": "2016-12-15T06:19:20Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "Changing this header breaks the ref on line 1907 (and is why the travis-ci broke). [So that will need fixing.]",
              "createdAt": "2016-12-15T06:19:20Z",
              "updatedAt": "2016-12-15T06:19:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMwNjgyNzM=",
          "commit": {
            "abbreviatedOid": "402b02b"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T06:28:24Z",
          "updatedAt": "2016-12-15T06:28:24Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "One way to fix that is to add `{#mti-extensions}` to the end of this line.",
              "createdAt": "2016-12-15T06:28:24Z",
              "updatedAt": "2016-12-15T06:28:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxODgwMjc=",
          "commit": {
            "abbreviatedOid": "402b02b"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2016-12-15T18:19:14Z",
          "updatedAt": "2016-12-15T18:25:10Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "I find that the RFC Editor staff have a different idea of when commas are appropriate than I do, so I try to restrain myself from making too many changes of that nature.  (Just FYI; I would probably add this if it was my document.)",
              "createdAt": "2016-12-15T18:19:14Z",
              "updatedAt": "2016-12-15T18:25:10Z"
            },
            {
              "originalPosition": 64,
              "body": "I don't think this is quite right, as the server can (and should) put other state into the cooke as well as just the hash state.  \"pickling\" is perhaps a needless term of art, though, and \"including [state] in the cookie\" would do just fine.",
              "createdAt": "2016-12-15T18:20:21Z",
              "updatedAt": "2016-12-15T18:25:10Z"
            },
            {
              "originalPosition": 74,
              "body": "This comma, though, I disagree with.  (Maybe it was intended to be before \"then\" and not after?)",
              "createdAt": "2016-12-15T18:22:51Z",
              "updatedAt": "2016-12-15T18:25:10Z"
            },
            {
              "originalPosition": 113,
              "body": "This adds a comma splice.  A new sentence would be fine.",
              "createdAt": "2016-12-15T18:23:47Z",
              "updatedAt": "2016-12-15T18:25:10Z"
            },
            {
              "originalPosition": 169,
              "body": "I have this in #810 too, but leaving it here shouldn't cause any issues.",
              "createdAt": "2016-12-15T18:24:50Z",
              "updatedAt": "2016-12-15T18:25:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMyMDQ2NDc=",
          "commit": {
            "abbreviatedOid": "402b02b"
          },
          "author": "cem-",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-15T19:40:06Z",
          "updatedAt": "2016-12-15T19:40:06Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "yes, was supposed to be before.",
              "createdAt": "2016-12-15T19:40:06Z",
              "updatedAt": "2016-12-15T19:40:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0MjQzNDY=",
          "commit": {
            "abbreviatedOid": "402b02b"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2016-12-16T22:42:04Z",
          "updatedAt": "2016-12-16T22:45:59Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "This seems unduly prescriptive. It's up to people whether they want to do a DH exchange here. The reason to provide a key is to allow the full handshake.",
              "createdAt": "2016-12-16T22:42:04Z",
              "updatedAt": "2016-12-16T22:45:59Z"
            },
            {
              "originalPosition": 84,
              "body": "root CA and trust anchor are the same thing in this context.",
              "createdAt": "2016-12-16T22:43:05Z",
              "updatedAt": "2016-12-16T22:46:00Z"
            },
            {
              "originalPosition": 111,
              "body": "content; if",
              "createdAt": "2016-12-16T22:43:45Z",
              "updatedAt": "2016-12-16T22:46:00Z"
            },
            {
              "originalPosition": 112,
              "body": "i before e, except after c",
              "createdAt": "2016-12-16T22:43:58Z",
              "updatedAt": "2016-12-16T22:46:00Z"
            },
            {
              "originalPosition": 159,
              "body": "trusted -> trust",
              "createdAt": "2016-12-16T22:44:24Z",
              "updatedAt": "2016-12-16T22:46:00Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NTI0NjU=",
          "commit": {
            "abbreviatedOid": "402b02b"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-17T20:24:13Z",
          "updatedAt": "2016-12-17T20:24:13Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "I ended up using serialize",
              "createdAt": "2016-12-17T20:24:13Z",
              "updatedAt": "2016-12-17T20:24:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 822,
      "id": "MDExOlB1bGxSZXF1ZXN0OTgyMjg5NzM=",
      "title": "better explanations of the PSK key establishment process",
      "url": "https://github.com/tlswg/tls13-spec/pull/822",
      "state": "CLOSED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "After the discussions of https://github.com/tlswg/tls13-spec/pull/820 I took a shot at clarifying this section a bit.",
      "createdAt": "2016-12-15T20:53:23Z",
      "updatedAt": "2016-12-17T20:47:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "668a8bbe223349e0ce71145bbce69a02fcd52cda",
      "headRepository": "mimoo/tls13-spec",
      "headRefName": "betterServerPsk",
      "headRefOid": "6b88d694a9a5c5aca0cbd921ce81f6b69019e961",
      "closedAt": "2016-12-17T20:46:55Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mimoo: I added some implementation advice in https://github.com/tlswg/tls13-spec/commit/c65f98738af29aaacfff140d6a7fa37db744ca3d",
          "createdAt": "2016-12-17T20:47:38Z",
          "updatedAt": "2016-12-17T20:47:38Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0MjM5OTU=",
          "commit": {
            "abbreviatedOid": "6b88d69"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-16T22:39:07Z",
          "updatedAt": "2016-12-16T22:39:14Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "I'm not sure we really need to be prescriptive here. There's at least one other algorithm:\r\n\r\n1. Select PSK if possible.\r\n2. Check to see if the PSK can be used with any client-offered cipher suite and if so do PSK. If not, go do regular negotiation.\r\n\r\nThis isn't what NSS or BoringSSL does, but I'm not aware of any strong argument for why it's a sufficiently bad algorithm that we should be telling people not to use it.",
              "createdAt": "2016-12-16T22:39:07Z",
              "updatedAt": "2016-12-16T22:39:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0Mjk2MDE=",
          "commit": {
            "abbreviatedOid": "6b88d69"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-16T23:32:31Z",
          "updatedAt": "2016-12-16T23:32:31Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "One argument not to do this is, unlike TLS 1.2, TLS 1.3 ticket renewal admits longer lifetimes. With dhe_psk, tickets are less scary and renewal actually refreshes the key. There's still the authentication freshness lifetime cliff, but if we later add a renewal mode that refreshes authentication, it'll be possible to maintain continuous resumption.\r\n\r\nNow suppose today I prefer AES_128_GCM_SHA256 > AES_256_GCM_SHA384 and clients support both. All my tickets will mint AES_128_GCM_SHA256 tickets and everything's lined up for continuous resumption. Now I flip my preferences to AES_256_GCM_SHA384 > AES_128_GCM_SHA256 (or deploy a new cipher or whatever). New clients will get the new preferences, but clients whose renewal train started earlier never rotate to the new settings. You can expect these kinds of pref changes to be less common, so most servers should find it preferable to miss resumption once and rotate everyone to the new settings.\r\n\r\nWe didn't have this problem in TLS 1.2 because no one does 1.2 ticket renewal and, since it didn't change the master secret, ticket lifetime should not have extended.\r\n\r\nIt's best not to be prescriptive since implementations may have different priorities, but some guidance about this issue may be worthwhile. I think this issue isn't immediately obvious.",
              "createdAt": "2016-12-16T23:32:31Z",
              "updatedAt": "2016-12-16T23:32:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 824,
      "id": "MDExOlB1bGxSZXF1ZXN0OTg0NTkzNDk=",
      "title": "First cut at providing a state machine.",
      "url": "https://github.com/tlswg/tls13-spec/pull/824",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@davidben @martinthomson @FiloSottile \r\n\r\nHere's a first attempt at state machine. I did look at doing the post-handshake messages, but I think it actually destroys information because it's  mostly like \"here is a message, now just go back to CONNECTED\"",
      "createdAt": "2016-12-17T23:31:20Z",
      "updatedAt": "2016-12-21T21:11:49Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5810b7062a12ec4d887ea27936866c34df2b0b51",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "state_machine",
      "headRefOid": "0f8ce791593374f91667fdb3783131e6ff947451",
      "closedAt": "2016-12-21T21:11:49Z",
      "mergedAt": "2016-12-21T21:11:49Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1e9d262e1ba532a371ffc80e91986f4cd655ca2a"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'll try to remove the abbrevs.",
          "createdAt": "2016-12-18T01:40:50Z",
          "updatedAt": "2016-12-18T01:40:50Z"
        },
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr, do you feel that one state machine diagram is enough ? I feel that, except for the main ones, it seems complicated to put all state machines into one diagram, but I might be wrong ?!\r\n\r\nMight it be valuable for the spec to reference a trusted website with all possible state machine diagrams depending on the negotiated values, extensions... etc... ? ;)",
          "createdAt": "2016-12-19T15:40:17Z",
          "updatedAt": "2016-12-19T15:40:49Z"
        },
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That said, separating state machines has the major drawback of making it harder for the implementer, so it might be a bad idea too... :( WDYT ?",
          "createdAt": "2016-12-19T15:46:11Z",
          "updatedAt": "2016-12-19T15:46:11Z"
        },
        {
          "author": "hannesm",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I do appreciate to have ASCII art statemachines in the RFC (and not referencing some random other resource on the internet).  About the concrete proposal, should it be the case that arrows represent actions (recv message/send message/choose & verify parameters), and states are either start or established or WAIT_FOR_XXX (if the server has to send multiple messages, coalesce them into one arrow -- or should each action have its own arrow, and there are intermediate state (like certificate_request_sent_next_sending_certificate))?",
          "createdAt": "2016-12-19T15:52:44Z",
          "updatedAt": "2016-12-19T15:52:44Z"
        },
        {
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@hannesm, sure, the spec must be self contained.\r\nThe question is, what do you do with future extensions that branch the state-machine. Once finalized the spec we won't be able to reference external ressources with up-to-date state-machines. \r\nSo the point is, keep the main stuff here but should we eventually also point to something up-to-date on the internet.",
          "createdAt": "2016-12-19T16:14:05Z",
          "updatedAt": "2016-12-19T16:14:05Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Mon, Dec 19, 2016 at 9:24 AM, David Wong <notifications@github.com>\nwrote:\n\n> *@mimoo* commented on this pull request.\n> ------------------------------\n>\n> In draft-ietf-tls-tls13.md\n> <https://github.com/tlswg/tls13-spec/pull/824#pullrequestreview-13599802>:\n>\n> > @@ -4375,6 +4375,89 @@ currently deployed and properly configured TLS implementations.\n>  %%### Ticket Establishment\n>  %%### Updating Keys\n>\n> +# State Machine\n> +\n> +This section provides a summary of the legal state transitions for the\n> +client and server handshakes.  State names (in all capitals, e.g.,\n> +START) have no formal meaning but are provided for ease of\n> +comprehension.  Messages which are sent only sometimes are indicated\n> +in [].\n> +\n> +## Client\n> +\n> +~~~~\n> +          +-----> START\n> +     Recv |        |\n> +    Hello |        | Send ClientHello\n>\n> might want to include early data in here:\n>\n> send ClientHello [+ application_data] (early_data)\n>\n\nMT talked me out of it. Said it was better in text.\n",
          "createdAt": "2016-12-19T17:29:19Z",
          "updatedAt": "2016-12-19T17:29:19Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mmm, I think it is fair to assume that some implementations might want to include a whitelist of state transitions, and that they will probably look at these diagrams to draft it from (if it is not included in the final document). It's also a pretty small addition for a lot of meaning :) (especially for the server \"early data\", I don't think it is detailed anywhere besides the [overview section](https://tlswg.github.io/tls13-spec/#incorrect-dhe-share)",
          "createdAt": "2016-12-19T17:46:30Z",
          "updatedAt": "2016-12-19T17:46:30Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@beurdouche: perhaps the place to have an up-to-date diagram is on the wiki in github?",
          "createdAt": "2016-12-20T00:55:53Z",
          "updatedAt": "2016-12-20T00:55:53Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@hannesm I think I prefer the current style to having extra states that don't represent choice points",
          "createdAt": "2016-12-20T00:56:59Z",
          "updatedAt": "2016-12-20T00:56:59Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I just updated with markers to show when you could send app data. Comments welcome",
          "createdAt": "2016-12-20T01:08:45Z",
          "updatedAt": "2016-12-20T01:08:45Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NTU5Mjc=",
          "commit": {
            "abbreviatedOid": "66d3fec"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Is there enough room in the diagram to avoid abbreviating the messages? It's clear enough what each message is meant to be, but I don't think we abbreviate them anywhere else, do we?",
          "createdAt": "2016-12-18T01:25:24Z",
          "updatedAt": "2016-12-18T01:32:57Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "The first several times I read this sentence, I thought you were saying they were in all capitals for ease of comprehension. This was very entertaining but probably not what you meant. :-) Perhaps:\r\n\r\nState names (in all capitals, e.g., START) have no formal meaning but are provided for ease of comprehension.",
              "createdAt": "2016-12-18T01:25:24Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            },
            {
              "originalPosition": 29,
              "body": "Perhaps:\r\nSH+PSK => Using PSK\r\nSH => Using certificate\r\n\r\nMy first thought was you sent or received an SH again.",
              "createdAt": "2016-12-18T01:31:17Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            },
            {
              "originalPosition": 70,
              "body": "CertificateRequest?",
              "createdAt": "2016-12-18T01:31:47Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NTYwODc=",
          "commit": {
            "abbreviatedOid": "66d3fec"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-18T01:39:55Z",
          "updatedAt": "2016-12-18T01:39:55Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Thanks, that does help",
              "createdAt": "2016-12-18T01:39:55Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NTYwOTA=",
          "commit": {
            "abbreviatedOid": "66d3fec"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-18T01:40:19Z",
          "updatedAt": "2016-12-18T01:40:19Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "yeah, I agree. I think when I wrote this I was thinking that we would refer to messages and not to the logic",
              "createdAt": "2016-12-18T01:40:19Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NTYwOTE=",
          "commit": {
            "abbreviatedOid": "66d3fec"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-18T01:40:26Z",
          "updatedAt": "2016-12-18T01:40:26Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "Ah, good catch",
              "createdAt": "2016-12-18T01:40:26Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NzUxMjg=",
          "commit": {
            "abbreviatedOid": "66d3fec"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-18T23:27:02Z",
          "updatedAt": "2016-12-18T23:27:11Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "I'm not sure that you need to highlight the part where early data can be sent.  It's after the first ClientHello, up to the second flight from the client (which might be another ClientHello).  Easier to describe in words and you can reclaim some horizontal space for David's suggestion.",
              "createdAt": "2016-12-18T23:27:02Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NzYzNjA=",
          "commit": {
            "abbreviatedOid": "66d3fec"
          },
          "author": "ghedo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-19T00:22:07Z",
          "updatedAt": "2016-12-19T00:22:07Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "This part seems kind of confusing. If you rename NEGOATIATED to, idk, RECV_CH, then you can make a \"Send HRR\" transition from there to START without duplicating \"Recv CH\". You could also keep both RECV_CH and NEGOTIATED and have a \"Negotiate\" or \"Pick parameters\" or whatever transition between the two.\r\n\r\n```\r\n                 START <--------+\r\n                   |            |\r\n                   | Recv CH    | Send HRR\r\n                   |            |\r\n                   v            |\r\n                RECVED_CH ------+\r\n                   |\r\n                   | Select params\r\n                   |\r\n                   v\r\n                NEGOTIATED\r\n                   |\r\n                   | Send SH\r\n                  ...\r\n```\r\n\r\nIMO it makes it clearer (YMMV), with the added bonus that it makes the machine somewhat more deterministic. Con: it adds an additional state.",
              "createdAt": "2016-12-19T00:22:07Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NzY0NDk=",
          "commit": {
            "abbreviatedOid": "66d3fec"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-19T00:25:07Z",
          "updatedAt": "2016-12-19T00:25:07Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "I agree that this is clearer. Thanks",
              "createdAt": "2016-12-19T00:25:07Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM1Njg2MDc=",
          "commit": {
            "abbreviatedOid": "0841dee"
          },
          "author": "ghedo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-19T15:02:54Z",
          "updatedAt": "2016-12-19T15:02:54Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "Should sending and receiving NewSessionTicket also be included?",
              "createdAt": "2016-12-19T15:02:54Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM1NzgyOTc=",
          "commit": {
            "abbreviatedOid": "0841dee"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-19T15:47:03Z",
          "updatedAt": "2016-12-19T15:47:04Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "What is this \"RECVD\" ? Receive Daemon?",
              "createdAt": "2016-12-19T15:47:04Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM1Nzk2NjQ=",
          "commit": {
            "abbreviatedOid": "0841dee"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-19T15:53:05Z",
          "updatedAt": "2016-12-19T15:53:05Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Why not `[Send Certificate + Certificate Verify]` instead since these messages must come together?\r\n\r\nEDIT: This is actually what you do on the server side.",
              "createdAt": "2016-12-19T15:53:05Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM1ODMwNDc=",
          "commit": {
            "abbreviatedOid": "0841dee"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-19T16:06:51Z",
          "updatedAt": "2016-12-19T16:06:51Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "The way that the client rejects client auth is by sending an empty certificate message.",
              "createdAt": "2016-12-19T16:06:51Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM1ODM3NTg=",
          "commit": {
            "abbreviatedOid": "0841dee"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-19T16:10:17Z",
          "updatedAt": "2016-12-19T16:10:17Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "It's weird that this message (EndOfEarlyData) is written unabbreviated then abbreviated. I know that it takes a lot of room though :)\r\n",
              "createdAt": "2016-12-19T16:10:17Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM1ODYwMDM=",
          "commit": {
            "abbreviatedOid": "0841dee"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-19T16:19:40Z",
          "updatedAt": "2016-12-19T16:19:40Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "What is this FLT2?",
              "createdAt": "2016-12-19T16:19:40Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM1ODc4MjA=",
          "commit": {
            "abbreviatedOid": "0841dee"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-19T16:26:50Z",
          "updatedAt": "2016-12-19T16:26:50Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "I would say that it's not that important since you can receive them at any point after the handshake has completed (and this diagram is about the handshake). What's important here is not to have them: the state machine knows not to accept that kind of handshake message during the handshake.",
              "createdAt": "2016-12-19T16:26:50Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM1ODkwMTA=",
          "commit": {
            "abbreviatedOid": "0841dee"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-19T16:32:03Z",
          "updatedAt": "2016-12-19T16:32:03Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "ah right!",
              "createdAt": "2016-12-19T16:32:03Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM1OTk4MDI=",
          "commit": {
            "abbreviatedOid": "0841dee"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-19T17:24:16Z",
          "updatedAt": "2016-12-19T17:24:16Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "might want to include early data in here:\r\n\r\n`send ClientHello [+ application_data] (early_data)`",
              "createdAt": "2016-12-19T17:24:16Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM1OTk5NzM=",
          "commit": {
            "abbreviatedOid": "0841dee"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-19T17:25:14Z",
          "updatedAt": "2016-12-19T17:25:14Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "might want to add the \"early data\" of the server as well\r\n```\r\n| Send Finished\r\n| [Send Application Data]\r\n```",
              "createdAt": "2016-12-19T17:25:14Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM2NzQ1ODg=",
          "commit": {
            "abbreviatedOid": "0841dee"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-20T00:54:43Z",
          "updatedAt": "2016-12-20T00:54:43Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "yeah, I am leaving the states abbreviated.",
              "createdAt": "2016-12-20T00:54:43Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM2NzQ2MDg=",
          "commit": {
            "abbreviatedOid": "0841dee"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-20T00:54:56Z",
          "updatedAt": "2016-12-20T00:54:56Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "Flight 2. It's just saving room.",
              "createdAt": "2016-12-20T00:54:56Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM2NzQ2MzU=",
          "commit": {
            "abbreviatedOid": "0841dee"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-20T00:55:18Z",
          "updatedAt": "2016-12-20T00:55:18Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "\"I have received\"",
              "createdAt": "2016-12-20T00:55:18Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM2NzgyNDE=",
          "commit": {
            "abbreviatedOid": "2d589b0"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This batch of comments is made entirely of artistic comments on ASCII art diagrams.",
          "createdAt": "2016-12-20T01:31:05Z",
          "updatedAt": "2016-12-20T01:56:56Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Something about the alignment here is a bit off. I think you lost two spaces on the first few lines here:\r\n\r\n```\r\n                    +-----> START\r\n               Recv |        |\r\n              Hello |        | Send ClientHello\r\n              Retry |        v\r\n        +-> Request +---- WAIT_SH\r\n    Can |                    | Recv ServerHello\r\n   Send |                    V\r\n```\r\n\r\nHyphens might also be useful:\r\n\r\n```\r\n                    +-----> START\r\n               Recv |        |\r\n             Hello- |        | Send ClientHello\r\n             Retry- |        v\r\n        +-> Request +---- WAIT_SH\r\n    Can |                    | Recv ServerHello\r\n   Send |                    V\r\n```\r\n\r\nOr you can then avoid line-wrapping if you swap the branches:\r\n\r\n```\r\n                            START <---+\r\n                             |        |\r\n            Send ClientHello |        | Recv HelloRetryRequest\r\n                             v        |\r\n        +->               WAIT_SH ----+\r\n    Can |                    | Recv ServerHello\r\n   Send |                    V\r\n```",
              "createdAt": "2016-12-20T01:31:05Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            },
            {
              "originalPosition": 63,
              "body": "If you swap the order, I think you have room to leave them both unwrapped here too:\r\n\r\n```\r\n                             START <----+\r\n                               |        |\r\n              Recv ClientHello |        | Send HelloRetryRequest\r\n                               |        |\r\n                               v        |\r\n                           RECVD_CH ----+\r\n                               | Select parameters\r\n                               v\r\n                            NEGOTIATED\r\n                               | Send ServerHello\r\n```",
              "createdAt": "2016-12-20T01:36:54Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            },
            {
              "originalPosition": 47,
              "body": "This should end just before EndOfEarlyData, right?\r\n\r\nWhat do you think about changing the ends to not be arrows? If you keep HRR on the left side, it looks kinda like a state transition. How about?\r\n\r\n```\r\n                            START <---+\r\n                             |        |\r\n            Send ClientHello |        | Recv HelloRetryRequest\r\n        /                    v        |\r\n        |                 WAIT_SH ----+\r\n    Can |                    | Recv ServerHello\r\n   Send |                    V\r\n  Early |                 WAIT_EE\r\n   Data |                    | Recv EncryptedExtensions\r\n        |           +--------+--------+\r\n        |     Using |                 | Using Certificate\r\n        |       PSK |                 v\r\n        |           |            WAIT_CERT_CR\r\n        |           |        Recv |       | Recv CertificateRequest\r\n        |           | Certificate |       v\r\n        |           |             |    WAIT_CERT\r\n        |           |             |       | Recv Certificate\r\n        |           |             v       v\r\n        |           |              WAIT_CV\r\n        |           |                 | Recv CertificateVerify\r\n        |           +> WAIT_FINISHED <+\r\n        |                  | Recv Finished\r\n        \\                  |\r\n                           | [Send EndOfEarlyData]\r\n                           | [Send Certificate [+ CertificateVerify]]\r\n                           | Send Finished\r\n Can Send                  v\r\n App Data -->          CONNECTED\r\n After\r\n Here\r\n```",
              "createdAt": "2016-12-20T01:45:01Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            },
            {
              "originalPosition": 74,
              "body": "Left 0-RTT should be \"No 0-RTT\"?",
              "createdAt": "2016-12-20T01:49:09Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            },
            {
              "originalPosition": 79,
              "body": "EOED is still abbreviated. I feel like ideally we'd also have that be the \"core\" branch while the WAIT_EOED self-loop is more a side thing. That also solves our abbreviation problem:\r\n\r\n```\r\nCan Send                       | [Send Certificate + CertificateVerify]\r\nApp Data -->                   | Send Finished\r\nAfter                 +--------+--------+\r\nHere         No 0-RTT |                 | 0-RTT\r\n                      |                 v\r\n                      |             WAIT_EOED ---+\r\n                      |            Recv |  ^     | Recv Early Data\r\n                      |  EndOfEarlyData |  |     | \r\n                      |                 |  +-----+\r\n                      +--> WAIT_FLT2 <--+\r\n                               |\r\n```",
              "createdAt": "2016-12-20T01:55:15Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM2ODA4NzE=",
          "commit": {
            "abbreviatedOid": "2d589b0"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-20T02:00:27Z",
          "updatedAt": "2016-12-20T02:00:27Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Oh, I'd maybe move the \"Can Send App Data After Here\" down one line just so it's clear it's after \"Send Finished\" rather before.",
              "createdAt": "2016-12-20T02:00:27Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM2ODE0NDQ=",
          "commit": {
            "abbreviatedOid": "2d589b0"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-20T02:07:06Z",
          "updatedAt": "2016-12-20T02:09:06Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "Capitalization is also a bit inconsistent. For the most part, Everything Is Written In Title Case:\r\n- Can Send Early Data\r\n- Can Send App Data After Here\r\n- Client Auth\r\n- No Auth\r\n- Using Certificate\r\n- Recv Early Data\r\n- Recv Empty Certificate\r\n\r\nBut \"Select parameters\" is sentence-case. FWIW, I think the Excessive Title Case Feels A Little Weird and might suggest changing the others instead. (Though keep messages in UpperCamelCase of course.)\r\n\r\nEdit: Originally I wrote these feel more like sentences, but I suppose they're really not sentences. :-)",
              "createdAt": "2016-12-20T02:07:06Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            },
            {
              "originalPosition": 84,
              "body": "I think you can fit \"Client Auth\" and \"No Auth\" on one line each.\r\n\r\nLabels on state transitions are also inconsistent about whether they're vertically-aligned at top or center. \"No Auth\" is center, \"Recv Empty Certificate\" is top, and \"Client Auth\" is either top or a rounding error. (Maybe standardize on top so you don't have rounding errors? Top seems more common.)",
              "createdAt": "2016-12-20T02:08:43Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM2ODIwOTc=",
          "commit": {
            "abbreviatedOid": "2d589b0"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-20T02:13:42Z",
          "updatedAt": "2016-12-20T02:13:42Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "One last comment: the Recv Empty Certificate transition is missing an arrowhead.",
              "createdAt": "2016-12-20T02:13:42Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM2OTA2MDU=",
          "commit": {
            "abbreviatedOid": "2d589b0"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-20T04:13:00Z",
          "updatedAt": "2016-12-20T04:13:00Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "The reason I did top versus center is that there were places where the labels were too short to accommodate the amount of horizontal spacing needed to separate the two branches, as with WAIT_FLT2. I'll see about making them longer and maybe that will help",
              "createdAt": "2016-12-20T04:13:00Z",
              "updatedAt": "2016-12-21T21:07:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTQwMzY0NDg=",
          "commit": {
            "abbreviatedOid": "2d589b0"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-21T19:48:00Z",
          "updatedAt": "2016-12-21T21:11:42Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Good point",
              "createdAt": "2016-12-21T19:48:00Z",
              "updatedAt": "2016-12-21T21:11:42Z"
            },
            {
              "originalPosition": 47,
              "body": "I changed them as you suggest.",
              "createdAt": "2016-12-21T19:48:35Z",
              "updatedAt": "2016-12-21T21:11:42Z"
            },
            {
              "originalPosition": 63,
              "body": "Done",
              "createdAt": "2016-12-21T19:52:04Z",
              "updatedAt": "2016-12-21T21:11:42Z"
            },
            {
              "originalPosition": 79,
              "body": "I think After is clear enough here.",
              "createdAt": "2016-12-21T19:58:52Z",
              "updatedAt": "2016-12-21T21:11:42Z"
            },
            {
              "originalPosition": 91,
              "body": "Done",
              "createdAt": "2016-12-21T19:59:07Z",
              "updatedAt": "2016-12-21T21:11:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 825,
      "id": "MDExOlB1bGxSZXF1ZXN0OTg0NTk2MDA=",
      "title": "Some editorial changes in response to @mimoo's comments on-list",
      "url": "https://github.com/tlswg/tls13-spec/pull/825",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-12-17T23:42:10Z",
      "updatedAt": "2016-12-17T23:42:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5810b7062a12ec4d887ea27936866c34df2b0b51",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "mimoo_editorial",
      "headRefOid": "2ef52cec0d172cf91a996c603a8e88d33118cef2",
      "closedAt": "2016-12-17T23:42:15Z",
      "mergedAt": "2016-12-17T23:42:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "81852821e15b7a66fbf012a531dde1c6e92aba62"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 826,
      "id": "MDExOlB1bGxSZXF1ZXN0OTg0ODgzMDc=",
      "title": "add Contributor, Carl",
      "url": "https://github.com/tlswg/tls13-spec/pull/826",
      "state": "MERGED",
      "author": "cem-",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "per https://github.com/tlswg/tls13-spec/pull/821#issuecomment-267784881",
      "createdAt": "2016-12-18T21:36:01Z",
      "updatedAt": "2016-12-18T21:40:16Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7bdf1603ad6220d4c6d65f5c2dde0ca320fa2c7c",
      "headRepository": "cem-/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "d53c3ed891784daea16955c1ebb90d3a6fe14c70",
      "closedAt": "2016-12-18T21:40:15Z",
      "mergedAt": "2016-12-18T21:40:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "214236d7a9a72b13e9ad9e2a8271e6169cf9ef8d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 827,
      "id": "MDExOlB1bGxSZXF1ZXN0OTg1MDY3Mjg=",
      "title": "Reference rekeying paper",
      "url": "https://github.com/tlswg/tls13-spec/pull/827",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #761.",
      "createdAt": "2016-12-19T04:45:47Z",
      "updatedAt": "2016-12-21T19:37:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "214236d7a9a72b13e9ad9e2a8271e6169cf9ef8d",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "rekey_paper",
      "headRefOid": "3331f221022007b30433f754bc44741838804f27",
      "closedAt": "2016-12-21T19:37:48Z",
      "mergedAt": "2016-12-21T19:37:48Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c1336b1fad57c859c8a26b1c1ce9bb34c58e7c66"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 828,
      "id": "MDExOlB1bGxSZXF1ZXN0OTg1MDY3NjU=",
      "title": "Expand PRF on first use",
      "url": "https://github.com/tlswg/tls13-spec/pull/828",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-12-19T04:46:49Z",
      "updatedAt": "2016-12-19T04:50:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "214236d7a9a72b13e9ad9e2a8271e6169cf9ef8d",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "prf",
      "headRefOid": "ae7cf2fb8a56a99a4bf5213a4129ef42c87c7fc3",
      "closedAt": "2016-12-19T04:50:35Z",
      "mergedAt": "2016-12-19T04:50:35Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1f0fba492750a3cad1238de802689a08100cf735"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 830,
      "id": "MDExOlB1bGxSZXF1ZXN0OTg1MDc4Nzg=",
      "title": "Reword the exporters section for clarity",
      "url": "https://github.com/tlswg/tls13-spec/pull/830",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I found the wording a little hard to follow.  This also fixes #829 by being very explicit about the presence of the change.",
      "createdAt": "2016-12-19T05:06:15Z",
      "updatedAt": "2016-12-21T19:43:04Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1f0fba492750a3cad1238de802689a08100cf735",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "exporter_same",
      "headRefOid": "c130bba11ef617318b511820cb54b3be57ed1670",
      "closedAt": "2016-12-21T19:43:04Z",
      "mergedAt": "2016-12-21T19:43:04Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "8c865b379e449caa7307041e7ad5c206855ec55a"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This changeset includes some \".targets.mk\" cruft that isn't part of a reword.",
          "createdAt": "2016-12-20T02:32:29Z",
          "updatedAt": "2016-12-20T02:32:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 831,
      "id": "MDExOlB1bGxSZXF1ZXN0OTg1MDg4ODY=",
      "title": "Quiesce build warnings",
      "url": "https://github.com/tlswg/tls13-spec/pull/831",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Most of these are simple enough, kramdown treats all bracketed text as a reference.  So these can be replaced with `\\[` and the warnings go away.  The biggest change here is slightly stylistic: a few places had `[{{server-hello}}]`, which kramdown complained about, but rendered correctly.  However, this produced a non-sentence.\r\n\r\nAlso, I fixed some inconsistent use of references and s/data/date in one of the references.",
      "createdAt": "2016-12-19T05:23:47Z",
      "updatedAt": "2016-12-19T22:25:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1f0fba492750a3cad1238de802689a08100cf735",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "warnings",
      "headRefOid": "99153262f5f73160fc9a8089d2efa659d013e3eb",
      "closedAt": "2016-12-19T22:25:41Z",
      "mergedAt": "2016-12-19T22:25:41Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "23d9e62bc396487c6332c4fe790dfa79bde57d4b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM1NTEyMTI=",
          "commit": {
            "abbreviatedOid": "a406bda"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-19T13:30:57Z",
          "updatedAt": "2016-12-19T13:30:58Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "These are actually intentional. I don't think you need See here.",
              "createdAt": "2016-12-19T13:30:58Z",
              "updatedAt": "2016-12-19T21:58:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM2MTgzMzE=",
          "commit": {
            "abbreviatedOid": "a406bda"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "See comment",
          "createdAt": "2016-12-19T19:00:57Z",
          "updatedAt": "2016-12-19T19:00:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 832,
      "id": "MDExOlB1bGxSZXF1ZXN0OTg2MTA2OTU=",
      "title": "adding mimoo to contributors",
      "url": "https://github.com/tlswg/tls13-spec/pull/832",
      "state": "MERGED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-12-19T17:55:33Z",
      "updatedAt": "2016-12-19T18:13:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1f0fba492750a3cad1238de802689a08100cf735",
      "headRepository": "mimoo/tls13-spec",
      "headRefName": "add_myself_to_contributors",
      "headRefOid": "3e561fbd367fae14f59bb79b99400a8909a80b9a",
      "closedAt": "2016-12-19T18:00:11Z",
      "mergedAt": "2016-12-19T18:00:11Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "61377f87f665880cc5156defd90173a59ae68eea"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for remembering to do this. I had dropped the state on the theory you would retransmit :)",
          "createdAt": "2016-12-19T18:00:08Z",
          "updatedAt": "2016-12-19T18:00:08Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "awesome thanks :)",
          "createdAt": "2016-12-19T18:13:45Z",
          "updatedAt": "2016-12-19T18:13:45Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 833,
      "id": "MDExOlB1bGxSZXF1ZXN0OTg2MTE4MjA=",
      "title": "Reorder contributor",
      "url": "https://github.com/tlswg/tls13-spec/pull/833",
      "state": "MERGED",
      "author": "ghedo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Didn't quite realize this is in alphabetical order.",
      "createdAt": "2016-12-19T18:02:45Z",
      "updatedAt": "2016-12-19T19:00:04Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "61377f87f665880cc5156defd90173a59ae68eea",
      "headRepository": null,
      "headRefName": "patch-2",
      "headRefOid": "ec0f69041325d3abc9bc745e69bdc63cc00e8521",
      "closedAt": "2016-12-19T19:00:04Z",
      "mergedAt": "2016-12-19T19:00:04Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "dfec9b5e3a9d014be4464145f6516c1243d7832a"
      },
      "comments": [
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM, I noticed that misplaced name but didn't dare modifying it myself ;)",
          "createdAt": "2016-12-19T18:15:53Z",
          "updatedAt": "2016-12-19T18:15:53Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 834,
      "id": "MDExOlB1bGxSZXF1ZXN0OTg2Njc5MjE=",
      "title": "Extensions table",
      "url": "https://github.com/tlswg/tls13-spec/pull/834",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-12-20T00:50:05Z",
      "updatedAt": "2016-12-21T01:37:59Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "23d9e62bc396487c6332c4fe790dfa79bde57d4b",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "extensions_table",
      "headRefOid": "35b5f8b9fe497ff7570a90593530e42dfa029b6c",
      "closedAt": "2016-12-21T01:37:59Z",
      "mergedAt": "2016-12-21T01:37:59Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "96253a23ad73df57fbac8fe648abfa94b8291bc7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM2NzcwNTQ=",
          "commit": {
            "abbreviatedOid": "727cffc"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2016-12-20T01:18:34Z",
          "updatedAt": "2016-12-20T01:18:34Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "\"appear This\" => \"appear. This\"",
              "createdAt": "2016-12-20T01:18:34Z",
              "updatedAt": "2016-12-20T01:25:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 837,
      "id": "MDExOlB1bGxSZXF1ZXN0OTk1NDU2MjA=",
      "title": "Corrections for forward&backward secrecy",
      "url": "https://github.com/tlswg/tls13-spec/pull/837",
      "state": "CLOSED",
      "author": "jensguballa",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- E.2 Record Layer:\r\n  KeyUpdate provides backward secrecy, (EC)DHE provides forward secrecy",
      "createdAt": "2016-12-28T12:51:22Z",
      "updatedAt": "2017-01-31T08:17:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e94bd10fec81d5e7d291c24d0beed4759bb3865a",
      "headRepository": "jensguballa/tls13-spec",
      "headRefName": "forward_backward_secrecy",
      "headRefOid": "882240e2eb201533ba5ef55091eb8b5b3d3708c0",
      "closedAt": "2017-01-31T08:17:18Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You got it backward, the specification is correct here. Updating your keys provide forward secrecy but does not provide backward secrecy.\r\n\r\n* Forward secrecy: if the attacker breaks your current session, he cannot decrypt previous messages\r\n* Backward secrecy: if the attacker breaks your current session, he cannot decrypt future messages\r\n\r\n(It's not really intuitive, but that's the way it is :D)\r\n\r\n([coincidentally, looks like someone just talked about that at CCC](https://twitter.com/qrs/status/814058267987103745), here future secrecy = backward secrecy)",
          "createdAt": "2016-12-28T17:54:47Z",
          "updatedAt": "2016-12-28T18:25:21Z"
        },
        {
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Shameless author-plug: there is a lot of confusion about forward/backward/future secrecy, in part because the naming scheme is not super intuitive. We wrote [_On Post-Compromise Security_](http://ia.cr/2016/221) (CSF '16) to try to clear up some of the confusion.",
          "createdAt": "2016-12-28T20:10:03Z",
          "updatedAt": "2016-12-28T20:10:03Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@katrielalex: perhaps you would like to suggest some new text here? Thats what you get for shamelessly-plugging :)",
          "createdAt": "2016-12-28T20:16:01Z",
          "updatedAt": "2016-12-28T20:16:01Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@katrielalex: can we expect some text?",
          "createdAt": "2017-01-21T23:06:16Z",
          "updatedAt": "2017-01-21T23:06:16Z"
        },
        {
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, holidays and RWC got in the way. Bumped up the stack, will get something to you asap.",
          "createdAt": "2017-01-21T23:13:24Z",
          "updatedAt": "2017-01-21T23:13:24Z"
        },
        {
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "body": "ETA a day or two, am just conferring with the group",
          "createdAt": "2017-01-26T23:13:05Z",
          "updatedAt": "2017-01-26T23:13:05Z"
        },
        {
          "author": "jensguballa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this PR is obsoleted now by #867.",
          "createdAt": "2017-01-31T08:17:18Z",
          "updatedAt": "2017-01-31T08:17:18Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 838,
      "id": "MDExOlB1bGxSZXF1ZXN0OTk1NjI2NDk=",
      "title": "Certificate verify",
      "url": "https://github.com/tlswg/tls13-spec/pull/838",
      "state": "MERGED",
      "author": "jensguballa",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The client should be required to verify the CertificateVerify message. In addition I prefer to specify the alert type in case the verification fails (also for the Finished).",
      "createdAt": "2016-12-28T15:45:10Z",
      "updatedAt": "2017-01-22T11:48:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cde848b144f65df4c38284e19da04f9e8efe1492",
      "headRepository": "jensguballa/tls13-spec",
      "headRefName": "CertificateVerify",
      "headRefOid": "92244f11b3ed888f8c8acb78960f68edaf796ffd",
      "closedAt": "2017-01-21T23:10:19Z",
      "mergedAt": "2017-01-21T23:10:18Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "84c0968dab9febdbf8bfb1dceb7be3e6c430d883"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@jensguballa can you please rebase this?",
          "createdAt": "2016-12-30T01:15:21Z",
          "updatedAt": "2016-12-30T01:15:21Z"
        },
        {
          "author": "jensguballa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I tried my best to rebase the PR. Not sure though I did it the right way. @ekr, can you provide feedback? ",
          "createdAt": "2016-12-31T12:32:36Z",
          "updatedAt": "2016-12-31T12:32:36Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think it looks like the desired rebase.\r\nIIRC you have to use command-line git to do this rebase, and the workflow is something like:\r\n\r\n```\r\ngit checkout CertificateVerify\r\ngit fetch origin\r\ngit rebase origin/master\r\ngit push github CertificateVerify\r\n```\r\nwhich assumes that origin is github.com/tlswg/tls13-spec and the 'github' remote is your personal github fork; modify accordingly.\r\nI am not sure if there will be any rebase conflicts that need to be resolved (there may not be, since\r\nyou just have merge commits for changes you want to rebase past), but if not, there should be some documentation online for generic git conflict resolution scenarios.",
          "createdAt": "2017-01-03T16:12:25Z",
          "updatedAt": "2017-01-03T16:12:25Z"
        },
        {
          "author": "jensguballa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, so some homework for me to do. :)",
          "createdAt": "2017-01-03T16:26:19Z",
          "updatedAt": "2017-01-03T16:26:19Z"
        },
        {
          "author": "jensguballa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hopefully the PR now looks better. Sorry for my missing git experience. :)",
          "createdAt": "2017-01-03T20:22:48Z",
          "updatedAt": "2017-01-03T20:22:48Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, the commit structure is as desired, now.\r\n(No comment on the actual contents, yet, though ;) )",
          "createdAt": "2017-01-03T20:25:20Z",
          "updatedAt": "2017-01-03T20:25:20Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Probably worth saying, but I agree with MT that there's room for more detail about what exactly is verified, how it relates to the immediately prior Certificate message, how the x509 certificates therein are bound to any SNI in the handshake, etc.",
          "createdAt": "2017-01-04T00:35:54Z",
          "updatedAt": "2017-01-04T00:35:54Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "btw, @vtlynch pointed to me that [the TLS 1.2 spec](https://tools.ietf.org/html/rfc5246#section-7.4.5) was more ambiguous about this:\r\n\r\n> the client **SHOULD** verify that the server provided a valid certificate, if required\r\n\r\nI find that weird, but I'm happy that TLS 1.3 would change that to a MUST.",
          "createdAt": "2017-01-06T05:42:42Z",
          "updatedAt": "2017-01-06T05:42:42Z"
        },
        {
          "author": "jensguballa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Some things need to be sorted out first. IMO there are several validations regarding the certficate:\r\n  - validation of the identity provided in the certificate. On the client side his can be a consistency check against the SNI, if provided by the application, but it can be something else as well (e.g. externally received fingerprint of the certificate). I believe it depends too much on the use case to turn this validation into a MUST.\r\n  - validation of the certificate's structure. This is out of scope of TLS, see section 4.4.1.4.\r\n  - verification that the sender possesses the private key. Here I agree this should be a MUST, and that is addressed by this PR. ",
          "createdAt": "2017-01-06T14:15:43Z",
          "updatedAt": "2017-01-06T14:15:43Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> verification that the sender possesses the private key. Here I agree this should be a MUST, and that is addressed by this PR.\r\n\r\nThe text in the PR could be a little more clear that that is what is being validated.",
          "createdAt": "2017-01-06T18:42:53Z",
          "updatedAt": "2017-01-06T18:42:53Z"
        },
        {
          "author": "jensguballa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I just updated the PR and provided more details for the verification process (which required some restructuring of the CertificateVerify section). ",
          "createdAt": "2017-01-09T09:34:47Z",
          "updatedAt": "2017-01-09T09:34:47Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@jensguballa: please provide a PR to add yourself to the contributors list.",
          "createdAt": "2017-01-21T23:15:38Z",
          "updatedAt": "2017-01-21T23:15:38Z"
        },
        {
          "author": "jensguballa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A separate PR has been created (https://github.com/tlswg/tls13-spec/pull/854) to extend the distribution list.",
          "createdAt": "2017-01-22T11:48:08Z",
          "updatedAt": "2017-01-22T11:48:33Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 840,
      "id": "MDExOlB1bGxSZXF1ZXN0OTk2ODAxNDk=",
      "title": "Require that (EC)DHE public values be fresh.",
      "url": "https://github.com/tlswg/tls13-spec/pull/840",
      "state": "CLOSED",
      "author": "agl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This change requires that (EC)DHE public values be fresh, for both parties, in every handshake.\r\n\r\nFor clients, this is standard practice (as far as I'm aware) so should make no difference. For servers, this is not always the case:\r\n\r\nSpringall, Durumeric & Halderman [note](https://dl.acm.org/citation.cfm?id=2987480) that with TLS 1.2:\r\n\r\n- 4.4% of the Alexa Top 1M reuse DHE values and 1.3% do so for more than a day.\r\n- 14.4% of the Top 1M reuse ECDHE values, 3.4% for more than a day.\r\n\r\nSince this defeats forward security, and is clearly something that implementations of previous versions have done, this change specifically calls it out as a MUST NOT. Implementations would then be free to detect and reject violations of this.\r\n\r\nThis does have a cost because it also excludes the reasonable practice of amortising public value generation over all connections for a few seconds. The draft could attempt to specify a precise, maximum duration for reuse but that is more complex and no value is clearly optimal.\r\n\r\nAlso, this cost doesn't seem too high: 85.6% of servers _don't_ reuse values and manage fine today. The generation of (EC)DH public values is also a fixed-based operation and thus can be much faster than DH key-agreement.\r\n\r\nLastly, some have [proposed](https://datatracker.ietf.org/doc/draft-green-tls-static-dh-in-tls13/) (EC)DH reuse as a mechanism for enabling TLS connections to be decrypted and monitored by a middlebox. TLS is not designed to be decrypted by third-parties\u2014that's kind of the point. Thus anyone doing this should not be surprised to hit a few MUST NOTs and, potentially, to have to configure implementations to allow such a deployment.",
      "createdAt": "2016-12-29T17:35:15Z",
      "updatedAt": "2017-01-21T23:03:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b994b6cd97de0c8bdccdc91205593daebd406056",
      "headRepository": "agl/tls13-spec",
      "headRefName": "dhreuse2",
      "headRefOid": "0de2a14b01f9ee48ef3ff6b0588fd88401798e1d",
      "closedAt": "2017-01-21T23:03:31Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@agl: can you please propose this on the list. It's clearly a substantive change and we have a conflicting PR that is based on the assumption that reuse is permissible",
          "createdAt": "2016-12-29T17:40:04Z",
          "updatedAt": "2016-12-29T17:40:04Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah, I see you have. Thanks",
          "createdAt": "2016-12-29T17:41:42Z",
          "updatedAt": "2016-12-29T17:41:42Z"
        },
        {
          "author": "agl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: mail has already been sent. I think the mailing list machine is grinding away.",
          "createdAt": "2016-12-29T17:41:50Z",
          "updatedAt": "2016-12-29T17:43:41Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@agl: so I see. Maybe it had to generate a fresh DH share :)",
          "createdAt": "2016-12-29T17:44:03Z",
          "updatedAt": "2016-12-29T17:44:03Z"
        },
        {
          "author": "brainhub",
          "authorAssociation": "NONE",
          "body": "Regarding the detection, it seems that it's impractical to detect reuse in general.\r\n\r\nConsider the following setting. Use ECC as an example.\r\n\r\n- a peer generates a key pair (x, Q=xG),\r\n- he reuses it with some function Q_i = F(x, xG, i), where i={0, ... n} is a sequential index\r\n\r\nThe text in this diff alludes to the detection of F(x, Q, i) == Q, i.e. the straightforward reuse with memcpy. \r\n\r\nConsider a simple enhancement to F, e.g. F(x, Q, i) = (x + i)G. A peer would implement such an F by adding a G to the previous Q it has sent. It's slower than memcpy, but faster than a fresh generation. It's not forward-secure.\r\n\r\nThe reuse detection problem boils down to making statements about the entropy in the private key based on the public key, which is a hard problem.",
          "createdAt": "2016-12-29T19:50:11Z",
          "updatedAt": "2016-12-29T19:50:11Z"
        },
        {
          "author": "agl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@brainhub yes, there are limits to what level of dumb we can detect. This is more about helping those who aren't thinking too much about it. We know that sites have gotten it wrong with TLS 1.2 because, presumably, they didn't mean to configure a forward-secure cipher suite and then invalidate it by keeping the same public-value for weeks.\r\n\r\nBut an actively hostile server can always just encrypt their entropy seed in the server nonce or so and we would never know.",
          "createdAt": "2016-12-29T19:59:02Z",
          "updatedAt": "2016-12-29T19:59:02Z"
        },
        {
          "author": "briansniffen",
          "authorAssociation": "NONE",
          "body": "Of course they did. Configuring it as you describe gets the marketing benefits of ECDH\"E\", and avoids some problems with RSA Kx, at low cost. I do not endorse that decision, but I understand why some might make it.\n\nIt seems especially apt for sites that only serve one object \u2014 say, a JavaScript framework CDN. They can't have perfect forward secrecy, because they have no secrecy.  It is also helpful as an option when under certain sort of attack \u2014 to continue handshakes while capping the number of cryptographic operations performed.\n\nIn any case, it seems unwise to require that entropy be used in this way without an open discussion of the purposes of the extended random extension.\n\n-- \nBrian Sniffen\n\n> On Dec 29, 2016, at 2:59 PM, Adam Langley <notifications@github.com> wrote:\n> \n> @brainhub yes, there are limits to what level of dumb we can detect. This is more about helping those who aren't thinking too much about it. We know that sites have gotten it wrong with TLS 1.2 because, presumably, they didn't mean to configure a forward-secure cipher suite and then invalidate it by keeping the same public-value for weeks.\n> \n> But an actively hostile server can always just encrypt their entropy seed in the server nonce or so and we would never know.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
          "createdAt": "2016-12-29T21:37:42Z",
          "updatedAt": "2016-12-29T21:37:42Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "AGL seems to have disowned this proposal in:\r\nhttps://www.ietf.org/mail-archive/web/tls/current/msg22285.html\r\n\r\nAccordingly, in the interest of keeping the tracker clean I am closing this PR. We can re-open it if consensus changes.",
          "createdAt": "2017-01-21T23:03:31Z",
          "updatedAt": "2017-01-21T23:03:31Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 841,
      "id": "MDExOlB1bGxSZXF1ZXN0OTk2ODQ2MTQ=",
      "title": "(Re-)tighten and clarify KeyShareEntry ordering",
      "url": "https://github.com/tlswg/tls13-spec/pull/841",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a redo of PR #643 now that PR #678 has removed the appending\r\nrule and resolved issue #644.",
      "createdAt": "2016-12-29T18:25:42Z",
      "updatedAt": "2016-12-30T01:16:05Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b994b6cd97de0c8bdccdc91205593daebd406056",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "key-share-ordering-2",
      "headRefOid": "b96cc42c9ada59c5246f46dee82d925d2367cf02",
      "closedAt": "2016-12-30T01:16:05Z",
      "mergedAt": "2016-12-30T01:16:05Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ed74e76a36db1bd428d0fe68e9527d2de048335a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 842,
      "id": "MDExOlB1bGxSZXF1ZXN0OTk2ODU2Nzg=",
      "title": "Remove outdated implementation pitfall about RSA padding.",
      "url": "https://github.com/tlswg/tls13-spec/pull/842",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This advice is about RSASSA-PKCS1-v1_5 which is no longer applicable.\r\n\r\n(The note to accept both NULL and missing parameters was also wrong in\r\nTLS 1.2 and encourages using an actual ASN.1 parser, a dangerous\r\nimplementation strategy for RSASSA-PKCS1-v1_5. RFC 3447 section 8.2.2\r\nsays verification must compute the serialized EM' and compare EM against\r\nit, which implies one and only one padded DigestInfo serialization is\r\nvalid.)",
      "createdAt": "2016-12-29T18:38:06Z",
      "updatedAt": "2016-12-30T01:16:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b994b6cd97de0c8bdccdc91205593daebd406056",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "rsa-verify",
      "headRefOid": "9eaeac599b0793c41d2e45f45d82c78e92f932bb",
      "closedAt": "2016-12-30T01:16:41Z",
      "mergedAt": "2016-12-30T01:16:41Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d256f1858d1259714b5d3423ac36e949ceed085c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 843,
      "id": "MDExOlB1bGxSZXF1ZXN0OTk2ODY5ODA=",
      "title": "Clarify that HelloRetryRequest is mandatory.",
      "url": "https://github.com/tlswg/tls13-spec/pull/843",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-12-29T18:52:57Z",
      "updatedAt": "2017-01-05T18:35:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b994b6cd97de0c8bdccdc91205593daebd406056",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "hrr-required",
      "headRefOid": "36e8b0c18b320905b5d20c2305ecbff1028f5f85",
      "closedAt": "2017-01-05T18:35:58Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand",
          "createdAt": "2016-12-30T01:23:00Z",
          "updatedAt": "2016-12-30T01:23:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 844,
      "id": "MDExOlB1bGxSZXF1ZXN0OTk2ODc0OTk=",
      "title": "Artistic tweaks to the state machine drawings.",
      "url": "https://github.com/tlswg/tls13-spec/pull/844",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is just to make things a little more consistent. All but a handful\r\nof labels are vertically aligned. Two of the arrowheads were two spaces\r\naway from their target rather than one. One of the labels was two spaces\r\naway from the edge rather than one.",
      "createdAt": "2016-12-29T18:58:38Z",
      "updatedAt": "2016-12-29T19:14:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b994b6cd97de0c8bdccdc91205593daebd406056",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "artistic-critique",
      "headRefOid": "a3f8d08e0c4fb0a952aef51217226c60c5ddf64e",
      "closedAt": "2016-12-29T19:14:32Z",
      "mergedAt": "2016-12-29T19:14:32Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4e9ccc3dc7da94c52d374b08dc2a03560309cf51"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 845,
      "id": "MDExOlB1bGxSZXF1ZXN0OTk2ODk3MTE=",
      "title": "Tweak sectioning in Cryptographic Computations.",
      "url": "https://github.com/tlswg/tls13-spec/pull/845",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Exporters and (EC)DHE secrets are not traffic secrets. Group the two\r\n(EC)DHE sections under a name which matches what the key schedule\r\nsection calls it (the \"(EC)DHE shared secret\") and link to it from the\r\nkey schedule.",
      "createdAt": "2016-12-29T19:23:42Z",
      "updatedAt": "2016-12-29T19:26:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4e9ccc3dc7da94c52d374b08dc2a03560309cf51",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "crypto-computation-sections",
      "headRefOid": "d74fa72ed7c88f142bc1b081b9edecacc3855211",
      "closedAt": "2016-12-29T19:26:57Z",
      "mergedAt": "2016-12-29T19:26:57Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "394c6215a7e604044787c489250d8561f247c97d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 846,
      "id": "MDExOlB1bGxSZXF1ZXN0OTk2OTAyNDg=",
      "title": "Use fewer newlines in verify_data expression.",
      "url": "https://github.com/tlswg/tls13-spec/pull/846",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The other line-breaked expressions in the document do not use quite so\r\nmany newlines. I believe this matches the existing style, based on how\r\nDerive-Secret is defined.",
      "createdAt": "2016-12-29T19:29:25Z",
      "updatedAt": "2016-12-29T19:34:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "394c6215a7e604044787c489250d8561f247c97d",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "newlines",
      "headRefOid": "8678708f17623f7c5499f2f7c9817d426974c512",
      "closedAt": "2016-12-29T19:30:23Z",
      "mergedAt": "2016-12-29T19:30:23Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4a252f596ef7aea8a3021b080840b7361ad7c5ca"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This wasn't accidental, but I'm willing to change it.",
          "createdAt": "2016-12-29T19:30:19Z",
          "updatedAt": "2016-12-29T19:30:19Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh if there's some particular reason for this styling, I don't have particular cares. It just seemed inconsistent with everything else and I was bored.",
          "createdAt": "2016-12-29T19:34:27Z",
          "updatedAt": "2016-12-29T19:34:27Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 848,
      "id": "MDExOlB1bGxSZXF1ZXN0OTk5MDEyNTQ=",
      "title": "Add citation for miTLS record layer paper.",
      "url": "https://github.com/tlswg/tls13-spec/pull/848",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@prosecco, @adl: can you please double-check this. I had to remove all the accents, so maybe there is a better transliteration?",
      "createdAt": "2017-01-03T00:52:01Z",
      "updatedAt": "2017-01-05T18:35:44Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e94bd10fec81d5e7d291c24d0beed4759bb3865a",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "cite_record_layer",
      "headRefOid": "e2d9ea8f29b049a7addc44732231749af96031f3",
      "closedAt": "2017-01-05T18:35:44Z",
      "mergedAt": "2017-01-05T18:35:44Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "cde848b144f65df4c38284e19da04f9e8efe1492"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 850,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAxNzAzNDU2",
      "title": "Fix things, add things, use 0-RTT in paragraphs for consistency",
      "url": "https://github.com/tlswg/tls13-spec/pull/850",
      "state": "MERGED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Reading through the spec again I found a few tiny things to fix. I'm suggesting to replace \"Zero-RTT\" with \"0-RTT\" in the paragraph because I found \"Zero-RTT\" used only in headlines, but \"0-RTT\" consistently in paragraphs.",
      "createdAt": "2017-01-16T14:49:42Z",
      "updatedAt": "2017-01-22T11:00:52Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cde848b144f65df4c38284e19da04f9e8efe1492",
      "headRepository": null,
      "headRefName": "small-fixes",
      "headRefOid": "45f449cc1050569a37a705f1a1e8d15aaa3ebfaf",
      "closedAt": "2017-01-21T23:04:31Z",
      "mergedAt": "2017-01-21T23:04:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "789676dd3747fd57ece302c2155ac4edbaf6f5aa"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ttaubert: Please provide a PR to add yourself to acknowledgements.",
          "createdAt": "2017-01-21T23:05:03Z",
          "updatedAt": "2017-01-21T23:05:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 851,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAxNzQ0Mzg3",
      "title": "more info on certificate verify signature format",
      "url": "https://github.com/tlswg/tls13-spec/pull/851",
      "state": "MERGED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "minor additions, the **context string** wasn't explained anywhere as well so I thought a mini-line would help.",
      "createdAt": "2017-01-16T19:13:47Z",
      "updatedAt": "2017-01-21T23:16:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cde848b144f65df4c38284e19da04f9e8efe1492",
      "headRepository": "mimoo/tls13-spec",
      "headRefName": "typo_certificate_verify",
      "headRefOid": "df13c0539fe35d4cbd2009244f090b6b66efe708",
      "closedAt": "2017-01-21T23:16:31Z",
      "mergedAt": "2017-01-21T23:16:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b07f745b29e51acc3ee5b126bab03854218fbc07"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 852,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAyMTY5MzYw",
      "title": "Various ServerHello and HelloRetryRequest nitpicks.",
      "url": "https://github.com/tlswg/tls13-spec/pull/852",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a giant pile of nitpicks, loosely inspired by the FFDHE alert\r\ndiscussion.\r\n\r\nThe old text specifies a handshake_failure which is redundant with and\r\ncontradicts the Cryptographic Negotiation section. The old text says\r\nonly handshake_failure is allowed while Cryptographic Negotiation allows\r\nboth handshake_failure and insufficient_security. Fix this by avoiding\r\nredundancy as the failure cases are global to the overall negotiation\r\nalgorithm.\r\n\r\nNext, align the tense with itself and the rest of the text. Most of the\r\ntext appears to be written in present tense. The old text for SH said:\r\n\r\n  The server *will send* [...] when it *was* able to [...]\r\n\r\nwhich is a little odd. Also align the wording between the two. Talk\r\nabout a server (singular) to match Cryptographic Negotiation and say\r\n\"parameters\" rather than \"algorithms\" or \"algorithms and groups\".\r\n\r\nAlso be consistent about the SH vs. HRR condition. The SH section said\r\n\"the client\u2019s key_share extension was acceptable\" while the HRR section\r\nsaid \"the client\u2019s ClientHello did not contain sufficient information to\r\nproceed with the handshake\". Use the more general one.",
      "createdAt": "2017-01-18T23:07:19Z",
      "updatedAt": "2017-01-21T23:01:24Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cde848b144f65df4c38284e19da04f9e8efe1492",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "sh-hrr-nitpicks",
      "headRefOid": "4bb93dff1a4df88ee4247355061798ef9062726a",
      "closedAt": "2017-01-21T23:01:24Z",
      "mergedAt": "2017-01-21T23:01:24Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a2e6bca6721f8714724bd7e171c36eb2e63c273e"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Seems reasonable.\r\nI a little bit wondered whether to replace \"it\" with \"the server\", but the pronoun's meaning *should* be clear, here.",
          "createdAt": "2017-01-19T00:10:17Z",
          "updatedAt": "2017-01-19T00:10:17Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Seems clear enough to me, but I'm equally happy with the other wording. *shrug*",
          "createdAt": "2017-01-19T00:23:30Z",
          "updatedAt": "2017-01-19T00:23:39Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This does seem clearer. And shorter!",
          "createdAt": "2017-01-21T23:01:20Z",
          "updatedAt": "2017-01-21T23:01:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 853,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAyNjE2OTMz",
      "title": "Small fixes and adding myself to contributors list",
      "url": "https://github.com/tlswg/tls13-spec/pull/853",
      "state": "MERGED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-01-22T11:04:44Z",
      "updatedAt": "2017-01-22T14:32:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7a57398e6d0b66876351e9691bf5c80b2585c705",
      "headRepository": null,
      "headRefName": "more-small-fixes",
      "headRefOid": "58f2bb776306b52209aa6b0101ac88a18e268771",
      "closedAt": "2017-01-22T14:32:33Z",
      "mergedAt": "2017-01-22T14:32:33Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2de8cc6b3e0fe89e1f647104c55f0a31695e337d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 854,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAyNjE3OTE4",
      "title": "Add Jens Guballa as a contributer",
      "url": "https://github.com/tlswg/tls13-spec/pull/854",
      "state": "MERGED",
      "author": "jensguballa",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add an entry in the list of contributers",
      "createdAt": "2017-01-22T11:44:47Z",
      "updatedAt": "2017-01-22T14:28:53Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "7a57398e6d0b66876351e9691bf5c80b2585c705",
      "headRepository": "jensguballa/tls13-spec",
      "headRefName": "contribute_jg",
      "headRefOid": "8ba9f87a842ac4b78400a71e8562ee287769d5c7",
      "closedAt": "2017-01-22T14:28:53Z",
      "mergedAt": "2017-01-22T14:28:53Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "44cbaec397d66514d825258666ad6f6b75fdb58f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 857,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAyNjM4OTQ1",
      "title": "removing the \"subgroup attack\" mention for FFDH",
      "url": "https://github.com/tlswg/tls13-spec/pull/857",
      "state": "CLOSED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "From the [Diffie-Hellman parameters](https://tlswg.github.io/tls13-spec/#ffdhe-param) section:\r\n\r\n> Peers SHOULD validate each other\u2019s public key Y by ensuring that 1 < Y < p-1. This check ensures that the remote peer is properly behaved and isn\u2019t **forcing the local system into a small subgroup**.\r\n\r\nHere at most you're avoiding the -1 public key that generates a subgroup of order 2, but that would never be enough to recover the full private key. \r\n\r\nSo I think the \"and isn\u2019t forcing the local system into a small subgroup\" is not necessary here. It just adds more words.\r\n\r\n(A better check here would be to raise Y to the order of the used subgroup. [Looking at the list of groups](https://tools.ietf.org/html/rfc7919#appendix-A.1) I see that they are all safe primes so this check is useless (there is just no subgroup attack possible))",
      "createdAt": "2017-01-22T22:29:26Z",
      "updatedAt": "2017-02-16T16:07:12Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "463f3d422c21ec94c3dc9e1d11bfb23a9979c25f",
      "headRepository": "mimoo/tls13-spec",
      "headRefName": "remove_subgroup_mention",
      "headRefOid": "0ffbdd52191e29a51f1665348d89cd02b2e576bd",
      "closedAt": "2017-02-16T16:07:12Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would prefer to leave this as-is.\r\n\r\n1. This text appears in RFC 7919, which is defining the groups used here.\r\n2. We do not want to be forced into the subgroup of order 2, which, as you say, this check prevents.\r\n\r\n\r\n",
          "createdAt": "2017-01-23T00:55:41Z",
          "updatedAt": "2017-01-23T00:55:41Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There is nothing bad about being forced in the subgroup of order 2, I think here you mostly want to prevent computing things for nothing. It is not a primordial check imo (hence the SHOULD I'm guessing, that could even be a MAY).",
          "createdAt": "2017-01-23T09:29:16Z",
          "updatedAt": "2017-01-23T09:30:20Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Here at most you're avoiding the -1 public key that generates a subgroup of order 2, but that would never be enough to recover the full private key.\r\n\r\nbut it would be enough for eavesdropper to decrypt the connection\r\n\r\nthe check is trivial to perform and very cheap computationally, there's no reason to skip it",
          "createdAt": "2017-01-23T15:09:38Z",
          "updatedAt": "2017-01-23T15:09:38Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> but it would be enough for eavesdropper to decrypt the connection\r\n\r\nYeah, but same thing if a client sends the values g^1, g^2, g^3, g^4, etc... as public keys, do we test for these also?",
          "createdAt": "2017-01-23T17:30:00Z",
          "updatedAt": "2017-01-23T17:30:00Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The check ensures that either side cannot force the secret to some particular value, which was relevant for [3-SHAKE](https://mitls.org/pages/attacks/3SHAKE). As I understand, the protocol is intended not to rely on this property, but we check it anyway to be safe. The spec similarly mandates the all-zeros check in RFC 7748 and rejecting the point at infinity for NIST curves.\r\n\r\n(I agree that allowing an eavesdropper to decrypt the connection in the face of a colluding endpoint is not a meaningful attack. 3-SHAKE was a bit more complicated than that.)",
          "createdAt": "2017-01-23T17:41:41Z",
          "updatedAt": "2017-01-23T17:41:52Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 858,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAyNjU4NDk1",
      "title": "obfuscated_ticket_age can also update on HRR.",
      "url": "https://github.com/tlswg/tls13-spec/pull/858",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(This doesn't break ticket_age_add because it's additive.)",
      "createdAt": "2017-01-23T05:06:52Z",
      "updatedAt": "2017-03-04T21:58:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "463f3d422c21ec94c3dc9e1d11bfb23a9979c25f",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "update-obfuscated-ticket-age",
      "headRefOid": "3958e887fa0ee9863232d075c52535a6a67fbebf",
      "closedAt": "2017-03-04T21:58:20Z",
      "mergedAt": "2017-03-04T21:58:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ce516e424864e45ae233a9b7a94f18a90da16140"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 859,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAyNzY1NTA3",
      "title": "Move the RFC 7748 zeros check to section 7.4.2.",
      "url": "https://github.com/tlswg/tls13-spec/pull/859",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(EC)DHE is split between encoding and key calculation. Since checking\r\nfor the all zero value is something done in key calculation, move it to\r\nthat section.",
      "createdAt": "2017-01-23T17:38:25Z",
      "updatedAt": "2017-03-04T22:01:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "463f3d422c21ec94c3dc9e1d11bfb23a9979c25f",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "x25519-note-move",
      "headRefOid": "e51fdda683dabdc409c9a0c006c6ff8ca7454648",
      "closedAt": "2017-03-04T22:01:50Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 860,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAyODM5ODE0",
      "title": "adjusting the number of spaces.",
      "url": "https://github.com/tlswg/tls13-spec/pull/860",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-01-24T02:03:43Z",
      "updatedAt": "2017-03-13T04:53:30Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "463f3d422c21ec94c3dc9e1d11bfb23a9979c25f",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "fix-spaces",
      "headRefOid": "06f4c22b7b2979d398b372b1c8fa1a325e29ce92",
      "closedAt": "2017-03-04T22:01:59Z",
      "mergedAt": "2017-03-04T22:01:59Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b2d8014944e1e3add8d1dde958e11612f059e2b5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 862,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAzMDM4OTA0",
      "title": "update references",
      "url": "https://github.com/tlswg/tls13-spec/pull/862",
      "state": "MERGED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "draft_eddsa is now [RFC8032](https://tools.ietf.org/html/rfc8032). sandj-tls-iana-registry-updates is now ietf-tls-iana-registry-updates.",
      "createdAt": "2017-01-25T01:21:58Z",
      "updatedAt": "2017-01-25T01:30:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "463f3d422c21ec94c3dc9e1d11bfb23a9979c25f",
      "headRepository": null,
      "headRefName": "ref_eddsa",
      "headRefOid": "bc12a555ee53f3a8202daecbe1a57b857950ee11",
      "closedAt": "2017-01-25T01:28:31Z",
      "mergedAt": "2017-01-25T01:28:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "279926fea29c22adeb201289ae7e2987a17b33a8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 863,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAzMTI0MDE4",
      "title": "removed empty cases for EarlyDataIndication presentation language",
      "url": "https://github.com/tlswg/tls13-spec/pull/863",
      "state": "CLOSED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "removing confusing cases syntax after https://github.com/tlswg/tls13-spec/issues/861 discussion",
      "createdAt": "2017-01-25T14:02:04Z",
      "updatedAt": "2017-01-25T20:24:12Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "279926fea29c22adeb201289ae7e2987a17b33a8",
      "headRepository": "mimoo/tls13-spec",
      "headRefName": "remove_empty_cases",
      "headRefOid": "d5c84e816f8209414b7f0f07e0ecd371e7d68e89",
      "closedAt": "2017-01-25T20:24:12Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think this is correct -- we need to specify the structure that is sent in the body of this extension when carried in those messages; it just happens to be an empty structure.",
          "createdAt": "2017-01-25T16:58:24Z",
          "updatedAt": "2017-01-25T16:58:24Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not sure how you would read that differently. An empty structure would be the same as no case",
          "createdAt": "2017-01-25T17:14:31Z",
          "updatedAt": "2017-01-25T17:14:31Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, we do say \"The selector must be an enumerated type that defines the possible variants the structure defines. There must be a case arm for every element of the enumeration declared in the select.\"  So my claim would be more that it is invalid to have a select(Handshake.msg_type) that does not include a case arm for a message type that is allowed to contain this extension.",
          "createdAt": "2017-01-25T17:20:58Z",
          "updatedAt": "2017-01-25T17:20:58Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah I see! I missed that.",
          "createdAt": "2017-01-25T20:24:12Z",
          "updatedAt": "2017-01-25T20:24:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 864,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAzMjU1MzM3",
      "title": "removing an unnecessary word.",
      "url": "https://github.com/tlswg/tls13-spec/pull/864",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "confirmed in the face-to-face conversation.",
      "createdAt": "2017-01-26T05:35:26Z",
      "updatedAt": "2017-03-13T04:53:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "279926fea29c22adeb201289ae7e2987a17b33a8",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "removing-unnecessary-word",
      "headRefOid": "5574652a21174fba83f06e4a781012bde2c2c510",
      "closedAt": "2017-01-26T05:39:37Z",
      "mergedAt": "2017-01-26T05:39:37Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "90d93ef304d76b5f06806075f8d7a11e664b1c3e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 866,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAzNTY2NDIy",
      "title": "Add reference to draft-ietf-tls-tls13-vectors",
      "url": "https://github.com/tlswg/tls13-spec/pull/866",
      "state": "CLOSED",
      "author": "xiaoyinl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Since [draft-ietf-tls-tls13-vectors](https://datatracker.ietf.org/doc/draft-ietf-tls-tls13-vectors/) has been adopted, I think we need to mention it in the TLS 1.3 spec, don't we? It seems to me Appendix C is a right section to mention it.",
      "createdAt": "2017-01-27T21:05:20Z",
      "updatedAt": "2017-03-04T22:04:40Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "90d93ef304d76b5f06806075f8d7a11e664b1c3e",
      "headRepository": null,
      "headRefName": "testvector_ref",
      "headRefOid": "e0cbda936fdd9a1e885a077e22624e7bf2c0d2e5",
      "closedAt": "2017-03-04T22:04:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If you're going to do this, then you're also going to need to add the reference in s11.2.",
          "createdAt": "2017-01-29T00:00:42Z",
          "updatedAt": "2017-01-29T00:00:42Z"
        },
        {
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done. Thanks!",
          "createdAt": "2017-01-29T00:58:09Z",
          "updatedAt": "2017-01-29T00:58:09Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It should be informative so I think it's { { ? followed by the RFC#.",
          "createdAt": "2017-02-28T02:20:31Z",
          "updatedAt": "2017-02-28T02:20:31Z"
        },
        {
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner I don't think it's necessary to add `?` after `{{`, because [their syntax](https://github.com/cabo/kramdown-rfc2629#references) says if a reference is added to `Informative` section in the header, we don't need `?` or `!`.",
          "createdAt": "2017-02-28T10:15:11Z",
          "updatedAt": "2017-02-28T10:15:11Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ooops I think you might be right.   It's in the informative section in the front part of the draft.",
          "createdAt": "2017-02-28T10:54:54Z",
          "updatedAt": "2017-02-28T10:54:54Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQxMjc1OTY=",
          "commit": {
            "abbreviatedOid": "7557a58"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-27T23:55:20Z",
          "updatedAt": "2017-02-27T23:55:20Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "minor nit: should be a comma after \"Also\", here\r\n\r\nAlternatively, just drop the \"Also\" entirely; it's unneeded.",
              "createdAt": "2017-02-27T23:55:20Z",
              "updatedAt": "2017-02-28T10:06:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQyMDE4MTM=",
          "commit": {
            "abbreviatedOid": "7557a58"
          },
          "author": "xiaoyinl",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-28T10:09:27Z",
          "updatedAt": "2017-02-28T10:09:27Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I removed \"Also\". Thanks!",
              "createdAt": "2017-02-28T10:09:27Z",
              "updatedAt": "2017-02-28T10:09:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 867,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAzNzYwNTg3",
      "title": "Clarify post-compromise (in)security and KCI resistance.",
      "url": "https://github.com/tlswg/tls13-spec/pull/867",
      "state": "MERGED",
      "author": "katrielalex",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-01-30T15:43:17Z",
      "updatedAt": "2017-03-04T22:06:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "90d93ef304d76b5f06806075f8d7a11e664b1c3e",
      "headRepository": "katrielalex/tls13-spec",
      "headRefName": "post-compromise-security",
      "headRefOid": "5e08d82f7e096cb99fe12b635b17e29cd578a513",
      "closedAt": "2017-03-04T22:06:06Z",
      "mergedAt": "2017-03-04T22:06:06Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4865b47563e93b91eb3a7179ddcf1a791d0623ca"
      },
      "comments": [
        {
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(requested in https://github.com/tlswg/tls13-spec/pull/837)",
          "createdAt": "2017-01-30T15:44:38Z",
          "updatedAt": "2017-01-30T15:44:38Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It also seems okay to me.  I was reading quickly, and did not come up with any editorial nits.",
          "createdAt": "2017-02-08T21:34:25Z",
          "updatedAt": "2017-02-08T21:34:25Z"
        },
        {
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It looks like this is stalled on the naming of \"session keys\" through the document. @ekr, shall I open an issue for that to unblock this?",
          "createdAt": "2017-02-21T22:34:58Z",
          "updatedAt": "2017-02-21T22:34:58Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please",
          "createdAt": "2017-02-21T23:09:11Z",
          "updatedAt": "2017-02-21T23:09:11Z"
        },
        {
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, moving discussion to #847 since there's already a related open issue; this PR doesn't add more uses of the term \"session key\" so hopefully it can go in without waiting for that one.",
          "createdAt": "2017-02-22T09:09:07Z",
          "updatedAt": "2017-02-22T09:09:07Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkxMTMxMjQ=",
          "commit": {
            "abbreviatedOid": "07c692e"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2017-01-30T15:54:03Z",
          "updatedAt": "2017-01-30T15:57:36Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "1. You start out by describing KCI but then don't say what TLS's behavior with respect to KCI is, but rather talk about security with respect to the *peer*'s long term secret rather than the local one.\r\n\r\n2. This text doesn't seem quite correct. Consider the following sequence of events:\r\n\r\n- TLS handshake between A and B using ECDHE\r\n- A's long-term secret is compromised\r\n- A sends message \"X\" to B\r\n\r\nThe compromise of A's long-term secret does not (as far as I know) threaten either the confidentiality or integrity of \"X\".\r\n\r\nI think you need to split this up into compromises which happen before the handshake and those which happen after the handshake but before data is sent on the channel",
              "createdAt": "2017-01-30T15:54:03Z",
              "updatedAt": "2017-01-31T11:14:14Z"
            },
            {
              "originalPosition": 85,
              "body": "\"all future traffic secrets on that connection\"",
              "createdAt": "2017-01-30T15:55:09Z",
              "updatedAt": "2017-01-31T11:14:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkxMTU2MTc=",
          "commit": {
            "abbreviatedOid": "07c692e"
          },
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-01-30T16:03:13Z",
          "updatedAt": "2017-01-30T16:03:13Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "Re 1: my emphasis was unclear---I meant to contrast KCI resistance (if _your_ key has been compromised) with PCS (if your _peer's_ key has been compromised). Let me reword it a bit.",
              "createdAt": "2017-01-30T16:03:13Z",
              "updatedAt": "2017-01-31T11:14:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkxMTY0OTc=",
          "commit": {
            "abbreviatedOid": "07c692e"
          },
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-01-30T16:06:17Z",
          "updatedAt": "2017-01-30T16:06:17Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "Re 2: I think the division is between compromises which take place before the handshake and those which take place after (regardless of whether data have been sent). But yes, I agree that your scenario shows that the text isn't quite right.",
              "createdAt": "2017-01-30T16:06:17Z",
              "updatedAt": "2017-01-31T11:14:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyMTU5NDY=",
          "commit": {
            "abbreviatedOid": "e98ebc7"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This all seems correct to me.  I have a few editorial nits.",
          "createdAt": "2017-01-30T23:47:54Z",
          "updatedAt": "2017-01-30T23:53:04Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "nit s/See/see",
              "createdAt": "2017-01-30T23:47:54Z",
              "updatedAt": "2017-01-31T11:14:14Z"
            },
            {
              "originalPosition": 68,
              "body": "The emphasis on \"own\" here will probably render strangely.  You should remove it.\r\n\r\nAlso, \"may\" implies permissiveness.  \"a party has after\" would work equally well and is more assertive (I hope that being definitive rather than equivocal here is OK, I tend to think that it's OK as long as P=~0).",
              "createdAt": "2017-01-30T23:50:38Z",
              "updatedAt": "2017-01-31T11:14:14Z"
            },
            {
              "originalPosition": 84,
              "body": "Nit: I would s/compromised i.e., post-/compromised. That is, TLS does not provide post-/",
              "createdAt": "2017-01-30T23:52:51Z",
              "updatedAt": "2017-01-31T11:14:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyNTk4NjQ=",
          "commit": {
            "abbreviatedOid": "e98ebc7"
          },
          "author": "jensguballa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Replace session key by master secret",
          "createdAt": "2017-01-31T08:14:27Z",
          "updatedAt": "2017-01-31T08:25:52Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "Shouldn't \"session key\" be replaced by \"master secret\"? Neither \"session\" nor \"session key\" is well defined at all. Refer to issue #847.",
              "createdAt": "2017-01-31T08:14:27Z",
              "updatedAt": "2017-01-31T11:14:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkyOTEwMTE=",
          "commit": {
            "abbreviatedOid": "e98ebc7"
          },
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-01-31T11:14:52Z",
          "updatedAt": "2017-01-31T11:14:52Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "I've changed this, but \"session key\" appears elsewhere in the document. Should it be changed everywhere?",
              "createdAt": "2017-01-31T11:14:52Z",
              "updatedAt": "2017-01-31T11:14:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkzMDE2ODg=",
          "commit": {
            "abbreviatedOid": "5e08d82"
          },
          "author": "jensguballa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-01-31T12:21:24Z",
          "updatedAt": "2017-01-31T12:21:25Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "I think replacing it consistently throughout the document is the right way. Not sure if more consensus is needed.",
              "createdAt": "2017-01-31T12:21:25Z",
              "updatedAt": "2017-01-31T12:21:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkzMDE3Njk=",
          "commit": {
            "abbreviatedOid": "e98ebc7"
          },
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-01-31T12:22:03Z",
          "updatedAt": "2017-01-31T12:22:03Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "I'll let others comment but I agree that it should either be defined or removed (and slightly prefer the latter)",
              "createdAt": "2017-01-31T12:22:03Z",
              "updatedAt": "2017-01-31T12:22:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAxMTUyNjg=",
          "commit": {
            "abbreviatedOid": "5e08d82"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-03T22:12:11Z",
          "updatedAt": "2017-02-03T22:12:11Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "I'm not sure about that, the session key is defined and used all over the place. Also you could think that forward secrecy also affects the handshake secret which includes the master secret but the reverse is not true.",
              "createdAt": "2017-02-03T22:12:11Z",
              "updatedAt": "2017-02-03T22:12:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 868,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAzODI4MjQ5",
      "title": "Clarify when unrecognized extensions are ignored.",
      "url": "https://github.com/tlswg/tls13-spec/pull/868",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per the recent thread. I could have sworn this was in here, but can't\r\nfind it...\r\n\r\nThe NewSessionTicket section explicitly says to ignore unknown\r\nextensions, so I've added the analogous text to ClientHello and\r\nCertificateRequest.",
      "createdAt": "2017-01-30T21:52:33Z",
      "updatedAt": "2017-01-31T04:32:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "90d93ef304d76b5f06806075f8d7a11e664b1c3e",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "unknown-extensions",
      "headRefOid": "cfac1887e2100fbcfd2145558f4d949afaec3730",
      "closedAt": "2017-01-31T04:32:39Z",
      "mergedAt": "2017-01-31T04:32:39Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a5e6435c3da0d46a3c9e382ce69d5768f62c4ec7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 870,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA0MjY4MDYy",
      "title": "Using both External PSK and (EC)DH in TLS 1.3.",
      "url": "https://github.com/tlswg/tls13-spec/pull/870",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The following text is a proposal from Russ Housley based on the following thread:\r\nhttps://mailarchive.ietf.org/arch/msg/tls/1W_LRzLQHHH3iGS3zs-7LsMtx-8",
      "createdAt": "2017-02-02T03:13:04Z",
      "updatedAt": "2017-03-10T01:40:49Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a5e6435c3da0d46a3c9e382ce69d5768f62c4ec7",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "cert_and_external_psk",
      "headRefOid": "8db06e4a2d11226b0705b8719d05737c8db14b15",
      "closedAt": "2017-03-10T01:40:49Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk3MDg4MDA=",
          "commit": {
            "abbreviatedOid": "2e28a45"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-02T03:16:32Z",
          "updatedAt": "2017-02-02T03:16:33Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "s/sends/send",
              "createdAt": "2017-02-02T03:16:32Z",
              "updatedAt": "2017-02-02T03:19:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk3MDg5NTk=",
          "commit": {
            "abbreviatedOid": "2e28a45"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-02T03:19:14Z",
          "updatedAt": "2017-02-02T03:19:14Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I think that this is precisely the opposite of what the document currently specifies.  That is, PSK currently means that a certificate must not appear.",
              "createdAt": "2017-02-02T03:19:14Z",
              "updatedAt": "2017-02-02T03:19:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk4NTMwMjM=",
          "commit": {
            "abbreviatedOid": "8db06e4"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-02T18:14:46Z",
          "updatedAt": "2017-02-02T18:53:20Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Github is doing different syntax highlighting for the toplevel bullet points, and maybe they have inconsistent whitespace for them.",
              "createdAt": "2017-02-02T18:14:47Z",
              "updatedAt": "2017-02-02T18:53:20Z"
            },
            {
              "originalPosition": 27,
              "body": "I don't think PSK means that a certificate must not appear; I think it is not a specified behavior in the current document and is left to a future document to interpret.\r\nIt's still not clear to me that we need to paint ourselves into a corner at this time -- I never saw an explanation of which part of the existing text was problematic with respect to this issue.",
              "createdAt": "2017-02-02T18:53:20Z",
              "updatedAt": "2017-02-02T18:53:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk5MzExODE=",
          "commit": {
            "abbreviatedOid": "8db06e4"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-03T01:10:38Z",
          "updatedAt": "2017-02-03T01:10:38Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "In response to @kaduk, since github has eaten his response in a way that I can't respond...\r\n\r\nI think that this is a huge problem waiting to happen.  Current implementations assume that using PSK means no certificate.  We can't have ambiguity on this point or we won't get interoperability.  If you are saying that if PSK implies that the choice of whether to send a certificate is up to the server, then we need to explicitly say that.",
              "createdAt": "2017-02-03T01:10:38Z",
              "updatedAt": "2017-02-03T01:10:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTk5Mzg3NTM=",
          "commit": {
            "abbreviatedOid": "8db06e4"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-03T02:25:33Z",
          "updatedAt": "2017-02-03T02:25:33Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I agree with MT. The current draft is intended to prohibit the server sending a certificate with PSK mode. I'm happy to take PRs that consolidate that prohibition so that if/when we want to relax the requirement with some extension it's easy, but I think that the prohibition needs to remain in the draft.",
              "createdAt": "2017-02-03T02:25:33Z",
              "updatedAt": "2017-02-03T02:25:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAwMjM3NTA=",
          "commit": {
            "abbreviatedOid": "8db06e4"
          },
          "author": "russhousley",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-03T14:36:29Z",
          "updatedAt": "2017-02-03T14:36:29Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Draft -18 already says this is possible at the bottom of page 17.  This PR was intended to say how to do what the document says can be done.  Page 17 says:\r\n\r\n   PSKs can be used with (EC)DHE exchange in order to provide forward\r\n   secrecy in combination with shared keys, or can be used alone, at the\r\n   cost of losing forward secrecy.\r\n",
              "createdAt": "2017-02-03T14:36:29Z",
              "updatedAt": "2017-02-03T14:36:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAwMjQwMzI=",
          "commit": {
            "abbreviatedOid": "8db06e4"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-03T14:37:47Z",
          "updatedAt": "2017-02-03T14:37:47Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Yes, PSK can be used with ECDHE. It cannot be used with server authentication via a signature.",
              "createdAt": "2017-02-03T14:37:47Z",
              "updatedAt": "2017-02-03T14:37:47Z"
            }
          ]
        }
      ]
    },
    {
      "number": 873,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA0ODkxODY0",
      "title": "Added reference to exporter format in RFC 5705",
      "url": "https://github.com/tlswg/tls13-spec/pull/873",
      "state": "CLOSED",
      "author": "jsalowey",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "see Issue 872 #872",
      "createdAt": "2017-02-06T22:01:13Z",
      "updatedAt": "2017-02-06T22:12:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a5e6435c3da0d46a3c9e382ce69d5768f62c4ec7",
      "headRepository": "jsalowey/tls13-spec",
      "headRefName": "master",
      "headRefOid": "6c6bb479057326ed143457a97d2277bff54c4f07",
      "closedAt": "2017-02-06T22:12:56Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jsalowey",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Need to update base a resubmit",
          "createdAt": "2017-02-06T22:12:56Z",
          "updatedAt": "2017-02-06T22:12:56Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 874,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA0ODk0OTY1",
      "title": "5705 format ref",
      "url": "https://github.com/tlswg/tls13-spec/pull/874",
      "state": "MERGED",
      "author": "jsalowey",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add reference to label format in 5705. address issue #873 #873",
      "createdAt": "2017-02-06T22:19:58Z",
      "updatedAt": "2017-02-28T18:15:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a5e6435c3da0d46a3c9e382ce69d5768f62c4ec7",
      "headRepository": "jsalowey/tls13-spec",
      "headRefName": "5705-format-ref",
      "headRefOid": "121b99282598574a9b1350996bf949b881713ba4",
      "closedAt": "2017-02-28T18:15:48Z",
      "mergedAt": "2017-02-28T18:15:48Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "02f2155627d530e16b9a5ae7c82c41c168d1655d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 875,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA1NTE0NjA1",
      "title": "Add an extra Derive-Secret stage prior to HKDF-Extract. This has two",
      "url": "https://github.com/tlswg/tls13-spec/pull/875",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "benefits:\r\n\r\n(1) Restoring extract/expand parity, thus cleaning up the theoretical\r\n    treatment wrt HKDF and future replacements.\r\n(2) Futureproofing against someone being able to force the ECDHE\r\n    value in the second HKDF-Extract to collide with one of the labels.\r\n    This seems unlikely with current groups, but might be possible\r\n    with some future algorithm. (Issue due to Trevor Perrin).",
      "createdAt": "2017-02-09T21:13:37Z",
      "updatedAt": "2017-03-07T00:28:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a5e6435c3da0d46a3c9e382ce69d5768f62c4ec7",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "extract_expand_parity",
      "headRefOid": "c8f5a50d745919617f646be159a2b75839eea3e9",
      "closedAt": "2017-03-07T00:28:21Z",
      "mergedAt": "2017-03-07T00:28:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c6f49710621662dedde674eaa985f0e65dfad98d"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is mostly a cosmetic thing, and I'm not sure if I actually like all of my proposals below:\r\n\r\nWith the current scheme, the key schedule is very simple and neatly encompassed into a box with a shape like this:\r\n\r\n- NewTLS13KeySchedule(hash) => creates a new schedule with base secret = 0\r\n- AddEntropy(sched, ikm) => HKDF-Extract ikm into the current base secret\r\n- DeriveSecret(sched, label) => take the current base secret and handshake transcript and derive a particular secret with the label\r\n\r\nThis breaks the symmetry in a few ways:\r\n\r\n1. Incorporating a new IKM requires an extra label for the Derive-Secret operation in the middle.\r\n2. Going from 0 to Early Secret does not involve a Derive-Secret.\r\n3. We use Derive-Secret, Derive-Secret no longer always uses the current state of the handshake transcript\r\n\r\n(1) could be resolved by just using the same label for both, like \"prepare extract\" or something. I don't believe this breaks anything? We're just trying to fix the problem where HKDF-Extract and HKDF-Expand can't be used on the same key.\r\n\r\n(3) is actually kind of odd because Derive-Secret is defined as:\r\n\r\n    Derive-Secret(Secret, Label, Messages) =\r\n         HKDF-Expand-Label(Secret, Label,\r\n                           Hash(Messages), Hash.Length)\r\n\r\nSo we're actually putting Hash(\"\") into HKDF-Expand-Label, not the empty string. Then again, it feels odd making them ClientHello...ServerHello and ClientHello...Server Finished, respectively. We could use HKDF-Expand-Label directly which still gives us the separation, but it's not as obvious.\r\n\r\nAdding an extra Derive-Secret just to fix (2) feels a little pointless but would increase symmetry.\r\n\r\n(Alternatively, the answer could just be \"deal with it, your key schedule box should have slightly richer methods on it\". Like I said, this is just cosmetic.)",
          "createdAt": "2017-02-09T21:40:00Z",
          "updatedAt": "2017-02-09T21:40:20Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm ambivalent on David's gripe.  This seems fine to me.\r\n\r\nOne editorial suggestion though.  This is now a very tall diagram.  You can save a few lines by changing to something like this\r\n\r\n```\r\n         |\r\n         v\r\n    Derive-Secret(., \"derived handshake secret\")\r\n         |\r\n         v\r\n0 -> HKDF-Extract = handshake secret\r\n         |\r\n         +-----> Derive-Secret(., ...\r\n```",
          "createdAt": "2017-02-10T00:11:24Z",
          "updatedAt": "2017-02-10T00:11:24Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "About this PR, there is a con: complicating the already complicated key schedule",
          "createdAt": "2017-02-14T15:37:52Z",
          "updatedAt": "2017-02-14T15:38:19Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> About this PR, there is a con: complicating the already complicated key schedule\r\n\r\nIt does not seem especially complicated compared to, e.g., Kerberos.  Or maybe that's just me.",
          "createdAt": "2017-02-14T15:41:03Z",
          "updatedAt": "2017-02-14T15:41:03Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "well, you're comparing it to Kerberos :rofl: ",
          "createdAt": "2017-02-14T15:42:55Z",
          "updatedAt": "2017-02-14T15:42:55Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben: I fixed #1. I think we can live without #2. We already have this \"empty hash\" construct for the binder keys, so while it's a bit goofy it's no more goofy than here.\r\n",
          "createdAt": "2017-03-07T00:24:04Z",
          "updatedAt": "2017-03-07T00:24:04Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 876,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA1NTE0NjYy",
      "title": "Convert the handshake hash into a hash of hashes. This enables",
      "url": "https://github.com/tlswg/tls13-spec/pull/876",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "HRR to just contain a hash value rather than some odd partial\r\nhash state.",
      "createdAt": "2017-02-09T21:13:57Z",
      "updatedAt": "2017-03-08T17:29:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a5e6435c3da0d46a3c9e382ce69d5768f62c4ec7",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "reify_handshake_hashes2",
      "headRefOid": "3ce15038c86a5f106cd44a4cd4ff4ff4780923cd",
      "closedAt": "2017-03-08T17:29:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm late to the party, what's the point of that change?",
          "createdAt": "2017-02-14T14:39:17Z",
          "updatedAt": "2017-02-14T14:39:17Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See https://www.ietf.org/mail-archive/web/tls/current/msg22374.html",
          "createdAt": "2017-02-14T15:25:51Z",
          "updatedAt": "2017-02-14T15:25:51Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have been convinced that this particular construction is less good, so closing in favor of PR #901 ",
          "createdAt": "2017-03-08T17:29:52Z",
          "updatedAt": "2017-03-08T17:29:52Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 877,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA2OTM0NjQ3",
      "title": "No fallthrough",
      "url": "https://github.com/tlswg/tls13-spec/pull/877",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To fix #861, let's add semi-colons to EarlyDataIndication. To make the presentation language simpler, let's remove fall-through which is not used in other places.",
      "createdAt": "2017-02-20T03:32:41Z",
      "updatedAt": "2017-03-13T04:53:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a5e6435c3da0d46a3c9e382ce69d5768f62c4ec7",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "no-fallthrough",
      "headRefOid": "63e569703e0d226c490469e8a131bce18c618ffe",
      "closedAt": "2017-03-04T21:57:52Z",
      "mergedAt": "2017-03-04T21:57:52Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "63e569703e0d226c490469e8a131bce18c618ffe"
      },
      "comments": [
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM",
          "createdAt": "2017-02-20T14:05:03Z",
          "updatedAt": "2017-02-20T14:05:03Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One more thing:\r\n\r\n> There must be a case arm for every element of the enumeration declared in the select.\r\n\r\nThis is not true anymore. For instance `KeyShare` does not cover all handshake types. How can we improve this explanation?",
          "createdAt": "2017-02-21T00:59:45Z",
          "updatedAt": "2017-02-21T00:59:45Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi folks. Sorry it took me so long to weigh in, but I'm not really excited about this set of changes.\r\nAs far as I can tell, the primary impetus for this is the need to specify an empty value for a case. \r\n\r\nThe simplest thing to do here is just to define struct {} Empty; and then put Empty; in the relevant case arms. It's not new syntax, it's just a new type definition.\r\n\r\nAs for fallthrough, IMO it makes things easier to read.\r\n\r\nI'm happy to remove the requirement to cover all types, because that also makes things easier to read.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2017-02-21T01:23:17Z",
          "updatedAt": "2017-02-21T01:23:17Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think I had managed to squint enough that I could convince myself that only all values of the enum being used as a selector *that are valid in the current context* need to be enumerated.  So, when talking about, e.g., KeyShare, it's okay to only list case arms for client_hello, hello_retry_request, and server_hello, since other handshake messages would not contain a KeyShare.  But, maybe that requires too much squinting.",
          "createdAt": "2017-02-21T02:53:45Z",
          "updatedAt": "2017-02-21T02:53:45Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "yeah @kaduk is right, KeyShare does list all the possible options relevant to KeyShare. But yeah the quote is hard to read.\r\n\r\n@ekr I think it's a matter of what you're most used to read, but I find the PR easier to understand while defining a new struct {} Empty or having the fall through would be cumbersome in my opinion.",
          "createdAt": "2017-02-21T11:11:28Z",
          "updatedAt": "2017-02-21T11:11:28Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr I pushed three more commits. I hope that you like these.",
          "createdAt": "2017-02-22T05:21:07Z",
          "updatedAt": "2017-02-22T05:21:07Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have removed the tag and comment.",
          "createdAt": "2017-02-27T02:51:50Z",
          "updatedAt": "2017-02-27T02:51:50Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr I think this PR is ready to be merged.",
          "createdAt": "2017-02-27T02:53:12Z",
          "updatedAt": "2017-02-27T02:53:12Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI2ODU5NDQ=",
          "commit": {
            "abbreviatedOid": "1a5c01e"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-20T04:10:39Z",
          "updatedAt": "2017-02-20T04:10:39Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "Not sure that I understand this comment.  I'd remove it.  I realize that the expression \"VariantTag\" isn't understood, but it isn't critical to understanding.  Or, you could change this to be more explicit:\r\n\r\n```\r\nstruct {\r\n    VariantTag type;\r\n    select (VariantRecord.type) {\r\n```",
              "createdAt": "2017-02-20T04:10:39Z",
              "updatedAt": "2017-02-27T02:50:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI2OTMxNTc=",
          "commit": {
            "abbreviatedOid": "1a5c01e"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-20T06:09:31Z",
          "updatedAt": "2017-02-20T06:09:31Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "Good point!",
              "createdAt": "2017-02-20T06:09:31Z",
              "updatedAt": "2017-02-27T02:50:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI3NjY3MTY=",
          "commit": {
            "abbreviatedOid": "2d24663"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-20T14:04:48Z",
          "updatedAt": "2017-02-20T14:04:49Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "are these \"tag\" things used anywhere anyway? Can't we remove that as well?",
              "createdAt": "2017-02-20T14:04:49Z",
              "updatedAt": "2017-02-27T02:50:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI4NTk4OTc=",
          "commit": {
            "abbreviatedOid": "2d24663"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-21T00:56:44Z",
          "updatedAt": "2017-02-21T00:56:44Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "Good point.\r\n\r\nWe can replace it to `type == apple` or remove it. Which do you prefer?",
              "createdAt": "2017-02-21T00:56:44Z",
              "updatedAt": "2017-02-27T02:50:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI5Mjk4MzY=",
          "commit": {
            "abbreviatedOid": "2d24663"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-21T11:06:17Z",
          "updatedAt": "2017-02-21T11:06:17Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I'd remove it entirely as I don't see any of these VariantBody and tag things used anywhere in the spec.",
              "createdAt": "2017-02-21T11:06:17Z",
              "updatedAt": "2017-02-27T02:50:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjMxOTc2OTE=",
          "commit": {
            "abbreviatedOid": "353c43d"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-22T11:45:15Z",
          "updatedAt": "2017-02-22T11:45:15Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "what about this comment ",
              "createdAt": "2017-02-22T11:45:15Z",
              "updatedAt": "2017-02-27T02:50:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjMxOTc5NDA=",
          "commit": {
            "abbreviatedOid": "353c43d"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-22T11:46:33Z",
          "updatedAt": "2017-02-22T11:46:33Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Again, the specification does say that the presentation language is casually defined, I voice my concerns on this :)\r\n\r\n(also I think there is another // empty somewhere in the spec)",
              "createdAt": "2017-02-22T11:46:33Z",
              "updatedAt": "2017-02-27T02:50:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjMzNzI4MTI=",
          "commit": {
            "abbreviatedOid": "353c43d"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-23T00:38:02Z",
          "updatedAt": "2017-02-23T00:38:02Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "If we remove the comment, I would like to remove `variant_body`, too.",
              "createdAt": "2017-02-23T00:38:02Z",
              "updatedAt": "2017-02-27T02:50:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjMzNzI5ODU=",
          "commit": {
            "abbreviatedOid": "353c43d"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-23T00:39:17Z",
          "updatedAt": "2017-02-23T00:39:17Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "The tag of `select` is only used in `Handshake` where the `body` tag is not referred at all.\r\nWe could remove the `body` tag of `Handshake`.",
              "createdAt": "2017-02-23T00:39:17Z",
              "updatedAt": "2017-02-27T02:50:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjMzNzQxMjU=",
          "commit": {
            "abbreviatedOid": "353c43d"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-23T00:47:28Z",
          "updatedAt": "2017-02-23T00:47:28Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I doubly checked with my validator.\r\n\r\n- `Empty`s are used only here.\r\n- The syntax of this branch is valid.",
              "createdAt": "2017-02-23T00:47:28Z",
              "updatedAt": "2017-02-27T02:50:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 878,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA3MjYzMzU4",
      "title": "Security properties: note on awareness of authentication status",
      "url": "https://github.com/tlswg/tls13-spec/pull/878",
      "state": "MERGED",
      "author": "cascremers",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Added note in security properties section on the fact that the client cannot determine if the server considers the connection to be mutually authenticated.\r\n    \r\nThis paragraph condenses the main takeaway from the discussion at\r\nhttps://www.ietf.org/mail-archive/web/tls/current/msg22382.html\r\n    \r\nCas Cremers, Marko Horvat, J. Hoyland, T. van der Merwe, and Sam Scott.",
      "createdAt": "2017-02-21T19:42:07Z",
      "updatedAt": "2017-02-22T11:42:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a5e6435c3da0d46a3c9e382ce69d5768f62c4ec7",
      "headRepository": "cascremers/tls13-spec",
      "headRefName": "master",
      "headRefOid": "1b05447fa411ed2b42da927f9e44ae3fa642904d",
      "closedAt": "2017-02-21T21:40:44Z",
      "mergedAt": "2017-02-21T21:40:44Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c727a5d125f62c9e87defb9f7c72d373e4f1294d"
      },
      "comments": [
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think a mention of this problem could have been useful in the [receiving a certificate message](https://tlswg.github.io/tls13-spec/#receiving-a-certificate-message) section as well (or somewhere near).",
          "createdAt": "2017-02-22T11:42:25Z",
          "updatedAt": "2017-02-22T11:42:50Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 879,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA3MzY1OTk2",
      "title": "Grammar fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/879",
      "state": "MERGED",
      "author": "Buddybenj",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-02-22T09:28:53Z",
      "updatedAt": "2017-02-28T18:16:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c727a5d125f62c9e87defb9f7c72d373e4f1294d",
      "headRepository": "Buddybenj/tls13-spec",
      "headRefName": "grammar",
      "headRefOid": "53415adb25862f8203933300470f99410967e0b8",
      "closedAt": "2017-02-28T18:16:26Z",
      "mergedAt": "2017-02-28T18:16:26Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c7a2e4db74bb509a98bfb1205d408c72b2096853"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjMyNjA3NzE=",
          "commit": {
            "abbreviatedOid": "53415ad"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-02-22T16:18:06Z",
          "updatedAt": "2017-02-22T16:18:06Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjMyODg0Mjc=",
          "commit": {
            "abbreviatedOid": "53415ad"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-22T18:01:08Z",
          "updatedAt": "2017-02-22T18:01:08Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "however, seems fine to me here. the rest LGTM",
              "createdAt": "2017-02-22T18:01:08Z",
              "updatedAt": "2017-02-22T18:01:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjMzMzM1NTM=",
          "commit": {
            "abbreviatedOid": "53415ad"
          },
          "author": "Buddybenj",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-22T21:10:47Z",
          "updatedAt": "2017-02-22T21:10:47Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "In the way it's being used here, \"however\" typically starts a new sentence (or continues a sentence by using a semicolon). I would also argue that \"but\" reads nicer in this sentence. However, I will change it if you want me to.\r\n\r\nThe reason this form of \"however\" typically starts a new sentence is because without a new sentence, it's usually used in this way: \"The TLS standard, however, does not specify how protocols add security with TLS\".",
              "createdAt": "2017-02-22T21:10:47Z",
              "updatedAt": "2017-02-22T21:10:47Z"
            }
          ]
        }
      ]
    },
    {
      "number": 880,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA3NDYyODY1",
      "title": "Add OCSP to cert extensions",
      "url": "https://github.com/tlswg/tls13-spec/pull/880",
      "state": "MERGED",
      "author": "richsalz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Was already present for server; add it for client.\r\nAdd me to contributors (if appropriate)",
      "createdAt": "2017-02-22T17:53:07Z",
      "updatedAt": "2017-02-22T18:05:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c727a5d125f62c9e87defb9f7c72d373e4f1294d",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "73f4f7999589201cfadc4b14b1f2c2e684dd674a",
      "closedAt": "2017-02-22T18:05:02Z",
      "mergedAt": "2017-02-22T18:05:02Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "85af06e4dd8232dab23692403eeccbaeb96a22e3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjMyODc0NDc=",
          "commit": {
            "abbreviatedOid": "010d7a9"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-22T17:57:13Z",
          "updatedAt": "2017-02-22T17:57:13Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "\"status_request\" is listed just out of the displayed context, above.\r\n(mumble mumble \"status_request_v2\" mumble)",
              "createdAt": "2017-02-22T17:57:13Z",
              "updatedAt": "2017-02-22T18:01:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjMyODgzMzA=",
          "commit": {
            "abbreviatedOid": "010d7a9"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-22T18:00:41Z",
          "updatedAt": "2017-02-22T18:00:42Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "/me must remember to write out editor before doing git stuff.\r\n/me must remember multiple windows can cause mistakes.\r\nupdated commit pushed.\r\n",
              "createdAt": "2017-02-22T18:00:42Z",
              "updatedAt": "2017-02-22T18:01:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 881,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA3NjcyODMw",
      "title": "Added contribs.",
      "url": "https://github.com/tlswg/tls13-spec/pull/881",
      "state": "MERGED",
      "author": "cascremers",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-02-23T17:27:35Z",
      "updatedAt": "2017-02-23T19:36:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "fb50b6e590435aec2bada8b34d7074235ce4f5cc",
      "headRepository": "cascremers/tls13-spec",
      "headRefName": "contribs",
      "headRefOid": "8b4fb25fc93d54b33555a3b2ecc4e3a93894b10f",
      "closedAt": "2017-02-23T19:36:28Z",
      "mergedAt": "2017-02-23T19:36:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "82711c19e83706fef7ec0a5789171cf3c7609d40"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjM1NjAzNzM=",
          "commit": {
            "abbreviatedOid": "8b4fb25"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Cas, this looks good, except for Jonathan's address. LMK if you want one and I will merge either way",
          "createdAt": "2017-02-23T19:09:53Z",
          "updatedAt": "2017-02-23T19:10:40Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Does Jonathan not want an email address listed?",
              "createdAt": "2017-02-23T19:09:53Z",
              "updatedAt": "2017-02-23T19:10:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjM1NjExMTM=",
          "commit": {
            "abbreviatedOid": "8b4fb25"
          },
          "author": "cascremers",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-02-23T19:13:12Z",
          "updatedAt": "2017-02-23T19:13:12Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "No, this was intended. It's fine as-is.",
              "createdAt": "2017-02-23T19:13:12Z",
              "updatedAt": "2017-02-23T19:13:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 882,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA3NzY0OTQ2",
      "title": "Add an additional Derive-Secret to exporters",
      "url": "https://github.com/tlswg/tls13-spec/pull/882",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The structure of exporters is not conducive to forward security when there are multiple types of exporters in use.  This PR proposes to add an extra `Derive-Secret` stage to the derivation of exporters.  \r\n\r\n## Background\r\n\r\nAn endpoint could support multiple uses of exporters against the same connection.  If the implementation wants to export multiple values over time with multiple exporter contexts, it has to retain the exporter secret.  The existence of that exporter secret is a risk to any other keys that are exported from the connection.\r\n\r\nAn endpoint might know the potential *types* of exporter that it could use, but it won't always know all of the contexts that it might have to use.  Thus, it needs to retain the exporter secret as long as it might need to use it.\r\n\r\nIn quicwg/base-drafts#25 you can see an extreme case.  QUIC uses an exporter to bootstrap a key schedule that is modeled on TLS.  If the exporter secret could be discarded, then the key update mechanism in QUIC provides forward secrecy.  Data sent before a key update is not exposed as a result of a later compromise of an endpoint and its secrets.  However, the possibility that an endpoint might need to use an exporter means that it needs to retain the exporter secret.  Compromising the exporter secret also compromises all other exported secrets.\r\n\r\nIf we assume that the QUIC key derivation is the only consumer of exporters on a QUIC connection, this is easy to fix: delete the exporter secret.  But we are seeing lots of potential uses of exporters, and not all of them are structured in a way that would allow for a value to be created immediately after the handshake completes.\r\n\r\n## Proposed Solution\r\n\r\nThis PR allows an endpoint to create an array of secrets, one for each type of exporter it might need to use. It can then discard any of these intermediate secrets once it knows that that specific exporter isn't needed any more.\r\n\r\nFor implementations that don't use exporters, or that don't want this complexity, they can treat this as a single operation as they would do today, albeit with an extra `HKDF-Expand` stage.",
      "createdAt": "2017-02-24T04:14:57Z",
      "updatedAt": "2017-03-06T19:01:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "82711c19e83706fef7ec0a5789171cf3c7609d40",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "exporter_two_step",
      "headRefOid": "2695447d4bd5605b0b415f8e2407367a0edad0f8",
      "closedAt": "2017-03-06T19:01:07Z",
      "mergedAt": "2017-03-06T19:01:06Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "19bc9dc5b8662ab052b3f1095818c96e7f6cda26"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 883,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA4Mzc1MzA4",
      "title": "Remove duplicated word",
      "url": "https://github.com/tlswg/tls13-spec/pull/883",
      "state": "MERGED",
      "author": "jwilk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Found using [mwic](http://jwilk.net/software/mwic).",
      "createdAt": "2017-02-28T17:06:34Z",
      "updatedAt": "2017-02-28T18:15:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "82711c19e83706fef7ec0a5789171cf3c7609d40",
      "headRepository": null,
      "headRefName": "spelling",
      "headRefOid": "7b9fcab71b568558ed447ca2ae40bbaf162b3729",
      "closedAt": "2017-02-28T18:15:10Z",
      "mergedAt": "2017-02-28T18:15:10Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "859f91c5ab6450ad2a88120316b7849b25f73152"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 884,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA4ODU5NTk0",
      "title": "Adding Kenny and Atul as contributors",
      "url": "https://github.com/tlswg/tls13-spec/pull/884",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-02T21:52:51Z",
      "updatedAt": "2017-03-02T22:11:52Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c7a2e4db74bb509a98bfb1205d408c72b2096853",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "kenny_atul",
      "headRefOid": "9b31b509e7640752dac9506e21ed7084d72778bb",
      "closedAt": "2017-03-02T22:11:52Z",
      "mergedAt": "2017-03-02T22:11:52Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "bc22710d163f69648ca7471670cd562ffbae7c6a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 885,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA4ODgxMzY2",
      "title": "zeroes -> zeros",
      "url": "https://github.com/tlswg/tls13-spec/pull/885",
      "state": "MERGED",
      "author": "leonklingele",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-03T00:18:09Z",
      "updatedAt": "2017-03-04T20:59:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bc22710d163f69648ca7471670cd562ffbae7c6a",
      "headRepository": "leonklingele/tls13-spec",
      "headRefName": "fix-typo-ae-be",
      "headRefOid": "5bc27d96e2039fcf903eeecc4bc4aecbdd00e95e",
      "closedAt": "2017-03-04T20:59:32Z",
      "mergedAt": "2017-03-04T20:59:32Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "16b30b0814dc4601cb32eab025a32767e349b57f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 886,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA4ODk2MTAz",
      "title": "Various updates to stuff which I didn't like / was incorrect / missing something",
      "url": "https://github.com/tlswg/tls13-spec/pull/886",
      "state": "CLOSED",
      "author": "leonklingele",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-03T02:38:49Z",
      "updatedAt": "2017-03-06T22:10:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4865b47563e93b91eb3a7179ddcf1a791d0623ca",
      "headRepository": "leonklingele/tls13-spec",
      "headRefName": "stuff-worth-fixing",
      "headRefOid": "f4a81ca66a0e11b853e0ef479f3d7564e2825055",
      "closedAt": "2017-03-06T22:06:53Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "leonklingele",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Added more updates. This MR is no longer WIP and can be reviewed :)",
          "createdAt": "2017-03-03T18:53:59Z",
          "updatedAt": "2017-03-03T18:53:59Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@leonklingele: this seems to consist of a number of systematic text changes, some of which I like and some of which I don't. Looking through these:\r\n\r\n- adding periods where needed [OK]\r\n- (See Section XXX) -> (see section XXX) [OK]\r\n- capitalizing all message names [this seems like a case by case thing. I don't think \"send an alert\" needs to be capitalized]\r\n- plural agreement for verbs [this is fine in principle, but not all of your changes appear correct.]\r\n\r\nIt would be helpful if you would break these up into separate PRs or at least separate commits, so I can handle them independently.\r\n\r\nI see you also changed a bunch of stuff that's descriptive to normative. These are non-editorial changes and should be part of a separate PR.\r\n\r\n",
          "createdAt": "2017-03-04T22:17:53Z",
          "updatedAt": "2017-03-04T22:17:53Z"
        },
        {
          "author": "leonklingele",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Updated this PR to only include cosmetic fixes.",
          "createdAt": "2017-03-05T00:01:49Z",
          "updatedAt": "2017-03-05T00:01:49Z"
        },
        {
          "author": "leonklingele",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Non-cosmetic stuff is in #892 ",
          "createdAt": "2017-03-05T00:11:18Z",
          "updatedAt": "2017-03-05T00:11:18Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@leonklingele: I merged this by hand, dropping some of commits that I was unhappy about (or in some cases @davegarrett was unhappy about). I also edited a few of them to clean them up.",
          "createdAt": "2017-03-06T22:06:53Z",
          "updatedAt": "2017-03-06T22:06:53Z"
        },
        {
          "author": "leonklingele",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\ud83d\udc4d and sorry for nitpicking.",
          "createdAt": "2017-03-06T22:10:47Z",
          "updatedAt": "2017-03-06T22:10:47Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMjY1MTk=",
          "commit": {
            "abbreviatedOid": "0ae213d"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-03T17:29:33Z",
          "updatedAt": "2017-03-03T17:29:33Z",
          "comments": [
            {
              "originalPosition": 271,
              "body": "No, this is a byte which has value zero, not a thing that is zero bytes long.",
              "createdAt": "2017-03-03T17:29:33Z",
              "updatedAt": "2017-03-05T00:01:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwNDM5ODE=",
          "commit": {
            "abbreviatedOid": "0ae213d"
          },
          "author": "leonklingele",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-03T18:53:04Z",
          "updatedAt": "2017-03-03T18:53:04Z",
          "comments": [
            {
              "originalPosition": 271,
              "body": "You're right! Reverted with a1744b2686e21f1d525e852305ab77b8f78908fa",
              "createdAt": "2017-03-03T18:53:04Z",
              "updatedAt": "2017-03-05T00:01:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxNTQ1MDI=",
          "commit": {
            "abbreviatedOid": "f4a81ca"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-05T19:47:28Z",
          "updatedAt": "2017-03-05T19:57:50Z",
          "comments": [
            {
              "originalPosition": 153,
              "body": "this is correct as-is",
              "createdAt": "2017-03-05T19:47:28Z",
              "updatedAt": "2017-03-05T19:57:50Z"
            },
            {
              "originalPosition": 323,
              "body": "this is correct as-is\r\nhttps://www.usingenglish.com/forum/threads/150770-a-unified",
              "createdAt": "2017-03-05T19:49:44Z",
              "updatedAt": "2017-03-05T19:57:50Z"
            },
            {
              "originalPosition": 365,
              "body": "I think the current text is preferable here. Both might be grammatically correct, but the former sounds better.\r\n\r\n(design allows for; octets allow for)",
              "createdAt": "2017-03-05T19:51:35Z",
              "updatedAt": "2017-03-05T19:57:50Z"
            },
            {
              "originalPosition": 401,
              "body": "ditch the comma after \"and\"",
              "createdAt": "2017-03-05T19:52:18Z",
              "updatedAt": "2017-03-05T19:57:50Z"
            },
            {
              "originalPosition": 529,
              "body": "It is correct as-is. I'm not convinced \"rawly\" is a word.",
              "createdAt": "2017-03-05T19:53:27Z",
              "updatedAt": "2017-03-05T19:57:50Z"
            },
            {
              "originalPosition": 547,
              "body": "This is correct as-is.\r\nA && B are required for D || C\r\nif D || C, must A && B\r\nNOT just if D && C, must A && B",
              "createdAt": "2017-03-05T19:55:11Z",
              "updatedAt": "2017-03-05T19:57:50Z"
            },
            {
              "originalPosition": 26,
              "body": "I don't think we need to go through here changing all these capitalization. Please fork all of the message type capitalization changes off into a separate PR for separate consideration to the typo and grammar changes. (and do a squash of all the little commits into one or a few)",
              "createdAt": "2017-03-05T19:57:09Z",
              "updatedAt": "2017-03-05T19:57:50Z"
            }
          ]
        }
      ]
    },
    {
      "number": 887,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA4ODk2ODYx",
      "title": "DH params: Peers MUST validate each other's public key",
      "url": "https://github.com/tlswg/tls13-spec/pull/887",
      "state": "MERGED",
      "author": "leonklingele",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I wonder why this was only a `SHOULD` before.\r\nAm I right to assume that this is because TLS 1.3 has removed support for static DH and leaking an ephemeral key is not considered to be a security problem?",
      "createdAt": "2017-03-03T02:46:39Z",
      "updatedAt": "2017-03-04T21:27:44Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bc22710d163f69648ca7471670cd562ffbae7c6a",
      "headRepository": "leonklingele/tls13-spec",
      "headRefName": "dh-must-validate-pubkey",
      "headRefOid": "b802794576d1dfa5e5f510272129b3ece7e0b0e9",
      "closedAt": "2017-03-04T20:59:12Z",
      "mergedAt": "2017-03-04T20:59:12Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "dd60a077f26fcf6c37b54908d99af7f5a9cea6cb"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Gotta say, I don't know why this was SHOULD.  That check is very easy to implement.",
          "createdAt": "2017-03-03T02:48:21Z",
          "updatedAt": "2017-03-03T02:48:21Z"
        },
        {
          "author": "leonklingele",
          "authorAssociation": "CONTRIBUTOR",
          "body": "[RFC 7919, section 5.1](https://tools.ietf.org/html/rfc7919#section-5.1) says `MUST`.",
          "createdAt": "2017-03-03T02:52:52Z",
          "updatedAt": "2017-03-03T02:52:52Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This text was adapted from some old draft of 7919 which had should and never got updated (see for instance: https://tools.ietf.org/html/draft-ietf-tls-negotiated-ff-dhe-02). Good catch.",
          "createdAt": "2017-03-04T20:59:02Z",
          "updatedAt": "2017-03-04T20:59:02Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@leonklingele Please provide a PR adding yourself to contributors.",
          "createdAt": "2017-03-04T21:00:04Z",
          "updatedAt": "2017-03-04T21:00:04Z"
        },
        {
          "author": "leonklingele",
          "authorAssociation": "CONTRIBUTOR",
          "body": "#891 ",
          "createdAt": "2017-03-04T21:27:44Z",
          "updatedAt": "2017-03-04T21:27:44Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 888,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA4OTAyNDQ2",
      "title": "Specify _which_ servers should set the random value's suffix",
      "url": "https://github.com/tlswg/tls13-spec/pull/888",
      "state": "MERGED",
      "author": "leonklingele",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I guess this was removed by accident in https://github.com/tlswg/tls13-spec/commit/cbc261a864236fe1424ac3a9826a7833e164a218",
      "createdAt": "2017-03-03T03:50:13Z",
      "updatedAt": "2017-03-04T21:29:04Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bc22710d163f69648ca7471670cd562ffbae7c6a",
      "headRepository": "leonklingele/tls13-spec",
      "headRefName": "tls12-downgrade-random-suffix",
      "headRefOid": "2b9aac6ff0e22e109d042723654f9750727ece32",
      "closedAt": "2017-03-04T21:29:04Z",
      "mergedAt": "2017-03-04T21:29:04Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e83357083ad52da3d73d00806a6c9cc54035b93c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 889,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA4OTAyNDcy",
      "title": "Make sure the server random needs to be generated using a CSRNG as well",
      "url": "https://github.com/tlswg/tls13-spec/pull/889",
      "state": "MERGED",
      "author": "leonklingele",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-03T03:50:33Z",
      "updatedAt": "2017-03-04T21:30:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bc22710d163f69648ca7471670cd562ffbae7c6a",
      "headRepository": "leonklingele/tls13-spec",
      "headRefName": "server-random-secure",
      "headRefOid": "9dcdb2f704fbb9b41d54504edf713a0b17bce281",
      "closedAt": "2017-03-04T21:30:03Z",
      "mergedAt": "2017-03-04T21:30:03Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e7c5af62f7fe7c762d0a933b930ed3a7d41406a0"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 890,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA4OTAzMDc5",
      "title": "'ticket_age_add' should be generated using a secure RNG",
      "url": "https://github.com/tlswg/tls13-spec/pull/890",
      "state": "MERGED",
      "author": "leonklingele",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-03T03:57:31Z",
      "updatedAt": "2017-03-04T21:30:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bc22710d163f69648ca7471670cd562ffbae7c6a",
      "headRepository": "leonklingele/tls13-spec",
      "headRefName": "secure-random-ticket_age_add",
      "headRefOid": "89e36bf909bab719725d1ab09838f3f99c378692",
      "closedAt": "2017-03-04T21:30:20Z",
      "mergedAt": "2017-03-04T21:30:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7787348c2e78a149d880aa6a14043a79cc665569"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 891,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA5MTIzNjgx",
      "title": "Add myself to contributors list",
      "url": "https://github.com/tlswg/tls13-spec/pull/891",
      "state": "MERGED",
      "author": "leonklingele",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-04T21:27:22Z",
      "updatedAt": "2017-03-04T21:29:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "16b30b0814dc4601cb32eab025a32767e349b57f",
      "headRepository": "leonklingele/tls13-spec",
      "headRefName": "add-myself-author",
      "headRefOid": "8b38d33908be35af55894b6003734870b2f202be",
      "closedAt": "2017-03-04T21:29:20Z",
      "mergedAt": "2017-03-04T21:29:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "92e54fedc4aed745623d05f10dec583018b97cd5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 892,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA5MTI4ODQ4",
      "title": "Keyword updates",
      "url": "https://github.com/tlswg/tls13-spec/pull/892",
      "state": "CLOSED",
      "author": "leonklingele",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-05T00:10:29Z",
      "updatedAt": "2017-03-06T22:53:39Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4865b47563e93b91eb3a7179ddcf1a791d0623ca",
      "headRepository": "leonklingele/tls13-spec",
      "headRefName": "keywords-must-should-may",
      "headRefOid": "df69d304661833bf0e7ff9eebc2f99e5bf94b611",
      "closedAt": "2017-03-06T22:52:05Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged the subset as noted above",
          "createdAt": "2017-03-06T22:52:05Z",
          "updatedAt": "2017-03-06T22:52:05Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUzODI5MjY=",
          "commit": {
            "abbreviatedOid": "df69d30"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "@leonklingele: I am going to take some, but not all of these, as noted here. The others seem either wrong or substantive, so you should take them to the list.",
          "createdAt": "2017-03-06T22:28:49Z",
          "updatedAt": "2017-03-06T22:44:11Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "This MUST NOT doesn't seem quite right. It's not normative.",
              "createdAt": "2017-03-06T22:28:49Z",
              "updatedAt": "2017-03-06T22:44:11Z"
            },
            {
              "originalPosition": 20,
              "body": "I don't think this is necessary, because the MUST is somewhere else.",
              "createdAt": "2017-03-06T22:29:34Z",
              "updatedAt": "2017-03-06T22:44:11Z"
            },
            {
              "originalPosition": 24,
              "body": "This seems to sort of invert the sense. The \"do not need to\" is telling you that it's not ncessary.",
              "createdAt": "2017-03-06T22:29:55Z",
              "updatedAt": "2017-03-06T22:44:11Z"
            },
            {
              "originalPosition": 71,
              "body": "I think we can remove the MUST here b/c the MUST requirement is above. This is telling you how things behave.",
              "createdAt": "2017-03-06T22:30:38Z",
              "updatedAt": "2017-03-06T22:44:11Z"
            },
            {
              "originalPosition": 89,
              "body": "This is not correct, because you *can* wait for it, you just need not.",
              "createdAt": "2017-03-06T22:34:14Z",
              "updatedAt": "2017-03-06T22:44:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 893,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA5MTc1NzAx",
      "title": "Fall back",
      "url": "https://github.com/tlswg/tls13-spec/pull/893",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For #836, I would open this PR.\r\n\r\nPlease discuss whether or not we should use \"SHOULD\" here.",
      "createdAt": "2017-03-06T01:12:36Z",
      "updatedAt": "2017-03-13T04:53:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4865b47563e93b91eb3a7179ddcf1a791d0623ca",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "fall-back",
      "headRefOid": "10e7c12d95ead357dca3d12f5f8a292a00cfeb02",
      "closedAt": "2017-03-06T04:05:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I pushed a commit to fix the condition. What about this?",
          "createdAt": "2017-03-06T04:03:59Z",
          "updatedAt": "2017-03-06T04:03:59Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm very sorry.\r\nThis branch accidentally contains my local commits.\r\nSo, I close this and resubmit a new PR.",
          "createdAt": "2017-03-06T04:05:37Z",
          "updatedAt": "2017-03-06T04:05:37Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson @ekr Please read #894.",
          "createdAt": "2017-03-06T04:28:58Z",
          "updatedAt": "2017-03-06T04:28:58Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For future reference, you can simply force push a replacement set of commits to the same remote branch to change the contents of the PR, as needed. You don't have to refile completely.",
          "createdAt": "2017-03-06T06:44:34Z",
          "updatedAt": "2017-03-06T06:44:34Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett Thanks!",
          "createdAt": "2017-03-06T07:51:00Z",
          "updatedAt": "2017-03-06T07:51:00Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxNjk3Mjg=",
          "commit": {
            "abbreviatedOid": "656af76"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-06T03:08:09Z",
          "updatedAt": "2017-03-06T03:08:09Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "If the binder is present and the server believes that it has a key, then it MUST fail the handshake (in my view).  That's certainly what NSS does.  If the binder is present, but the server doesn't have a key, then it doesn't have a key and can't resume.",
              "createdAt": "2017-03-06T03:08:09Z",
              "updatedAt": "2017-03-06T04:03:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxNzIyNTk=",
          "commit": {
            "abbreviatedOid": "656af76"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-06T03:49:32Z",
          "updatedAt": "2017-03-06T03:49:32Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I agree with MT. The order of operations is:\r\n\r\n- Determine whether you are going to PSK and select the PSK\r\n- If you are resuming, check the binder.\r\n\r\nIf the binder checks fails, fail the handshake",
              "createdAt": "2017-03-06T03:49:32Z",
              "updatedAt": "2017-03-06T04:03:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxNzI0ODY=",
          "commit": {
            "abbreviatedOid": "656af76"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-06T03:53:33Z",
          "updatedAt": "2017-03-06T03:53:33Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Ah, I wrote this PR with confusion. The binder MUST be verified anyway.\r\nWhat I should have talked about the encrypted PSK value itself.\r\nI will push a fix.\r\nThank you for pointing out.",
              "createdAt": "2017-03-06T03:53:33Z",
              "updatedAt": "2017-03-06T04:03:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 894,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA5MTg3NDQ2",
      "title": "a server should fall back to a full handshake",
      "url": "https://github.com/tlswg/tls13-spec/pull/894",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For #836, I would open this PR (again).\r\n\r\nPlease discuss whether or not we should use \"SHOULD\" here.",
      "createdAt": "2017-03-06T04:13:16Z",
      "updatedAt": "2017-03-13T04:53:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4865b47563e93b91eb3a7179ddcf1a791d0623ca",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "fall-back2",
      "headRefOid": "c10d130dd7243d1eea118abfe9c7dfe05c03467b",
      "closedAt": "2017-03-06T20:41:51Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The binder is validated with a key derived from the PSK value.\r\nSo, some readers might feel that \"before using that PSK\" is contradictory.",
          "createdAt": "2017-03-06T06:27:16Z",
          "updatedAt": "2017-03-06T06:27:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I just pushed a commit which I think resolves the ambiguity satisfactorily.",
          "createdAt": "2017-03-06T20:41:51Z",
          "updatedAt": "2017-03-06T20:41:51Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxNzkwNDI=",
          "commit": {
            "abbreviatedOid": "396ee70"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-06T05:45:22Z",
          "updatedAt": "2017-03-06T05:45:22Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "It might be a good idea to note that if the keys CAN be recovered, failing to verify the binders is fatal.",
              "createdAt": "2017-03-06T05:45:22Z",
              "updatedAt": "2017-03-06T06:16:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxODAzNTE=",
          "commit": {
            "abbreviatedOid": "396ee70"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-06T06:02:44Z",
          "updatedAt": "2017-03-06T06:02:44Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "OK. I will do. Thanks.",
              "createdAt": "2017-03-06T06:02:44Z",
              "updatedAt": "2017-03-06T06:16:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxODEzODI=",
          "commit": {
            "abbreviatedOid": "396ee70"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-06T06:16:35Z",
          "updatedAt": "2017-03-06T06:16:35Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Done.",
              "createdAt": "2017-03-06T06:16:35Z",
              "updatedAt": "2017-03-06T06:16:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 895,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA5MjM4Njgw",
      "title": "Remove the word 'session'",
      "url": "https://github.com/tlswg/tls13-spec/pull/895",
      "state": "CLOSED",
      "author": "katrielalex",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The word \"session\" is used throughout the document but never really needed; as per https://github.com/tlswg/tls13-spec/issues/847 it only really came from the use of \"session resumption\". This PR removes all uses of the word \"session\", replacing them with terms that are more broadly used throughout the document.\r\n\r\nI have not renamed NewSessionTicket but would also support `sed s/NewSessionTicket/NewPSKContextTicket` or similar.",
      "createdAt": "2017-03-06T11:27:13Z",
      "updatedAt": "2017-03-06T22:17:24Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4865b47563e93b91eb3a7179ddcf1a791d0623ca",
      "headRepository": "katrielalex/tls13-spec",
      "headRefName": "no-more-sessions",
      "headRefOid": "5bcd6ae1d5e408563eddaf1e6df0e72a6480e2f1",
      "closedAt": "2017-03-06T15:00:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The main changes are:\r\n\r\n- \"session state\" -> \"connection state\"; similarly, things like \"the version of TLS negotiated for this session\" -> \"for this connection\"\r\n- \"session ticket\" -> \"ticket\"\r\n- \"session key\" -> \"master secret\"",
          "createdAt": "2017-03-06T11:28:28Z",
          "updatedAt": "2017-03-06T11:28:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@katrielalex: please send a PR adding yourself to contributors.",
          "createdAt": "2017-03-06T20:44:37Z",
          "updatedAt": "2017-03-06T20:44:37Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUyMjc5MTI=",
          "commit": {
            "abbreviatedOid": "5bcd6ae"
          },
          "author": "katrielalex",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-06T11:29:14Z",
          "updatedAt": "2017-03-06T11:29:14Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "I'm not sure about this one. Which things precisely are not meant to be correlated by passive observers?",
              "createdAt": "2017-03-06T11:29:14Z",
              "updatedAt": "2017-03-06T11:29:14Z"
            }
          ]
        }
      ]
    },
    {
      "number": 896,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA5MzYxOTYx",
      "title": "Add myself as contributor",
      "url": "https://github.com/tlswg/tls13-spec/pull/896",
      "state": "MERGED",
      "author": "katrielalex",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/tlswg/tls13-spec/pull/895#issuecomment-284526379",
      "createdAt": "2017-03-06T22:18:09Z",
      "updatedAt": "2017-03-06T22:45:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a3ad27680b2aaf9b2b3382823efd0a7efbcb781b",
      "headRepository": "katrielalex/tls13-spec",
      "headRefName": "contributions-for-the-contribution-god",
      "headRefOid": "f23274a26a7f3a941a8734fda28fdc41f8db0ac8",
      "closedAt": "2017-03-06T22:45:18Z",
      "mergedAt": "2017-03-06T22:45:18Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "84b95786acce6b5029211fbedd9da5efa626d7af"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 897,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA5NDA0MTU2",
      "title": "Tidy up singular vs. plural session keys.",
      "url": "https://github.com/tlswg/tls13-spec/pull/897",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "How's this look?",
      "createdAt": "2017-03-07T04:22:09Z",
      "updatedAt": "2017-03-08T16:15:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3996e459d1bc697b0b23a048cbe94496140bc3b5",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "there--are--four--keys",
      "headRefOid": "36f0088d99a585fa2d3ef1cc2620b1744adeb5b6",
      "closedAt": "2017-03-08T16:15:13Z",
      "mergedAt": "2017-03-08T16:15:13Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ca8fad3fc478959d774b8ca6a007bbcac60f4284"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PS: I think this is obligatory. :-)\r\n\r\n![there-are-four-keys](https://cloud.githubusercontent.com/assets/109690/23642032/1f2931a2-02c6-11e7-98d3-1d8ecd8274ae.jpg)",
          "createdAt": "2017-03-07T04:41:05Z",
          "updatedAt": "2017-03-07T04:41:05Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I was looking for that.",
          "createdAt": "2017-03-07T04:43:44Z",
          "updatedAt": "2017-03-07T04:43:44Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU0MjkzMDY=",
          "commit": {
            "abbreviatedOid": "74fd327"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Two nits.",
          "createdAt": "2017-03-07T04:28:23Z",
          "updatedAt": "2017-03-07T04:29:39Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "drop \"collectively\" now",
              "createdAt": "2017-03-07T04:28:23Z",
              "updatedAt": "2017-03-07T04:35:06Z"
            },
            {
              "originalPosition": 33,
              "body": "The need for uniqueness applies not to the set, but to every individual key in that set.",
              "createdAt": "2017-03-07T04:29:26Z",
              "updatedAt": "2017-03-07T04:35:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU0MzA0ODk=",
          "commit": {
            "abbreviatedOid": "74fd327"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-07T04:35:09Z",
          "updatedAt": "2017-03-07T04:35:09Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Done.",
              "createdAt": "2017-03-07T04:35:09Z",
              "updatedAt": "2017-03-07T04:35:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU0MzA0OTE=",
          "commit": {
            "abbreviatedOid": "74fd327"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-07T04:35:10Z",
          "updatedAt": "2017-03-07T04:35:10Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Added an extra sentence.",
              "createdAt": "2017-03-07T04:35:10Z",
              "updatedAt": "2017-03-07T04:35:10Z"
            }
          ]
        }
      ]
    },
    {
      "number": 899,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA5Njc3MDE4",
      "title": "fix consistency of the key schedule diagram",
      "url": "https://github.com/tlswg/tls13-spec/pull/899",
      "state": "MERGED",
      "author": "mimoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-08T11:27:01Z",
      "updatedAt": "2017-03-08T16:13:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cc51013327c2bf6ee1dd7ac1891d84871698469e",
      "headRepository": "mimoo/tls13-spec",
      "headRefName": "fixing_hkdf_extract_syntax",
      "headRefOid": "3953ef416a981010252913d08396e646f34c1c9b",
      "closedAt": "2017-03-08T16:13:38Z",
      "mergedAt": "2017-03-08T16:13:38Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c63a6462d6042ab071927192a6bbe064969150a6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 900,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA5Njg0MjUw",
      "title": "Fix the description of Derive-Secret's argument",
      "url": "https://github.com/tlswg/tls13-spec/pull/900",
      "state": "CLOSED",
      "author": "mattcaswell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Since the addition of the pre-extract Derive-Secret stages the argument\r\nmay come from the top in the diagram.",
      "createdAt": "2017-03-08T12:17:19Z",
      "updatedAt": "2017-03-08T16:13:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cc51013327c2bf6ee1dd7ac1891d84871698469e",
      "headRepository": "mattcaswell/tls13-spec",
      "headRefName": "fix-derive-secret",
      "headRefOid": "9f58d29b33fcb686f54f1ab4ed04e51521419a9e",
      "closedAt": "2017-03-08T16:13:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 901,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA5NzM2MDU2",
      "title": "Special-case the hash for CH1 when HRR is used. This allows the",
      "url": "https://github.com/tlswg/tls13-spec/pull/901",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "server to just store H(CH1) when doing HRR.\r\n\r\n@davidben PTAL",
      "createdAt": "2017-03-08T16:49:14Z",
      "updatedAt": "2017-03-09T23:24:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ca8fad3fc478959d774b8ca6a007bbcac60f4284",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "hash_ch_before_hrr2",
      "headRefOid": "363040052aaff953de0fdef1db3eeed55ad5b639",
      "closedAt": "2017-03-09T23:24:50Z",
      "mergedAt": "2017-03-09T23:24:50Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "38f0791c025a8a089b3e02df96385042e4df64f4"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson ",
          "createdAt": "2017-03-08T21:22:33Z",
          "updatedAt": "2017-03-08T21:22:33Z"
        },
        {
          "author": "dvorak42",
          "authorAssociation": "NONE",
          "body": "Seems reasonable. Still feels like a bit of a hack, though is better than having to ship the entire hash state in the HRR.",
          "createdAt": "2017-03-08T21:54:12Z",
          "updatedAt": "2017-03-08T21:54:12Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4OTAxMTQ=",
          "commit": {
            "abbreviatedOid": "464ef3b"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "There is no good answer here, but this will do.",
          "createdAt": "2017-03-08T21:35:26Z",
          "updatedAt": "2017-03-08T21:39:33Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "added trailing space",
              "createdAt": "2017-03-08T21:35:26Z",
              "updatedAt": "2017-03-09T23:22:44Z"
            },
            {
              "originalPosition": 89,
              "body": "hash of the concatenation of hashes isn't right, it's just the hash of the concatenated handshake messages",
              "createdAt": "2017-03-08T21:37:08Z",
              "updatedAt": "2017-03-09T23:22:44Z"
            },
            {
              "originalPosition": 4,
              "body": "Is there an IANA section that needs updating?",
              "createdAt": "2017-03-08T21:37:47Z",
              "updatedAt": "2017-03-09T23:22:44Z"
            },
            {
              "originalPosition": 33,
              "body": "You need to explicitly call out that because this is a *partial* ClientHello1, it doesn't need to be turned into the special message_hash form.",
              "createdAt": "2017-03-08T21:38:47Z",
              "updatedAt": "2017-03-09T23:22:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4OTE1NjY=",
          "commit": {
            "abbreviatedOid": "464ef3b"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-08T21:41:42Z",
          "updatedAt": "2017-03-08T21:41:42Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "Oops. Version skew",
              "createdAt": "2017-03-08T21:41:42Z",
              "updatedAt": "2017-03-09T23:22:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU5MDU4MjY=",
          "commit": {
            "abbreviatedOid": "464ef3b"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-03-08T22:44:58Z",
          "updatedAt": "2017-03-08T22:46:15Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "Nit: 254 => message_hash?",
              "createdAt": "2017-03-08T22:44:58Z",
              "updatedAt": "2017-03-09T23:22:44Z"
            },
            {
              "originalPosition": 112,
              "body": "[This is not entirely true for the client due to the PSK binder issue, but we can defer that.]",
              "createdAt": "2017-03-08T22:45:34Z",
              "updatedAt": "2017-03-09T23:22:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU5MDY0MTk=",
          "commit": {
            "abbreviatedOid": "464ef3b"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-08T22:48:05Z",
          "updatedAt": "2017-03-08T22:48:05Z",
          "comments": [
            {
              "originalPosition": 112,
              "body": "\"in general\" covers a lot of sins",
              "createdAt": "2017-03-08T22:48:05Z",
              "updatedAt": "2017-03-09T23:22:44Z"
            }
          ]
        }
      ]
    },
    {
      "number": 902,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA5NzM2OTYx",
      "title": "Warn about eternal ticket extension. Fixes #871",
      "url": "https://github.com/tlswg/tls13-spec/pull/902",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@davidben ",
      "createdAt": "2017-03-08T16:53:18Z",
      "updatedAt": "2017-03-08T22:47:08Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ca8fad3fc478959d774b8ca6a007bbcac60f4284",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue871_ticket_lifetime",
      "headRefOid": "92a7b1a3156a4b7aca52a9ccafa16aff890a7328",
      "closedAt": "2017-03-08T21:22:44Z",
      "mergedAt": "2017-03-08T21:22:44Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ed3599633942378fc87357b594cefc07555c87e4"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(Post-merge lgtm since I was summoned.)",
          "createdAt": "2017-03-08T22:47:08Z",
          "updatedAt": "2017-03-08T22:47:08Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4Mzc5MzA=",
          "commit": {
            "abbreviatedOid": "92a7b1a"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-03-08T17:54:59Z",
          "updatedAt": "2017-03-08T17:54:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 903,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA5NzQyNTg1",
      "title": "End of ClientHello and EndOfEarlyData messages should be on a record boundary",
      "url": "https://github.com/tlswg/tls13-spec/pull/903",
      "state": "MERGED",
      "author": "mattcaswell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "An EndOfEarlyData message signals a key change. A ClientHello can be the\r\nlast message read before a key is changed, and it never makes sense for a\r\nClientHello to have more data after it in the record.",
      "createdAt": "2017-03-08T17:20:48Z",
      "updatedAt": "2017-03-08T17:21:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ca8fad3fc478959d774b8ca6a007bbcac60f4284",
      "headRepository": "mattcaswell/tls13-spec",
      "headRefName": "fix-record-boundary",
      "headRefOid": "ff3d4b46f31b9a929c50ca40a209e75dd0cfa1a8",
      "closedAt": "2017-03-08T17:21:28Z",
      "mergedAt": "2017-03-08T17:21:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1713bce29a97e3aa0b3915d484fcb3ce8ba852dc"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 904,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEwMDM2MDc5",
      "title": "Add cipher suite to the HRR. This makes it slightly easier for the",
      "url": "https://github.com/tlswg/tls13-spec/pull/904",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "client to implement because it knows what hash the server will\r\nselect. Also clarify the language about HRR and Key Shares.\r\n\r\n",
      "createdAt": "2017-03-10T00:24:20Z",
      "updatedAt": "2017-03-10T22:36:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "38f0791c025a8a089b3e02df96385042e4df64f4",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "clean_up_post_ch1_reify",
      "headRefOid": "f4841f20d8e9f3d4e6589815b4029ffe75bf278f",
      "closedAt": "2017-03-10T22:36:21Z",
      "mergedAt": "2017-03-10T22:36:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7a68076d356884756dc28e45c2b3ed7e1cf13dd5"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben is this what you had in mind?",
          "createdAt": "2017-03-10T01:08:07Z",
          "updatedAt": "2017-03-10T01:08:07Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I did consider bogus binders, but dropping seems more sensible, and it seems like the only impact of the bogus binder would be that if the server *didn't* follow a consistent rule, then you would get a handshake failure at the server. It's not like it could pick them in any case.",
          "createdAt": "2017-03-10T01:37:29Z",
          "updatedAt": "2017-03-10T01:37:29Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(Agreed. This version feels way less weird.)",
          "createdAt": "2017-03-10T01:41:20Z",
          "updatedAt": "2017-03-10T01:41:20Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@prosecco: comments welcome\r\n",
          "createdAt": "2017-03-10T01:50:02Z",
          "updatedAt": "2017-03-10T01:50:02Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYxODgzMzQ=",
          "commit": {
            "abbreviatedOid": "10f6359"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I was actually thinking the client could leave the bogus binders as zeros, but dropping the identities altogether is probably more sensible. :-)",
          "createdAt": "2017-03-10T01:29:44Z",
          "updatedAt": "2017-03-10T01:31:01Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I'm not sure what's going on here. The old text requires that HRR's group is consistent with CH. The new text is requiring that SH's group is consistent with HRR. Both are true, but why the replacement?",
              "createdAt": "2017-03-10T01:29:44Z",
              "updatedAt": "2017-03-10T16:48:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYxODkxMTQ=",
          "commit": {
            "abbreviatedOid": "10f6359"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-10T01:36:18Z",
          "updatedAt": "2017-03-10T01:36:18Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I may be confused, but the graf directly above actually refers to the processing rules for the HRR itself and requires that it be consistent with the CH.\r\n\r\n\"Upon receipt of this extension in a HelloRetryRequest, the client MUST verify that (1) the selected_group field corresponds to a group which was provided in the \"supported_groups\" extension in the original ClientHello; and (2) the selected_group field does not correspond to a group which was provided in the \"key_share\" extension in the original ClientHello. If either of these checks fails, then the client MUST abort the handshake with an \"illegal_parameter\" alert. Otherwise, when sending the new ClientHello, the client MUST replace the original \"key_share\" extension with one containing only a new KeyShareEntry for the group indicated in the selected_group field of the triggering HelloRetryRequest.\"\r\n\r\n\r\nThis paragraph refers to the processing rules for the SH, so that's where we enforce consistency.\r\n",
              "createdAt": "2017-03-10T01:36:18Z",
              "updatedAt": "2017-03-10T16:48:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYxODk5OTU=",
          "commit": {
            "abbreviatedOid": "10f6359"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-10T01:42:39Z",
          "updatedAt": "2017-03-10T01:42:39Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Ah, yes, you're right.",
              "createdAt": "2017-03-10T01:42:39Z",
              "updatedAt": "2017-03-10T16:48:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYxOTg2NDk=",
          "commit": {
            "abbreviatedOid": "10f6359"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-10T03:08:52Z",
          "updatedAt": "2017-03-10T03:10:02Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Can the client drop cipher suites that the server didn't pick?  I can't see how that would be a problem.  That's not the same as it not *being* a problem, of course.",
              "createdAt": "2017-03-10T03:08:52Z",
              "updatedAt": "2017-03-10T16:48:25Z"
            },
            {
              "originalPosition": 30,
              "body": "The checks on ServerHello+HelloRetryRequest consistency are now split between here and below.  Do you want to consolidate them at all?",
              "createdAt": "2017-03-10T03:09:58Z",
              "updatedAt": "2017-03-10T16:48:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYxOTg5ODA=",
          "commit": {
            "abbreviatedOid": "10f6359"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-10T03:13:16Z",
          "updatedAt": "2017-03-10T03:13:16Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "I'd rather not do that at this stage in the game.",
              "createdAt": "2017-03-10T03:13:16Z",
              "updatedAt": "2017-03-10T16:48:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYxOTkwMTI=",
          "commit": {
            "abbreviatedOid": "10f6359"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-10T03:13:41Z",
          "updatedAt": "2017-03-10T03:13:41Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Below == KeyShare? No, I think it's better to leave them close to the relevant code point",
              "createdAt": "2017-03-10T03:13:41Z",
              "updatedAt": "2017-03-10T16:48:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYzMDE4NzU=",
          "commit": {
            "abbreviatedOid": "10f6359"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-10T15:29:50Z",
          "updatedAt": "2017-03-10T15:31:37Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "\"selects the cipher suite first\" seems a little informal; maybe \"this happens automatically if the server selects a negotiated ciphersuite as the first step of processing a received ClientHello\".  Though, hmm, aren't we supposed to look at some extensions before we know what ciphers we can use?",
              "createdAt": "2017-03-10T15:29:50Z",
              "updatedAt": "2017-03-10T16:48:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYzMjE1ODA=",
          "commit": {
            "abbreviatedOid": "10f6359"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-10T16:47:33Z",
          "updatedAt": "2017-03-10T16:47:33Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "No, that's not needed any more with orthogonal negotiation",
              "createdAt": "2017-03-10T16:47:33Z",
              "updatedAt": "2017-03-10T16:48:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYzMjYyMTM=",
          "commit": {
            "abbreviatedOid": "10f6359"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-10T17:07:09Z",
          "updatedAt": "2017-03-10T17:07:09Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "(Of course, an implementation could use whatever selection algorithm it likes but, yeah, in general it's expected that the server has the entire ClientHello available and potentially negotiates most things before generating HRR. The orthogonal negotiation helps a lot though and makes shortcuts possible if an implementation decides to go with a sane selection algorithm.)",
              "createdAt": "2017-03-10T17:07:09Z",
              "updatedAt": "2017-03-10T17:07:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 905,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEwMDQwNDIw",
      "title": "Clarify the relationship between PSK and certificates. Closes #870",
      "url": "https://github.com/tlswg/tls13-spec/pull/905",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think this addresses the issue raised by Russ Housley without changing the semantics of the protocol.",
      "createdAt": "2017-03-10T01:04:41Z",
      "updatedAt": "2017-03-14T17:01:30Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "38f0791c025a8a089b3e02df96385042e4df64f4",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "pr870_cert_plus_psk",
      "headRefOid": "a6b562665d0b2e2cae4539c93783a428bfa11eac",
      "closedAt": "2017-03-10T01:40:48Z",
      "mergedAt": "2017-03-10T01:40:48Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5a89e45c3eeb8aecdc254444d8ef28952c8b0934"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I will give a post-merge \"seems fine\", since I was so vocal in trying to nail down what Russ wanted.",
          "createdAt": "2017-03-10T15:33:05Z",
          "updatedAt": "2017-03-10T15:33:05Z"
        },
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mentions of non-existent yet RFCs look weird to me but heh",
          "createdAt": "2017-03-14T17:01:30Z",
          "updatedAt": "2017-03-14T17:01:30Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYxODc4MjQ=",
          "commit": {
            "abbreviatedOid": "6201de3"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-03-10T01:25:28Z",
          "updatedAt": "2017-03-10T01:25:28Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjYxODg1OTQ=",
          "commit": {
            "abbreviatedOid": "6201de3"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-03-10T01:31:55Z",
          "updatedAt": "2017-03-10T01:32:19Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Nit: Comma between 'certificate' and 'the server'?",
              "createdAt": "2017-03-10T01:31:55Z",
              "updatedAt": "2017-03-10T01:38:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 908,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEwNjkyMDU5",
      "title": "Require implementations to verify record boundary when a key change h\u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/908",
      "state": "MERGED",
      "author": "knekritz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026appens rather than on receipt of handshake messages.\r\n\r\nIt is only actually necessary to verify that a handshake message aligns with a key change when changing keys, not when receiving the message, and it can be simpler to implement the check in this way. This change requires senders to align all these messages with a record boundary as before, but only requires recipients to verify the record boundary when the key change actually happens.",
      "createdAt": "2017-03-14T18:47:17Z",
      "updatedAt": "2017-04-03T16:30:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2363bb288f8608bac29f9aa65f4fcfca3674e659",
      "headRepository": "knekritz/tls13-spec",
      "headRefName": "keychange",
      "headRefOid": "5c03f90afacaa86571ab682e4fb356651c5b306b",
      "closedAt": "2017-04-03T16:30:27Z",
      "mergedAt": "2017-04-03T16:30:27Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d2c22c87c184631379f040b7e5cb0a385fa7dc31"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY5MDExNjI=",
          "commit": {
            "abbreviatedOid": "de9332a"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "+1. This matches how BoringSSL implements it. I imagine others do this too as it makes for a fairly natural check.",
          "createdAt": "2017-03-14T18:54:58Z",
          "updatedAt": "2017-03-14T18:54:58Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY5NDQxOTI=",
          "commit": {
            "abbreviatedOid": "de9332a"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2017-03-14T22:00:48Z",
          "updatedAt": "2017-03-14T22:00:50Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "This loses the alert text, which I would add after the second sentence: \"When applying a key change to remote keys, an implementation that has received a partial handshake message MUST generate a fatal \"unexpected_message\" alert.  \r\n\r\nThis also doesn't really fix the problem for a ClientHello that precedes a HelloRetryRequest.  I would change the last sentence here to be advisory (the MUST in the first two sentences suffices), as in \"ClientHello, .... and KeyUpdate messages all immediate precede a key change.\"",
              "createdAt": "2017-03-14T22:00:48Z",
              "updatedAt": "2017-03-29T03:14:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY5NDg0NDk=",
          "commit": {
            "abbreviatedOid": "de9332a"
          },
          "author": "knekritz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-14T22:21:59Z",
          "updatedAt": "2017-03-14T22:22:00Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I'll add the alert text back.\r\n\r\nI'm not sure I understand your second point. My intent is to require clients to always align these messages with a record boundary (but not necessarily a key change, as in the HRR case).",
              "createdAt": "2017-03-14T22:21:59Z",
              "updatedAt": "2017-03-29T03:14:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY5NTk2OTM=",
          "commit": {
            "abbreviatedOid": "de9332a"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-14T23:31:09Z",
          "updatedAt": "2017-03-14T23:31:09Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "The title of your commit says \"Require implementations to verify record boundary when a key change h...appens rather than on receipt of handshake messages\", which I read as saying that you only wanted to enforce the transition on the key change, not at the end of each of these messages (because that it what it says).\r\n\r\nI don't care about ClientHello, I care about the key transition that happens after ClientHello.  I don't think that NSS will ever generate a ClientHello that doesn't end with the record, but I don't see any point in adding extra checks.  Especially since they are very hard to add.  If you keep the MUST, there's going to be at least one implementation that is non-compliant (I think, my co-workers sometimes get inappropriately enthusiastic about these things).",
              "createdAt": "2017-03-14T23:31:09Z",
              "updatedAt": "2017-03-29T03:14:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY5NjA3NDA=",
          "commit": {
            "abbreviatedOid": "de9332a"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-03-14T23:38:16Z",
          "updatedAt": "2017-03-14T23:38:16Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "It's not really plausible for a client to fail to end a ClientHello on a record boundary because it completes a flight. I suppose you could predict that you're going to get an HRR and send the first few bytes of CH2 header early, but that's kind of nuts. I'm not particularly offended by trying to enumerate sender obligations by handshake messages if that's the simplest phrasing, but there isn't much point beyond it.\r\n\r\nI agree that a MUST-level requirement on the receiver to check them should be tight and exclude the HRR case.",
              "createdAt": "2017-03-14T23:38:16Z",
              "updatedAt": "2017-03-29T03:14:40Z"
            }
          ]
        }
      ]
    },
    {
      "number": 909,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEwNzIxMzM4",
      "title": "Explain max_fragment_length",
      "url": "https://github.com/tlswg/tls13-spec/pull/909",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-14T21:27:01Z",
      "updatedAt": "2017-03-14T23:54:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d329bc5e799221d42ee4a7f55a90460000613244",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "mfl",
      "headRefOid": "af5c240cc9e0d2146bd10446152056f6b0a971ac",
      "closedAt": "2017-03-14T21:55:50Z",
      "mergedAt": "2017-03-14T21:55:50Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "92a72ab3af8d2068a07757229d3ae74eb7072bb5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 910,
      "id": "MDExOlB1bGxSZXF1ZXN0MTExMzE1NjY0",
      "title": "Clarify that status_request in CR extensions is empty",
      "url": "https://github.com/tlswg/tls13-spec/pull/910",
      "state": "MERGED",
      "author": "Lekensteyn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-17T16:17:35Z",
      "updatedAt": "2017-03-17T20:08:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "40e6e0cdfedf602db0e31ff62b8d4af6d47fc631",
      "headRepository": "Lekensteyn/tls13-spec",
      "headRefName": "status_request",
      "headRefOid": "0da48fd21e5992bec253caae03480ef28ab32924",
      "closedAt": "2017-03-17T20:08:56Z",
      "mergedAt": "2017-03-17T20:08:56Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d55c542ce89b35b317a2f2e1af405382c66ed01f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 912,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEyNDU3NTY0",
      "title": "Clean up description of messages in the transcript hash:",
      "url": "https://github.com/tlswg/tls13-spec/pull/912",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "1. Move the list to the new transcript hash section.\r\n2. Note that EndOfEarlyData goes in the client Handshake Context.",
      "createdAt": "2017-03-24T13:37:42Z",
      "updatedAt": "2017-03-26T18:25:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d55c542ce89b35b317a2f2e1af405382c66ed01f",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "list_transcript_hash_messages",
      "headRefOid": "885caf7d8743c089659ceeee812a9e10967c2657",
      "closedAt": "2017-03-26T18:25:53Z",
      "mergedAt": "2017-03-26T18:25:53Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a018d30ad60787d20d47135181efc582fb5402e4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg5MjE0MzA=",
          "commit": {
            "abbreviatedOid": "885caf7"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2017-03-24T14:44:54Z",
          "updatedAt": "2017-03-24T14:44:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 914,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEyNTkzMjM2",
      "title": "Suggest more strongly that EndOfEarlyData is deferred.",
      "url": "https://github.com/tlswg/tls13-spec/pull/914",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "31f836238e5968a85c9e4d64d8ab23c0bbed8061 missed a spot.",
      "createdAt": "2017-03-25T16:49:43Z",
      "updatedAt": "2017-03-25T23:36:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d55c542ce89b35b317a2f2e1af405382c66ed01f",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "really-send-eoed-later",
      "headRefOid": "96d25f8e2668697a7639b35dd36f3f5f2db2fa88",
      "closedAt": "2017-03-25T23:36:15Z",
      "mergedAt": "2017-03-25T23:36:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a05a6336436ece24ba69c2e7e8967b2f2ab79f98"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazuho ",
          "createdAt": "2017-03-25T16:50:05Z",
          "updatedAt": "2017-03-25T16:50:05Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "CONTRIBUTOR",
          "body": ":+1: Having a definition on when EOED must be sent is good for both interoperability and as a guildeline of how 0RTT support should be implemented.",
          "createdAt": "2017-03-25T16:54:32Z",
          "updatedAt": "2017-03-25T16:54:32Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 915,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEyNjA2NjMz",
      "title": "Outdent certificate_authorities extension section",
      "url": "https://github.com/tlswg/tls13-spec/pull/915",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-25T23:02:26Z",
      "updatedAt": "2017-03-26T18:56:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d55c542ce89b35b317a2f2e1af405382c66ed01f",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "outdent_ca_ext",
      "headRefOid": "2b6181dd64de64275194c6c2b079b4de4a6c443d",
      "closedAt": "2017-03-25T23:35:28Z",
      "mergedAt": "2017-03-25T23:35:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "43398166f6ac52278b619e55328d1292667829f5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 916,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEyNjI3MjQ1",
      "title": "using ClientFinished and ServerFinished for consistency.",
      "url": "https://github.com/tlswg/tls13-spec/pull/916",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Server Finished, server Finished, ServerFinished are used.\r\nThis patch ensures that only ServerFinished is used.\r\nSo as ClientFinished.",
      "createdAt": "2017-03-26T13:26:37Z",
      "updatedAt": "2017-05-02T01:25:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a018d30ad60787d20d47135181efc582fb5402e4",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "wording",
      "headRefOid": "47703c2d8ea89a962ad5a9c69d673c20ffdaedea",
      "closedAt": "2017-04-03T22:00:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "These are the same message, so I'm not comfortable changing the names like this.\r\n\r\nI'm happy to have \"{client, server} Finished\", but not \"{Client,Server}Finished'",
          "createdAt": "2017-03-26T18:25:05Z",
          "updatedAt": "2017-03-26T18:25:05Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There is one word of ServerFinished in the draft currently.\r\nDo you mean that we should do s/ServerFinished/Server Finished/ instead?\r\n",
          "createdAt": "2017-03-27T01:10:43Z",
          "updatedAt": "2017-03-27T01:10:43Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes",
          "createdAt": "2017-03-27T12:37:34Z",
          "updatedAt": "2017-03-27T12:37:34Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've pushed a new commit with `-f`. Please merge.",
          "createdAt": "2017-03-28T04:41:13Z",
          "updatedAt": "2017-03-28T04:41:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 917,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEyNjM1NTQx",
      "title": "RFC 5746 isn't mentioned in the text",
      "url": "https://github.com/tlswg/tls13-spec/pull/917",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-26T17:18:13Z",
      "updatedAt": "2017-03-26T18:25:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a05a6336436ece24ba69c2e7e8967b2f2ab79f98",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "remove5746",
      "headRefOid": "c7371ceae578785c68b57e1509a69c23ea30e10e",
      "closedAt": "2017-03-26T18:25:18Z",
      "mergedAt": "2017-03-26T18:25:18Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d0c8b789b0776ab00f70b888f47d8ef13fb08d25"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 920,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEyOTg4NzMx",
      "title": "Contributors appears to be sorted by last name, clean up for consistency",
      "url": "https://github.com/tlswg/tls13-spec/pull/920",
      "state": "MERGED",
      "author": "dkg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-28T14:46:59Z",
      "updatedAt": "2017-03-28T17:15:08Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a018d30ad60787d20d47135181efc582fb5402e4",
      "headRepository": "dkg/tls13-spec",
      "headRefName": "alphabetical-by-lastname",
      "headRefOid": "7c4a6d28ee558aa0e2b3b508b1ca329888a8e807",
      "closedAt": "2017-03-28T17:15:08Z",
      "mergedAt": "2017-03-28T17:15:08Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2363bb288f8608bac29f9aa65f4fcfca3674e659"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 921,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEyOTkzNDM5",
      "title": "Add an extension to negotiate use of post-handshake client auth",
      "url": "https://github.com/tlswg/tls13-spec/pull/921",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed in Chicago.",
      "createdAt": "2017-03-28T15:05:31Z",
      "updatedAt": "2017-04-10T23:57:43Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a018d30ad60787d20d47135181efc582fb5402e4",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "pha_ext",
      "headRefOid": "d2706abc83672f43f30b4671bec4e11f93748ea8",
      "closedAt": "2017-04-10T23:57:43Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hmm... I don't think that the server needs to confirm this, that just seems duplicative. I'd rather just have the client offer and the server knows it can then send. @martinthomson, open to being persuaded otherwise.",
          "createdAt": "2017-04-03T22:09:41Z",
          "updatedAt": "2017-04-03T22:09:41Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One minor argument for echoing is the client knows whether it needs to stash the partial transcript, but that may not be compelling enough to bother here. (If we cared about that, it seems better to start the transcript off an exporter value or something...)",
          "createdAt": "2017-04-03T23:36:17Z",
          "updatedAt": "2017-04-03T23:36:17Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I guess there's enough bits to be worked out relating to the semantics of post-handshake server auth (presenting additional certificates) that we don't want to try to shoehorn that into the same extension codepoint.\r\nMy instinct would also have been to have the server echo back the signal, but I don't think I can provide any additional concrete argument in support of that.",
          "createdAt": "2017-04-03T23:39:41Z",
          "updatedAt": "2017-04-03T23:39:41Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My argument against is: what happens if the client offers, the server refuses, and then requests in any case. Seems like another thing to go wrong.",
          "createdAt": "2017-04-03T23:56:28Z",
          "updatedAt": "2017-04-03T23:56:28Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's true. We'd need to worry about clients tracking that bit and actually enforcing, whereas there's no particular need for it.",
          "createdAt": "2017-04-04T00:12:26Z",
          "updatedAt": "2017-04-04T00:12:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 922,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEzMDU1NDIw",
      "title": "extensions cleanups in ClientHello",
      "url": "https://github.com/tlswg/tls13-spec/pull/922",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This tweaks some text in ClientHello with regard to handling the extensions field. The two blocks of text on it in this section are merged together, dropping a little repeated information and putting it in one paragraph after definition of the relevant field instead of covering this in two places in the same section.",
      "createdAt": "2017-03-28T20:06:42Z",
      "updatedAt": "2017-04-05T19:46:04Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2363bb288f8608bac29f9aa65f4fcfca3674e659",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "d25eefc5e4d42f4c0fecccc0aba76329c9ae687a",
      "closedAt": "2017-04-03T22:01:55Z",
      "mergedAt": "2017-04-03T22:01:55Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1152b945020a6766016ad2278a0aca3820658369"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 924,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEzMDYyMjI5",
      "title": "add \"legacy_\" prefix to alert level",
      "url": "https://github.com/tlswg/tls13-spec/pull/924",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Not used anymore, so label it appropriately.\r\n\r\nPointed out by Ben Kaduk on list.\r\n\r\nhttps://www.ietf.org/mail-archive/web/tls/current/msg22792.html",
      "createdAt": "2017-03-28T20:41:20Z",
      "updatedAt": "2017-04-05T19:46:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2363bb288f8608bac29f9aa65f4fcfca3674e659",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "legacy_level",
      "headRefOid": "20b63b380526b560579f7d4a2fc37773f9406588",
      "closedAt": "2017-04-03T22:05:53Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I tend to agree with Kyle Nekritz's point that we don't name it differently elsewhere, so I'm going to leave as-is",
          "createdAt": "2017-04-03T22:05:53Z",
          "updatedAt": "2017-04-03T22:05:53Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 925,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEzMDkxMzUz",
      "title": "Add Brian Sniffen to contributors",
      "url": "https://github.com/tlswg/tls13-spec/pull/925",
      "state": "MERGED",
      "author": "briansniffen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-28T23:50:28Z",
      "updatedAt": "2017-03-29T13:00:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2363bb288f8608bac29f9aa65f4fcfca3674e659",
      "headRepository": "briansniffen/tls13-spec",
      "headRefName": "add-bts",
      "headRefOid": "d95d380a0cb50b8e1e384d5f6b1852c3ad2d4d26",
      "closedAt": "2017-03-29T13:00:37Z",
      "mergedAt": "2017-03-29T13:00:37Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b17b825ea55afd8c9880d2a7a382488f70841f70"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 926,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEzMTEwNTIx",
      "title": "Add self to contributors.",
      "url": "https://github.com/tlswg/tls13-spec/pull/926",
      "state": "MERGED",
      "author": "knekritz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-03-29T03:19:08Z",
      "updatedAt": "2017-03-29T13:01:49Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2363bb288f8608bac29f9aa65f4fcfca3674e659",
      "headRepository": "knekritz/tls13-spec",
      "headRefName": "contrib",
      "headRefOid": "5cbad1e0b07db2fed17da896e13c8534c112d5b6",
      "closedAt": "2017-03-29T13:01:49Z",
      "mergedAt": "2017-03-29T13:01:49Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "bd55247408192a269bff19700b147f6017a84047"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How did I miss this one?\r\n",
          "createdAt": "2017-03-29T13:01:41Z",
          "updatedAt": "2017-03-29T13:01:41Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 931,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEzODExOTM2",
      "title": "Change \"Major Differences\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/931",
      "state": "CLOSED",
      "author": "yoavnir",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Make that section actually list the major differences.",
      "createdAt": "2017-04-02T09:49:23Z",
      "updatedAt": "2017-04-16T21:51:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8136d5a75d99fe011ba51a74e532f31a27814c7c",
      "headRepository": "yoavnir/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "1fe8255b11c7a38fd0058a90bd59c41be76cc1df",
      "closedAt": "2017-04-16T21:51:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I suggest adding this as a new section and renaming the old one explicitly as \"Draft Changelog\", as it's still being used for now. Just stick an \"RFC EDITOR: PLEASE REMOVE THIS SECTION\" at the top of the changelog section and we can keep it until we don't need it anymore.",
          "createdAt": "2017-04-05T19:56:07Z",
          "updatedAt": "2017-04-05T19:56:07Z"
        },
        {
          "author": "yoavnir",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, I'll do this as soon as ekr merges his PR",
          "createdAt": "2017-04-05T20:47:56Z",
          "updatedAt": "2017-04-05T20:47:56Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 932,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE0MDQzMDkw",
      "title": "- Remove support for disallowed extensions (cert_type, user_mapping).",
      "url": "https://github.com/tlswg/tls13-spec/pull/932",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- Explicitly define RFC 7250 certificate support.",
      "createdAt": "2017-04-03T23:21:46Z",
      "updatedAt": "2017-04-11T00:00:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1152b945020a6766016ad2278a0aca3820658369",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "non_x09_certs",
      "headRefOid": "c3d88a3d47d75f378d889e009260e31e235f0030",
      "closedAt": "2017-04-11T00:00:34Z",
      "mergedAt": "2017-04-11T00:00:34Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "408bcedd6e98c5cdd574291d4044d3c9a6b930b8"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Seems reasonable.  (I did not try to audit the rest of the text to see if there are other places that need updating.)",
          "createdAt": "2017-04-03T23:36:12Z",
          "updatedAt": "2017-04-03T23:36:12Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This captures what we talked about in Chicago.",
          "createdAt": "2017-04-04T18:57:56Z",
          "updatedAt": "2017-04-04T18:57:56Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Shucks, this hasn't landed yet, so I'll have to remember to update my editorial changes pull request that puts the numbers for these into the enumerated type definition for extensions.",
          "createdAt": "2017-04-07T01:22:27Z",
          "updatedAt": "2017-04-07T01:22:27Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA5MzIyOTM=",
          "commit": {
            "abbreviatedOid": "258bca4"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-04-05T00:04:11Z",
          "updatedAt": "2017-04-05T00:05:15Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Is this the only place that ASN1Cert is used?  Might pay to inline it here.",
              "createdAt": "2017-04-05T00:04:11Z",
              "updatedAt": "2017-04-11T00:00:04Z"
            },
            {
              "originalPosition": 19,
              "body": "Does this really need to be 2^24-1 long?  I assume that we could do with 2^16-1 quite happily.",
              "createdAt": "2017-04-05T00:04:40Z",
              "updatedAt": "2017-04-11T00:00:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA5NTY4MDg=",
          "commit": {
            "abbreviatedOid": "258bca4"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-05T05:00:06Z",
          "updatedAt": "2017-04-05T05:00:06Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I assume so too, but I tend to think better to stick with the 7250 defn.",
              "createdAt": "2017-04-05T05:00:06Z",
              "updatedAt": "2017-04-11T00:00:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE0MjUxMjY=",
          "commit": {
            "abbreviatedOid": "258bca4"
          },
          "author": "hannestschofenig",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-06T20:42:53Z",
          "updatedAt": "2017-04-06T20:42:53Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "We didn't discuss the client_certificate_url extension during the Chicago IETF meeting but I am wondering whether the considerations for it are somewhat similar than for the cached info extension. In an IoT context you most likely want to use TLS/DTLS for mutual authentication and to avoid sending the client certificate URI extension allows the client to avoid transmitting the full certificate. While it is not as efficient as cached info does for the server certificate it is still a significant improvement over sending the full certificate. ",
              "createdAt": "2017-04-06T20:42:53Z",
              "updatedAt": "2017-04-11T00:00:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE5ODcyOTg=",
          "commit": {
            "abbreviatedOid": "258bca4"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-10T23:58:45Z",
          "updatedAt": "2017-04-10T23:58:45Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "The problem is it largely unused and is also hardwired to a weak hash.",
              "createdAt": "2017-04-10T23:58:45Z",
              "updatedAt": "2017-04-11T00:00:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 933,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE0MDQ5ODU4",
      "title": "Pha ext",
      "url": "https://github.com/tlswg/tls13-spec/pull/933",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-04T00:27:33Z",
      "updatedAt": "2017-04-10T23:57:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ee48e213a0aeec2130eca11fd10236869e58dbb7",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "pha_ext",
      "headRefOid": "719c23564ddf4c9c0bffb50237bf4ed3755a09cc",
      "closedAt": "2017-04-10T23:57:33Z",
      "mergedAt": "2017-04-10T23:57:33Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "fa6478981fbe472f3647777b0719aac5c6d170bd"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "lgtm",
          "createdAt": "2017-04-04T18:56:10Z",
          "updatedAt": "2017-04-04T18:56:10Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3OTkwMzg=",
          "commit": {
            "abbreviatedOid": "dc099b4"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2017-04-04T14:40:18Z",
          "updatedAt": "2017-04-04T14:40:42Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "Maybe \"without\" is slightly unclear (but only very slightly); \"but did not send\" could be better.",
              "createdAt": "2017-04-04T14:40:18Z",
              "updatedAt": "2017-04-10T23:57:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzExNTI1Mzk=",
          "commit": {
            "abbreviatedOid": "dc099b4"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-05T19:52:20Z",
          "updatedAt": "2017-04-05T19:52:20Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "\"can\" probably should be \"MAY\", here",
              "createdAt": "2017-04-05T19:52:20Z",
              "updatedAt": "2017-04-10T23:57:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE5ODY4Mzk=",
          "commit": {
            "abbreviatedOid": "dc099b4"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-10T23:54:31Z",
          "updatedAt": "2017-04-10T23:54:31Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "I think I prefer the current version",
              "createdAt": "2017-04-10T23:54:31Z",
              "updatedAt": "2017-04-10T23:57:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 935,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE1MjEwNTEx",
      "title": "IANA considerations section tweak.",
      "url": "https://github.com/tlswg/tls13-spec/pull/935",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Need to be explicit say that it's the ExtensionType registry from RFC 4366.",
      "createdAt": "2017-04-10T23:08:16Z",
      "updatedAt": "2017-04-11T00:01:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f0d3dcaba5520c25e6a771d1a54975db9ba3af48",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "iana_tweak",
      "headRefOid": "90119f66dd7123071a9b20832bfb6ef517c37858",
      "closedAt": "2017-04-11T00:01:02Z",
      "mergedAt": "2017-04-11T00:01:02Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ff2733b15a457e9214e4188d7e97ae1e30445e37"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I literally was making the same change in my editor when the notification came in!\r\n(Should it be the \"TLS Extensions ExtensionType registry\"?)",
          "createdAt": "2017-04-10T23:11:26Z",
          "updatedAt": "2017-04-10T23:11:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 936,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE1MjEzNTM5",
      "title": "Mostly editorial",
      "url": "https://github.com/tlswg/tls13-spec/pull/936",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "with some other editorial-ish bits split out as separate commits to be looked at separately.",
      "createdAt": "2017-04-10T23:36:25Z",
      "updatedAt": "2017-04-14T17:35:16Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f0d3dcaba5520c25e6a771d1a54975db9ba3af48",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "master",
      "headRefOid": "31575c9290a421daa8e7cd1fe1f9c806487f4e1d",
      "closedAt": "2017-04-11T17:00:22Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk: I just merged this. I have one action item you might want to do about annotating the extension code points with the RFC.",
          "createdAt": "2017-04-11T17:00:19Z",
          "updatedAt": "2017-04-11T17:00:19Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIwMTE3NzY=",
          "commit": {
            "abbreviatedOid": "807d84e"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-11T04:32:44Z",
          "updatedAt": "2017-04-11T05:14:44Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "add a comma after \"data\"",
              "createdAt": "2017-04-11T04:32:45Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            },
            {
              "originalPosition": 68,
              "body": "needs one more space of indentation to match below",
              "createdAt": "2017-04-11T04:33:05Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            },
            {
              "originalPosition": 88,
              "body": "may as well just get rid of the parenthesis here",
              "createdAt": "2017-04-11T04:34:00Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            },
            {
              "originalPosition": 146,
              "body": "\"a legacy_version of\" instead of \"the legacy_versionof \" sounds more natural",
              "createdAt": "2017-04-11T04:36:09Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            },
            {
              "originalPosition": 165,
              "body": "I don't think the parenthesis are needed around this sentence",
              "createdAt": "2017-04-11T04:37:14Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            },
            {
              "originalPosition": 199,
              "body": "I think this should probably stick with only listing extensions defined in this document, rather than enumerating the whole valid list.",
              "createdAt": "2017-04-11T04:40:02Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            },
            {
              "originalPosition": 290,
              "body": "This makes this sentence rather long, with most of the text not stating the initial point. I suggest a more concise parenthetical simply stating something to the effect of \"(e.g., during the rollout of new groups, prior to wide adoption)\".",
              "createdAt": "2017-04-11T04:48:41Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            },
            {
              "originalPosition": 469,
              "body": "\"can\" instead of \"could\"",
              "createdAt": "2017-04-11T04:51:39Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            },
            {
              "originalPosition": 540,
              "body": "This is not an editorial nor trivial change. We had consensus for total rejection of MD5 in TLS 1.3+, without the nuance/exceptions/risks we negotiated for SHA1. Something archaic enough to rely on MD5, still, even if it doesn't need to be validated, can be stuck with TLS 1.2 until it gets its act together. This is not to say that some implementation can't ignore the spec and do as you propose (again, there are no IETF police), but we should not be entertaining any legitimate acceptance of MD5 in new specification documents, at this point. If you wish to argue for reopening negotiations on the language here, please propose it on the mailing list with some evidence as to why it might be needed. (If you've got a compelling scenario that can't be fixed otherwise, this is not an unlivable change, but it's not something to stick into a big PR of other fixes/cleanups.)",
              "createdAt": "2017-04-11T05:07:23Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            },
            {
              "originalPosition": 580,
              "body": "Why?",
              "createdAt": "2017-04-11T05:08:15Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIwMTYzMjY=",
          "commit": {
            "abbreviatedOid": "807d84e"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-11T05:31:07Z",
          "updatedAt": "2017-04-11T05:31:07Z",
          "comments": [
            {
              "originalPosition": 199,
              "body": "The motivation here was to match the ones listed in the table that permits them in the various fields.",
              "createdAt": "2017-04-11T05:31:07Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIwMTY0MDY=",
          "commit": {
            "abbreviatedOid": "807d84e"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-11T05:31:52Z",
          "updatedAt": "2017-04-11T05:31:52Z",
          "comments": [
            {
              "originalPosition": 580,
              "body": "The links go to the appendix entry otherwise?",
              "createdAt": "2017-04-11T05:31:52Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIxMzY2NDM=",
          "commit": {
            "abbreviatedOid": "807d84e"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-11T15:13:45Z",
          "updatedAt": "2017-04-11T15:23:17Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "Done.",
              "createdAt": "2017-04-11T15:13:45Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            },
            {
              "originalPosition": 68,
              "body": "heh, it was vim yank-and-put, so it is the surrounding text that is inconstent between figures.\r\nBut, I will go for local consistency, thanks for pointing it out.",
              "createdAt": "2017-04-11T15:14:58Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            },
            {
              "originalPosition": 290,
              "body": "I'll make the explanation of potential usage its own sentence.",
              "createdAt": "2017-04-11T15:19:16Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            },
            {
              "originalPosition": 469,
              "body": "Sure.",
              "createdAt": "2017-04-11T15:20:59Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            },
            {
              "originalPosition": 540,
              "body": "I was semi-remembering discussion about roots that were self-signed with md5, but do not wish to reopen the discussion.\r\n@seanturner do you remember what I might be thinking about?",
              "createdAt": "2017-04-11T15:22:29Z",
              "updatedAt": "2017-04-11T15:23:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIyMTA5NjY=",
          "commit": {
            "abbreviatedOid": "31575c9"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-11T19:55:28Z",
          "updatedAt": "2017-04-11T19:55:28Z",
          "comments": [
            {
              "originalPosition": 540,
              "body": "This section here is on how to handle the receipt of a certificate message and its contents, not how to handle the entirety of a certificate chain, including root store. A self-signed root using MD5 would generally not need to be included in the certificate chain sent to the client, and thus would not actually hit the existing text.\r\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-19#page-59\r\n\r\nI don't really want clients accepting use of MD5 in any scenario, but adding a note restating that these checks do not apply to a trust anchor not sent in this message would be fine. This would not change the existing requirements; just clarify them. Yeah, there's a valid argument to be made that the same checks should apply to all certs regardless of where the client gets them, but the difference here is that this is something that goes through the TLS protocol, specifically (and I don't really want to reopen the discussion at all, though, please do so on list if you disagree).\r\n\r\n(Just because it's not clear looking at GitHub here, this PR was merged without this specific changeset.)",
              "createdAt": "2017-04-11T19:55:28Z",
              "updatedAt": "2017-04-11T19:55:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI4NjU2Mjk=",
          "commit": {
            "abbreviatedOid": "807d84e"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-14T17:35:16Z",
          "updatedAt": "2017-04-14T17:35:16Z",
          "comments": [
            {
              "originalPosition": 540,
              "body": "Yes, they usually would not need to be sent, but they could be sent.\r\nA connection could also be using opportunistic encryption and not plan on validating anything at all.\r\nIt seems silly to impose a requirement that \"even if you're not going to do any other validation of any certificates, you still need to check for MD5 and reject it\".\r\nBut, if I want to keep arguing this, I should take it to the list, and I'm not sure that I feel strongly enough to do so.",
              "createdAt": "2017-04-14T17:35:16Z",
              "updatedAt": "2017-04-14T17:35:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 938,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE1MjIxMjIy",
      "title": "IDNits reports unused references.",
      "url": "https://github.com/tlswg/tls13-spec/pull/938",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I removed some of the references that IDnits reports as unused.\r\n\r\n@ekr Can we delete the AES and GCM references they're really picked up by the cipher suite referenes? We'll need to refer whatever RFC5289 @ PS ends up being for the AES_GCM suites.",
      "createdAt": "2017-04-11T00:57:41Z",
      "updatedAt": "2017-04-16T16:44:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ff2733b15a457e9214e4188d7e97ae1e30445e37",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "unused_references",
      "headRefOid": "1bb4a7ec152b3b7a97a0d6a90dca8afe7f288c53",
      "closedAt": "2017-04-16T16:44:26Z",
      "mergedAt": "2017-04-16T16:44:26Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "36fcebcee1e4dd913f4f1dc34ec3acd66b1e99f2"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hmm.... I think we probably do want them. I'll merge this in the meantime.",
          "createdAt": "2017-04-16T16:42:25Z",
          "updatedAt": "2017-04-16T16:42:25Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 944,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE1NDgzMDI5",
      "title": "Clarifying aga, lifetime and replay property",
      "url": "https://github.com/tlswg/tls13-spec/pull/944",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This tries to fix #919 and give a base for discussion to resolve #940.\r\nComments are welcome.",
      "createdAt": "2017-04-12T07:54:21Z",
      "updatedAt": "2017-05-02T01:25:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a6d173f0f8ca99ad99d07d09a26b6bb6ef504c13",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "replay",
      "headRefOid": "0e0e86f54c428f66ffd96e0342ee3913d9ad2e09",
      "closedAt": "2017-04-16T18:24:19Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I decided I wanted a more narrative structure. See #949 ",
          "createdAt": "2017-04-16T18:24:19Z",
          "updatedAt": "2017-04-16T18:24:19Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI0NzU0MDg=",
          "commit": {
            "abbreviatedOid": "26505be"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2017-04-12T19:47:11Z",
          "updatedAt": "2017-04-12T19:57:03Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "NST is generated by the server.",
              "createdAt": "2017-04-12T19:47:11Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            },
            {
              "originalPosition": 9,
              "body": "\"client_create_psk_time\" needs to be defined.  I assume the intent was the time when the PreSharedKeyExtension is generated, but that is not clear from just the name.",
              "createdAt": "2017-04-12T19:48:47Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            },
            {
              "originalPosition": 12,
              "body": "It's a little odd to use quotes to offset the math.\r\nI'd also probably note that the factor of 1000 is because of a difference in units between the two values.\r\n\r\nThe \"obfusctaed_ticket_age is...\" can be a new paragraph, I think.",
              "createdAt": "2017-04-12T19:50:06Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            },
            {
              "originalPosition": 14,
              "body": "I thought it was\r\n\r\n    obfuscated_ticket_age = ticket_age + ticket_age_add % 2^32\r\n\r\nWhre '%' indicates modular arithmetic.",
              "createdAt": "2017-04-12T19:51:43Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            },
            {
              "originalPosition": 16,
              "body": "This is in the ClientHello, not NST.",
              "createdAt": "2017-04-12T19:52:01Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            },
            {
              "originalPosition": 19,
              "body": "obfuscated_ticket_age - ticket_age_add, and modulo 2^32.",
              "createdAt": "2017-04-12T19:52:26Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            },
            {
              "originalPosition": 21,
              "body": "I'd probably make the main requirement in text (\"the server MUST check that the ticket is not expired (i.e., ticket_age < ...\")",
              "createdAt": "2017-04-12T19:53:03Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            },
            {
              "originalPosition": 53,
              "body": "server_recv_psk_time needs to be explained/defined.\r\nThe left side might need to be the absolute value, but then again it might not, as sites are encouraged to use asymmetric replay windows a few paragraphs below.  So, this needs some rework.",
              "createdAt": "2017-04-12T19:55:53Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            },
            {
              "originalPosition": 63,
              "body": "We should probably be consistent in our teminology between here and discussion of guidance on actual values for the replay window a couple paragraphs below.",
              "createdAt": "2017-04-12T19:56:55Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI1MzQ1MjI=",
          "commit": {
            "abbreviatedOid": "26505be"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-13T02:15:50Z",
          "updatedAt": "2017-04-13T02:15:50Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Thanks.\r\nThis is a terrible mistake.\r\nFixed.",
              "createdAt": "2017-04-13T02:15:50Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI1MzQ1NDg=",
          "commit": {
            "abbreviatedOid": "26505be"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-13T02:16:09Z",
          "updatedAt": "2017-04-13T02:16:09Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Done.",
              "createdAt": "2017-04-13T02:16:09Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI1MzQ1NTg=",
          "commit": {
            "abbreviatedOid": "26505be"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-13T02:16:18Z",
          "updatedAt": "2017-04-13T02:16:18Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Done.",
              "createdAt": "2017-04-13T02:16:18Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI1MzQ1Njg=",
          "commit": {
            "abbreviatedOid": "26505be"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-13T02:16:25Z",
          "updatedAt": "2017-04-13T02:16:25Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Done.",
              "createdAt": "2017-04-13T02:16:25Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI1MzQ1OTY=",
          "commit": {
            "abbreviatedOid": "26505be"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-13T02:16:46Z",
          "updatedAt": "2017-04-13T02:16:46Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Again, a terrible mistake. Fixed.",
              "createdAt": "2017-04-13T02:16:46Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI1MzQ2MTA=",
          "commit": {
            "abbreviatedOid": "26505be"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-13T02:16:54Z",
          "updatedAt": "2017-04-13T02:16:54Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Done.",
              "createdAt": "2017-04-13T02:16:54Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI1MzQ2MjE=",
          "commit": {
            "abbreviatedOid": "26505be"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-13T02:17:01Z",
          "updatedAt": "2017-04-13T02:17:01Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Done.",
              "createdAt": "2017-04-13T02:17:01Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI1MzU1ODU=",
          "commit": {
            "abbreviatedOid": "26505be"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-13T02:27:28Z",
          "updatedAt": "2017-04-13T02:27:28Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "Definitions are done.",
              "createdAt": "2017-04-13T02:27:28Z",
              "updatedAt": "2017-04-13T02:27:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI1MzYxMDU=",
          "commit": {
            "abbreviatedOid": "26505be"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-13T02:33:17Z",
          "updatedAt": "2017-04-13T02:33:17Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "I have no idea.\r\nWould you advise concrete text?",
              "createdAt": "2017-04-13T02:33:17Z",
              "updatedAt": "2017-04-13T02:33:18Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI1MzYxMjA=",
          "commit": {
            "abbreviatedOid": "26505be"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-13T02:33:30Z",
          "updatedAt": "2017-04-13T02:33:30Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Again, would you advise concrete text?",
              "createdAt": "2017-04-13T02:33:30Z",
              "updatedAt": "2017-04-13T02:33:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 946,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE1OTU4NTMw",
      "title": "Annotate extension code points with RFC number",
      "url": "https://github.com/tlswg/tls13-spec/pull/946",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Show inline which document defines the meaning of that extension,\r\nin addition to listing it in the table of extensions.\r\n\r\nPer ekr's comment on  #936 (hopefully)",
      "createdAt": "2017-04-14T17:02:51Z",
      "updatedAt": "2017-04-16T17:17:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a6d173f0f8ca99ad99d07d09a26b6bb6ef504c13",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "cite-ext",
      "headRefOid": "5e68630ba7b46695b30c8aecf7590479d5f47aef",
      "closedAt": "2017-04-16T17:17:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note to self. Merged locally.",
          "createdAt": "2017-04-16T16:39:33Z",
          "updatedAt": "2017-04-16T16:39:33Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 947,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE1OTYxMzgx",
      "title": "Note some application considerations about padding",
      "url": "https://github.com/tlswg/tls13-spec/pull/947",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We allow sending just padding and no application data; be sure you\r\nthink about what you want to do with that.\r\n\r\nAlso note that the max_early_data_size limit is something of a lie\r\nin terms of clients sending lots of padding.\r\n\r\n(see the \"perils of padding\" thread on list for a little more context)",
      "createdAt": "2017-04-14T17:23:47Z",
      "updatedAt": "2017-04-16T17:17:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a6d173f0f8ca99ad99d07d09a26b6bb6ef504c13",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "pad",
      "headRefOid": "de1c6f95cfb502d5ee4b71693d6ea54d50abe529",
      "closedAt": "2017-04-16T17:17:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI4OTMzODE=",
          "commit": {
            "abbreviatedOid": "de1c6f9"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Note to self. Merged locally.",
          "createdAt": "2017-04-14T20:35:14Z",
          "updatedAt": "2017-04-16T16:39:15Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I'm not sure that this graf is that useful... ",
              "createdAt": "2017-04-14T20:35:14Z",
              "updatedAt": "2017-04-16T16:39:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 948,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MDY0NjY5",
      "title": "Tls 10 antidowngrade. Fixes #941",
      "url": "https://github.com/tlswg/tls13-spec/pull/948",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-16T17:13:11Z",
      "updatedAt": "2017-04-21T10:23:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0c3225929326b55cc1a67eb8ed81d9c1fbcbd7d0",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "tls_10_antidowngrade",
      "headRefOid": "5f0504f4fd728b32d06e4957c56b225b6c5f3dc1",
      "closedAt": "2017-04-21T10:23:51Z",
      "mergedAt": "2017-04-21T10:23:51Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7615229da81d0af98102894e5deeac065115fd2d"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1",
          "createdAt": "2017-04-17T15:22:49Z",
          "updatedAt": "2017-04-17T15:22:49Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 949,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MDY2NTM1",
      "title": "Revise the text on ticket age handling on the client and server. Fixe\u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/949",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026s #919, #940, #944.#944",
      "createdAt": "2017-04-16T18:23:51Z",
      "updatedAt": "2017-04-17T16:52:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0c3225929326b55cc1a67eb8ed81d9c1fbcbd7d0",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "clarify_ticket_age_text",
      "headRefOid": "a84a160d0d27582f9b926fd8d9e362d06b5ad818",
      "closedAt": "2017-04-17T13:27:52Z",
      "mergedAt": "2017-04-17T13:27:52Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "015e65007e1ad9a0561f8664008bc8b9c6d584f6"
      },
      "comments": [
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\ud83d\udc4d ",
          "createdAt": "2017-04-17T03:33:23Z",
          "updatedAt": "2017-04-17T03:33:23Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk: if you want to propose some revised text, I will TAL.",
          "createdAt": "2017-04-17T16:52:29Z",
          "updatedAt": "2017-04-17T16:52:29Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI5NTEyNzM=",
          "commit": {
            "abbreviatedOid": "6928693"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-16T20:53:25Z",
          "updatedAt": "2017-04-16T20:53:25Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "modulo",
              "createdAt": "2017-04-16T20:53:25Z",
              "updatedAt": "2017-04-17T13:27:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMwMjU5ODk=",
          "commit": {
            "abbreviatedOid": "a84a160"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-17T15:51:41Z",
          "updatedAt": "2017-04-17T15:54:30Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "\"current\"",
              "createdAt": "2017-04-17T15:51:41Z",
              "updatedAt": "2017-04-17T15:54:30Z"
            },
            {
              "originalPosition": 129,
              "body": "When I wrote the original text, I was careful to scope the numerical guidance to the scenario used to compute it.  It's unclear that 10 seconds is still good for the gamut from IoT to intra-datacenter to space missions.  The RTT measurement helps some, but is not a guarantee.",
              "createdAt": "2017-04-17T15:53:43Z",
              "updatedAt": "2017-04-17T15:54:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 950,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MDY2ODQy",
      "title": "Require (2119 SHOULD) that the certificate context for post-handshake",
      "url": "https://github.com/tlswg/tls13-spec/pull/950",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "be unpredictable in order to prevent pre-computation of\r\nCertificateVerify. Maybe this should actually be a MUST?",
      "createdAt": "2017-04-16T18:36:11Z",
      "updatedAt": "2017-04-21T10:24:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0c3225929326b55cc1a67eb8ed81d9c1fbcbd7d0",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "post_handshake_random_context",
      "headRefOid": "3304d5f1cc1ce959cc3d87444f1f92417319f4b2",
      "closedAt": "2017-04-21T10:24:37Z",
      "mergedAt": "2017-04-21T10:24:37Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "0acd0861708ab225d34b98637499b2c54f7e4dcd"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note: an attacker can of course forge a complete handshake but maybe for some quirk of the environment that's not as good. ",
          "createdAt": "2017-04-16T18:43:48Z",
          "updatedAt": "2017-04-16T18:43:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 951,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MDcwOTAw",
      "title": "Issue911 update external references",
      "url": "https://github.com/tlswg/tls13-spec/pull/951",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-16T20:51:04Z",
      "updatedAt": "2017-04-18T13:10:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5b37a405fbbb8f28b72a07b937f312597fd15559",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue911_update_external_references",
      "headRefOid": "e90a201eeadec6c6a5930efc4b014c2c66401de1",
      "closedAt": "2017-04-18T13:10:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 952,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MDcxMjc1",
      "title": "Move text about PSK interaction with certificate-based client authent\u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/952",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026ication. Fixes #934.",
      "createdAt": "2017-04-16T21:04:14Z",
      "updatedAt": "2017-04-18T13:33:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0c3225929326b55cc1a67eb8ed81d9c1fbcbd7d0",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "issue934_certificate_verify_with_psk",
      "headRefOid": "1894b996678d6e9c004e7311f89579aafa310b85",
      "closedAt": "2017-04-18T13:33:10Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk: ^^",
          "createdAt": "2017-04-17T13:34:51Z",
          "updatedAt": "2017-04-17T13:34:51Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMwMzA1ODg=",
          "commit": {
            "abbreviatedOid": "1894b99"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This looks good to fix #934 , though I'm not sure it fully addresses all of Russ's concerns.  (Is Russ on github?)",
          "createdAt": "2017-04-17T16:17:16Z",
          "updatedAt": "2017-04-17T16:21:30Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "consider a comma before \"and\"",
              "createdAt": "2017-04-17T16:17:16Z",
              "updatedAt": "2017-04-17T16:21:30Z"
            },
            {
              "originalPosition": 33,
              "body": "I guess I've forgotten whether Russ just wanted to be able to do cert auth with NST-provisioned PSKs or with external PSKs as well.  If the latter, to double-check, we're happy with some future document overriding this MUST NOT?",
              "createdAt": "2017-04-17T16:19:17Z",
              "updatedAt": "2017-04-17T16:21:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMyMjkzNjM=",
          "commit": {
            "abbreviatedOid": "1894b99"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-18T13:28:12Z",
          "updatedAt": "2017-04-18T13:28:12Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "I'm not sure what Russ was looking for.",
              "createdAt": "2017-04-18T13:28:12Z",
              "updatedAt": "2017-04-18T13:28:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 954,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MDcxODQ2",
      "title": "Formal representation of point format. Fixes #943.",
      "url": "https://github.com/tlswg/tls13-spec/pull/954",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As suggested by Nikos, provide a formal description of the point format\r\nmodelled on 4492-bis.",
      "createdAt": "2017-04-16T21:23:58Z",
      "updatedAt": "2017-04-18T13:15:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0c3225929326b55cc1a67eb8ed81d9c1fbcbd7d0",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue936_formal_point_format",
      "headRefOid": "a1948770c6e7808bb07a4bf5e711a5add44b1f66",
      "closedAt": "2017-04-18T13:15:10Z",
      "mergedAt": "2017-04-18T13:15:10Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b17e98cdadbbb526e05784278f8496a26c8f5dc9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMxMDg3Mzk=",
          "commit": {
            "abbreviatedOid": "9ec5128"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-17T22:49:40Z",
          "updatedAt": "2017-04-17T22:49:40Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "This probably doesn't need to be indented so much (~~~ causes a three-space indent).",
              "createdAt": "2017-04-17T22:49:40Z",
              "updatedAt": "2017-04-18T13:13:44Z"
            }
          ]
        }
      ]
    },
    {
      "number": 955,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MDczNzA0",
      "title": "Issue945 hugos security considerations text",
      "url": "https://github.com/tlswg/tls13-spec/pull/955",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-16T22:31:55Z",
      "updatedAt": "2017-04-18T13:23:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5b37a405fbbb8f28b72a07b937f312597fd15559",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue945_hugos_security_considerations_text",
      "headRefOid": "a0ca59c5688040f048681fdce232ae3dace4f4a7",
      "closedAt": "2017-04-18T13:23:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand.",
          "createdAt": "2017-04-18T13:23:27Z",
          "updatedAt": "2017-04-18T13:23:27Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI5NTMwMTM=",
          "commit": {
            "abbreviatedOid": "7304034"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-16T23:01:21Z",
          "updatedAt": "2017-04-16T23:04:16Z",
          "comments": [
            {
              "originalPosition": 151,
              "body": "typo: should be \"not\"",
              "createdAt": "2017-04-16T23:01:21Z",
              "updatedAt": "2017-04-18T13:18:42Z"
            },
            {
              "originalPosition": 177,
              "body": "To match the styling below, you need a colon after \"handshake\" and a comma after each item",
              "createdAt": "2017-04-16T23:02:04Z",
              "updatedAt": "2017-04-18T13:18:42Z"
            },
            {
              "originalPosition": 152,
              "body": "spelling typo: should be \"attestation\" instead of \"attestion\"",
              "createdAt": "2017-04-16T23:03:47Z",
              "updatedAt": "2017-04-18T13:18:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI5NTQ4MDA=",
          "commit": {
            "abbreviatedOid": "7304034"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-17T00:53:00Z",
          "updatedAt": "2017-04-17T00:53:00Z",
          "comments": [
            {
              "originalPosition": 177,
              "body": "I think I am going to go with colon but no comma.",
              "createdAt": "2017-04-17T00:53:00Z",
              "updatedAt": "2017-04-18T13:18:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMwMzQ1MDg=",
          "commit": {
            "abbreviatedOid": "190c3d5"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-17T16:39:10Z",
          "updatedAt": "2017-04-17T16:39:10Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "Some of this paragraph feels like it's duplicating portions of #security-handshake (the PSK binder bits); should some content get trimmed from there?",
              "createdAt": "2017-04-17T16:39:10Z",
              "updatedAt": "2017-04-18T13:18:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 956,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MTM2MTQ4",
      "title": "Update variable names. Fixes #942.",
      "url": "https://github.com/tlswg/tls13-spec/pull/956",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Make the variable names of various secrets correspond to the\r\nlabels used for Derive-Secret(). This is not a wire format\r\nchange, but just a change in the internal variable names.",
      "createdAt": "2017-04-17T13:42:39Z",
      "updatedAt": "2017-04-18T19:06:59Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "015e65007e1ad9a0561f8664008bc8b9c6d584f6",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue942_harmonize_names_and_labels",
      "headRefOid": "1f1fe514f98f31690a4b4cdcb6f512ac664be7c8",
      "closedAt": "2017-04-18T19:06:58Z",
      "mergedAt": "2017-04-18T19:06:58Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "af56278b762df01c09b4252e2db09f29e60ab6c1"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett, @davidben: you see any misses here?",
          "createdAt": "2017-04-18T15:10:37Z",
          "updatedAt": "2017-04-18T15:10:37Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The legends for the message flows still say \"traffic_secret_N\" for the \"[]\" parts. Also, \"Updating Traffic Keys and IVs\" still uses \"traffic_secret_N\" in the formula and text prior to it.\n",
          "createdAt": "2017-04-18T18:54:17Z",
          "updatedAt": "2017-04-18T18:54:17Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 958,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MTgwOTE4",
      "title": "Extensions may provide additional InputSecrets",
      "url": "https://github.com/tlswg/tls13-spec/pull/958",
      "state": "CLOSED",
      "author": "jschanck",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "parked"
      ],
      "body": "- Specify that extensions may provide additional InputSecret\r\n  values for incorporation into the key schedule.\r\n- Specify ordering of secrets provided by non-MTI extensions.",
      "createdAt": "2017-04-17T18:54:29Z",
      "updatedAt": "2017-04-21T10:25:09Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "015e65007e1ad9a0561f8664008bc8b9c6d584f6",
      "headRepository": "jschanck/tls13-spec",
      "headRefName": "master",
      "headRefOid": "cb4dd3b5b2e8f2dce8fa8045f05449b4472c5b14",
      "closedAt": "2017-04-21T10:25:09Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am not convinced that we need to build this extension point in right now.  Do you have plans for a specific extension that would use it?",
          "createdAt": "2017-04-17T19:33:49Z",
          "updatedAt": "2017-04-17T19:33:49Z"
        },
        {
          "author": "jschanck",
          "authorAssociation": "NONE",
          "body": "Yes, Douglas and I just posted an ID for an AdditionalKeyShare extension. There's a thread on the mailing list. https://tools.ietf.org/html/draft-schanck-tls-additional-keyshare-00",
          "createdAt": "2017-04-17T19:44:28Z",
          "updatedAt": "2017-04-17T19:44:28Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Adding this here just confuses things. A new extension can specify whatever changes it needs after the fact, without the need for this here.",
          "createdAt": "2017-04-17T19:52:07Z",
          "updatedAt": "2017-04-17T19:52:07Z"
        },
        {
          "author": "jschanck",
          "authorAssociation": "NONE",
          "body": "The draft says what to do \"Given a set of n input secrets\" without specifying how one would come to have n input secrets. This just makes the existing functionality more explicit.",
          "createdAt": "2017-04-17T20:01:52Z",
          "updatedAt": "2017-04-17T20:01:52Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Moving to closed.",
          "createdAt": "2017-04-21T10:25:09Z",
          "updatedAt": "2017-04-21T10:25:09Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 959,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MTg5NTU2",
      "title": "Tweak guidance on clock skew window",
      "url": "https://github.com/tlswg/tls13-spec/pull/959",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Mention the assumptions going into the quoted number.\r\n\r\nAlso fix a typo.\r\n\r\nviz. comments on #949 ",
      "createdAt": "2017-04-17T19:45:46Z",
      "updatedAt": "2017-04-18T14:06:59Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "015e65007e1ad9a0561f8664008bc8b9c6d584f6",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "skew",
      "headRefOid": "02fab0dfa33a76edc02b8d6143642843050c4128",
      "closedAt": "2017-04-17T19:51:40Z",
      "mergedAt": "2017-04-17T19:51:40Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e716bf2ddb97ab9f1076cb68c758ed1a4854194d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMyNDAxNzA=",
          "commit": {
            "abbreviatedOid": "02fab0d"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-18T14:06:59Z",
          "updatedAt": "2017-04-18T14:06:59Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "\"an an\"",
              "createdAt": "2017-04-18T14:06:59Z",
              "updatedAt": "2017-04-18T14:06:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 960,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MTkwMzE4",
      "title": "Bigger caveat for 0-RTT data",
      "url": "https://github.com/tlswg/tls13-spec/pull/960",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See discussion on https://github.com/tlswg/tls13-spec/commit/5b37a40",
      "createdAt": "2017-04-17T19:50:05Z",
      "updatedAt": "2017-04-17T19:51:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "015e65007e1ad9a0561f8664008bc8b9c6d584f6",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "diff-12",
      "headRefOid": "b7ad190e92cc1da99306393d0c288917efadd969",
      "closedAt": "2017-04-17T19:51:55Z",
      "mergedAt": "2017-04-17T19:51:55Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ecef2a15ab68ce9aa7d3f288336eaeef5d963333"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 961,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MjY4MjI0",
      "title": "Add references to published analyses",
      "url": "https://github.com/tlswg/tls13-spec/pull/961",
      "state": "MERGED",
      "author": "fxguenther",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Some additions/modifications to https://github.com/tlswg/tls13-spec/pull/951 changes\r\nFixes https://github.com/tlswg/tls13-spec/issues/911",
      "createdAt": "2017-04-18T07:39:07Z",
      "updatedAt": "2017-04-18T13:10:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ecef2a15ab68ce9aa7d3f288336eaeef5d963333",
      "headRepository": "fxguenther/tls13-spec",
      "headRefName": "master",
      "headRefOid": "1f4b8a871600658de05e9d7c5765f600dfabe5da",
      "closedAt": "2017-04-18T13:10:37Z",
      "mergedAt": "2017-04-18T13:10:36Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "33d9b1613e1c84dd2e85187822b90583b464a3a9"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@fxguenther: please provide a PR to add yourself to the participant list.",
          "createdAt": "2017-04-18T13:10:33Z",
          "updatedAt": "2017-04-18T13:10:33Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 962,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MzMwNjY3",
      "title": "Re-enable post-handshake client authentication for PSK handshakes.",
      "url": "https://github.com/tlswg/tls13-spec/pull/962",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When we banned client auth and PSK, we only meant to do it for\r\nthe main handshake, not the post-handshake phase. This reverts\r\nthat change, as well as clarifies the prophibition on PSK plus\r\ncert-based auth.",
      "createdAt": "2017-04-18T13:44:00Z",
      "updatedAt": "2017-04-21T10:24:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "beb447733d101ae50fc2fbb19e1602f303803db4",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "reenable_pha_with_psk",
      "headRefOid": "4fb4c47c2df386caaffeb1252c7944c9801a350c",
      "closedAt": "2017-04-21T10:24:57Z",
      "mergedAt": "2017-04-21T10:24:57Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "86ba8585e516e60e68c3be1ff2ff85c410cfd127"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 963,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2MzcxNjg4",
      "title": "Added contribs",
      "url": "https://github.com/tlswg/tls13-spec/pull/963",
      "state": "MERGED",
      "author": "fxguenther",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-18T16:44:51Z",
      "updatedAt": "2017-04-18T16:52:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ac054507da862b5813e574d550f396e1991bba8e",
      "headRepository": "fxguenther/tls13-spec",
      "headRefName": "master",
      "headRefOid": "4db8349583e1adcd5d85796a906d394a276163a4",
      "closedAt": "2017-04-18T16:52:33Z",
      "mergedAt": "2017-04-18T16:52:33Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9cabf2a454836d6aaac221d844b2132617d6b307"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 967,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2NTg5Mzg5",
      "title": "Enhanced the list of TLS 1.3 features",
      "url": "https://github.com/tlswg/tls13-spec/pull/967",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-19T16:28:46Z",
      "updatedAt": "2017-04-21T10:43:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "af56278b762df01c09b4252e2db09f29e60ab6c1",
      "headRepository": "hannestschofenig/tls13-spec",
      "headRefName": "patch-3",
      "headRefOid": "214eafddee64ce73678bcffa965f58d1705ba23e",
      "closedAt": "2017-04-21T10:43:14Z",
      "mergedAt": "2017-04-21T10:43:14Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "214eafddee64ce73678bcffa965f58d1705ba23e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM2NTQxMzQ=",
          "commit": {
            "abbreviatedOid": "214eafd"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-04-20T00:58:03Z",
          "updatedAt": "2017-04-20T00:58:54Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "\"key derivation function and HMAC.\"  We still use that function for Finished and Binders.",
              "createdAt": "2017-04-20T00:58:03Z",
              "updatedAt": "2017-04-20T00:58:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 974,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE2OTg3NjQw",
      "title": "Added text on determining the validity of OCSP responses",
      "url": "https://github.com/tlswg/tls13-spec/pull/974",
      "state": "CLOSED",
      "author": "nmav",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The OCSP protocol (RFC6960), defines the validity period of an\r\nOCSP response based on the presence of the thisUpdate and nextUpdate\r\nvalues. However, the nextUpdate value is optional, and may be omitted\r\nin an OCSP response. In that case it is implied by the OCSP issuer\r\nthat an updated OCSP response is available at all time, however,\r\nthat does not give a hint to verifier for how long to treat the\r\nprevious response valid. Set a maximum value to 15 days.",
      "createdAt": "2017-04-21T13:40:28Z",
      "updatedAt": "2017-04-26T16:01:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f54385d3065bb9d98873d372bd88e8ef94855f31",
      "headRepository": "nmav/tls13-spec",
      "headRefName": "tmp-ocsp-validity-clarification",
      "headRefOid": "ac15925773103068770e6199913b297a97379c09",
      "closedAt": "2017-04-26T16:01:27Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is more text than is needed (and also one paragraph too late); I would rather just see a minimal reference to RFC 6960 for all OCSP handling.",
          "createdAt": "2017-04-21T16:24:42Z",
          "updatedAt": "2017-04-21T16:24:42Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@nmav: can you post this to the list?",
          "createdAt": "2017-04-21T16:32:54Z",
          "updatedAt": "2017-04-21T16:32:54Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "@ekr I have already (RH mail server is down, it may take some time till it is there sorry). The reason there is more text than the RFC6960 reference is the fact that RFC6960 says nothing about the validity time when the nextUpdate field is missing.",
          "createdAt": "2017-04-21T16:38:53Z",
          "updatedAt": "2017-04-21T16:41:15Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> RFC6960 says nothing about the validity time when the nextUpdate field is missing.\r\n\r\nOh.  Ugh.  Maybe this amount of text will be appropriate, then; let's see what happens on the list.",
          "createdAt": "2017-04-21T16:44:33Z",
          "updatedAt": "2017-04-21T16:44:33Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNjY2NTc=",
          "commit": {
            "abbreviatedOid": "178720d"
          },
          "author": "kroeckx",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-22T21:44:16Z",
          "updatedAt": "2017-04-22T21:44:16Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "missing space between \"a\" and \"Signed\"",
              "createdAt": "2017-04-22T21:44:16Z",
              "updatedAt": "2017-04-23T08:15:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNzQwOTk=",
          "commit": {
            "abbreviatedOid": "178720d"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-23T08:15:42Z",
          "updatedAt": "2017-04-23T08:15:42Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "fixed; thanks",
              "createdAt": "2017-04-23T08:15:42Z",
              "updatedAt": "2017-04-23T08:15:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 975,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE3MDMzNzkx",
      "title": "Flesh out discussion of side channels",
      "url": "https://github.com/tlswg/tls13-spec/pull/975",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add side channel resistance as a desired (though not guaranteed)\r\nproperty in the introductory material, and provide a dedicated\r\nsubsection in the security analysis appendix for further discussion.",
      "createdAt": "2017-04-21T17:39:26Z",
      "updatedAt": "2017-04-27T13:04:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "21afe6410c89d3d5746ba91cc7d5491a4bd05976",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "side",
      "headRefOid": "ff7b676985c9160cd258544545363d8177e38641",
      "closedAt": "2017-04-27T13:04:55Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Putting side channels in the list of security properties alongside authentication, confidentiality, and integrity still feels a little awkward, as side-channel-resistance is not quite that first class of a goal, but it is still something we pay attention to.",
          "createdAt": "2017-04-21T17:40:50Z",
          "updatedAt": "2017-04-21T17:40:50Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(travis seems to be complaining about \"{{ticket-establishment}}\", which is not modified by this change.)",
          "createdAt": "2017-04-24T22:37:37Z",
          "updatedAt": "2017-04-24T22:37:37Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is a lot of text.... Wonder if there's some way to trim it down. Not sure I have a lot of ideas.",
          "createdAt": "2017-04-26T15:54:12Z",
          "updatedAt": "2017-04-26T15:54:38Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 976,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE3MzkwMDA5",
      "title": "Fix markdown in README",
      "url": "https://github.com/tlswg/tls13-spec/pull/976",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-25T01:46:58Z",
      "updatedAt": "2017-04-25T18:16:24Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "41ed4d0c612797b6163c4c7943c6fd2a2bf487f9",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "638abcfdb927f5d86759521641194a1bba501a1f",
      "closedAt": "2017-04-25T18:16:24Z",
      "mergedAt": "2017-04-25T18:16:24Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a48f1191dac3a423ae57ecb9ccd98cc9b925a2a1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 977,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE3NTg4Njg5",
      "title": "Shorter HKDF labels. Fixes #964.",
      "url": "https://github.com/tlswg/tls13-spec/pull/977",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per mailing list discussion, this allows us to have every HKDF-Expand just\r\nhave one hash block of info.\r\n\r\n@ilaril would love your feedback.",
      "createdAt": "2017-04-25T21:48:08Z",
      "updatedAt": "2017-04-26T15:55:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a48f1191dac3a423ae57ecb9ccd98cc9b925a2a1",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "shrink_hkdf_labels",
      "headRefOid": "028a90d920a23eaa73726c3d245be52ef70bb15a",
      "closedAt": "2017-04-26T15:55:02Z",
      "mergedAt": "2017-04-26T15:55:02Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6d19eec7b15494a3f27c5ee1736e2162f3f4628c"
      },
      "comments": [
        {
          "author": "ilaril",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Shouldn't \"TLS 1.3, \" be shortened to \"tls13 \"? Without that, several\nof the labels would seem to blow blocks.\n\nAlso, \"derived secret\" seems unchanged, and is too long to fit into\na block, even with \"tls13 \" prefix.\n\n\n",
          "createdAt": "2017-04-25T22:50:54Z",
          "updatedAt": "2017-04-25T22:50:54Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oops. Good catch. Script fail.",
          "createdAt": "2017-04-25T23:05:17Z",
          "updatedAt": "2017-04-25T23:05:17Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ilaril: fixed?",
          "createdAt": "2017-04-25T23:23:28Z",
          "updatedAt": "2017-04-25T23:23:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, I'll add a note. I still have an issue for the ChangeLog so I will\nadd this as well\n\nOn Tue, Apr 25, 2017 at 9:49 PM, Dave Garrett <notifications@github.com>\nwrote:\n\n> *@davegarrett* commented on this pull request.\n> ------------------------------\n>\n> In draft-ietf-tls-tls13.md\n> <https://github.com/tlswg/tls13-spec/pull/977#discussion_r113365050>:\n>\n> > @@ -4376,7 +4376,7 @@ defined below:\n>\n>      struct {\n>          uint16 length = Length;\n> -        opaque label<10..255> = \"TLS 1.3, \" + Label;\n> +        opaque label<10..255> = \"tls13 \" + Label;\n>\n> Maybe also change the max to 18? At minimum, sticking a short note\n> somewhere on the reason for the label lengths would probably be worth\n> doing. This affects interop, so this also needs a changelog entry.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/pull/977#pullrequestreview-34745417>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oS65WLeGIsBOCbSMT_c_f0CyUZItks5rzszqgaJpZM4NIGWg>\n> .\n>\n",
          "createdAt": "2017-04-26T04:54:39Z",
          "updatedAt": "2017-04-26T04:54:39Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also, minimum label size looks to be still 10, presumably should be 7\nwith 6-byte prefix (as it 10 with 9-byte prefix).\n",
          "createdAt": "2017-04-26T06:11:06Z",
          "updatedAt": "2017-04-26T06:11:06Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NDU0MTc=",
          "commit": {
            "abbreviatedOid": "e1dfe5e"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-26T04:49:45Z",
          "updatedAt": "2017-04-26T04:49:45Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Maybe also change the max to 18? At minimum, sticking a short note somewhere on the reason for the label lengths would probably be worth doing. This affects interop, so this also needs a changelog entry.",
              "createdAt": "2017-04-26T04:49:45Z",
              "updatedAt": "2017-04-26T15:50:44Z"
            }
          ]
        }
      ]
    },
    {
      "number": 978,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE3NzY0NTgy",
      "title": "Change log for -20",
      "url": "https://github.com/tlswg/tls13-spec/pull/978",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-26T17:08:15Z",
      "updatedAt": "2017-04-27T12:43:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "939555f7512b7df5c329ec889f01ffcdfc2700d2",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "draft20_changelog",
      "headRefOid": "e0a1e9b27bc135ed8de1361f89db33f739ded154",
      "closedAt": "2017-04-27T12:43:23Z",
      "mergedAt": "2017-04-27T12:43:23Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "defd6c7f308709c3076d795ea6ed684ffcf6ff88"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 979,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE3ODA3ODA1",
      "title": "Add sections on traffic analysis and side-channels.",
      "url": "https://github.com/tlswg/tls13-spec/pull/979",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Original by Ben Kaduk. Substantial rewrites by EKR.\r\n\r\n@ben.kaduk: PTAL",
      "createdAt": "2017-04-26T20:55:35Z",
      "updatedAt": "2017-04-27T12:38:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a15cd262e799ee67ca749fb59542b68a0a1e5765",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "traffic_analysis",
      "headRefOid": "2adcde1b581e048aa260cbbc1653fb2ca56013dd",
      "closedAt": "2017-04-27T12:38:48Z",
      "mergedAt": "2017-04-27T12:38:48Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7009ee6d6e70d5f745dd9d7af6e4c47f696df86d"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson ",
          "createdAt": "2017-04-26T22:54:56Z",
          "updatedAt": "2017-04-26T22:54:56Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODYwMDM=",
          "commit": {
            "abbreviatedOid": "648e395"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I think it preserves the essence of what I wanted to have said.  Thanks for tidying it up some more.",
          "createdAt": "2017-04-26T23:15:51Z",
          "updatedAt": "2017-04-26T23:29:48Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "Thanks for adding the \"trickling in\" part.",
              "createdAt": "2017-04-26T23:15:51Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            },
            {
              "originalPosition": 95,
              "body": "\"fingerprinting avoidance\" made a little more sense when there was a \"traffic fingerprinting\" bullet point.  Maybe \"robust countermeasures to traffic avoidance\"?",
              "createdAt": "2017-04-26T23:26:45Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODk1NzA=",
          "commit": {
            "abbreviatedOid": "648e395"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I have a few comments.",
          "createdAt": "2017-04-26T23:42:21Z",
          "updatedAt": "2017-04-26T23:54:39Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Note that you can use the DOI directly in the latest kramdown-rfc2629. Just cite `{{?HCJ16=DOI.10.1186/s13635-016-0030-7}}` inline and the tools should create a citation for you.",
              "createdAt": "2017-04-26T23:42:21Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            },
            {
              "originalPosition": 4,
              "body": "See the next comment: `{{?CLINIC=DOI.10.1007/978-3-319-08506-7_8}}`",
              "createdAt": "2017-04-26T23:43:04Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            },
            {
              "originalPosition": 42,
              "body": "trailing space",
              "createdAt": "2017-04-26T23:43:23Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            },
            {
              "originalPosition": 86,
              "body": "I think that \"cover traffic\" needs definition.  That is, traffic that contains no application data, but exists to reduce the attacker's ability to infer the properties of records that do contain data, or something like that.",
              "createdAt": "2017-04-26T23:45:10Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            },
            {
              "originalPosition": 95,
              "body": "we are talking about robust countermeasures for *traffic analysis*, right?  Better to use the same term here.",
              "createdAt": "2017-04-26T23:46:49Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            },
            {
              "originalPosition": 96,
              "body": "I would split this last sentence out into a new paragraph and remove the \"Note that\".",
              "createdAt": "2017-04-26T23:47:12Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            },
            {
              "originalPosition": 110,
              "body": "This is a general statement that I would move to after the \"First, Second\" paragraphs.  Also, rather than imply permissiveness, I would make it broader.\r\n\r\nInformation leakage through side channels can occur at layers above TLS, in application protocols and the applications that use them.  Resistance to side-channel attacks depends on applications and application protocols separately ensuring that confidential information is not inadvertently leaked.",
              "createdAt": "2017-04-26T23:51:22Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            },
            {
              "originalPosition": 101,
              "body": "This doesn't actually say what a side-channel attack is.  Either add a citation or a brief definition (leakage of confidential information through secondary signals, like timing).",
              "createdAt": "2017-04-26T23:52:48Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            },
            {
              "originalPosition": 119,
              "body": "Did you want to add a third? TLS 1.3 removes compression.  Though application protocols may implement compression independently, they do so with better awareness of the nature of the content.",
              "createdAt": "2017-04-26T23:54:25Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMDk0MDU=",
          "commit": {
            "abbreviatedOid": "648e395"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-27T03:09:34Z",
          "updatedAt": "2017-04-27T12:29:20Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "I compromised.",
              "createdAt": "2017-04-27T03:09:34Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            },
            {
              "originalPosition": 95,
              "body": "Done,",
              "createdAt": "2017-04-27T03:09:39Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            },
            {
              "originalPosition": 101,
              "body": "Done",
              "createdAt": "2017-04-27T03:10:32Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            },
            {
              "originalPosition": 110,
              "body": "Done",
              "createdAt": "2017-04-27T03:14:01Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            },
            {
              "originalPosition": 119,
              "body": "I don't think so. It's not really a feature.",
              "createdAt": "2017-04-27T03:14:11Z",
              "updatedAt": "2017-04-27T12:36:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 980,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE3ODA4NjQ0",
      "title": "Align SignatureScheme ALL-CAPS-VERBS with RESERVED labels.",
      "url": "https://github.com/tlswg/tls13-spec/pull/980",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Values in RESERVED labels, per the note at the top of Appendix B, MUST\r\nNOT be sent. This conflicts other text which tags ecdsa_sha1 and\r\ndsa_sha1 as SHOULD NOT.\r\n\r\nBack in early drafts, {*, dsa} and {sha1, ecdsa} were not tagged\r\nRESERVED and were merely SHOULD NOT in the text:\r\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-11#section-6.3.2.1\r\n\r\nThen things were redone as SignatureScheme with the intent of preserving\r\nSHOULD NOTs and MUST NOTs. Accordingly, dsa_* values were defined, and\r\nwith SHOULD NOTs in prose.\r\nhttps://github.com/tlswg/tls13-spec/pull/404\r\n\r\nThat was followed up by a cleanup change which left dsa_* values in\r\nthere, but not defined. Intentionally or not, this took away the SHOULD\r\nNOT and left it with something unclear.\r\nhttps://github.com/tlswg/tls13-spec/commit/bed72816a2cbcb2695718c3936c44b78498e07da\r\n\r\nThen the RESERVED tag was added, in response to the cleanup.\r\nIntentionally or not, this kicked in the Appendix B MUST NOT, which\r\nmeans TLS 1.3 implementations are forbidden from offering DSA to TLS 1.2\r\nservers. Nonetheless, the SHOULD NOT reference to the now non-existent\r\nand verboten dsa_sha1 remained.\r\nhttps://github.com/tlswg/tls13-spec/pull/434\r\n\r\nNext, an oversight in PR #404 was \"corrected\". PR #404 was intended to\r\nleave SHOULD NOTs and MUST NOTs as-is but downgraded {sha1, ecdsa} to a\r\nMUST NOT by omission. However, I did not notice the Appendix B text, so\r\nmy correction was, in fact, a no-op.\r\nhttps://github.com/tlswg/tls13-spec/pull/488\r\n\r\nRestoring ecdsa_sha1 was motivated by existing many implementations\r\nstill offering {sha1, ecdsa} at TLS 1.2, so it was not clear whether\r\nremoving it was realistic yet. (Notably, dependence on {sha1, rsa} aka\r\nrsa_pkcs1_sha1 is known to be prevalent.) Since then, BoringSSL has\r\nremoved ecdsa_sha1, so that is some evidence it is unnecessary.  NSS\r\nstill offers it, however.\r\n\r\nSo now we have a small mess on our hands. This PR attempts to bring\r\nthings to a self-consistent picture. Implementations I'm involved with\r\nno longer offer ecdsa_sha1 or dsa_*, so I am personally fine with any\r\nself-consistent option. For this PR, I went with:\r\n\r\nSince PR#488 was accepted and even called out in the changelog, my\r\ninterpretation was that it should end at SHOULD NOT. That I failed to\r\nactually implement originally is a bug.\r\n\r\nDSA is less clear, but since there were two changes by two separate\r\npeople who chipped away at the SHOULD NOT, my interpretation is to leave\r\nit at MUST NOT. I have taken the two changes to their logical\r\nconclusion, removing the named dsa_*_RESERVED values and references to\r\nnon-existent dsa_sha1.",
      "createdAt": "2017-04-26T20:59:44Z",
      "updatedAt": "2017-04-27T19:38:40Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "939555f7512b7df5c329ec889f01ffcdfc2700d2",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "reserved-confusing",
      "headRefOid": "4ea1d15c5aef258fc011d1bb5bb2b8cc3897297b",
      "closedAt": "2017-04-27T19:38:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A simple compromise to make the situation with these codepoints very clear is to just make up another annotation, like \"TRANSITIONAL\" or something, and tack that onto the end of all of the \"SHOULD NOT\" ones vs. the current \"RESERVED\" for \"MUST NOT\" ones.",
          "createdAt": "2017-04-27T03:17:50Z",
          "updatedAt": "2017-04-27T03:17:50Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Updated with PR#990",
          "createdAt": "2017-04-27T19:38:39Z",
          "updatedAt": "2017-04-27T19:38:39Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjMwOTk=",
          "commit": {
            "abbreviatedOid": "4ea1d15"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "BTW, part of the reason Firefox has trouble here is that what NSS advertises here also determines what we support if we negotiate TLS 1.0, and we don't have good enough telemetry on that.  Mostly that's because I'm too lazy to do the legwork.",
          "createdAt": "2017-04-26T21:08:02Z",
          "updatedAt": "2017-04-26T21:13:50Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Did you want to move rsa_pkcs1_sha1 here?  Doesn't it fall under the same basic rules?  I mean, some of us have cut one of the two out, but the same logic applies to both.  You could rationalize that by merging the description of the two into the last bullet point.",
              "createdAt": "2017-04-26T21:08:02Z",
              "updatedAt": "2017-04-26T21:13:50Z"
            },
            {
              "originalPosition": 29,
              "body": "List structure here is odd: you might want to label this as \"Legacy Algorithms\" and merge the paragraph that follows the list.\r\n\r\nI believe that both follow the rule regarding certificates as well, but this implies that pkcs1 is exempt from the prohibition regarding use in TLS-itself.",
              "createdAt": "2017-04-26T21:13:40Z",
              "updatedAt": "2017-04-26T21:13:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODMzODU=",
          "commit": {
            "abbreviatedOid": "4ea1d15"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-26T22:56:51Z",
          "updatedAt": "2017-04-26T22:56:51Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "+1 to MT's comment here.",
              "createdAt": "2017-04-26T22:56:51Z",
              "updatedAt": "2017-04-26T22:56:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODA2ODI=",
          "commit": {
            "abbreviatedOid": "4ea1d15"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-26T22:37:59Z",
          "updatedAt": "2017-04-26T22:58:45Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yeah, it probably makes sense to call rsa_pkcs1_sha1 a legacy algorithm, even though it's sufficiently entrenched that we will still be using it for the near future.",
              "createdAt": "2017-04-26T22:37:59Z",
              "updatedAt": "2017-04-26T22:58:45Z"
            },
            {
              "originalPosition": 29,
              "body": "I agree with Martin's first point, but would probably benefit from a bit more context on the second point.",
              "createdAt": "2017-04-26T22:58:26Z",
              "updatedAt": "2017-04-26T22:58:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMDU3OTA=",
          "commit": {
            "abbreviatedOid": "4ea1d15"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-27T02:24:11Z",
          "updatedAt": "2017-04-27T02:24:12Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "That is both ecdsa_sha1 and rsa_pkcs1_sha1 have the same property regarding their use.  We don't like them, but we have to concede that they might appear in certificates.",
              "createdAt": "2017-04-27T02:24:11Z",
              "updatedAt": "2017-04-27T02:24:12Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMTAzNzg=",
          "commit": {
            "abbreviatedOid": "4ea1d15"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-27T03:21:47Z",
          "updatedAt": "2017-04-27T03:21:47Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I don't really want to strip the labels off of these; they have prior meaning, and there's no reason to obfuscate it here. (they're already hidden up top and only in the appendix) What's the reason for this proposed change?",
              "createdAt": "2017-04-27T03:21:47Z",
              "updatedAt": "2017-04-27T03:21:47Z"
            }
          ]
        }
      ]
    },
    {
      "number": 981,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE3ODg3NDc1",
      "title": "Adding missing \"no_application_protocol\" alert",
      "url": "https://github.com/tlswg/tls13-spec/pull/981",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "RFC 7301 defines the ALPN extension and defined a new alert \"no_application_protocol\". TLS 1.3 uses ALPN but currently misses the alert in Section 6.",
      "createdAt": "2017-04-27T08:44:15Z",
      "updatedAt": "2017-04-27T12:29:12Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "939555f7512b7df5c329ec889f01ffcdfc2700d2",
      "headRepository": "hannestschofenig/tls13-spec",
      "headRefName": "patch-4",
      "headRefOid": "7ae441bc9aea9093f464d56690b38922ebd31ffa",
      "closedAt": "2017-04-27T12:29:12Z",
      "mergedAt": "2017-04-27T12:29:11Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7ae441bc9aea9093f464d56690b38922ebd31ffa"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://tlswg.github.io/tls13-spec/#error-alerts\r\n\r\nYou also need to add it to the Error Alerts section with a description.",
          "createdAt": "2017-04-27T08:52:00Z",
          "updatedAt": "2017-04-27T08:52:00Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTI2OTM=",
          "commit": {
            "abbreviatedOid": "7ae441b"
          },
          "author": "hannestschofenig",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Added alert error description as well",
          "createdAt": "2017-04-27T09:03:13Z",
          "updatedAt": "2017-04-27T09:03:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 983,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE3OTgxOTc0",
      "title": "added list of updated and obsoleted RFS to the introduction.",
      "url": "https://github.com/tlswg/tls13-spec/pull/983",
      "state": "CLOSED",
      "author": "jsalowey",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #982",
      "createdAt": "2017-04-27T16:38:10Z",
      "updatedAt": "2017-04-27T19:07:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "defd6c7f308709c3076d795ea6ed684ffcf6ff88",
      "headRepository": "jsalowey/tls13-spec",
      "headRefName": "rfc-update",
      "headRefOid": "fb57be46494ab2c1b5c6908f502ceca831451ead",
      "closedAt": "2017-04-27T19:07:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased and merged",
          "createdAt": "2017-04-27T19:07:20Z",
          "updatedAt": "2017-04-27T19:07:20Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzgwMzM=",
          "commit": {
            "abbreviatedOid": "fb57be4"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-27T17:52:54Z",
          "updatedAt": "2017-04-27T17:53:48Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Adds trailing whitespace",
              "createdAt": "2017-04-27T17:52:54Z",
              "updatedAt": "2017-04-27T17:53:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODkzNTY=",
          "commit": {
            "abbreviatedOid": "fb57be4"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-27T18:38:03Z",
          "updatedAt": "2017-04-27T18:38:03Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "nit: please wrap new text to around 80 char (we're in no way consistent, but this paragraph has particularly long lines and doesn't fit in GitHub's columns)",
              "createdAt": "2017-04-27T18:38:03Z",
              "updatedAt": "2017-04-27T18:38:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 985,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE3OTk5NjY1",
      "title": "removing unused references",
      "url": "https://github.com/tlswg/tls13-spec/pull/985",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #984.\r\n\r\nNote that I'm not entirely convinced we need the GCM reference because RFC 5116, which is referenced in B.4 for the suites, includes a reference to it.",
      "createdAt": "2017-04-27T18:13:09Z",
      "updatedAt": "2017-04-27T18:20:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "defd6c7f308709c3076d795ea6ed684ffcf6ff88",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "unused_references",
      "headRefOid": "a2203206d7ded19f0ebeddd5269570051da3bd3d",
      "closedAt": "2017-04-27T18:20:47Z",
      "mergedAt": "2017-04-27T18:20:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "60b0a0d0ba173baacb11ad73a712fb4d136a9045"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 988,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4MDAyMzE1",
      "title": "updating reference for obsoleted normative reference",
      "url": "https://github.com/tlswg/tls13-spec/pull/988",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #987.",
      "createdAt": "2017-04-27T18:26:48Z",
      "updatedAt": "2017-04-27T18:36:40Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "34c20ba01f1c28ec7858df7e398dfe2ab6f8b17d",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "3447_reference",
      "headRefOid": "7a0b9cf77212e07f1bc2301683b4af52301b2c37",
      "closedAt": "2017-04-27T18:36:40Z",
      "mergedAt": "2017-04-27T18:36:39Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "053bdf96ece2d230f6d5dbd9ef70dd00eb075c8a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 989,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4MDA2MDY0",
      "title": "fixing spacing in 5869 reference",
      "url": "https://github.com/tlswg/tls13-spec/pull/989",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "make submit returned this error:\r\n- No link definition for link ID 'rfc 5869' found on line 6144\r\nso I removed the space.\r\n\r\n",
      "createdAt": "2017-04-27T18:46:26Z",
      "updatedAt": "2017-04-27T18:55:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "053bdf96ece2d230f6d5dbd9ef70dd00eb075c8a",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "5869_ref",
      "headRefOid": "ddb7d9133bea077a1fa3614c195d833d6dd52926",
      "closedAt": "2017-04-27T18:55:31Z",
      "mergedAt": "2017-04-27T18:55:30Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f87f0861dbabfdbfcbf61fe3541aeb4fa4d4ac36"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 990,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4MDE1ODg4",
      "title": "Reserved confusing",
      "url": "https://github.com/tlswg/tls13-spec/pull/990",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-27T19:38:10Z",
      "updatedAt": "2017-04-27T22:46:46Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ccd28129900be6743a6178dcb912c19a2496de63",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "reserved-confusing",
      "headRefOid": "52b3c92a5bd0bd5585c7252ab536a8975f2466f8",
      "closedAt": "2017-04-27T22:31:29Z",
      "mergedAt": "2017-04-27T22:31:29Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e8af7b59d64da990a353ef294e9fdb4883bbf4a5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTA1OTI=",
          "commit": {
            "abbreviatedOid": "980b3e3"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-27T20:09:38Z",
          "updatedAt": "2017-04-27T20:13:15Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "'C'lients.",
              "createdAt": "2017-04-27T20:09:38Z",
              "updatedAt": "2017-04-27T22:27:12Z"
            },
            {
              "originalPosition": 40,
              "body": "I'm not sure that we specifically need to call out SHA-1 as the only cause.\r\nMaybe something about \"because they use weak cryptography\"?",
              "createdAt": "2017-04-27T20:11:05Z",
              "updatedAt": "2017-04-27T22:27:12Z"
            },
            {
              "originalPosition": 41,
              "body": "I don't think this statement as written is accurate.\r\nYou can use either RSA or ECDSA without SHA-1, which is allowed in the real list of defined algorithms.",
              "createdAt": "2017-04-27T20:11:53Z",
              "updatedAt": "2017-04-27T22:27:12Z"
            },
            {
              "originalPosition": 40,
              "body": "Hmm, looks like we are losing the 2119-SHOULD NOT be used, which I would prefer to retain.",
              "createdAt": "2017-04-27T20:12:57Z",
              "updatedAt": "2017-04-27T22:27:12Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTM4NDE=",
          "commit": {
            "abbreviatedOid": "980b3e3"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-27T20:24:14Z",
          "updatedAt": "2017-04-27T20:29:43Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Well, SHA-1 is the weak link here. So I feel like clarify is more accurate.",
              "createdAt": "2017-04-27T20:24:14Z",
              "updatedAt": "2017-04-27T22:27:12Z"
            },
            {
              "originalPosition": 41,
              "body": "Ah, I was trying to rely on the SHA-1 above but maybe I got too clever.",
              "createdAt": "2017-04-27T20:24:25Z",
              "updatedAt": "2017-04-27T22:27:12Z"
            },
            {
              "originalPosition": 40,
              "body": "I'll restore a SHOULD NOT",
              "createdAt": "2017-04-27T20:24:33Z",
              "updatedAt": "2017-04-27T22:27:12Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTcyMTQ=",
          "commit": {
            "abbreviatedOid": "cc4eedd"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-27T20:38:43Z",
          "updatedAt": "2017-04-27T20:39:46Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "How about \"specifically SHA-1, which is used in this context with either RSASSA-PKCS1-v1_5 or ECDSA\"?",
              "createdAt": "2017-04-27T20:38:43Z",
              "updatedAt": "2017-04-27T22:27:12Z"
            },
            {
              "originalPosition": 46,
              "body": "The now-doubled \"for backward[s] compatibility\" may be overkill.",
              "createdAt": "2017-04-27T20:39:20Z",
              "updatedAt": "2017-04-27T22:27:12Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzkyNDA=",
          "commit": {
            "abbreviatedOid": "cc4eedd"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-27T22:26:06Z",
          "updatedAt": "2017-04-27T22:26:06Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Sure.\r\n",
              "createdAt": "2017-04-27T22:26:06Z",
              "updatedAt": "2017-04-27T22:27:12Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzkyNDQ=",
          "commit": {
            "abbreviatedOid": "cc4eedd"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-27T22:26:08Z",
          "updatedAt": "2017-04-27T22:26:08Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "Good catch.",
              "createdAt": "2017-04-27T22:26:08Z",
              "updatedAt": "2017-04-27T22:27:12Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDIxNDY=",
          "commit": {
            "abbreviatedOid": "cc4eedd"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-04-27T22:46:46Z",
          "updatedAt": "2017-04-27T22:46:46Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Looks like \"used\" got dropped in the merge, FWIW.",
              "createdAt": "2017-04-27T22:46:46Z",
              "updatedAt": "2017-04-27T22:46:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 992,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4MDI5MzA5",
      "title": "making two sentence one",
      "url": "https://github.com/tlswg/tls13-spec/pull/992",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The \"Because ...\" sentence seemed like it should be combined with the next sentence.",
      "createdAt": "2017-04-27T20:50:11Z",
      "updatedAt": "2017-04-27T22:29:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ccd28129900be6743a6178dcb912c19a2496de63",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "intro_nit",
      "headRefOid": "a8983dba1f85674e68f3ef019e9df6b0eaaba61d",
      "closedAt": "2017-04-27T22:29:35Z",
      "mergedAt": "2017-04-27T22:29:35Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "43d8ebeb57066de5f94f3b910da595ce6bc4ddfa"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 993,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4MDQxNjkx",
      "title": "moving reserved values for hash/sig algorithms registry",
      "url": "https://github.com/tlswg/tls13-spec/pull/993",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #991",
      "createdAt": "2017-04-27T22:00:53Z",
      "updatedAt": "2017-04-27T22:30:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ccd28129900be6743a6178dcb912c19a2496de63",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "hashsig_reserved_values",
      "headRefOid": "6568a6ad6787d5f7e40eb8efb0810bf0e66da251",
      "closedAt": "2017-04-27T22:30:47Z",
      "mergedAt": "2017-04-27T22:30:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ae22e6d659d2da5939f1e049e28cac0ed6f0fb68"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 994,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4MDQ1Mzg4",
      "title": "adding me:spt as contributor",
      "url": "https://github.com/tlswg/tls13-spec/pull/994",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-27T22:26:21Z",
      "updatedAt": "2017-04-27T22:28:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ccd28129900be6743a6178dcb912c19a2496de63",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "adding_spt_to_contributor",
      "headRefOid": "ad004d19e7eb614a574f3291cd316beb5a44514b",
      "closedAt": "2017-04-27T22:28:33Z",
      "mergedAt": "2017-04-27T22:28:33Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3fc0a4393136867ce1b3d65e8bcb0b905ea50b60"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 995,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4MDQ3Njkz",
      "title": "Add Joe Salowey as contributor",
      "url": "https://github.com/tlswg/tls13-spec/pull/995",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-27T22:44:24Z",
      "updatedAt": "2017-04-28T14:29:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e8af7b59d64da990a353ef294e9fdb4883bbf4a5",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "jsalowey_acknowledge",
      "headRefOid": "78afed40c291bda3173b2e8362fb01e22e16c8b4",
      "closedAt": "2017-04-28T13:32:28Z",
      "mergedAt": "2017-04-28T13:32:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "de4c9d02fe1d6d91ff98ab106fed0b1d67ed3771"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@jsalowey: ?",
          "createdAt": "2017-04-28T07:53:54Z",
          "updatedAt": "2017-04-28T07:53:54Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We can fix this later but Salowey.net is better.\n\nSent from my iPhone\n\n> On Apr 28, 2017, at 09:32, ekr <notifications@github.com> wrote:\n> \n> Merged #995.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
          "createdAt": "2017-04-28T14:08:55Z",
          "updatedAt": "2017-04-28T14:08:55Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed\n\nOn Fri, Apr 28, 2017 at 7:08 AM, Sean Turner <notifications@github.com>\nwrote:\n\n> We can fix this later but Salowey.net is better.\n>\n> Sent from my iPhone\n>\n> > On Apr 28, 2017, at 09:32, ekr <notifications@github.com> wrote:\n> >\n> > Merged #995.\n> >\n> > \u2014\n> > You are receiving this because you are subscribed to this thread.\n> > Reply to this email directly, view it on GitHub, or mute the thread.\n> >\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/pull/995#issuecomment-298007809>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1obECteNupWaeNkGCaDlJujuv-zxhks5r0fL4gaJpZM4NK2xC>\n> .\n>\n",
          "createdAt": "2017-04-28T14:29:28Z",
          "updatedAt": "2017-04-28T14:29:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 996,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4MDUxNzM3",
      "title": "Pre-publish editorial nits",
      "url": "https://github.com/tlswg/tls13-spec/pull/996",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-04-27T23:18:14Z",
      "updatedAt": "2017-04-28T08:02:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e8af7b59d64da990a353ef294e9fdb4883bbf4a5",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "editorial_nits",
      "headRefOid": "fc99a102b085250d41e94735abaa38e1d3964487",
      "closedAt": "2017-04-28T08:02:23Z",
      "mergedAt": "2017-04-28T08:02:23Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6ec7ffa21cdd3554f678cf304dc71d9762d75f2a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTY0NDk=",
          "commit": {
            "abbreviatedOid": "c35ec85"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-04-28T00:54:17Z",
          "updatedAt": "2017-04-28T00:58:08Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "The pedant in me is noting that \"previous prohibition\" needs an article in order to make a complete sentence, but I am not convinced that a complete sentence is strictly needed in this context.",
              "createdAt": "2017-04-28T00:54:17Z",
              "updatedAt": "2017-04-28T08:00:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 997,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4MTQzMjE3",
      "title": "Editorial, verb added",
      "url": "https://github.com/tlswg/tls13-spec/pull/997",
      "state": "MERGED",
      "author": "jensguballa",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just a minor editorial correction.",
      "createdAt": "2017-04-28T12:36:45Z",
      "updatedAt": "2017-04-28T13:32:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6ec7ffa21cdd3554f678cf304dc71d9762d75f2a",
      "headRepository": "jensguballa/tls13-spec",
      "headRefName": "signature_algorithm",
      "headRefOid": "289edf249b96a2c92505c761ea921e90b0afba88",
      "closedAt": "2017-04-28T13:32:19Z",
      "mergedAt": "2017-04-28T13:32:19Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "48762ab72f7551bb269b7695d56ac199396a2f5e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 998,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4MzEzNjc4",
      "title": "Add a new derivation stage for PSKs off of the RMS so that each session",
      "url": "https://github.com/tlswg/tls13-spec/pull/998",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "ticket is associated with a different PSK. This provides somewhat\r\nincreased security in cases where you have multiple PSKs for the\r\nsame connection and one PSK is compromised.\r\n\r\nThe motivation here is that in cases where the server maintains a\r\nsession database rather than self-encrypted tickets, the server might\r\ndelete tickets as they are used,. This change provides FS for\r\nconnections which have been used, even if there are other outstanding\r\ntickets in the session cache associated with the same original\r\nconnection.",
      "createdAt": "2017-04-30T14:22:57Z",
      "updatedAt": "2017-06-17T20:40:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1afad56a2bc135ea96470e27dffc73d7729150a8",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "nst_diversity",
      "headRefOid": "5ecece31c607cfe335302088457dc662e056870f",
      "closedAt": "2017-06-17T20:39:59Z",
      "mergedAt": "2017-06-17T20:39:59Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "fb799643bfbbe1dd953042e0f85172ec4bef1b7c"
      },
      "comments": [
        {
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Big +1 to this change as we are tentatively planning to use a session-cache-like approach for resumption and this will make it possible for us to use multiple tickets, or post-auth tickets, to the same client. As-is this is not quite possible. ",
          "createdAt": "2017-04-30T14:58:06Z",
          "updatedAt": "2017-04-30T14:58:06Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is the new ticket_nonce field supposed to be somehow wired to that new hkdf-expand-label call? Right now, it seems like all the PSKs produced on the same connection will be the same.\r\n\r\nThe context of that call is specified to be empty, but based on surrounding text, I guess the context should be ticket_nonce?",
          "createdAt": "2017-04-30T19:06:44Z",
          "updatedAt": "2017-04-30T19:06:44Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good catch, yeah...\n\nOn Sun, Apr 30, 2017 at 9:06 PM, ilaril <notifications@github.com> wrote:\n\n> Is the new ticket_nonce field supposed to be somehow wired to that new\n> hkdf-expand-label call? Right now, it seems like all the PSKs produced on\n> the same connection will be the same.\n>\n> The context of that call is specified to be empty, but based on\n> surrounding text, I guess the context should be ticket_nonce?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/pull/998#issuecomment-298250490>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oWGNlN3rFm3yK0BCsR18ums-R5-cks5r1NvFgaJpZM4NMlS4>\n> .\n>\n",
          "createdAt": "2017-04-30T20:56:26Z",
          "updatedAt": "2017-04-30T20:56:26Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It might be preferable to use Hash(NewSessionTicket) in HKDF-Expand-Label rather than ticket_nonce, directly, thus binding the PSK to the whole ticket. (HKDF-Expand-Label does say it wants a hash value, anyway)\r\n\r\nAlso, how big of a nonce do we really need? Up to 255 bytes feels like over-generalization. If we just made it a type \"Random\" (same as hellos), then its 32 bytes, plus the 4 from ticket_age_add (if a message hash is used), should be enough entropy to ensure uniqueness if all generated properly. It'd also be simpler to specify \"32 bytes generated by a secure random number generator\" yet again rather than just say it needs a unique value and leave the generation up to the implementation to figure out.",
          "createdAt": "2017-05-01T04:24:51Z",
          "updatedAt": "2017-05-01T04:24:51Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Alternative design: add an extra derive step to the generation of the PSK that takes the PSK ID as input.  A server that splits their cache can perform this step as soon as they issue the PSK.  So can the client if they want to.  Then there is no extra nonce on the wire (the PSK ID is the nonce).\r\n\r\nThat is, for resumption, change:\r\n\r\n```\r\n   PSK ->  HKDF-Extract = Early Secret\r\n```\r\nto:\r\n```\r\nPSK ->  Derive-Secret(., 'derive res psk', PSK-ID) -> HKDF-Extract = Early Secret\r\n```",
          "createdAt": "2017-05-01T05:11:53Z",
          "updatedAt": "2017-05-01T05:11:53Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson, @davegarrett: interesting suggestion, but kind of limiting in that it makes it impossible to implement any kind of self-encryption scheme at all (though it works fine with identities which are just lookup keys)\r\n\r\nConsider the case where instead of a session cache, the server wants to self-encrypt using a puncturable encryption scheme (see https://eprint.iacr.org/2017/223.pdf and https://isi.jhu.edu/~mgreen/forward_sec.pdf for background) to encrypt each ticket. With the construction I propose you would do:\r\n\r\n  PSK_i = HKDF-Expand(RMS, nonce)\r\n  ticket_i = Encrypt(K_pub, PSK_i)\r\n\r\nHowever, in the construction you propose, this won't work because it creates a circular dependency between PSK_i and ticket_i.\r\n\r\nSo, I think if we want to do this, it would be more flexible to have an extra nonce.\r\n\r\n@davegarrett: my motivation for making this variable length isn't to allow the nonce to be extra large but rather to allow it to be small. It seems unlikely that one would want to produce more than 2^32 tickets and so either 4 byte counter or 8 randomly-generated bytes should be plenty, especially given that the impact of collision is just a reduction of PFS to the current state.\r\n",
          "createdAt": "2017-05-01T05:53:15Z",
          "updatedAt": "2017-05-01T05:53:15Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> However, in the construction you propose, this won't work because it creates a circular dependency between PSK_i and ticket_i.\r\n\r\nMy thought was that in a self-encrypting scheme you would save the resumption master on the principle that the ticket decryption key is your point of exposure.  It only makes sense to separate keys if you don't have something like a ticket decryption key lying around.",
          "createdAt": "2017-05-01T08:59:56Z",
          "updatedAt": "2017-05-01T08:59:56Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Right, but as I said, that doesn't apply if you have a more sophisticated self-encryption scheme, as in the examples I indicated above",
          "createdAt": "2017-05-01T09:27:46Z",
          "updatedAt": "2017-05-01T09:27:46Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Can't you implement that scheme by putting the nonce in the ticket?",
          "createdAt": "2017-05-01T09:46:23Z",
          "updatedAt": "2017-05-01T09:46:23Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think so, no, because the problem is the dependency of the key on its own encryption\r\n\r\n",
          "createdAt": "2017-05-01T09:50:04Z",
          "updatedAt": "2017-05-01T09:50:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh, I see now.  Those schemes could work, but unless the client is involved in the process at least to the extent that a key is separated at the client, the self-encrypted ticket would have to contain the RMS, not the i-th derived PSK. At that point any ticket is a threat to any other (the basic model we have today).\r\n\r\nI'm not thrilled by those puncturable encryption papers.  Storage is cheap, especially for keys.  It's globally consistent synchronization that hurts.  If it were me, I'd worry less about the storage problem and more about the synchronization one.  I guess that the assertion is that globally consistent state for a single user's set of MTAs is manageable.",
          "createdAt": "2017-05-01T10:20:14Z",
          "updatedAt": "2017-05-01T10:20:14Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Mon, May 1, 2017 at 12:20 PM, Martin Thomson <notifications@github.com>\nwrote:\n\n> Oh, I see now. Those schemes could work, but unless the client is involved\n> in the process at least to the extent that a key is separated at the\n> client, the self-encrypted ticket would have to contain the RMS, not the\n> i-th derived PSK. At that point any ticket is a threat to any other (the\n> basic model we have today).\n>\n\nRight, that's why we would need the nonce.\n\n\n> I'm not thrilled by those puncturable encryption papers. Storage is cheap,\n> especially for keys. It's globally consistent synchronization that hurts.\n> If it were me, I'd worry less about the storage problem and more about the\n> synchronization one. I guess that the assertion is that globally consistent\n> state for a single user's set of MTAs is manageable.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/pull/998#issuecomment-298315516>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oV2rBS9gMk_iXIV-o5o4KX9WTFvUks5r1bHegaJpZM4NMlS4>\n> .\n>\n",
          "createdAt": "2017-05-01T10:25:16Z",
          "updatedAt": "2017-05-01T10:25:16Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think some sort of text stating some of the possible methods to handle the nonce is warranted, rather than leaving its generation completely unspecified. Maybe have a paragraph just describing a recommended way to set up a simple session database?\r\n\r\nShould this be discussed further on-list?",
          "createdAt": "2017-05-01T20:05:40Z",
          "updatedAt": "2017-05-01T20:05:40Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We'll certainly need to discuss on the list before merging this. I'll send something relatively soon.\r\n\r\nThat said, I don't believe that the changes you propose would improve the specification. It's not our job to tell people how to generate unique values and we don't do it elsewhere in the spec where we require uniqueness.",
          "createdAt": "2017-05-01T20:32:15Z",
          "updatedAt": "2017-05-01T20:32:15Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Monday, May 01, 2017 04:32:17 pm ekr wrote:\n> That said, I don't believe that the changes you propose would improve the specification. It's not our job to tell people how to generate unique values and we don't do it elsewhere in the spec where we require uniqueness.\n\nHuh? Of course we do, e.g.:\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-20#section-5.3 (per record nonce)\nhttps://tools.ietf.org/html/draft-ietf-tls-tls13-20#section-4.3.2 (says e.g. randomly generate)\n\nAlso, I'm not suggesting a hard requirement; just some sort of starting point recommendation(s).\n",
          "createdAt": "2017-05-01T23:24:28Z",
          "updatedAt": "2017-05-01T23:24:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Neither of these are solely uniqueness requirements. The first of these is a requirement for interoperability.\r\n\r\nThe second is an example where it's not uniqueness that matters (in fact, it used to just say unique) and now it is specifically intended to be unpredictable, which is why we mandate it. You'll note that this is a recent change made *after* I realized that it was a partial security condition. Prior to this it just required uniqueness.\r\n",
          "createdAt": "2017-05-01T23:32:54Z",
          "updatedAt": "2017-05-01T23:32:54Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "CONTRIBUTOR",
          "body": "would it be stronger to use the entire NewSessionTicket message as the context for the PSK HDKF instead of just the nonce? This would bind any extensions as well to the resumption PSK",
          "createdAt": "2017-05-02T18:10:40Z",
          "updatedAt": "2017-05-02T18:11:08Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> would it be stronger to use the entire NewSessionTicket message as the context for the PSK HDKF instead of just the nonce? This would bind any extensions as well to the resumption PSK\r\n\r\nThe HKDF output is supposed to be included in the encrypted ticket, see (e.g.) https://github.com/tlswg/tls13-spec/pull/998#issuecomment-298315516 ",
          "createdAt": "2017-05-02T18:14:59Z",
          "updatedAt": "2017-05-02T18:14:59Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk makes sense, nvm then",
          "createdAt": "2017-05-02T18:18:34Z",
          "updatedAt": "2017-05-02T18:18:34Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk alternatively we could have the client send the Hash of the NewSessionTicket message back to the server during resumption, but might be overkill.",
          "createdAt": "2017-05-02T18:48:13Z",
          "updatedAt": "2017-05-02T18:48:13Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner @jsalowey OK to merge?",
          "createdAt": "2017-05-20T07:11:58Z",
          "updatedAt": "2017-05-20T07:11:58Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr okay to merge",
          "createdAt": "2017-06-11T16:26:23Z",
          "updatedAt": "2017-06-11T16:26:23Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjYzMjA=",
          "commit": {
            "abbreviatedOid": "9ae609f"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-01T13:29:40Z",
          "updatedAt": "2017-05-01T13:30:33Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "\"computed\"",
              "createdAt": "2017-05-01T13:29:40Z",
              "updatedAt": "2017-05-04T13:07:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjQ2MDg=",
          "commit": {
            "abbreviatedOid": "5ecece3"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Generally I like this, just one question inline.",
          "createdAt": "2017-05-04T16:48:30Z",
          "updatedAt": "2017-05-04T16:49:31Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "I forget if we already have cases where we HKDF-Expand something that's already HKDF-Expand output instead of HKDF-Extract output; we've gone back and forth on that, IIRC.",
              "createdAt": "2017-05-04T16:48:30Z",
              "updatedAt": "2017-05-04T16:49:31Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjUwNjY=",
          "commit": {
            "abbreviatedOid": "5ecece3"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T02:00:35Z",
          "updatedAt": "2017-05-05T02:00:35Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "The rule we need to maintain is that we Expand after every Extract.  Expand can be run in series safely (see the recent discussion about the exporter).",
              "createdAt": "2017-05-05T02:00:35Z",
              "updatedAt": "2017-05-05T02:00:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 999,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4MzUxNTEz",
      "title": "fixing syntax errors of ID 20.",
      "url": "https://github.com/tlswg/tls13-spec/pull/999",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "My parser detected these.",
      "createdAt": "2017-05-01T06:49:11Z",
      "updatedAt": "2017-05-02T01:25:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1afad56a2bc135ea96470e27dffc73d7729150a8",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "syntax-fix",
      "headRefOid": "87118c47c5d5ce88f8f9fae90ceb2b25956d73d6",
      "closedAt": "2017-05-01T07:44:32Z",
      "mergedAt": "2017-05-01T07:44:32Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6a0add91395d6be509289b6cc3dd16097b14885a"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazu-yamamoto: is your parser online? We could run it as part of CI...",
          "createdAt": "2017-05-01T07:44:51Z",
          "updatedAt": "2017-05-01T07:44:51Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My parser is here:\r\n\r\nhttps://github.com/kazu-yamamoto/tls13-spec-validator\r\n\r\nBut I think it's hard to run it on CI because it is written in Haskell and I modified the draft a bit to validate coverage:\r\n\r\nhttps://github.com/kazu-yamamoto/tls13-spec/tree/validation\r\n",
          "createdAt": "2017-05-01T08:49:57Z",
          "updatedAt": "2017-05-01T08:49:57Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1000,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4NDI3NzUw",
      "title": "\"supported_groups\" is not MTU in EncryptedExtensions",
      "url": "https://github.com/tlswg/tls13-spec/pull/1000",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Even when (EC)DHE is in use, the \"supported_groups\" extension is\r\nonly mandatory in the ClientHello; it can be omitted from the\r\nEncryptedExtensions, as per section 4.2.6.\r\n\r\nGiven that, it is not MTI for the server sending to the client, but\r\nthe client must be prepared to accept the extension in EncryptedExtensions\r\n(at least to the point of not crashing or aborting the handshake), so\r\nleave the MTI text unchanged.  It would be too awkward to try to\r\nexpress this subtlety in such a concise list.",
      "createdAt": "2017-05-01T19:43:34Z",
      "updatedAt": "2017-05-04T17:45:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6a0add91395d6be509289b6cc3dd16097b14885a",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "mti",
      "headRefOid": "f2404bf2b20020ceaae9d3f7a976173371ecaa6a",
      "closedAt": "2017-05-04T17:45:23Z",
      "mergedAt": "2017-05-04T17:45:23Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "8eade9e77dbe85d6bc3cf24b4e66f2329eb4c05e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1002,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4NjAxOTc0",
      "title": "Clarify \"KDF Hash\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/1002",
      "state": "MERGED",
      "author": "Lekensteyn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "HKDF-Expand-Label has changed between draft -19 and -20, clarify that\r\n\"HDF Hash\" refers to the hash algorithm and not a version-specific\r\ninstance of HKDF-Expand-Label which is populated with a hash algorithm.",
      "createdAt": "2017-05-02T17:10:17Z",
      "updatedAt": "2017-05-04T21:14:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6a0add91395d6be509289b6cc3dd16097b14885a",
      "headRepository": "Lekensteyn/tls13-spec",
      "headRefName": "clarify-hash-algo",
      "headRefOid": "1aceeb7639e11b77c1dd0fb909c111316d0965f0",
      "closedAt": "2017-05-04T21:14:41Z",
      "mergedAt": "2017-05-04T21:14:41Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "66f895b1ac24d2071cafe13c692b3ca6714e0817"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1003,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4NjA5NDE5",
      "title": "PSK context for 0-RTT needs version number",
      "url": "https://github.com/tlswg/tls13-spec/pull/1003",
      "state": "MERGED",
      "author": "Lekensteyn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The 0-RTT key might differ between TLS versions (as demonstrated with\r\nthe draft -20 changes). Be explicit about storing this version number\r\nsince section 4.2.9 requires this information too.",
      "createdAt": "2017-05-02T17:50:00Z",
      "updatedAt": "2017-05-04T21:15:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6a0add91395d6be509289b6cc3dd16097b14885a",
      "headRepository": "Lekensteyn/tls13-spec",
      "headRefName": "zero-rtt-context",
      "headRefOid": "1a71021393c0f15d6a90a03a01918e4adb698f53",
      "closedAt": "2017-05-04T21:15:47Z",
      "mergedAt": "2017-05-04T21:15:46Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c34fcd0d1fe99507e93c37fa96136d090cfe3dc6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1004,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4NjQyOTk2",
      "title": "cite RFC for alert",
      "url": "https://github.com/tlswg/tls13-spec/pull/1004",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Follow up to PR #981. Add a link for the ALPN RFC to the relevant alert's description. (same as with other extension alerts above)",
      "createdAt": "2017-05-02T20:48:02Z",
      "updatedAt": "2017-05-04T21:39:43Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6a0add91395d6be509289b6cc3dd16097b14885a",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "5fe94be1a0169153a127f522e82ecc8de3096ef8",
      "closedAt": "2017-05-04T21:16:12Z",
      "mergedAt": "2017-05-04T21:16:12Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6e7a02c4181124ca61f7323213835e11f58ad54c"
      },
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://www.ietf.org/iesg/statement/normative-informative.html\n> Normative references specify documents that must be read to understand or implement the technology in the new RFC, or whose technology must be present for the technology in the new RFC to work.\n&\n> Note 1: Even references that are relevant only for optional features must be classified as normative if they meet the above conditions for normative references. \n\nNo feature in the TLS 1.3 spec, optional or required, needs ALPN to work. We merely cite places where it needs to be taken into consideration if it is in use. It could be argued that it is an \"optional feature\" of TLS (as a whole), but not of this document, thus I don't think it meets the qualifications to be normative. I think staying as informative is correct.\n",
          "createdAt": "2017-05-03T06:34:06Z",
          "updatedAt": "2017-05-03T06:34:06Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There's a bunch of text that specifically mentions ALPN, some of it with normative statements.  If those normative statements can't be understood, optional feature or not, then it's normative.",
          "createdAt": "2017-05-03T07:06:33Z",
          "updatedAt": "2017-05-03T07:06:33Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzExMDM=",
          "commit": {
            "abbreviatedOid": "5fe94be"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-03T02:18:07Z",
          "updatedAt": "2017-05-03T02:18:07Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "7301 is informative currently, should it be normative?",
              "createdAt": "2017-05-03T02:18:07Z",
              "updatedAt": "2017-05-03T02:18:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1005,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE5MDY3NzYx",
      "title": "Anti replay",
      "url": "https://github.com/tlswg/tls13-spec/pull/1005",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-05-04T21:12:03Z",
      "updatedAt": "2017-07-03T20:35:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8eade9e77dbe85d6bc3cf24b4e66f2329eb4c05e",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "anti_replay",
      "headRefOid": "771ed4845218a10ae8f68563a6700335d61f5bad",
      "closedAt": "2017-07-03T20:35:23Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@colmmacc please review.",
          "createdAt": "2017-05-04T21:12:16Z",
          "updatedAt": "2017-05-04T21:12:16Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hmm, it seems like some of my replies look like new comments.  I clearly fail at GitHib.",
          "createdAt": "2017-05-05T01:01:45Z",
          "updatedAt": "2017-05-05T01:01:45Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson: I guess I'm writing badly, but you're misunderstanding \"store\". You accept 0-RTT and then you process the 0-RTT data, but you store a copy of the CH (or the hash) during the window so you don't accept a replay. This doesn't involve delaying the processing of the CH or the EarlyData at all.\r\n\r\n",
          "createdAt": "2017-05-05T01:07:49Z",
          "updatedAt": "2017-05-05T01:07:49Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "re: store, I was responding to @colmmacc, where he suggested that you have to wait for propagation of storage attempts from all nodes in the cluster.",
          "createdAt": "2017-05-05T01:10:06Z",
          "updatedAt": "2017-05-05T01:10:06Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTE2OTE=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-04T21:25:18Z",
          "updatedAt": "2017-05-04T21:25:18Z",
          "comments": [
            {
              "originalPosition": 199,
              "body": "Something missing after `client's view of`...",
              "createdAt": "2017-05-04T21:25:18Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTMwNDA=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-04T21:31:50Z",
          "updatedAt": "2017-05-04T21:31:50Z",
          "comments": [
            {
              "originalPosition": 199,
              "body": "oops \"ticket_age\"",
              "createdAt": "2017-05-04T21:31:50Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTQ5NjU=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "enygren",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-04T21:41:33Z",
          "updatedAt": "2017-05-04T21:41:33Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "Perhaps mention that clients and application protocols must assume in their security profile (and in-terms of what they are willing to send via 0-RTT) that servers are only implementing stateless-anti-replay?  (When the \"server\" spans multiple clusters with non-trivial latency between them, stateless-anti-replay is the only one that works and it has the weakest guarantees.)",
              "createdAt": "2017-05-04T21:41:33Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTU3Njg=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "enygren",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-04T21:45:37Z",
          "updatedAt": "2017-05-04T21:45:37Z",
          "comments": [
            {
              "originalPosition": 240,
              "body": "Perhaps say \"idempotent and side-effect free\" rather than just \"idempotent\"?  DELETE and PUT are idempotent but do have side-effects and without additional application layer controls an attacker doing 0-RTT replay could reorder them.",
              "createdAt": "2017-05-04T21:45:37Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTU5MDM=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "vdukhovni",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-04T21:46:17Z",
          "updatedAt": "2017-05-04T21:46:17Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "Perhaps replace `but only for 0-RTT anti-replay` with `, but may require such storage for 0-RTT anti-replay` or something else that makes the sense more clear.",
              "createdAt": "2017-05-04T21:46:17Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTczNTM=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "enygren",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-04T21:53:47Z",
          "updatedAt": "2017-05-04T21:53:47Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "Add something like this which covers the fundamental requirement and responsibilities:\r\n\r\n\"The onus is on clients not to send messages in 0-RTT data which are not safe to have replayed and which they would not be willing to retry across multiple 1-RTT connections.  The onus is on servers to protect themselves against attacks employing 0-RTT data replication.\"\r\n\r\n(or \"___ have responsibility to\" instead of \"the onus is on\"?)",
              "createdAt": "2017-05-04T21:53:47Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTgyMTE=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "enygren",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-04T21:58:19Z",
          "updatedAt": "2017-05-04T21:58:19Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "(This is mentioned below, but repeating it here as well may be worthwhile.)",
              "createdAt": "2017-05-04T21:58:19Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTk4MjE=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "knekritz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-04T22:07:58Z",
          "updatedAt": "2017-05-04T22:15:03Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "It's also possible to use an instance of Client Hello Recording per cluster in a distributed setup, effectively reducing the # of possible replay for a \"Large Number\" to 1 per cluster.",
              "createdAt": "2017-05-04T22:07:58Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 181,
              "body": "To make this more efficient implementations can use some hashing/bloom filter rather than storing the entire client hello. This will have false-positives, in which case zero RTT data should just be rejected, not the connection aborted.",
              "createdAt": "2017-05-04T22:12:10Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 184,
              "body": "It might be wise to explicitly recommend storing the PSK binder rather than the entire ClientHello. This has the benefit of essentially being a compact token cryptographically tied to the 0-RTT key (also preventing someone from polluting the replace cache with random data). ",
              "createdAt": "2017-05-04T22:14:57Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTU3MjA=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "<8",
          "createdAt": "2017-05-04T21:45:22Z",
          "updatedAt": "2017-05-04T23:23:16Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Technically it's \"MacC\u00e1rthaigh\", but maybe RFCs have to be ascii. And now my first comment gets to be super vain! Oh man. ",
              "createdAt": "2017-05-04T21:45:22Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 136,
              "body": "Minor mistake: \"and and\"",
              "createdAt": "2017-05-04T21:47:03Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 159,
              "body": "I think lines 3600 - 3604 are probably impractical. If folks do want to use STEK-encrypted tickets for global resumption, then the RTT to one location will be very different than another. Even absent that, RTTs can vary quite a lot for Mobile users. As an implementor, I'd just use a global tolerance value (like 500ms or something). \r\n",
              "createdAt": "2017-05-04T21:50:34Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 170,
              "body": "I don't think the division by two is necessary. The ticket gets delayed by half an RTT on the way to the client in the first place, and half an RTT on the way back to the server. So it nets out to one RTT of difference. Means we also needn't worry about any asymmetry between the two directions.",
              "createdAt": "2017-05-04T21:52:10Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 185,
              "body": "It might be adding something here ala ...\r\n\r\nIt is also critical to the sure that the record of ClientHellos that led to accepted 0-RTT sections from a given window is complete, before accepting any new 0-RTT sections for that same window. For example, if the system recording ClientHellos crashes with no durable record of the ClientHellos previously accepted, then the system needs to wait at least one full window before accepting any ClientHellos.  ",
              "createdAt": "2017-05-04T23:03:40Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 192,
              "body": "I think stateless mitigation is pointless, as it doesn't bound the number of replays, but some notes anyway ...",
              "createdAt": "2017-05-04T23:04:51Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 226,
              "body": "Here I would suggest adding  something that says:\r\n\r\nNote that while stateless anti-replay can bound over how long in time a packet may be replayed, the total amount of replays tolerated is bounded by bandwidth and system capacity. This can be thousands to billions of replays in real-world settings. \r\n\r\nAnd I'd argue for adding this too:\r\n\r\nStateless anti-replay SHOULD NOT be used in environments without strong assurance of application and system behavior and MUST NOT be used in environments that must interoperate with third-party systems and applications. ",
              "createdAt": "2017-05-04T23:12:07Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 240,
              "body": "+1 to side-effect free. ",
              "createdAt": "2017-05-04T23:14:10Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 119,
              "body": "Here I would argue for something stronger:\r\n\r\n\"0-RTT server implementations that must interoperate with third party systems and applications MUST implement a robust anti-replay mechanism\". \r\n\r\nMy reasoning here is that these a CDN or TLS accelerator that enables 0-RTT without robust anti-replay, will break other downstream systems. (For example upstream 0-RTT leading to throttle exhaustion down stream). I want clear and strong language so that there can be no ambiguity when a CVE is requested against the upstream component. It's not ok imo to break a basic assumption about the internet like that. \r\n",
              "createdAt": "2017-05-04T23:22:56Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTI4MTA=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-04T23:38:06Z",
          "updatedAt": "2017-05-04T23:38:06Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Correct, ASCII only. Feel free to supply some other flattening :)",
              "createdAt": "2017-05-04T23:38:06Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTMyNzc=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-04T23:41:33Z",
          "updatedAt": "2017-05-04T23:41:33Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "I thought that initially, but I believe that's wrong, because we're interested in the client's claimed sending time.\r\n\r\nConsider the case where clocks are globally synchronized and we have a 200 ms RTT.\r\n\r\n- We send NST at 0\r\n- The client receives NST at 100ms\r\n- The client waits 1000ms and then sends CH (at 1100)\r\n- The server receives CH at 1200\r\n\r\nNow, if the client had put the absolute time in CH, it would have been 1100, but it puts in relative time so that's 1000. When we add 1/2 RTT, we get 1100. If we were to add RTT, we would get 1200, which is wrong, because that's when the *server* got it.\r\n\r\nThis is different from below where we are interested in the mismatch.\r\n\r\n\r\n\r\n",
              "createdAt": "2017-05-04T23:41:33Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTQ2NTc=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-04T23:54:00Z",
          "updatedAt": "2017-05-04T23:54:00Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "Oh you're right! Wait a second, no. I'm still wrong. But you're not totally right either. If we want to get very pedantic about it (pedantic on a crypto spec? no!) , all we know is that the client is some portion of the RTT behind. We don't know that it's 1/2. The RTT might be asymmetric.  Imagine it's 20ms server -> client, but 180ms client to server. \r\n\r\n* We send NST at 0\r\n* The client receives NST at 20ms\r\n* The client waits 1000ms and then sends CH (at 1020)\r\n* The server receives at 1200\r\n\r\n",
              "createdAt": "2017-05-04T23:54:00Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTUwMzU=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-04T23:57:25Z",
          "updatedAt": "2017-05-04T23:57:25Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "Oh, totally. It's just the best we can do.\r\n\r\nRemember that we're not trusting this value, we're just using it to have the best chance of getting the time within the window we are saving CH for.\r\n\r\n",
              "createdAt": "2017-05-04T23:57:25Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTUyNDk=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-04T23:59:26Z",
          "updatedAt": "2017-05-04T23:59:26Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "Hmm... Well, we are *sort of* trusting this, because we are using it to distinguish between hard fail and forced 1-RTT. OTOH, the attacker can always force us into that posture by just delaying the packet until its out of window, so I don't think that it's an issue. But it might be easiest to just use \"issue time + obfuscated ticket age\"....",
              "createdAt": "2017-05-04T23:59:26Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTc4MTU=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T00:23:20Z",
          "updatedAt": "2017-05-05T00:23:20Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "We're *almost* able to put people's names in RFCs, but the road is a long one (for reasons that I won't burden you with).",
              "createdAt": "2017-05-05T00:23:20Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTk3NDA=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "knekritz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T00:43:45Z",
          "updatedAt": "2017-05-05T00:49:25Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "I think it would make more sense to just say the server should store one thing:\r\n- The time that the server generated the session ticket, offset by an estimate of the round trip time between client and server.\r\n\r\nThat also makes it more clear that only information in the ticket can be used for these calculations (any RTT information in the resumption handshake can not be trusted).",
              "createdAt": "2017-05-05T00:43:45Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 170,
              "body": "I think it is the full round trip you want to add. The server is comparing the timestamp to the server time, at the point that the server has received the ClientHello, so it should be 1200 in your example (right?).",
              "createdAt": "2017-05-05T00:49:22Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTgwNjM=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I'd have preferred to see the nonce in a different PR.",
          "createdAt": "2017-05-05T00:25:56Z",
          "updatedAt": "2017-05-05T01:00:38Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "I would instead say \"Recording all ClientHellos causes state to grow without bound.  A server can instead record ClientHellos within a given time window and use the \"obfuscated_ticket_age\" to ensure that tickets aren't reused outside that window.\"",
              "createdAt": "2017-05-05T00:25:56Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 170,
              "body": "It's half an RTT for sure, but I'm not clear on why you would want to bucket based on when the client creates the ClientHello as opposed to when you receive it.  For any given ticket, the RTT value is a constant, so all you are doing is adding work.\r\n\r\nBTW, there's a simpler model for handling ticket ages in general.  The server stores the value `now()+RTT-ticket_age_add` in the ticket (in ekr's example, this is 200-taa).  Then when the server receives the ticket, it extracts that, adds the obfuscated elapsed time value (1000+taa) and compares that to the current time (1200) with whatever allowance for slop you want.",
              "createdAt": "2017-05-05T00:31:33Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 181,
              "body": "Ahh hipster crypto to the rescue.\r\n\r\nEfficient storage isn't so much the problem as global synchronization within reasonable time frames.",
              "createdAt": "2017-05-05T00:32:31Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 184,
              "body": "If the ClientHello needs to be valid, then polluting the cache is as trivial as just creating new and different ClientHello values.  In a way, the binder is just a way of having the other side calculate your hash for you.",
              "createdAt": "2017-05-05T00:35:04Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 185,
              "body": "That's probably not going to fly.  The window is large and waiting that long would kill all the benefits that 0-RTT provides.  I would instead recognize that challenges exist in synchronizing state across participating nodes.  See Erik Nygren's comments on the list that amount to basically \"not gonna happen\", which I agree with.\r\n\r\nIt's fine to recommend this design, but the need to have globally consistent state is a massive hurdle.",
              "createdAt": "2017-05-05T00:37:26Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 240,
              "body": "First of all, I would talk about \"actions\" rather than requests.  The things that the server does in response to receiving 0-RTT are what will be exploited.\r\n\r\nSide-effect free is useful, but forbidding that doesn't really cover it.  In @enygren's example, the side effects are relevant, but the primary effect (creation/update of a resource vs. removal) is what we're really concerned with.  The only way to ensure that this is perfectly safe is to use the \"safe\" definition in HTTP - that is the request does nothing but generate a response.  And even then, it's rare that such a request is ever free from side effects or side channels.\r\n\r\nThis risks us defining something that is very HTTP-centric.  I would prefer that we instead say that idempotency is desirable for the actions that the server takes, but that idempotency could be insufficient.  That is more or less what the text here is getting at.",
              "createdAt": "2017-05-05T00:55:56Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 332,
              "body": "I would remove the \"therefore only allows a small number of replays\".  That's all up to the client.  I don't consider 10 to be small, which is where we are at in Firefox.",
              "createdAt": "2017-05-05T00:57:55Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 267,
              "body": "This is pretty obvious, but worth stating, I think.",
              "createdAt": "2017-05-05T00:58:44Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjE4NjE=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T01:11:02Z",
          "updatedAt": "2017-05-05T01:11:02Z",
          "comments": [
            {
              "originalPosition": 184,
              "body": "Kyle is right that you need to validate the binder, because it changes the cost of polluting the cache to the cost of getting a new PSK (and you can use PSK-specific filtering to blacklist bad actors).\r\n\r\nMaybe it's obvious to others, but we also can't use a hash of the packet because if the CH contains two PSKs, then the attacker can corrupt the second binder without detection and potentially pollute the cache. So, I think you want either CH.Random or the binder.",
              "createdAt": "2017-05-05T01:11:02Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjIwNzU=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "knekritz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T01:14:11Z",
          "updatedAt": "2017-05-05T01:17:21Z",
          "comments": [
            {
              "originalPosition": 185,
              "body": "The window here is just the clock skew tolerance window (ie 10s of seconds). Waiting 1 window before starting to accept  0-RTT data sounds very reasonable to me.\r\n\r\nI believe the intent of these is to have 1 of these client hello record caches per cluster, rather than a global state.",
              "createdAt": "2017-05-05T01:14:12Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 181,
              "body": "Sure the entire client hello can be stored, but why not do it more efficiently?\r\n\r\nI don't think this state is global (ie one client hello cache per cluster).",
              "createdAt": "2017-05-05T01:17:17Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjI3MjM=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T01:23:45Z",
          "updatedAt": "2017-05-05T01:23:45Z",
          "comments": [
            {
              "originalPosition": 185,
              "body": "Sorry, my wording confused things. All I was referring to is that when you restart a strike register with a clean slate, you need to wait the window period of time before accepting any new entries. The reason is because of this race:\r\n\r\nT1: Strike register accepts key K\r\nT2: Strike register crashes, loses all memory of key K\r\nT3: Strike register restarts\r\nT4: Strike register accepts K again\r\n\r\nTo avoid that, the register needs to have a pause on start-up. Or it can record everything durably, but that's very slow. The register can still respond with microseconds during ordinary operation. \r\nClearly, I need better wording. ",
              "createdAt": "2017-05-05T01:23:45Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjI5NDI=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T01:27:10Z",
          "updatedAt": "2017-05-05T01:27:10Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "We seem to be having trouble reasoning about how this mechanism works, which is probably my fault for bad writing. In any case, the idea here is supposed to be that when you receive a CH, you need to distinguish three cases:\r\n\r\n1. I know it's not a replay, because if I saw it I would still have remembered it.\r\n2. I know it's a replay, in which case I should hard fail.\r\n3. I'm not sure if it's a replay, in which case I force you back to 1-RTT.\r\n\r\nLet's pretend that the client didn't have an age value in the CH and I have a window of 10 seconds. So, if I receive a CH at T=0, then an attacker can replay it by waiting 11 seconds, by which time I will have flushed it and I will accept the replay. So, the time of receipt is not itself enough.\r\n\r\nConversely say that the client stuffs its view of age in absolute time in the CH and I have a window that is \"I keep any packet which claims to be within 10 seconds of the current time either way\". If I receive a CH[T=0] at T=0, then I accept it because my window is [-10,10]. Now, if that packet is replayed at T=11, then my window is now [1, 21] and so I have no information about whether this is a replay or not.\r\n\r\nUnless I'm badly confused, if the client's clock is crazily wrong here, then what happens is that they get forced into 1-RTT, but it won't cause me to accept a CH as if it had not been replayed when it had, because I'm always retaining any CH with a claimed time within my current window.\r\n\r\nThe situation is more subtle when the client is reporting relative time, so before discussing that, perhaps we should make sure we all agree that the logic above is right.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
              "createdAt": "2017-05-05T01:27:10Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjM3NTc=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "knekritz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T01:40:23Z",
          "updatedAt": "2017-05-05T01:40:23Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "Yes, that sounds correct (although I think the value of distinguishing 2 and 3 are debatable).\r\n\r\nI'm pretty sure what it boils down to is\r\n1. Server stores `<time when generating the NST> + X`\r\n2. Client calculates `<time when sending ClientHello> - <time when NST received>` and sends it as the ticket_age value\r\n3. Server checks that `<time when received ClientHello> - <ticket_age value client provided>` is within a `<clock skew tolerance window>` of the time it stored in step 1 (note that no RTT information on this resumed connection can be trusted)\r\n\r\nAnd we are trying to figure out what the best value of X is. I'm pretty sure X is the server's estimate of the full RTT.",
              "createdAt": "2017-05-05T01:40:23Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjQ5ODY=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T01:59:22Z",
          "updatedAt": "2017-05-05T01:59:22Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "@knekritz has it right.  The only thing I was pushing on was the fact that you had to bucket based on when the client sent the packet as opposed to when the server received it.  I think that either work equally well because RTT is a constant for any given connection.  (As Kyle points out, you have to use a genuine handshake to estimate it.)\r\n\r\nBucketing on client send time makes things much more complicated to implement.",
              "createdAt": "2017-05-05T01:59:22Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjUzODE=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T02:05:20Z",
          "updatedAt": "2017-05-05T02:05:20Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "Estimating the RTT doesn't seem useful. It can vary by quite a lot across connections; on mobile it's all over the place. And if the user is routed between locations, that'll change it too. And clock skew can be more significant. \r\n\r\nI'm not sure how any of this aids security much; the attacker can still generate a lot of accepted replays with this technique. ",
              "createdAt": "2017-05-05T02:05:20Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjU1OTc=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T02:08:28Z",
          "updatedAt": "2017-05-05T02:08:28Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "> I'm not sure how any of this aids security much; the attacker can still generate a lot of accepted replays with this technique.\r\n\r\nHow? And specifically, how is it any different in that respect from the single-use session ID approach.\r\n\r\n",
              "createdAt": "2017-05-05T02:08:28Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjU4MDg=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T02:11:19Z",
          "updatedAt": "2017-05-05T02:11:19Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "Sorry @ekr , the comments are so deep I got lost on which section we're in. I thought this was about the stateless anti-replay. ",
              "createdAt": "2017-05-05T02:11:19Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0Mjc1MDE=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "enygren",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T02:41:04Z",
          "updatedAt": "2017-05-05T02:41:04Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "It may be that you always want to force 1-RTT and never hard-fail on detecting replays.  There may be some legitimate scenarios to receive a replay.  For example, TCP FastOpen (or QUIC) combined with 0RTT and packet duplication in the network.  Hard-fail could result in some weird race conditions here.  Having hard-fail (fatal alert, I assume?) as distinct from forcing 1-RTT could also just give an attacker more information.",
              "createdAt": "2017-05-05T02:41:04Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0Mjc4NDg=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T02:47:34Z",
          "updatedAt": "2017-05-05T02:47:34Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "TCP FO is still TCP - a duplicate packet will be rejected by the TCP state machine and shouldn't make it as far as TLS.",
              "createdAt": "2017-05-05T02:47:34Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjkxNjk=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T03:11:06Z",
          "updatedAt": "2017-05-05T03:29:56Z",
          "comments": [
            {
              "originalPosition": 136,
              "body": "\"between server nodes in environments with multiple servers acting as endpoints for the same service\"",
              "createdAt": "2017-05-05T03:11:06Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 133,
              "body": "I'm not sure this part really fits in the current exposition as-is.  (Also, doesn't the addition of a per-ticket nonce into the PSk ticket derivation give self-contained tickets the same forward secrecy property?)",
              "createdAt": "2017-05-05T03:12:12Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 139,
              "body": "There should probably be some more clarification that 0-RTT success and PSK success are partially independent, and that tickets can still be used for PSK even if the single-use property cannot be guaranteed; that is, PSK can succeed even in cases where 0-RTT must be rejected for safety.  (Unless I misunderstand?)",
              "createdAt": "2017-05-05T03:14:41Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 149,
              "body": "MT's version is better, yes.",
              "createdAt": "2017-05-05T03:15:10Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 170,
              "body": "I tend to agree with Nygren about not giving the attacker more information -- that is, don't hard-fail and just fall back to 1-RTT [unless you're under attack and need to shed load].  The 1-RTT will fail for the attacker's replays, of course.",
              "createdAt": "2017-05-05T03:20:53Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 192,
              "body": "\"Limited\" should probably be in the subsection heading.",
              "createdAt": "2017-05-05T03:23:30Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 225,
              "body": "Once the discussion above about storing received ClientHello(-related stuff) settles, we should probably normalize this text with what we end up with there.\r\n\r\nAlso, a server could rate-limit how often it accepts 0-RTT, to provide some reduction in the amount of replay possible.  The amount of reduction gained probably is not enough to make it worth doing, but I'll toss it out there.",
              "createdAt": "2017-05-05T03:26:22Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 313,
              "body": "I think this is some HTTPS mindset sneaking on.  (Which is not necessarily wrong, just something to be aware of.)",
              "createdAt": "2017-05-05T03:27:22Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 332,
              "body": "Again I agree with MT",
              "createdAt": "2017-05-05T03:28:41Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 343,
              "body": "probably should reiterate that this can be tens or hundreds of thousands of replays.",
              "createdAt": "2017-05-05T03:29:17Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            },
            {
              "originalPosition": 267,
              "body": "Yeah, worth stating again.  Maybe also that the application profile should tell the client to do so.",
              "createdAt": "2017-05-05T03:29:52Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MzAzODA=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T03:33:12Z",
          "updatedAt": "2017-05-05T03:33:12Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Ah, the 8th fallacy of naming!  (Not all names are representable in Unicode.)  ((Number probably wrong; I made it up.))",
              "createdAt": "2017-05-05T03:33:12Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MzI2Njg=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T04:14:00Z",
          "updatedAt": "2017-05-05T04:14:00Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "No, because compromise of the STEK leads to compromise of all tickets.",
              "createdAt": "2017-05-05T04:14:00Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MzI5MDM=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T04:18:16Z",
          "updatedAt": "2017-05-05T04:18:16Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "Oh, database-key tickets certainly have better forward security properties than self-contained tickets.  I'm just not sure about what the \"with respect to other PSKs established on the same connection\" means.",
              "createdAt": "2017-05-05T04:18:16Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MzMxOTM=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T04:23:08Z",
          "updatedAt": "2017-05-05T04:23:08Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "I'll see what I can do to rewrite it.",
              "createdAt": "2017-05-05T04:23:08Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1OTM1NzY=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "isonmad",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-05T19:43:29Z",
          "updatedAt": "2017-05-05T19:43:29Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "Not that it matters much, but should this section be labeled `{#anti-replay}` or something else instead? The old `{#replay-time}` section was named that when it only described the stateless time-mismatch mechanism.",
              "createdAt": "2017-05-05T19:43:29Z",
              "updatedAt": "2017-05-17T00:31:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODcyOTY=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-13T20:31:46Z",
          "updatedAt": "2017-05-17T00:33:07Z",
          "comments": [
            {
              "originalPosition": 226,
              "body": "I added the clarification but not the normative requirement.",
              "createdAt": "2017-05-13T20:31:46Z",
              "updatedAt": "2017-05-17T00:33:07Z"
            },
            {
              "originalPosition": 332,
              "body": "I changed \"small\" to \"limited\"",
              "createdAt": "2017-05-13T20:32:22Z",
              "updatedAt": "2017-05-17T00:33:07Z"
            },
            {
              "originalPosition": 240,
              "body": "I rewrote this a bit, but note that I'm not sure that *any* anti-replay mechanism we have considered will handle this in the face of sufficient client and server complicity.\r\n\r\nConsider the following case:\r\n\r\n- Client sends CH + Early data\r\n- Attacker injects SH + RST\r\n- Client retries with a fresh connection (and a fresh CH)\r\n- Server processes the data\r\n- Attacker replays CH + Early Data\r\n\r\nUgh\r\n\r\n\r\n",
              "createdAt": "2017-05-13T20:36:17Z",
              "updatedAt": "2017-05-17T00:33:07Z"
            },
            {
              "originalPosition": 343,
              "body": "I added that separately.",
              "createdAt": "2017-05-16T22:40:55Z",
              "updatedAt": "2017-05-17T00:33:07Z"
            },
            {
              "originalPosition": 267,
              "body": "Added it to an earlier location",
              "createdAt": "2017-05-16T22:53:09Z",
              "updatedAt": "2017-05-17T00:33:07Z"
            },
            {
              "originalPosition": 170,
              "body": "1. I'm persuaded by knekrit's argument\r\n2. MT, cute trick, but it doesn't work if you want the window to be on arrival time, so only for the stateless technique, not strike registers.\r\n3. enygren: I was more ambivalent about whether to abort in this round",
              "createdAt": "2017-05-17T00:21:16Z",
              "updatedAt": "2017-05-17T00:33:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODE2NTQ=",
          "commit": {
            "abbreviatedOid": "771ed48"
          },
          "author": "russhousley",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-17T14:19:20Z",
          "updatedAt": "2017-05-17T14:19:20Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "Aren't the three alternatives in the SHOULD all equal?\r\n\r\nServers need not permit 0-RTT at all, but those which do SHOULD implement either Single-Use Tickets {{single-use-tickets}}, Client Hello Recording {{client-hello-recording}}, or the stateless mechanism described in {{stateless-anti-replay}}.",
              "createdAt": "2017-05-17T14:19:20Z",
              "updatedAt": "2017-05-17T14:19:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODc0MzI=",
          "commit": {
            "abbreviatedOid": "771ed48"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-17T14:36:43Z",
          "updatedAt": "2017-05-17T14:36:44Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "This is a WG decision ultimately, but IMO they are not. the first two clearly are stronger.",
              "createdAt": "2017-05-17T14:36:44Z",
              "updatedAt": "2017-05-17T14:36:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDg3NTI=",
          "commit": {
            "abbreviatedOid": "39132dc"
          },
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-17T15:41:49Z",
          "updatedAt": "2017-05-17T15:41:49Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "I'd go further: the third method doesn't work - it doesn't prevent replays. It permits thousands to billions of replays, depending on the amount of bandwidth and hosts available, and it doesn't mitigate several of the attacks. It should be taken out - it's insecure. ",
              "createdAt": "2017-05-17T15:41:49Z",
              "updatedAt": "2017-05-17T15:41:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjYzOTk=",
          "commit": {
            "abbreviatedOid": "771ed48"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "In general I'm happy with the direction this is going in, but think a few more tweaks are in order.",
          "createdAt": "2017-05-18T01:33:46Z",
          "updatedAt": "2017-05-18T02:37:32Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "This statement may be a little stronger than reality, in that a client can intentionally replay things and see whether it gets accepted right away, and after 20 seconds.  The first two methods should not be distinguishable to the client, of course, though.",
              "createdAt": "2017-05-18T01:33:47Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 178,
              "body": "The sharing is only necessary in such environments, so maybe\r\n\"between server nodes in environments with multiple distributed servers, in such environments it may be hard\"?",
              "createdAt": "2017-05-18T01:36:17Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 200,
              "body": "Hmm, I bet there are subtle things an attacker could do to influence the estimated RTT that do not require delayingn the actual NST and/or ClientHello messages, which could throw a wrench into this.",
              "createdAt": "2017-05-18T01:47:07Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 214,
              "body": "Do we need to introduce the phrase \"storage window\" somehow (or reword)?",
              "createdAt": "2017-05-18T02:16:59Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 217,
              "body": "\"What do I do if the verification fails?\"",
              "createdAt": "2017-05-18T02:17:19Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 225,
              "body": "This seems to contradict the last half of (2), which probably should just be \"If the expected_arrival_time is outside the window then accept the PSK but reject 0-RTT\".\r\n\r\nI'd prefer to not give multiple options of behavior without some guidance on when to choose which one.  Ideally there would only be one choice, of course.\r\n\r\nAlso, \"known ClientHello\" should be clarified to \"a ClientHello that has previously been recorded and entered into the cache\" or similar.",
              "createdAt": "2017-05-18T02:18:46Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 229,
              "body": "comma before \"and\"?",
              "createdAt": "2017-05-18T02:20:21Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 248,
              "body": "I would be happy to make this a MUST NOT instead of SHOULD NOT.",
              "createdAt": "2017-05-18T02:21:51Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 251,
              "body": "(\"storage window\" also occurs here)",
              "createdAt": "2017-05-18T02:22:13Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 258,
              "body": "I'd almost call this a \"replay reduction\" or \"replay limitation\" mechanism instead of \"anti-replay\", as \"anti-replay\" could be read as meaning it is a stronger mechanism than it actually is.",
              "createdAt": "2017-05-18T02:23:23Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 261,
              "body": "\"the the\"",
              "createdAt": "2017-05-18T02:23:38Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 266,
              "body": "It's a little unfortunate to have the discussion of the time calculations both here and in Client Hello Recording, though I don't have an alternative proposal.",
              "createdAt": "2017-05-18T02:24:49Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 284,
              "body": "The more we talk about this I kind of want to drop down to less than 10 seconds, like maybe 5 or even 1.  (Yes, I know the text here is just talking order of magnitude.)",
              "createdAt": "2017-05-18T02:25:45Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 292,
              "body": "\"amount\" is not pluralizable; use just \"amount of replay tolerated\"",
              "createdAt": "2017-05-18T02:27:22Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 308,
              "body": "\"PSK binding\" is perhaps a confusing term to use, given that we have \"PSK binders\" that are different.\r\nMaybe \"association\" or \"relationship\"?",
              "createdAt": "2017-05-18T02:29:21Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 390,
              "body": "\"anti-replay\" is singular and would take \"is\", but I think this is supposed to be \"anti-replay mechanisms\".",
              "createdAt": "2017-05-18T02:32:37Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 402,
              "body": "Is the different-cluster attack limited by the client's willingness to replay?\r\nI guess it relies on the fallback to 1-RTT when the 0-RTT attempt is blackholed, so that's a \"yes\".",
              "createdAt": "2017-05-18T02:34:59Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            },
            {
              "originalPosition": 343,
              "body": "In the main body text, not the security considerations, if I'm reading the line numbers correctly.\r\nThe security considerations might do well to reiterate the consequences of billions of replays (e.g., Colm's analysis).",
              "createdAt": "2017-05-18T02:36:49Z",
              "updatedAt": "2017-05-18T02:37:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MzQyODQ=",
          "commit": {
            "abbreviatedOid": "771ed48"
          },
          "author": "mnot",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-18T03:06:20Z",
          "updatedAt": "2017-05-18T03:06:21Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "Is the target for this requirement really clients? How will they know? I think this is a requirement being placed upon protocols (as below) in how they specify client behaviour.",
              "createdAt": "2017-05-18T03:06:21Z",
              "updatedAt": "2017-05-18T03:06:21Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjI4NDg=",
          "commit": {
            "abbreviatedOid": "771ed48"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-18T07:47:06Z",
          "updatedAt": "2017-05-18T07:47:06Z",
          "comments": [
            {
              "originalPosition": 292,
              "body": "Actually, \"amount\" is pluralizable, just quirky in how it's applied.\r\nA quick search result:  https://english.stackexchange.com/a/254372\r\n\r\nI agree that \"amounts\" isn't valid here, however with the potential to use \"replays\" to refer to each replayed message and \"replay\" to refer to the concept of replay, both the current text and this suggestion are valid. English can be weird. I sorta lean slightly towards kaduk's suggested wording, but whatever ekr prefers or a coin flip to chose is fine by me. ;)",
              "createdAt": "2017-05-18T07:47:06Z",
              "updatedAt": "2017-05-18T07:47:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwODc5ODg=",
          "commit": {
            "abbreviatedOid": "771ed48"
          },
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-30T22:04:26Z",
          "updatedAt": "2017-05-30T22:04:26Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "Two examples:\r\n\r\n* a client browser decides to only send 0-RTT messages for GET requests to the domain root\r\n* a client facebook mobile application decides to only send 0-RTT messages to request new timeline changes\r\n\r\nI don't see how you could do that outside the client.",
              "createdAt": "2017-05-30T22:04:26Z",
              "updatedAt": "2017-05-30T22:04:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwOTEwNzk=",
          "commit": {
            "abbreviatedOid": "771ed48"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-30T22:21:32Z",
          "updatedAt": "2017-05-30T22:21:32Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "I think that this should bind both how protocols specify client behavior and actual client behavior.",
              "createdAt": "2017-05-30T22:21:32Z",
              "updatedAt": "2017-05-30T22:21:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1Njg0NDU=",
          "commit": {
            "abbreviatedOid": "771ed48"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-21T21:29:24Z",
          "updatedAt": "2017-06-21T21:29:24Z",
          "comments": [
            {
              "originalPosition": 225,
              "body": "No, I don't think that's correct. This is a case where you know you have a replay.",
              "createdAt": "2017-06-21T21:29:24Z",
              "updatedAt": "2017-06-21T21:29:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjU0NzI=",
          "commit": {
            "abbreviatedOid": "771ed48"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-22T19:41:16Z",
          "updatedAt": "2017-06-22T19:41:16Z",
          "comments": [
            {
              "originalPosition": 225,
              "body": "Sorry, which part do you think is uncorrect?\r\nI so far still hold my preference to not give multiple options without guidance.",
              "createdAt": "2017-06-22T19:41:16Z",
              "updatedAt": "2017-06-22T19:41:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjYwNTI=",
          "commit": {
            "abbreviatedOid": "771ed48"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-22T19:43:36Z",
          "updatedAt": "2017-06-22T19:43:36Z",
          "comments": [
            {
              "originalPosition": 225,
              "body": "I don't think it contradicts the last half of #2. That is a case of uncertainty, this is not.",
              "createdAt": "2017-06-22T19:43:36Z",
              "updatedAt": "2017-06-22T19:43:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NDIwNzY=",
          "commit": {
            "abbreviatedOid": "771ed48"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-22T20:50:56Z",
          "updatedAt": "2017-06-22T20:50:56Z",
          "comments": [
            {
              "originalPosition": 225,
              "body": "I would propose, then, to have this text just say \"then abort the hanshake with an illegal_parameter alert\".  Are there reasons to leave it as is?",
              "createdAt": "2017-06-22T20:50:56Z",
              "updatedAt": "2017-06-22T20:50:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1006,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE5MDkzMjY3",
      "title": "Add contrib ACK for Colm MacCarthaigh",
      "url": "https://github.com/tlswg/tls13-spec/pull/1006",
      "state": "MERGED",
      "author": "colmmacc",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "per https://github.com/tlswg/tls13-spec/issues/1001#issuecomment-299308476",
      "createdAt": "2017-05-05T00:32:59Z",
      "updatedAt": "2017-05-05T00:35:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a2064a8b6d164a78bc81f923a567cf4ea393cd06",
      "headRepository": "colmmacc/tls13-spec",
      "headRefName": "contrib",
      "headRefOid": "58c7598421b5e03caa5e9fa4e585dc4a514a6571",
      "closedAt": "2017-05-05T00:35:21Z",
      "mergedAt": "2017-05-05T00:35:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "de5c0a5b9765e18c5b96e4d112cbe0183708218b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1007,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE5MzQ5OTY0",
      "title": "Clarify that EOED is sent iff server accepts early data",
      "url": "https://github.com/tlswg/tls13-spec/pull/1007",
      "state": "MERGED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-05-07T18:57:48Z",
      "updatedAt": "2017-05-08T00:36:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de5c0a5b9765e18c5b96e4d112cbe0183708218b",
      "headRepository": "bifurcation/tls13-spec",
      "headRefName": "eoed",
      "headRefOid": "455afa33ceba56210b49e98398e77b147e22074c",
      "closedAt": "2017-05-07T20:57:11Z",
      "mergedAt": "2017-05-07T20:57:11Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e2a228cc923c1d7fb304a394e1b77083019d55d0"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This follows naturally from the inclusion of EndOfEarlyData in the handshake transcript, but it doesn't hurt to mention it explicitly.  See also, uh, 7511e2a259.",
          "createdAt": "2017-05-07T19:03:53Z",
          "updatedAt": "2017-05-07T19:03:53Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk I mention it explicitly because it tripped me up in implementation :)",
          "createdAt": "2017-05-08T00:36:13Z",
          "updatedAt": "2017-05-08T00:36:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1008,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE5MzUwMjUw",
      "title": "Add rekey events to the state machine",
      "url": "https://github.com/tlswg/tls13-spec/pull/1008",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In updating [mint](https://github.com/bifurcation/mint) to use this state machine, I found that it was tricky to align re-key events with state transitions, since they happen in between the messages output by a given state transition (e.g., rekeying to the handshake keys in between `ServerHello` and `EncryptedExtensions` on the way out of `NEGOTIATED`).\r\n\r\nThis PR adds to the state machine diagrams notations of when the keys should be changed on the inbound and outbound sides, in the order in which they need to be sequenced with handshake messages.  It also makes a few more minor edits:\r\n\r\n* Adds some missing handshake message sends\r\n* Notes when the server needs to read past decrypt errors due to rejected early data\r\n* Moves \"Recv early data\" to after finished, since it doesn't affect the state\r\n",
      "createdAt": "2017-05-07T19:06:35Z",
      "updatedAt": "2017-07-03T22:32:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de5c0a5b9765e18c5b96e4d112cbe0183708218b",
      "headRepository": "bifurcation/tls13-spec",
      "headRefName": "state-action",
      "headRefOid": "4b0fe584d8ec35dfea7c097cc29a361f9abf7aea",
      "closedAt": "2017-07-03T22:32:21Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzczNTE=",
          "commit": {
            "abbreviatedOid": "a460450"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-08T00:02:58Z",
          "updatedAt": "2017-05-08T00:10:36Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Having this line attach to the \"[Rekey out...]\" line appears to have some significance, can you move the '/' down one line?  It's a fault in the original diagram as well...",
              "createdAt": "2017-05-08T00:02:58Z",
              "updatedAt": "2017-05-08T04:44:58Z"
            },
            {
              "originalPosition": 39,
              "body": "IMPORTANT: EOED is sent using 0-RTT keys.  Swap the above two lines.",
              "createdAt": "2017-05-08T00:03:44Z",
              "updatedAt": "2017-05-08T04:44:58Z"
            },
            {
              "originalPosition": 96,
              "body": "maybe be consistent between \"hs\" and \"handshake\"",
              "createdAt": "2017-05-08T00:10:27Z",
              "updatedAt": "2017-05-08T04:44:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Nzg0NjQ=",
          "commit": {
            "abbreviatedOid": "a460450"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-08T00:38:02Z",
          "updatedAt": "2017-05-08T00:38:02Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "72-column limitation is a bitch",
              "createdAt": "2017-05-08T00:38:02Z",
              "updatedAt": "2017-05-08T04:44:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Nzg0ODA=",
          "commit": {
            "abbreviatedOid": "a460450"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-08T00:38:29Z",
          "updatedAt": "2017-05-08T00:38:29Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Yep, that's a bug.  Will fix.",
              "createdAt": "2017-05-08T00:38:29Z",
              "updatedAt": "2017-05-08T04:44:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODQ2NTA=",
          "commit": {
            "abbreviatedOid": "a231006"
          },
          "author": "isonmad",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-08T02:39:08Z",
          "updatedAt": "2017-05-08T02:39:08Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Does this extra 'Send ClientHello' before returning to START belong here, when it's already going to retry with a second ClientHello after returning to START?",
              "createdAt": "2017-05-08T02:39:08Z",
              "updatedAt": "2017-05-08T04:44:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1009,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE5MzUwMzk5",
      "title": "Add post-handshake state transitions",
      "url": "https://github.com/tlswg/tls13-spec/pull/1009",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If an implementation is using a state machine structure to process incoming handshake messages, then it could be useful to have a similar diagram for state transitions that result from handshake messages that show up after the initial handshake.  For the most part, these are trivial (`CONNECTED -> CONNECTED`), but post-handshake authentication needs the sub-graph with `WAIT_CERT` etc.",
      "createdAt": "2017-05-07T19:10:44Z",
      "updatedAt": "2017-07-03T22:32:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "de5c0a5b9765e18c5b96e4d112cbe0183708218b",
      "headRepository": "bifurcation/tls13-spec",
      "headRefName": "post-handshake",
      "headRefOid": "7771e162200205187c31a4ecaa968ff2b8d72fff",
      "closedAt": "2017-07-03T22:32:21Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The post-handshake state machine differs for clients and servers (only servers send NST, CR), so I'm not entirely sure that it's helpful to squash all of them together.",
          "createdAt": "2017-05-09T02:10:00Z",
          "updatedAt": "2017-05-09T02:10:00Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Nzc2MDM=",
          "commit": {
            "abbreviatedOid": "7771e16"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-08T00:12:06Z",
          "updatedAt": "2017-05-08T00:12:06Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "A little bit of text here explaining that most of these transitions atomically transition back to CONNECTED would help.  This isn't immediately obvious.",
              "createdAt": "2017-05-08T00:12:06Z",
              "updatedAt": "2017-05-08T00:12:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1010,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE5NjI3MDIy",
      "title": "Servers may send extension responses in a Certificate message",
      "url": "https://github.com/tlswg/tls13-spec/pull/1010",
      "state": "MERGED",
      "author": "mattcaswell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-05-09T10:16:07Z",
      "updatedAt": "2017-05-11T02:03:24Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e2a228cc923c1d7fb304a394e1b77083019d55d0",
      "headRepository": "mattcaswell/tls13-spec",
      "headRefName": "cert-ext-responses",
      "headRefOid": "6cf221a642596e0792730f6053a62de70b400955",
      "closedAt": "2017-05-11T02:03:24Z",
      "mergedAt": "2017-05-11T02:03:24Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6ac8e0efe4edf1e058c11c8002a6fcee6be09991"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTEyMzA=",
          "commit": {
            "abbreviatedOid": "6cf221a"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-05-09T12:10:56Z",
          "updatedAt": "2017-05-09T12:10:56Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTU2MjY=",
          "commit": {
            "abbreviatedOid": "6cf221a"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-05-09T14:57:58Z",
          "updatedAt": "2017-05-09T14:57:58Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxOTc4NTQ=",
          "commit": {
            "abbreviatedOid": "6cf221a"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-05-10T02:08:44Z",
          "updatedAt": "2017-05-10T02:08:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1011,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE5NjI3OTY0",
      "title": "Add Matt Caswell as a contributor",
      "url": "https://github.com/tlswg/tls13-spec/pull/1011",
      "state": "MERGED",
      "author": "mattcaswell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-05-09T10:21:39Z",
      "updatedAt": "2017-05-11T02:03:05Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e2a228cc923c1d7fb304a394e1b77083019d55d0",
      "headRepository": "mattcaswell/tls13-spec",
      "headRefName": "matt-as-contrib",
      "headRefOid": "6e4d73c6a1f7cbf7fccfceb32e36047772601040",
      "closedAt": "2017-05-11T02:03:05Z",
      "mergedAt": "2017-05-11T02:03:05Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9d8cf3f133ce73a6e2ccb2b9b923448dc196223e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1013,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIwMzI2MzE3",
      "title": "Allow clients to use any suitable alert if a non-acceptable cert chain",
      "url": "https://github.com/tlswg/tls13-spec/pull/1013",
      "state": "MERGED",
      "author": "mattcaswell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There are a number of different alerts that may be suitable for sending\r\nto indicate a non-acceptable cert chain, e.g. certificate_revoked,\r\ncertificate_expired, unknown_ca, etc. We should not restrict the client\r\nto only sending one specific alert.",
      "createdAt": "2017-05-12T13:44:25Z",
      "updatedAt": "2017-05-17T00:46:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6ac8e0efe4edf1e058c11c8002a6fcee6be09991",
      "headRepository": "mattcaswell/tls13-spec",
      "headRefName": "non-acceptable-cert",
      "headRefOid": "470647d148a34da506051d05039a23660d2c9159",
      "closedAt": "2017-05-17T00:46:57Z",
      "mergedAt": "2017-05-17T00:46:57Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4ab87e7dd5830486cccde4faf86802ea481dc2f1"
      },
      "comments": [
        {
          "author": "mattcaswell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have updated this PR with the wording as suggested by @davegarrett.",
          "createdAt": "2017-05-15T10:14:48Z",
          "updatedAt": "2017-05-15T10:14:48Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MzUwOTI=",
          "commit": {
            "abbreviatedOid": "5c09fb1"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2017-05-12T20:20:07Z",
          "updatedAt": "2017-05-12T20:23:49Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I'd like to keep a specific alert in as default, so I suggest something like this instead:\r\n\r\n\"If the client cannot construct an acceptable chain using the provided certificates and decides to abort the handshake, then it MUST abort the handshake with an appropriate certificate-related alert. (by default, \"unsupported_certificate\"; see {{error-alerts}} for more)\"",
              "createdAt": "2017-05-12T20:20:07Z",
              "updatedAt": "2017-05-15T10:14:21Z"
            },
            {
              "originalPosition": 4,
              "body": "The \"decides to abort the handshake\" bit was the result of long mailing list discussions on various different use cases and should not be removed.",
              "createdAt": "2017-05-12T20:20:40Z",
              "updatedAt": "2017-05-15T10:14:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1017,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIwNTA4NDQ3",
      "title": "clients MUST send Finished when using 0-RTT",
      "url": "https://github.com/tlswg/tls13-spec/pull/1017",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "since servers are allowed to postpone processing of the application data sent in 0-RTT until seeing client's Finished.\r\n\r\nThis is what some deployments already do and what others are interested in doing[1].\r\n\r\n[1] https://lists.w3.org/Archives/Public/ietf-http-wg/2017AprJun/0124.html",
      "createdAt": "2017-05-15T00:14:03Z",
      "updatedAt": "2017-05-17T02:19:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6ac8e0efe4edf1e058c11c8002a6fcee6be09991",
      "headRepository": "kazuho/tls13-spec",
      "headRefName": "patch-5",
      "headRefOid": "25c1c89452637c572fe0826605a2e34883440f3c",
      "closedAt": "2017-05-17T01:10:05Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we're going to provide a justification for requiring a Finished, that's not the thing I'd put at the top of the list -- the Finished message is needed to get the anti-tampering property of the handshake!",
          "createdAt": "2017-05-15T16:21:06Z",
          "updatedAt": "2017-05-15T16:21:06Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson Thank you for the suggestions. I have addressed the issues in 8d5e56e.\r\n\r\n@kaduk Thank you for the comment. The intention is not to state the purpose of ClientFinished, but to state that the message can be used as a confirmation by the server that the 0-RTT data has not been replayed. I think I have clarified it in the commit above. Would you mind taking a look at it?",
          "createdAt": "2017-05-16T01:57:04Z",
          "updatedAt": "2017-05-16T01:57:04Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett Thank you for the suggestions! Applied.",
          "createdAt": "2017-05-16T05:50:32Z",
          "updatedAt": "2017-05-16T05:50:32Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think Kaduk's suggestion is the right one here. See PR#1018",
          "createdAt": "2017-05-17T01:10:01Z",
          "updatedAt": "2017-05-17T01:10:01Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you for all! I am glad to see the provision get into the specification.",
          "createdAt": "2017-05-17T02:19:42Z",
          "updatedAt": "2017-05-17T02:19:42Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjk3MTU=",
          "commit": {
            "abbreviatedOid": "baf9445"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-15T05:06:47Z",
          "updatedAt": "2017-05-15T05:06:47Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "nit: Has plural for clients, but singular for handshake, thus Finished messages should be singular, nor plural, for consistency. (one handshake has one Finished message from the client) So, instead of \"their Finished messages\", do \"the Finished message\". (also \"the\" instead of \"their to match use in prior paragraph)",
              "createdAt": "2017-05-15T05:06:47Z",
              "updatedAt": "2017-05-16T05:49:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzYxNzI=",
          "commit": {
            "abbreviatedOid": "baf9445"
          },
          "author": "kazuho",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-15T06:25:10Z",
          "updatedAt": "2017-05-15T06:25:10Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Thank you for pointing that out! Fixed in ea9ad23",
              "createdAt": "2017-05-15T06:25:10Z",
              "updatedAt": "2017-05-16T05:49:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNzA5NDM=",
          "commit": {
            "abbreviatedOid": "ea9ad23"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-15T16:44:15Z",
          "updatedAt": "2017-05-15T16:47:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "It might help to at least hint at why this strategy might be useful.  That is, if this treatment is uniformly applied by a server, the data to which it is applied cannot ever be replayed, even though TLS does not provide replay protection.",
              "createdAt": "2017-05-15T16:44:16Z",
              "updatedAt": "2017-05-16T05:49:40Z"
            },
            {
              "originalPosition": 8,
              "body": "You are missing the necessary preconditions here: the requirement can only apply after the client has received the entire flight of server messages (ServerHello to server Finished).",
              "createdAt": "2017-05-15T16:45:41Z",
              "updatedAt": "2017-05-16T05:49:40Z"
            },
            {
              "originalPosition": 8,
              "body": "You are missing the necessary preconditions here: the requirement can only apply after the client has received the entire flight of server messages (ServerHello to server Finished).",
              "createdAt": "2017-05-15T16:45:48Z",
              "updatedAt": "2017-05-16T05:49:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyODMwMTY=",
          "commit": {
            "abbreviatedOid": "8d5e56e"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think the wording is notably improved with the last commit. Just a handful of nits to fix some grammar.",
          "createdAt": "2017-05-16T03:03:25Z",
          "updatedAt": "2017-05-16T03:12:27Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "\"but can\" -> \"yet\"",
              "createdAt": "2017-05-16T03:03:25Z",
              "updatedAt": "2017-05-16T05:49:40Z"
            },
            {
              "originalPosition": 8,
              "body": "drop \"a\"",
              "createdAt": "2017-05-16T03:03:45Z",
              "updatedAt": "2017-05-16T05:49:40Z"
            },
            {
              "originalPosition": 9,
              "body": "\"such strategy\" -> \"such a strategy\"",
              "createdAt": "2017-05-16T03:04:24Z",
              "updatedAt": "2017-05-16T05:49:40Z"
            },
            {
              "originalPosition": 10,
              "body": "\"depend\" -> \"depends\"",
              "createdAt": "2017-05-16T03:04:52Z",
              "updatedAt": "2017-05-16T05:49:40Z"
            },
            {
              "originalPosition": 4,
              "body": "\"clients\" -> \"a client\"\r\n(\"clients\" is plural, yet \"its\" & \"message\" are singular; should stay consistent)",
              "createdAt": "2017-05-16T03:06:56Z",
              "updatedAt": "2017-05-16T05:49:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTE4ODc=",
          "commit": {
            "abbreviatedOid": "25c1c89"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I don't disagree with anything this says, but I'm not sure we want to say it.\r\nIn particular, it leaves the impression that there might be cases where a client does not need to send the Finished message, which is a really bad idea, since it is necessary to provide our security guarantees.\r\nI would be happier with a shorter note in the previous paragraph, \"only then sending the EndOfEarlyData message and finishing the handshake.\"",
          "createdAt": "2017-05-16T17:09:00Z",
          "updatedAt": "2017-05-16T17:09:00Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDA3MTk=",
          "commit": {
            "abbreviatedOid": "25c1c89"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-16T20:18:27Z",
          "updatedAt": "2017-05-16T20:18:27Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "@kaduk Dropping the \"When using 0-RTT, \" from the start might help alleviate your concern. That gets rid of that qualification. Optionally also add \"always\", e.g. \"A client MUST always send its Finished...\"",
              "createdAt": "2017-05-16T20:18:27Z",
              "updatedAt": "2017-05-16T20:18:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1018,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIwOTU2NTI0",
      "title": "Always send client's second flight. Fixes #1017",
      "url": "https://github.com/tlswg/tls13-spec/pull/1018",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-05-17T01:09:35Z",
      "updatedAt": "2017-05-17T01:10:04Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4ab87e7dd5830486cccde4faf86802ea481dc2f1",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "always_send_finished",
      "headRefOid": "f1a74a4cd878a3f779798b8301b97a2e46b5e83b",
      "closedAt": "2017-05-17T01:10:04Z",
      "mergedAt": "2017-05-17T01:10:04Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "cc6f9abbd8d4dbc91d265be9791a63ae91011262"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1019,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIwOTYwMTgx",
      "title": "A bunch of editorial changes to the security considerations suggested",
      "url": "https://github.com/tlswg/tls13-spec/pull/1019",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "by Hugo Krawczyk.",
      "createdAt": "2017-05-17T01:52:27Z",
      "updatedAt": "2017-05-18T13:09:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cc6f9abbd8d4dbc91d265be9791a63ae91011262",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "hugo_security_considerations",
      "headRefOid": "d5419d708f2ae96db49b78e75453c7f0f042a954",
      "closedAt": "2017-05-18T13:09:51Z",
      "mergedAt": "2017-05-18T13:09:50Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ee07da3190e830688d2450e01b1fc2ffffd6d9a7"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Other than davegarrett's editorial notes, this looks good.",
          "createdAt": "2017-05-17T04:16:23Z",
          "updatedAt": "2017-05-17T04:16:23Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NTYxMzQ=",
          "commit": {
            "abbreviatedOid": "a3d8155"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2017-05-17T02:12:58Z",
          "updatedAt": "2017-05-17T02:16:04Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "typo: a wild angle bracket appeared",
              "createdAt": "2017-05-17T02:12:58Z",
              "updatedAt": "2017-05-17T11:17:50Z"
            },
            {
              "originalPosition": 71,
              "body": "accidental change? missing period followed by capitalization",
              "createdAt": "2017-05-17T02:14:15Z",
              "updatedAt": "2017-05-17T11:17:50Z"
            },
            {
              "originalPosition": 128,
              "body": "the ending punctuation here should be a period, not a comma",
              "createdAt": "2017-05-17T02:15:58Z",
              "updatedAt": "2017-05-17T11:17:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MzY2OTY=",
          "commit": {
            "abbreviatedOid": "a3d8155"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-05-17T11:17:27Z",
          "updatedAt": "2017-05-17T11:17:27Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "yeah.  I meant to add a cite and then ended up putting it later.",
              "createdAt": "2017-05-17T11:17:27Z",
              "updatedAt": "2017-05-17T11:17:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTMyODM=",
          "commit": {
            "abbreviatedOid": "d5419d7"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-05-17T18:36:02Z",
          "updatedAt": "2017-05-17T18:36:02Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjM5OTM=",
          "commit": {
            "abbreviatedOid": "d5419d7"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-05-18T07:53:06Z",
          "updatedAt": "2017-05-18T07:53:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1020,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIwOTcyNjI0",
      "title": "EndOfEarlyData comes after ServerFinished",
      "url": "https://github.com/tlswg/tls13-spec/pull/1020",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Remove redundant bits in the table of base key computations.",
      "createdAt": "2017-05-17T04:30:19Z",
      "updatedAt": "2017-05-17T15:52:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cc6f9abbd8d4dbc91d265be9791a63ae91011262",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "table",
      "headRefOid": "e65e91841d1df0c249fd046df1ec5eca96ad3035",
      "closedAt": "2017-05-17T15:52:19Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"Later of\" is a slightly odd phrasing, but I think it's written this way because EndOfEarlyData isn't always present. Similar with \"later of EncryptedExtensions/CertificateRequest\".",
          "createdAt": "2017-05-17T04:38:52Z",
          "updatedAt": "2017-05-17T04:38:52Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I think this is correct as-is.",
          "createdAt": "2017-05-17T05:39:17Z",
          "updatedAt": "2017-05-17T05:39:17Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I also think this is correct.\r\n\r\n@kaduk: objections to closing this?",
          "createdAt": "2017-05-17T10:58:52Z",
          "updatedAt": "2017-05-17T10:58:52Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No real objection, though it sort of seems like there is room for increased clarity here.\r\nI just filed this because I made an observation in a posting on the list and didn't want it to get lost.",
          "createdAt": "2017-05-17T15:45:34Z",
          "updatedAt": "2017-05-17T15:45:34Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1021,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIxMDMxODc4",
      "title": "Encourage logging alerts, per Kathleen's AD review.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1021",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-05-17T11:15:15Z",
      "updatedAt": "2017-05-20T07:11:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ee07da3190e830688d2450e01b1fc2ffffd6d9a7",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1014_log_alerts",
      "headRefOid": "2cafcfdeebecae1aeb8603ffcb8a7103ddb06d97",
      "closedAt": "2017-05-20T07:11:15Z",
      "mergedAt": "2017-05-20T07:11:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "61aa1d20eea21a61aa4d6a19a2ea722f0353fd9b"
      },
      "comments": [
        {
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I disagree with this. Equally valid advice is to do as little as possible except abort the connection when receiving an alert. Some implementations will not send alerts at all.",
          "createdAt": "2017-05-17T16:29:54Z",
          "updatedAt": "2017-05-17T16:29:54Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@briansmith: can you please raise this on the list in response to Kathleen's comments? Thanks\r\n\r\n",
          "createdAt": "2017-05-17T16:31:12Z",
          "updatedAt": "2017-05-17T16:31:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1022,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIxMjA1MDYz",
      "title": "Add Brian Smith as a contributor.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1022",
      "state": "MERGED",
      "author": "briansmith",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-05-18T05:42:01Z",
      "updatedAt": "2017-05-18T13:07:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "eecc82d967d717e02b7dbdffd015592c723a9471",
      "headRepository": "briansmith/tls13-spec",
      "headRefName": "ack",
      "headRefOid": "224489bfcf32a2f96ca5c1e6f9fa0546d19f3f28",
      "closedAt": "2017-05-18T13:07:10Z",
      "mergedAt": "2017-05-18T13:07:10Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a32358e3ef88f0d7c62553ee0aa564049bfab7c9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1024,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIyMTI4MjMx",
      "title": "Move OID Filters extension",
      "url": "https://github.com/tlswg/tls13-spec/pull/1024",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This was the one extension that wasn't in the extensions section, which made it hard to find.\r\n\r\nNote I've also removed the indent on the trailing paragraphs to avoid the walloftext problem with the existing text.",
      "createdAt": "2017-05-24T01:32:25Z",
      "updatedAt": "2017-06-17T20:40:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "61aa1d20eea21a61aa4d6a19a2ea722f0353fd9b",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "move_oid_filters",
      "headRefOid": "f2ca154f990a5b77b7d570224db0fe60551a7f9c",
      "closedAt": "2017-06-17T20:40:37Z",
      "mergedAt": "2017-06-17T20:40:37Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "13a1d6af751c5b55ed048f3ce2f772b72c952f68"
      },
      "comments": [
        {
          "author": "isonmad",
          "authorAssociation": "NONE",
          "body": "Does the part that says\r\n\r\n> - If the certificate_extensions list in the CertificateRequest message\r\n>  was non-empty, the end-entity certificate MUST match the extension OIDs\r\n>  recognized by the client, as described in {{certificate-request}}.\r\n\r\nneed to be updated to point to this new location instead of {{certificate-request}}?",
          "createdAt": "2017-05-24T05:08:19Z",
          "updatedAt": "2017-05-24T05:08:36Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good catch.  Fixed.",
          "createdAt": "2017-05-25T01:29:51Z",
          "updatedAt": "2017-05-25T01:29:51Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "lgtm",
          "createdAt": "2017-06-01T18:21:24Z",
          "updatedAt": "2017-06-01T18:21:24Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MjE0OTQ=",
          "commit": {
            "abbreviatedOid": "f2ca154"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "merge this when ready",
          "createdAt": "2017-06-03T14:51:27Z",
          "updatedAt": "2017-06-03T14:51:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1025,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIyMTI4NjY5",
      "title": "Remove warnings",
      "url": "https://github.com/tlswg/tls13-spec/pull/1025",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-05-24T01:37:39Z",
      "updatedAt": "2017-05-25T05:02:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "61aa1d20eea21a61aa4d6a19a2ea722f0353fd9b",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "backslash",
      "headRefOid": "5ec3518425e553d9a2bc0b570f25f5805cc8f75b",
      "closedAt": "2017-05-24T01:59:33Z",
      "mergedAt": "2017-05-24T01:59:33Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1409d008f48e80564c7bf2e3ab26e3750e62c770"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oops, I screwed this up.  Update inbound.",
          "createdAt": "2017-05-24T01:38:31Z",
          "updatedAt": "2017-05-24T01:38:31Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1026,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIzNjI2MzMx",
      "title": "A simpler method to calculate AEAD nonce.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1026",
      "state": "CLOSED",
      "author": "brainhub",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This is a \"random start\" method with an increment to the lower 64 bits. It is not necessary for the AEAD encryption layer to maintain TLS record counter in the big-endian format and perform an XOR per each record to produce a unique IV.\r\n\r\nThe security properties of the new nonce calculation method remain the same.\r\n\r\nThe re-key must happen at the TLS layer, and that's the the layer that should watch for data limits. In any case, the encryption layer can maintain its own counter; however, this counter would be a simple integer that never needs to be serialized to the wire format. ",
      "createdAt": "2017-06-02T01:40:14Z",
      "updatedAt": "2017-06-02T06:25:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1409d008f48e80564c7bf2e3ab26e3750e62c770",
      "headRepository": "brainhub/tls13-spec",
      "headRefName": "nonce_calculation",
      "headRefOid": "08952e6b1ca8dfbd3126333df9fcfe3ee398c715",
      "closedAt": "2017-06-02T06:25:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@brainhub: something is wrong with your diff. Can you rebase....",
          "createdAt": "2017-06-02T02:08:28Z",
          "updatedAt": "2017-06-02T02:08:28Z"
        },
        {
          "author": "brainhub",
          "authorAssociation": "NONE",
          "body": "The content is a single 2ed3733 change. Does it look OK in principle?\r\n\r\nWill re-do.",
          "createdAt": "2017-06-02T02:41:35Z",
          "updatedAt": "2017-06-02T02:41:35Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@brainhub: GitHub apparently sends out email notifications on mention of usernames in commit messages, even on unwatched branches (got one prior to PR submit here). I would recommend avoiding merged mega-summaries in the future. Rebase/reset is generally the simpler way to do things, anyway.\r\n\r\nhttps://github.com/tlswg/tls13-spec/pull/1026/commits/2ed37337d2dc017133efa3ce08cb52ac1f809328?diff=split\r\nAs to the actual proposed change: we have very different definitions of \"simpler\". If you're going to propose a low-level change like this, you really should state why you think a pile of increments and adds is \"simpler\" than one increment and a XOR. Is this all just to save the 8 bytes of memory for the sequence number that is already used in older versions of TLS? Also, you should do it on the mailing list first, not here. I and others are going to be against any new complexity here, so please provide a solid argument if you think this is actually something worth changing during the WGLC.\r\n\r\nAlso, typo: \"ithe\" in second to last sentence in the meaningful commit.\r\n\r\nLastly, dear lord, no pointer math in an example, no matter how benign you think it may be.",
          "createdAt": "2017-06-02T02:43:32Z",
          "updatedAt": "2017-06-02T02:43:32Z"
        },
        {
          "author": "brainhub",
          "authorAssociation": "NONE",
          "body": "I have re-created #1027. I have added additional points to the comments. Sorry about the mess. Please re-review there. ",
          "createdAt": "2017-06-02T03:26:09Z",
          "updatedAt": "2017-06-02T03:26:09Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1027,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIzNjM0OTI1",
      "title": "A simpler method to calculate AEAD nonce",
      "url": "https://github.com/tlswg/tls13-spec/pull/1027",
      "state": "CLOSED",
      "author": "brainhub",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This is a \"random start\" method with an increment to the lower 64 bits. It is unnecessary for the AEAD encryption layer to maintain TLS record counter in the big-endian format and perform an XOR per each record to produce a unique IV.\r\n\r\nThe security properties of the new nonce calculation method remain the same. Security arguments regarding the nonce space are now a bit cleaner (nonce now is essentially a counter).\r\n\r\nThe re-key must happen at the TLS layer, and that's the the layer that should watch for data limits. In any case, the encryption layer can optionally maintain its own counter. However, this counter would be a simple integer that never needs to be serialized to the wire format.\r\n\r\nBefore this change the encryption layer:\r\n- must maintain a sequence counter;\r\n- must serialize it;\r\n- must XOR 8 bytes with the mask.\r\n\r\nAfter this change the encryption layer:\r\n- increments a single byte in 255 out of 256 cases;\r\n- has minimal state (12 bytes for AES-GCM).\r\nOther implementation techniques are possible, e.g. in 3-intrinsics swap/increment/swap on x86.\r\n\r\nSome of this work is influenced by the FIPS 140-2 mandate to make IV management internal, per sec. A.5 http://csrc.nist.gov/groups/STM/cmvp/documents/fips140-2/FIPS1402IG.pdf . Getting rid of TLS sequence number is arguably more \"FIPSable\".\r\n\r\nThe method is fully compatible with TLS 1.2.",
      "createdAt": "2017-06-02T03:24:15Z",
      "updatedAt": "2017-06-17T20:39:16Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1409d008f48e80564c7bf2e3ab26e3750e62c770",
      "headRepository": "brainhub/tls13-spec",
      "headRefName": "random_start_nonce",
      "headRefOid": "b21bf062e85f1cb0dcdaa20a7ff4a6867b1b22f9",
      "closedAt": "2017-06-17T20:39:16Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@brainhub: You don't need to post replacement PRs. Just edit the branch and (force) push to GitHub. The PR will be updated as needed. (takes a bit to learn the best way to manage these things) Ideally, a PR should contain only the commits that do changes relevant to that PR; there shouldn't be any merge commits here. One of the ways to do this:\r\n\r\n0) Use git via the command line instead of GitHub's web interface. (you can of course do these things with it from the start, but cleaning up an existing PR requires full functionality)\r\n1) Create a new branch off of a fully updated master upstream (the current state of the official repo)\r\n2) Apply just your patch on top of that as one commit. (\"git cherry-pick\" the old one or manually make a new one or save a patch and apply it to the new branch)\r\n3) Use diff to check that the branch contains exactly the intended changes and use log to check that you have only one commit beyond the last merged one up here.\r\n4) Delete your old branch for this PR, and rename this new branch to the old name (\"random_start_nonce\" or \"nonce_calculation\", whichever PR you're updating).\r\n5) Force push it to GitHub to replace the PR's contents.\r\n6) Close whichever PR you didn't update.\r\n\r\nAlso, automated tests have failed for some reason, so there's something broken in the markup somewhere. I don't immediately see where the error is, though.\r\n\r\nAgain, however, this needs to be taken to the mailing list.",
          "createdAt": "2017-06-02T03:41:16Z",
          "updatedAt": "2017-06-02T03:41:47Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We also already standardized the XOR scheme in RFC 7905, with the intention that TLS 1.3 would match.",
          "createdAt": "2017-06-02T05:44:41Z",
          "updatedAt": "2017-06-02T05:44:41Z"
        },
        {
          "author": "brainhub",
          "authorAssociation": "NONE",
          "body": "@davidben: I wasn't aware of [rfc7905](https://tools.ietf.org/html/rfc7905). \r\n\r\nIdeally the TLS 1.3 spec should be the authoritative document on TLS 1.3 nonce creation and rfc7905 refer to it by saying \"use the nonce as formed per the TLS 1.3 spec\" with minimal management.\r\n\r\nWith my proposal the interface between layers is straightforward. AEAD cipher layer does \"iv++, preserving the top bytes\".  The initial iv is set once, along with the key. There is no padding, XORing, no concept of TLS records to explain.",
          "createdAt": "2017-06-02T06:14:56Z",
          "updatedAt": "2017-06-02T06:14:56Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We can't exactly change RFC 7905 now.\r\n\r\nThe layering isn't exactly complex right now.  The cipher layer maintains a counter and a baseline IV.  There's a ++ and an XOR on every encryption, which I can agree is a teensy bit more work, but that's a sunk cost given RFC 7905.",
          "createdAt": "2017-06-02T06:26:01Z",
          "updatedAt": "2017-06-02T06:26:01Z"
        },
        {
          "author": "agl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The full sequence number already has to be maintained, so there's no savings there. Indeed, incrementing a single byte and checking whether the next needs to be incremented will be slower.\r\n\r\nXORing with the mask and writing out is likewise trivial, and all of this is immeasurably small compared to the work of the AEAD itself.\r\n\r\nThus not inventing another nonce scheme is the overriding interest here.",
          "createdAt": "2017-06-02T15:33:00Z",
          "updatedAt": "2017-06-02T15:33:00Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with @agl and @martinthomson. As @davegarrett says, if you want to pursue this your next avenue is the list.",
          "createdAt": "2017-06-02T15:42:21Z",
          "updatedAt": "2017-06-02T15:42:21Z"
        },
        {
          "author": "brainhub",
          "authorAssociation": "NONE",
          "body": "The sequence doesn't have to be maintained at the encryption layer for nonce calculation with this method. We are discussing this in the context of a brand new scheme for TLS 1.3.",
          "createdAt": "2017-06-02T17:31:02Z",
          "updatedAt": "2017-06-02T17:31:02Z"
        },
        {
          "author": "agl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "But we don't want a brand new scheme for TLS 1.3. RFC 7905 was done in order to avoid having another nonce construction for TLS 1.3\r\n\r\n> The sequence doesn't have to be maintained at the encryption layer for nonce calculation with this method. \r\n\r\nI'm afraid that I don't understand your point here. The sequence already isn't maintained at the encryption layer in typical TLS designs, rather they specify it for each record using the [standard AEAD interface](https://tools.ietf.org/html/rfc5116#section-2.1). \r\n",
          "createdAt": "2017-06-02T17:34:56Z",
          "updatedAt": "2017-06-02T17:34:56Z"
        },
        {
          "author": "brainhub",
          "authorAssociation": "NONE",
          "body": "@agl: \r\n\r\nFIPS 140-2 IG A.5 tells that the encryption layer must manage the nonces itself. That's one design for the interface. In this case doing iv++ (and ignoring the carry into top bytes) inside the encryption  is simpler.\r\n\r\nWhat you mean is that the higher layer, TLS layer in this case, can build the nonce for each record and pass it to the encryption layer. That's another design. Yes, there is a record number in this case for nonce construction, but then again, the iv++ is simpler in this case as well.",
          "createdAt": "2017-06-02T19:06:50Z",
          "updatedAt": "2017-06-02T19:08:06Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@brainhub: as noted in contributing.md \"Note that github issues are not for substantial discussions; the only appropriate place to discuss design issues is on the mailing list itself.\"\r\n\r\nThis is clearly a substantive issue, so if you want it considered, you need to take it to the list and get consensus.",
          "createdAt": "2017-06-02T19:33:06Z",
          "updatedAt": "2017-06-02T19:33:06Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing. Feel free to reopen on list",
          "createdAt": "2017-06-17T20:39:16Z",
          "updatedAt": "2017-06-17T20:39:16Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2OTMwMTg=",
          "commit": {
            "abbreviatedOid": "d064473"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Not sure about the advantages of this scheme.  It's largely equivalent to what we have in terms of IV uniqueness, but it's somewhat more complicated to explain.\r\n\r\nThe explanation needs text explaining what the increment does.  I think that what you want is \"interpret the trailing 64 bits of IV as a big-endian 64-bit integer and increment that integer by 1, discarding any carry\".\r\n\r\nOr you could consider it as \"interpret the trailing 64 bits of IV as a big-endian 64-bit integer and add the packet number, discarding any carry\".  We currently have \"...XOR the packet number\".\r\n\r\nI've got to say that what we currently have seems to be much easier to implement.  And the extra state is only a single 64 integer; state that you have to maintain elsewhere anyway.",
          "createdAt": "2017-06-02T05:09:42Z",
          "updatedAt": "2017-06-02T05:25:52Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "occurs",
              "createdAt": "2017-06-02T05:09:42Z",
              "updatedAt": "2017-06-02T06:34:46Z"
            },
            {
              "originalPosition": 54,
              "body": "If this is correct, then see the above comment.  Otherwise, if `iv[4..11]` have all bits set, then this will not increment `iv[3]`.",
              "createdAt": "2017-06-02T05:14:34Z",
              "updatedAt": "2017-06-02T06:34:46Z"
            },
            {
              "originalPosition": 48,
              "body": "Isn't this just a convoluted way of saying `iv += 1` ?  Unless you intend to discard the overflow from the addition on the second line.  If that is your intent, then you need to take `t1 mod 2^64` somewhere explicitly, or add parentheses around `t0 + 1`.",
              "createdAt": "2017-06-02T05:16:20Z",
              "updatedAt": "2017-06-02T06:34:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2OTY1Mjc=",
          "commit": {
            "abbreviatedOid": "d064473"
          },
          "author": "brainhub",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-02T05:51:45Z",
          "updatedAt": "2017-06-02T05:51:45Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "It's \r\n\r\nt1 = t0 + 1 (mod 2^64) or\r\nt1 = (t0 + 1) mod 2^64\r\n\r\nIn C-like language:\r\n\r\nuint128_t iv = XXX;\r\nuint128_t m = (1<64)-1;\r\niv = (iv & ~m) | ((iv + 1) & m);",
              "createdAt": "2017-06-02T05:51:45Z",
              "updatedAt": "2017-06-02T06:34:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2OTY5OTc=",
          "commit": {
            "abbreviatedOid": "d064473"
          },
          "author": "brainhub",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-02T05:57:01Z",
          "updatedAt": "2017-06-02T05:57:01Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "The intent is not to propagate the carry into iv[3], iv[2], ... iv[0].\r\n\r\nFor TLS 1.3 we could have done simply client_write_iv++, server_write_iv++ and be done. \r\n\r\nAll above the complexity is entirely for the TLS 1.2 compatibility, which requires preservation of the 4 byte implicit part. I think that it would be bad to make the encryption layer behave differently depending on the TLS protocol version.",
              "createdAt": "2017-06-02T05:57:01Z",
              "updatedAt": "2017-06-02T06:34:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1028,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIzODUxMzM3",
      "title": "trivial comment fix",
      "url": "https://github.com/tlswg/tls13-spec/pull/1028",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Very trivial comment fix. Just makes the indentation & capitalization of a comment match the others near it.",
      "createdAt": "2017-06-03T18:18:05Z",
      "updatedAt": "2017-06-17T22:21:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1409d008f48e80564c7bf2e3ab26e3750e62c770",
      "headRepository": "davegarrett/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "203ad57de6b4173ee2b31a690e5302080066d4ad",
      "closedAt": "2017-06-17T20:39:33Z",
      "mergedAt": "2017-06-17T20:39:33Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f66b1f02debe0b2c488920cc0ef73d4a6b4085c9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1031,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI2MjA4NDIw",
      "title": "Cite ALPN on first mention",
      "url": "https://github.com/tlswg/tls13-spec/pull/1031",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #1030.",
      "createdAt": "2017-06-19T00:35:15Z",
      "updatedAt": "2017-06-19T01:03:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "13a1d6af751c5b55ed048f3ce2f772b72c952f68",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "alpn-ref",
      "headRefOid": "023ca9d8afd2dc687c3b4203104dfadfd247c36a",
      "closedAt": "2017-06-19T01:03:20Z",
      "mergedAt": "2017-06-19T01:03:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5af9dda1e44f7fc7d55bf5d0d29115c5e0809120"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1032,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI2NjU2MzY0",
      "title": "trusted_ca_keys became certificate_authorities; catch up",
      "url": "https://github.com/tlswg/tls13-spec/pull/1032",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Reported by Xuelei Fan.",
      "createdAt": "2017-06-21T00:18:12Z",
      "updatedAt": "2017-06-21T21:22:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5af9dda1e44f7fc7d55bf5d0d29115c5e0809120",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "ca",
      "headRefOid": "eaf8aa011ff73f0dd4dd9e6628285b02c47061b1",
      "closedAt": "2017-06-21T21:22:32Z",
      "mergedAt": "2017-06-21T21:22:32Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "63936305ccb7b351e56625f28e58fd992e37f024"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1034,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI3MjU1ODA2",
      "title": "Add extensive discussion of 0-RTT anti-replay as suggested by",
      "url": "https://github.com/tlswg/tls13-spec/pull/1034",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Colm MacCarthaigh. Specifically:\r\n\r\n- Describe both one time tickets and client hello storage\r\n  (\"strike register\") mechanisms and SHOULD-level require\r\n  people to do them.\r\n\r\n- Provide a security considerations section describing the\r\n  threats.\r\n\r\nThis is version 2 of this PR after extensive discussion on the\r\nlist.",
      "createdAt": "2017-06-23T17:43:36Z",
      "updatedAt": "2017-07-03T21:40:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "63936305ccb7b351e56625f28e58fd992e37f024",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "anti_replay3",
      "headRefOid": "9f7c2c7ee0b68fe0df74e0ce5c0393eb8237ccf8",
      "closedAt": "2017-07-03T20:35:23Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr: This was closed, but nothing appears to have been merged.",
          "createdAt": "2017-07-03T21:16:08Z",
          "updatedAt": "2017-07-03T21:16:08Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I haven't pushed yet.",
          "createdAt": "2017-07-03T21:26:28Z",
          "updatedAt": "2017-07-03T21:26:28Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNTE1Mjc=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Wow, a lot in this change, looking great!",
          "createdAt": "2017-06-23T17:56:16Z",
          "updatedAt": "2017-06-23T18:11:13Z",
          "comments": [
            {
              "originalPosition": 192,
              "body": "mix of tenses here; \"needed\" -> \"needs\" (also reads less defensively). ",
              "createdAt": "2017-06-23T17:56:16Z",
              "updatedAt": "2017-06-29T21:05:12Z"
            },
            {
              "originalPosition": 306,
              "body": "I think this is really is the \"estimated_max_RTT\". If a client happens to have a 200ms RTT when the ticket is issued, that doesn't mean they'll show up with a 200ms RTT the next time. For Satellite and Mobile users,  the variance can be quite a lot; ranging between 50ms and 500ms isn't unusual on some networks. \r\n\r\nIt would probably be too strict to reject 0-RTT just because the user got an unlucky connection. Especially since the slow connections benefit the most from 0-RTT. ",
              "createdAt": "2017-06-23T18:05:30Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNTc3MDE=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "vasilvv",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-23T18:22:39Z",
          "updatedAt": "2017-06-23T18:22:39Z",
          "comments": [
            {
              "originalPosition": 426,
              "body": "So, I think this is less a matter of should vs should not, and more of the matter of \"impossible while making a working TLS implementation\".  When the client retries the connection, exporter secrets are guaranteed to change, and other TLS-negotiated parameters can change too, so retrying a request can result in incorrect application-layer payload unless the implementation is minimal enough to not provide any of those facilities.",
              "createdAt": "2017-06-23T18:22:39Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNTgyNDQ=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "vasilvv",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-23T18:24:46Z",
          "updatedAt": "2017-06-23T18:24:46Z",
          "comments": [
            {
              "originalPosition": 429,
              "body": "Would it be helpful to spell out the possible options for \"special processing\"?  Regardless of protocol, I see three possible options: delay processing until liveness confirmation, request the data to be resent, and abort the connection with a fatal error.",
              "createdAt": "2017-06-23T18:24:46Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzU0OTU=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-24T23:28:11Z",
          "updatedAt": "2017-06-24T23:28:11Z",
          "comments": [
            {
              "originalPosition": 306,
              "body": "Actually, it's better if the server estimates low here, so the minimum is actually better.   Besides, the maximum RTT is essentially unbounded.\r\n\r\nAs we discovered, if you are using a system with false positives is vulnerable to a one-time replay if the client clock is super fast.  Basically, you reject 0-RTT for a ClientHello that is purportedly from the future, but then that ClientHello can be replayed (and 0-RTT accepted) once the time enters the window. Increasing your RTT estimate causes that particular error to be more likely.",
              "createdAt": "2017-06-24T23:28:11Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzU1MDM=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-24T23:29:22Z",
          "updatedAt": "2017-06-24T23:29:22Z",
          "comments": [
            {
              "originalPosition": 429,
              "body": "This seem to be good choices and probably worth enumerating.",
              "createdAt": "2017-06-24T23:29:22Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTQ5OTQ=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-26T16:32:52Z",
          "updatedAt": "2017-06-26T16:32:53Z",
          "comments": [
            {
              "originalPosition": 235,
              "body": "\"and and\"",
              "createdAt": "2017-06-26T16:32:53Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTUxOTU=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-26T16:33:41Z",
          "updatedAt": "2017-06-26T16:33:42Z",
          "comments": [
            {
              "originalPosition": 387,
              "body": "\"mechanism\" -> \"mechanisms\"",
              "createdAt": "2017-06-26T16:33:42Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTYzMDM=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-26T16:38:14Z",
          "updatedAt": "2017-06-26T16:38:14Z",
          "comments": [
            {
              "originalPosition": 206,
              "body": "This is one way to implement the single-use ticket strategy. Perhaps this paragraph could be rephrased so as to not sound so prescriptive?",
              "createdAt": "2017-06-26T16:38:14Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTgxMzc=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-26T16:46:00Z",
          "updatedAt": "2017-06-26T16:46:00Z",
          "comments": [
            {
              "originalPosition": 288,
              "body": "\"Relevant\" doesn't seem to capture the intent here. Perhaps this could be renamed to \"Freshness Checks\" or something similar?",
              "createdAt": "2017-06-26T16:46:00Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjc0Mzk=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This is an improvement, though I left many comments inline.\r\n\r\nThe more I think about it, though, I think I'd like to see something like \"servers MUST limit replays to at most the number of endpoints capable of accepting connections for a given identity, and SHOULD provide even stronger replay protections [such as {{Single-Use-Tickets}} and {{ClientHello-Recording}}]\".  That places a strict bound on replay that is much smaller than millions but is still achievable without any sort of distributed consistent storage.",
          "createdAt": "2017-06-26T17:24:19Z",
          "updatedAt": "2017-06-28T21:15:32Z",
          "comments": [
            {
              "originalPosition": 187,
              "body": "I'm not convinced that I've seen a compelling argument why we can't say MUST implement [those two or equivalent], for suitably flexible values of \"equivalent\".\r\nSorry if I'm being repetitive, as this discussion has been quite long and there may already have been a response that would address the issue, but it would be good to see such a thing (again?).",
              "createdAt": "2017-06-26T17:24:19Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 211,
              "body": "(EC)DHE, I think.",
              "createdAt": "2017-06-28T20:05:45Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 242,
              "body": "Why does this need to be a choice?  Shouldn't we just mandate the abort (modulo the later bit about false positives)?",
              "createdAt": "2017-06-28T20:21:54Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 244,
              "body": "This is probably more clear if ordered as \"then it accepts 0-RTT and stores the ClientHello for later matching as long as the expected_arrival_time is inside the window\".",
              "createdAt": "2017-06-28T20:34:01Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 257,
              "body": "s/for this purpose/as the storage key/?",
              "createdAt": "2017-06-28T20:36:15Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 256,
              "body": "Some might take this as an indication that we should recommend to always verify all binders, but I don't really believe that that's the case.",
              "createdAt": "2017-06-28T20:36:53Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 266,
              "body": "\"stronger design\" is a curious phrasing; how about \"In this case, it can be prudent to\"?",
              "createdAt": "2017-06-28T20:38:39Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 270,
              "body": "... which would not even require any changes to \"a weaker design\" here.\r\nThough I have mixed feelings about whether we should describe this weaker scenario.",
              "createdAt": "2017-06-28T20:39:46Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 293,
              "body": "I think the grammar requires either \"such a ClientHello\" or \"such ClientHellos\".",
              "createdAt": "2017-06-28T20:42:34Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 342,
              "body": "The writing style/tone of these last two paragraphs has diverged from the preceeding bits as a result of gluing together contributions from different people.  (I have no concrete suggestion at the moment, nor would it be terrible if the text did not change before publication.)",
              "createdAt": "2017-06-28T20:46:45Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 429,
              "body": "+1",
              "createdAt": "2017-06-28T20:56:52Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 372,
              "body": "Past discussions seem to indicate that there are stronger conditions in most cases, not just some.\r\nI think we should consider adding an enumeration of potential other issues, like side channel leakage, DoS/rate-limiting, reordering, etc.  Which actually looks a lot like the next few paragraphs, and...",
              "createdAt": "2017-06-28T21:00:54Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 377,
              "body": "... which would then render this sentence redundant.",
              "createdAt": "2017-06-28T21:01:51Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 382,
              "body": "(Just noting on the PR that Ilari sent mail noting that some of these should move to the previous paragraph)",
              "createdAt": "2017-06-28T21:02:26Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 397,
              "body": "If we want to maintain a strict replay/retransmit separation, this text should change.",
              "createdAt": "2017-06-28T21:04:25Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 414,
              "body": "\"they\" is used before the referent (\"client\") here, which is perhaps poor writing style.",
              "createdAt": "2017-06-28T21:06:33Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 425,
              "body": "I guess technically it is \"accepting\" (the negotiation of) rather than \"receiving\" that is configured, but that's a pretty fine nit to be picking.",
              "createdAt": "2017-06-28T21:09:31Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 426,
              "body": "So ... MUST NOT?",
              "createdAt": "2017-06-28T21:09:49Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMTQ5NTQ=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-29T18:37:42Z",
          "updatedAt": "2017-06-29T18:37:42Z",
          "comments": [
            {
              "originalPosition": 192,
              "body": "Done.",
              "createdAt": "2017-06-29T18:37:42Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNDk3MjI=",
          "commit": {
            "abbreviatedOid": "4916b48"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-29T20:57:06Z",
          "updatedAt": "2017-06-29T20:57:06Z",
          "comments": [
            {
              "originalPosition": 153,
              "body": "\"duplication by\"",
              "createdAt": "2017-06-29T20:57:06Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNDkyMDk=",
          "commit": {
            "abbreviatedOid": "05a066c"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "A few editorial nits on the new commits, inline",
          "createdAt": "2017-06-29T20:55:03Z",
          "updatedAt": "2017-06-29T20:57:45Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "\"a single\"",
              "createdAt": "2017-06-29T20:55:03Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 153,
              "body": "s/o nb/on b/",
              "createdAt": "2017-06-29T20:56:11Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 181,
              "body": "full stop",
              "createdAt": "2017-06-29T20:56:46Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMTUyMzE=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-29T18:38:44Z",
          "updatedAt": "2017-06-29T21:04:02Z",
          "comments": [
            {
              "originalPosition": 187,
              "body": "I don't believe that there is consensus on this, in part for the reasons proposed by Victor. In any case, the place to raise this is on-list, not the PR",
              "createdAt": "2017-06-29T18:38:44Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 206,
              "body": "Done.",
              "createdAt": "2017-06-29T18:40:48Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 211,
              "body": "Done",
              "createdAt": "2017-06-29T18:41:14Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 235,
              "body": "Done.",
              "createdAt": "2017-06-29T18:41:19Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 242,
              "body": "I believe Erik Nygren believed we should just continue with 1-RTT.",
              "createdAt": "2017-06-29T18:41:53Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 244,
              "body": "Done.",
              "createdAt": "2017-06-29T18:46:02Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 256,
              "body": "Clarified",
              "createdAt": "2017-06-29T18:47:19Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 270,
              "body": "I am leaving it for the reasons indicated by Victor.",
              "createdAt": "2017-06-29T18:47:49Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 288,
              "body": "Done",
              "createdAt": "2017-06-29T18:49:02Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 293,
              "body": "Done",
              "createdAt": "2017-06-29T18:49:17Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 306,
              "body": "Leaving as-is.",
              "createdAt": "2017-06-29T18:49:33Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 397,
              "body": "Done.",
              "createdAt": "2017-06-29T18:59:37Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 387,
              "body": "Done",
              "createdAt": "2017-06-29T18:59:48Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 414,
              "body": "Done",
              "createdAt": "2017-06-29T19:00:18Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 425,
              "body": "Done",
              "createdAt": "2017-06-29T19:04:03Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 426,
              "body": "I made it MUST NOT",
              "createdAt": "2017-06-29T19:04:41Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 429,
              "body": "Done.",
              "createdAt": "2017-06-29T19:21:50Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 382,
              "body": "yes.\r\n",
              "createdAt": "2017-06-29T19:35:38Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            },
            {
              "originalPosition": 372,
              "body": "I rewrote this section a bit",
              "createdAt": "2017-06-29T19:38:12Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNTE1MTQ=",
          "commit": {
            "abbreviatedOid": "05a066c"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-29T21:04:19Z",
          "updatedAt": "2017-06-29T21:04:19Z",
          "comments": [
            {
              "originalPosition": 153,
              "body": "yeah, I caught this one too :) and forgot to push.",
              "createdAt": "2017-06-29T21:04:19Z",
              "updatedAt": "2017-06-29T21:05:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MzAxOTQ=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-30T15:58:19Z",
          "updatedAt": "2017-06-30T15:59:15Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "Er, I don't remember any (recent) comments from Victor Vasiliev relevant to having only one zone accept tickets for 0-RTT vs letting all zones do so, either on this pull request or on the WG list.  Did I miss something?",
              "createdAt": "2017-06-30T15:58:19Z",
              "updatedAt": "2017-06-30T15:59:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MzE2ODg=",
          "commit": {
            "abbreviatedOid": "9f7c2c7"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-30T16:04:33Z",
          "updatedAt": "2017-06-30T16:04:33Z",
          "comments": [
            {
              "originalPosition": 241,
              "body": "I think we want to say \"If a matching ClientHello is found\" (or similar) at the start of this sentence, for clarity.",
              "createdAt": "2017-06-30T16:04:33Z",
              "updatedAt": "2017-06-30T16:04:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MzIwOTk=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-30T16:06:15Z",
          "updatedAt": "2017-06-30T16:06:15Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "He said none of this should be mandatory.\r\n\r\nIn any case, I think describing multiple options is within editor discretion here.",
              "createdAt": "2017-06-30T16:06:15Z",
              "updatedAt": "2017-06-30T16:06:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0Mzk1MDQ=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-30T16:40:41Z",
          "updatedAt": "2017-06-30T16:40:41Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "Oh, describing multiple options is totally within editor discretion.\r\nThe main thing I wanted to comment about in this space was that starting a sentence \"In this case, the stronger design\" is a strange construction (in that it uses the definite article before it's clear what's being referred to), which it looks like you changed already.  (It's fine to say \"a weaker design\" without a preceeding \"stronger design\".)\r\nSo, I am belatedly realizing that you are only responding to my \"mixed feelings\" remark, which was not intended to be anywhere close to blocking, so I'll just shut up now; sorry for the noise.",
              "createdAt": "2017-06-30T16:40:41Z",
              "updatedAt": "2017-06-30T16:40:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDIwODQ=",
          "commit": {
            "abbreviatedOid": "9f7c2c7"
          },
          "author": "knekritz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-30T16:52:49Z",
          "updatedAt": "2017-06-30T17:19:33Z",
          "comments": [
            {
              "originalPosition": 260,
              "body": "I'm not sure I understand this section. Using the first PSK binder as the key is definitely convenient, but I don't think using the entire ClientHello would allow any attack as the entire ClientHello is used in the derivation of the early keys.",
              "createdAt": "2017-06-30T16:52:49Z",
              "updatedAt": "2017-06-30T17:19:33Z"
            },
            {
              "originalPosition": 306,
              "body": "@martinthomson that still would require the client to retransmit the 0-RTT data as 1-RTT after the rejection, so I don't think that's any different than the attack where an attacker replays the ClientHello ahead of the server receiving the real connection, right?",
              "createdAt": "2017-06-30T16:58:16Z",
              "updatedAt": "2017-06-30T17:19:33Z"
            },
            {
              "originalPosition": 345,
              "body": "I would also add something along the lines of:\r\n\"Also note that this freshness checking is only done at the time the ClientHello is received, and not when later early application data records are received. After early data is accepted, records may continue to be streamed to the server over a longer time period.\"\r\nI believe there was some previous discussion on the list about using the time window to determine when it is safe to resend rejected 0-RTT data, which is not actually sufficient by itself.",
              "createdAt": "2017-06-30T17:19:12Z",
              "updatedAt": "2017-06-30T17:19:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDkwNjM=",
          "commit": {
            "abbreviatedOid": "9f7c2c7"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-06-30T17:25:18Z",
          "updatedAt": "2017-06-30T17:25:18Z",
          "comments": [
            {
              "originalPosition": 260,
              "body": "At minimum it allows pollution of the table.",
              "createdAt": "2017-06-30T17:25:18Z",
              "updatedAt": "2017-06-30T17:25:18Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NDE5MjI=",
          "commit": {
            "abbreviatedOid": "c1ae849"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-03T21:38:20Z",
          "updatedAt": "2017-07-03T21:38:20Z",
          "comments": [
            {
              "originalPosition": 306,
              "body": "I agree.",
              "createdAt": "2017-07-03T21:38:20Z",
              "updatedAt": "2017-07-03T21:38:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NDIwNzk=",
          "commit": {
            "abbreviatedOid": "9f7c2c7"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-03T21:40:02Z",
          "updatedAt": "2017-07-03T21:40:02Z",
          "comments": [
            {
              "originalPosition": 260,
              "body": "Cleaned up a bit.",
              "createdAt": "2017-07-03T21:40:02Z",
              "updatedAt": "2017-07-03T21:40:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1036,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI4NzAxMzQ4",
      "title": "Annotate state machine with key changes, original due to Richard Barnes",
      "url": "https://github.com/tlswg/tls13-spec/pull/1036",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-07-03T22:30:36Z",
      "updatedAt": "2017-07-03T23:57:52Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2498a02be70addd09e110b74ed485d48ade0d70b",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "state-action",
      "headRefOid": "5544863e2e8a7dc01ac9a7597c1b181e41ac47a2",
      "closedAt": "2017-07-03T23:57:52Z",
      "mergedAt": "2017-07-03T23:57:52Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "167e1f5c938b03d39d3b6e0c3f306d13f5719ae0"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson @davegarrett I would appreciate a sanity check here.",
          "createdAt": "2017-07-03T22:30:50Z",
          "updatedAt": "2017-07-03T22:30:50Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NDk3OTM=",
          "commit": {
            "abbreviatedOid": "4ea8241"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think that this has a bug.",
          "createdAt": "2017-07-03T23:29:37Z",
          "updatedAt": "2017-07-03T23:42:03Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "It either is, or it isn't.  I think that it isn't, and this is merely a clarification.\r\n\r\nAlso, this formulation doesn't work for 0-RTT at all.  The fact is that the client's second flight uses handshake keys, except for EOED.",
              "createdAt": "2017-07-03T23:29:38Z",
              "updatedAt": "2017-07-03T23:56:03Z"
            },
            {
              "originalPosition": 36,
              "body": "Can you drop the \"/\" down one line?  It now looks like the \"[K_send = early data]\" is connected to the line in some way, which doesn't make a lot of sense if you are thinking, but...",
              "createdAt": "2017-07-03T23:31:02Z",
              "updatedAt": "2017-07-03T23:56:03Z"
            },
            {
              "originalPosition": 38,
              "body": "Here my previous point holds.  You set K_send after receiving the Finished, not here.",
              "createdAt": "2017-07-03T23:31:53Z",
              "updatedAt": "2017-07-03T23:56:03Z"
            },
            {
              "originalPosition": 53,
              "body": "As above, this goes:\r\n\r\n* Recv Finished\r\n* [K_send = early data]\r\n* [Send EndOfEarlyData]\r\n* K_send = handshake\r\n* [Send Certificate [+ CertificateVerify]]\r\n* Send Finished\r\n* K_send = application\r\n* K_recv = application (sure, whatever)\r\n",
              "createdAt": "2017-07-03T23:33:58Z",
              "updatedAt": "2017-07-03T23:56:03Z"
            },
            {
              "originalPosition": 80,
              "body": "Now that you have K_send = application, you could just say that after installing application keys in K_send, then you can send application data.  Same goes for receiving it.\r\n\r\nAt a minimum, I would move the arrow to the line where you install the keys.",
              "createdAt": "2017-07-03T23:35:24Z",
              "updatedAt": "2017-07-03T23:56:03Z"
            },
            {
              "originalPosition": 89,
              "body": "I don't know how to improve this, but this is a little cramped.  Maybe...\r\n```\r\n  K_recv = handshake  |                 |                           \r\n[Skip decrypt errors] |    +------> WAIT_EOED --+                    \r\n                      |    |       Recv |       | Recv EndOfEarlyData\r\n                      |    | early data |       | K_recv = handshake\r\n                      |    +------------+       |\r\n                      |                         |\r\n                      +> WAIT_FLIGHT2 <---------+\r\n```\r\nThat's 69 columns exactly, though you can trim one extra.",
              "createdAt": "2017-07-03T23:41:24Z",
              "updatedAt": "2017-07-03T23:56:03Z"
            },
            {
              "originalPosition": 98,
              "body": "I'd add another line here.",
              "createdAt": "2017-07-03T23:41:47Z",
              "updatedAt": "2017-07-03T23:56:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NTA4NzY=",
          "commit": {
            "abbreviatedOid": "67cf52e"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-03T23:46:22Z",
          "updatedAt": "2017-07-03T23:46:22Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Done",
              "createdAt": "2017-07-03T23:46:22Z",
              "updatedAt": "2017-07-03T23:56:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NTEzOTg=",
          "commit": {
            "abbreviatedOid": "729e1cd"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Maybe remove the \"arguably\" statement and the *",
          "createdAt": "2017-07-03T23:55:56Z",
          "updatedAt": "2017-07-03T23:55:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1038,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI4NzA4NDk5",
      "title": "Fix for typos",
      "url": "https://github.com/tlswg/tls13-spec/pull/1038",
      "state": "MERGED",
      "author": "beurdouche",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-07-04T00:28:42Z",
      "updatedAt": "2017-07-04T01:36:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "167e1f5c938b03d39d3b6e0c3f306d13f5719ae0",
      "headRepository": "beurdouche/tls13-spec",
      "headRefName": "beurdouche_fixes1",
      "headRefOid": "54bfd7cbebb3cac3453d60c040b92d6ce1589773",
      "closedAt": "2017-07-04T01:36:35Z",
      "mergedAt": "2017-07-04T01:36:35Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e2d6401aaebb484429d6874ec9b0fb00127bc14d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1039,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI4NzExNDQz",
      "title": "Unclutter the server state machine",
      "url": "https://github.com/tlswg/tls13-spec/pull/1039",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This isn't necessarily any better, but it's an option.  I didn't want to lose this from my edit buffer, so you can have it.",
      "createdAt": "2017-07-04T01:24:25Z",
      "updatedAt": "2017-07-29T18:55:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "167e1f5c938b03d39d3b6e0c3f306d13f5719ae0",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "unclutter",
      "headRefOid": "308cb3a0ceb5006bcc5cd87d287fc44b365aae9e",
      "closedAt": "2017-07-29T18:55:07Z",
      "mergedAt": "2017-07-29T18:55:07Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "15e77a9f866701ae070c65110be2c9622df7c1ac"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NTkwNDk=",
          "commit": {
            "abbreviatedOid": "743d659"
          },
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-04T01:53:37Z",
          "updatedAt": "2017-07-04T01:53:37Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "@martinthomson Was the `K_recv = early_data` removed by mistake ?",
              "createdAt": "2017-07-04T01:53:37Z",
              "updatedAt": "2017-07-04T01:56:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NTkxOTY=",
          "commit": {
            "abbreviatedOid": "743d659"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-04T01:55:40Z",
          "updatedAt": "2017-07-04T01:55:40Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Yes.",
              "createdAt": "2017-07-04T01:55:40Z",
              "updatedAt": "2017-07-04T01:56:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NTkzMjU=",
          "commit": {
            "abbreviatedOid": "308cb3a"
          },
          "author": "beurdouche",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-04T01:57:21Z",
          "updatedAt": "2017-07-04T01:57:21Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Personally, I find this style much better BTW... ",
              "createdAt": "2017-07-04T01:57:21Z",
              "updatedAt": "2017-07-04T01:57:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1041,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI4NzI3MTMz",
      "title": "Editorial review",
      "url": "https://github.com/tlswg/tls13-spec/pull/1041",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "All extremely minor.",
      "createdAt": "2017-07-04T05:22:28Z",
      "updatedAt": "2017-07-04T13:10:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e2d6401aaebb484429d6874ec9b0fb00127bc14d",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "editorial_review",
      "headRefOid": "3cf703c19034dca17e86a9237db16301b7db1637",
      "closedAt": "2017-07-04T13:10:03Z",
      "mergedAt": "2017-07-04T13:10:03Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2f5fd56c46733bdc73875bbec0e008fa2524d83f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1044,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI5MDE5ODE3",
      "title": "Reconcile SignatureScheme S4.2.3 and S11",
      "url": "https://github.com/tlswg/tls13-spec/pull/1044",
      "state": "MERGED",
      "author": "tmshort",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-07-05T17:53:28Z",
      "updatedAt": "2017-07-05T18:08:16Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2f5fd56c46733bdc73875bbec0e008fa2524d83f",
      "headRepository": "tmshort/tls13-spec",
      "headRefName": "master-signature-scheme",
      "headRefOid": "852a43c6a71ef99c972a02980e60eeb1914971c1",
      "closedAt": "2017-07-05T18:08:16Z",
      "mergedAt": "2017-07-05T18:08:16Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "bbe5759e395abab95a31e801f4a3c0ce44034332"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1045,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI5MjgxNDQ0",
      "title": "Fix typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/1045",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-07-06T21:07:08Z",
      "updatedAt": "2017-07-06T21:18:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "bbe5759e395abab95a31e801f4a3c0ce44034332",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "typo",
      "headRefOid": "d321bb7216563f55a5a0edfb6b856f16c102bb6c",
      "closedAt": "2017-07-06T21:18:07Z",
      "mergedAt": "2017-07-06T21:18:07Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b3ed3d983390d52fa5f9543a5511a867c0a56f76"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1046,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI5Mjg5MTIx",
      "title": "Editorial",
      "url": "https://github.com/tlswg/tls13-spec/pull/1046",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some more editorial bits from looking at the diff between draft-20 and draft-21",
      "createdAt": "2017-07-06T21:51:16Z",
      "updatedAt": "2017-07-06T21:59:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b3ed3d983390d52fa5f9543a5511a867c0a56f76",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "editorial",
      "headRefOid": "73c78e91c1fd7294da8d1046300ce267a7b8dc1f",
      "closedAt": "2017-07-06T21:59:00Z",
      "mergedAt": "2017-07-06T21:59:00Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "0415e87521a5ebb3da755ef8ada09ffc78b49c5b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1047,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI5NDgzMzYy",
      "title": "Add Steven and myself to the acknowledgements section",
      "url": "https://github.com/tlswg/tls13-spec/pull/1047",
      "state": "MERGED",
      "author": "vasilvv",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(per EKR)",
      "createdAt": "2017-07-07T20:37:36Z",
      "updatedAt": "2017-07-07T21:06:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "0415e87521a5ebb3da755ef8ada09ffc78b49c5b",
      "headRepository": "vasilvv/tls13-spec",
      "headRefName": "acks",
      "headRefOid": "a45b4460579eef4f0ea41b87e1e401d7ddabf7f3",
      "closedAt": "2017-07-07T21:06:50Z",
      "mergedAt": "2017-07-07T21:06:49Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "8686972525602f85025c38fb470eb4833d7b9c69"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1048,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI5NTM4MjU4",
      "title": "Add Richard Barnes to contributors list",
      "url": "https://github.com/tlswg/tls13-spec/pull/1048",
      "state": "MERGED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-07-08T18:39:11Z",
      "updatedAt": "2017-07-08T18:40:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8686972525602f85025c38fb470eb4833d7b9c69",
      "headRepository": "bifurcation/tls13-spec",
      "headRefName": "rlb",
      "headRefOid": "773926d833b7524236a7eabc8d5046b6a930d3b3",
      "closedAt": "2017-07-08T18:40:17Z",
      "mergedAt": "2017-07-08T18:40:17Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "68086a221d9ceeac8f4c6bcd6452fff4752caf70"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1049,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMwMDAwNDAx",
      "title": "Document the static key share attack",
      "url": "https://github.com/tlswg/tls13-spec/pull/1049",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed on the mailing list, here is a short proposal to document the \"static (EC) DH private key\" sharing attack.",
      "createdAt": "2017-07-11T20:39:34Z",
      "updatedAt": "2017-11-24T18:40:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "dfab83da94ab639141804624c76488dd9e544b48",
      "headRepository": "huitema/tls13-spec",
      "headRefName": "master",
      "headRefOid": "65e8e37ce706b4d78a5d14d600f3b2a1d8b33da0",
      "closedAt": "2017-11-24T18:40:34Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That pernicious BOM remains.  I assume that if this PR is OK, that's an easy editorial fix, so I wouldn't stress about it.",
          "createdAt": "2017-08-14T05:10:36Z",
          "updatedAt": "2017-08-14T05:10:36Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am really stumped. I just tried integrating the recent changes in the master copy, in case there would be some kind of incompatibility.",
          "createdAt": "2017-08-14T05:12:59Z",
          "updatedAt": "2017-08-14T05:12:59Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Finally fixed. I have no idea where the extra dash came from.",
          "createdAt": "2017-08-14T05:25:39Z",
          "updatedAt": "2017-08-14T05:25:39Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There's a bunch of merge commits that shouldn't be in here in addition to the churn from fixing the build failure (which was likely a result of the former, somehow). Ideally, you should have concise commits of just what you're changing in the PR. Can be fixed via git commands, easily enough:\r\n\r\nPlease do a git squash of these changesets down to a single commit, then rebase it on top of the current upstream master. Do a diff to upstream master to make sure it matches the cumulative diff shown here, clean up the commit message if needed, then force push to this PR branch to update it. For this PR, exactly one commit is sufficient.",
          "createdAt": "2017-08-14T07:02:15Z",
          "updatedAt": "2017-08-14T07:02:15Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett : I am of course willing to do that, but it appears to be a notch above my level of expertise in git. Do you have a pointer to a \"how to\" doc? Or, I can give you access to my fork if that helps.",
          "createdAt": "2017-08-14T17:27:21Z",
          "updatedAt": "2017-08-14T17:27:21Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@huitema: First, taking a longer look at this PR technically, it seems you're pushing this PR from your master branch. That's why we have merge commits and stuff listed from 2015. PRs should be submitted from separate branches made for each PR. (this'll probably still work, so don't start over; just for future reference, to avoid similar pitfalls) You can create new branches via the command line or just use the GitHub web interface to edit, both of which can be synced and then edited with the other. It's much easier to avoid/fix test fails if you've got a clean PR branch with just your new work.\r\n\r\nHere's a quick link for rebasing with squash:\r\nhttp://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html\r\n\r\nAn simpler way to do this, because this changeset is just a paragraph, is to just save the block of new text separately, do a git reset on your PR branch (your fork's master in this case here) to make it match upstream master exactly, then make a new clean commit with the new text. When you force push your local version to GitHub, it will overwrite this PR (but leave most of the comments, generally).\r\n\r\nResetting a branch to match upstream exactly is just \"git reset --hard upstream/master\" whilst on your branch (assuming you've mapped upstream as such, and have fetched latest). Of course, make sure you've already backed-up your change to re-commit and always check a diff to upstream master before force pushing.",
          "createdAt": "2017-08-14T19:04:18Z",
          "updatedAt": "2017-08-14T19:04:18Z"
        },
        {
          "author": "brainhub",
          "authorAssociation": "NONE",
          "body": "If one replaces \"**static (EC)DH private keys**\" with **PSK** (static or for session resumption), the consequences of this _attack_ are about the same.  It's a reasonable assumptions that the compromise of a cached ECDH share should imply compromise of all sessions that the server can resume. The corresponding state is expected to live in the same RAM of the server. \r\n\r\nThis compromise is mitigated by managing the lifetime of PSKs or ECDH shares. To put it differently, if a server operator takes this text as a serious concern, the server operator must disable session resumption and any use of PSK, unless the ECDH with PSK is the only option.\r\n\r\nShould this text at least mention a similar _attack_ on resumption and PSK?",
          "createdAt": "2017-08-14T21:38:23Z",
          "updatedAt": "2017-08-14T21:38:23Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not detecting a lot of consensus for this.",
          "createdAt": "2017-11-24T18:40:34Z",
          "updatedAt": "2017-11-24T18:40:34Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NzkzMjg=",
          "commit": {
            "abbreviatedOid": "824fb86"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-08-13T23:51:31Z",
          "updatedAt": "2017-08-13T23:51:31Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "This change is why travis is complaining.  Removing the hypen would be fine, but adding a byte order mark isn't.",
              "createdAt": "2017-08-13T23:51:31Z",
              "updatedAt": "2017-08-14T19:50:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNzI4NjA=",
          "commit": {
            "abbreviatedOid": "ae2ab42"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Just a couple of very minor editorial nits.\r\n\r\nIf @ekr is ok with the rest of the text, he can probably just manually merge this easily enough, regardless of the extraneous commits here.",
          "createdAt": "2017-08-14T19:06:53Z",
          "updatedAt": "2017-08-14T19:09:37Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "nit: do \"(EC)DH\" without the space, for each instance, to match usage elsewhere",
              "createdAt": "2017-08-14T19:06:54Z",
              "updatedAt": "2017-08-14T19:50:58Z"
            },
            {
              "originalPosition": 9,
              "body": "nit: drop \"now\"",
              "createdAt": "2017-08-14T19:07:13Z",
              "updatedAt": "2017-08-14T19:50:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0OTIyMTc=",
          "commit": {
            "abbreviatedOid": "65e8e37"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "It's hard for me to get excited about adding this specific text to the document.  Though I guess we should have something of this nature, given what has gone by on the list.",
          "createdAt": "2017-08-15T22:52:01Z",
          "updatedAt": "2017-08-15T22:59:21Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Implementations probably should not be assumed to have motive, whereas implementors would.",
              "createdAt": "2017-08-15T22:52:01Z",
              "updatedAt": "2017-08-15T22:59:21Z"
            },
            {
              "originalPosition": 8,
              "body": "Lowering a guarantee feels like an odd phrasing to me, as a guarantee is supposed to be a fixed thing.  So, one might reduce the level of security that is guaranteed, or break a guarantee, or similar, instead.",
              "createdAt": "2017-08-15T22:53:36Z",
              "updatedAt": "2017-08-15T22:59:21Z"
            },
            {
              "originalPosition": 12,
              "body": "This text doesn't really do much to distinguish post-handhsake compromise from contemporary compromise, in that they can \"compromise confidentiality\" or \"access the content of\", which is basically synonymous.  If we are to cover these cases separately, it would be good to be more clear about what is different between them.",
              "createdAt": "2017-08-15T22:55:09Z",
              "updatedAt": "2017-08-15T22:59:21Z"
            },
            {
              "originalPosition": 13,
              "body": "I don't know that I'm very happy about \"should\" (vs. \"SHOULD\") for this.",
              "createdAt": "2017-08-15T22:55:44Z",
              "updatedAt": "2017-08-15T22:59:21Z"
            },
            {
              "originalPosition": 15,
              "body": "\"treat as compromised\" is somewhat vague; it might be better to also add that clients should assume that confidentiality is not protected on connections to such servers, etc.",
              "createdAt": "2017-08-15T22:57:07Z",
              "updatedAt": "2017-08-15T22:59:21Z"
            },
            {
              "originalPosition": 18,
              "body": "This sort of cooperating with other clients seems to suffer from the same client fingerprinting issue that has plagued attempts to introduce gossiping in CT.",
              "createdAt": "2017-08-15T22:57:42Z",
              "updatedAt": "2017-08-15T22:59:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1050,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMwMDAwODYz",
      "title": "Editorial notes from WGLC2 review",
      "url": "https://github.com/tlswg/tls13-spec/pull/1050",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-07-11T20:41:49Z",
      "updatedAt": "2017-07-11T20:53:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4441d382f99829b29fe27ac12795ddd401c88e4e",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "wglc2",
      "headRefOid": "9de949bd9eb8dd7f6d09ce5fd2a0311ff76cc222",
      "closedAt": "2017-07-11T20:53:28Z",
      "mergedAt": "2017-07-11T20:53:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "69834ec297a29d79e6e0a21bf56f83f6eded310e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1051,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMwNDUxOTgz",
      "title": "Send server plaintext records with a different content type.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1051",
      "state": "CLOSED",
      "author": "knekritz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We've (Facebook) been experimenting with some tweaks to the record layer to try to work around middlebox interference issues when negotiating TLS 1.3 on the internet. Initial results using a different content type for server plaintext handshake messages show significant improvement, in particular against the two most common issues we see (on mobile clients):\r\n1) access_denied alert received on the client\r\n2) missing server hello (but the rest of the connection continues)\r\nWe're still collecting data, but assuming this continues to show deployment improvement I think this change makes a lot of sense with minimal complication added to the protocol.\r\n\r\nNote that I picked the value at random and that is what we've been experimenting with, but I assume any other value would work too.",
      "createdAt": "2017-07-13T19:46:30Z",
      "updatedAt": "2017-10-27T19:48:24Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "69834ec297a29d79e6e0a21bf56f83f6eded310e",
      "headRepository": "knekritz/tls13-spec",
      "headRefName": "contenttype",
      "headRefOid": "4710af7c5d1975d141a4c0d56afea5e2f031dccf",
      "closedAt": "2017-10-27T19:48:24Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@knekritz, is this something that works more generally?  What if we changed to a completely new content type for all application data/handshake records?  (and could be also remove the extra 3 octets from the header when we did that?)",
          "createdAt": "2017-07-14T06:20:00Z",
          "updatedAt": "2017-07-14T06:20:00Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Did you also try modifying ServerHello to look more like TLS 1.2 ServerHello, and seeing what that does to intolerance rates? Specifically, adding one zero byte after ServerRandom (where TLS 1.2 would have session ID) and one zero byte after Ciphersuite (where TLS 1.2 would have compression)?\r\n\r\nAlso, I don't suppose totally alien framing starting directly after ServerHello would do good things to intolerance rates... What are these middleboxes trying to do? Why would they scan ServerHello, but then accept handshake seemingly cutting short?\r\n\r\nAlso what kind of connections were tested? I would guess various mobile and WiFi connections (as those tend to be the ones mobile devices connect to). Also, is there difference between IPv4 and IPv6 when both are available from the same source?",
          "createdAt": "2017-07-14T09:26:36Z",
          "updatedAt": "2017-07-14T09:26:36Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we concluded this didn't help",
          "createdAt": "2017-10-27T19:48:24Z",
          "updatedAt": "2017-10-27T19:48:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1052,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMwNTgzMTAz",
      "title": "Add a missing period.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1052",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-07-14T12:53:40Z",
      "updatedAt": "2017-07-14T16:02:59Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "69834ec297a29d79e6e0a21bf56f83f6eded310e",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "period",
      "headRefOid": "ada7dfa13cbb602f0baa6833d958c8112cd96e92",
      "closedAt": "2017-07-14T16:02:59Z",
      "mergedAt": "2017-07-14T16:02:59Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3f6ca952a366b19328d62c3109407c43c8396ed5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDY0MzU=",
          "commit": {
            "abbreviatedOid": "ada7dfa"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good, full stop.",
          "createdAt": "2017-07-14T13:34:06Z",
          "updatedAt": "2017-07-14T13:34:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1053,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMwNTgzMjI2",
      "title": "Rename HashValue to Context for HKDF-Expand-Label",
      "url": "https://github.com/tlswg/tls13-spec/pull/1053",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is no longer a hash value throughout, using a different name might reduce confusion a little.",
      "createdAt": "2017-07-14T12:54:29Z",
      "updatedAt": "2017-07-19T07:54:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "69834ec297a29d79e6e0a21bf56f83f6eded310e",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "extract-label-context",
      "headRefOid": "1fcb14e550e28770cf583692e7419d00c33a3353",
      "closedAt": "2017-07-19T07:54:10Z",
      "mergedAt": "2017-07-19T07:54:10Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "997122593d1d0ace4384f5a8d551a922c4c01460"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDcxODA=",
          "commit": {
            "abbreviatedOid": "1fcb14e"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Seems like an improvement.",
          "createdAt": "2017-07-14T13:37:18Z",
          "updatedAt": "2017-07-14T13:37:18Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwOTg3NTk=",
          "commit": {
            "abbreviatedOid": "1fcb14e"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "+1",
          "createdAt": "2017-07-14T17:02:56Z",
          "updatedAt": "2017-07-14T17:02:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1054,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMwNzIzNTc5",
      "title": "There were a few 'handshake_hash' instances",
      "url": "https://github.com/tlswg/tls13-spec/pull/1054",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-07-15T17:39:33Z",
      "updatedAt": "2017-07-15T17:53:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3f6ca952a366b19328d62c3109407c43c8396ed5",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "message_hash",
      "headRefOid": "b10d00b134a840814f06c67dbbafbdd9d358bfc4",
      "closedAt": "2017-07-15T17:53:22Z",
      "mergedAt": "2017-07-15T17:53:22Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ef76c7102dd50ef0374c144a33325f12fbc0ea25"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1055,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMwNzUwNTI3",
      "title": "Allow an empty ticket_nonce",
      "url": "https://github.com/tlswg/tls13-spec/pull/1055",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed, an empty value should be fine.",
      "createdAt": "2017-07-16T12:58:32Z",
      "updatedAt": "2017-07-16T13:05:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ef76c7102dd50ef0374c144a33325f12fbc0ea25",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "empty-nonce",
      "headRefOid": "9d675fde2b9fd61effef1c15321a05c8ebfee320",
      "closedAt": "2017-07-16T13:05:56Z",
      "mergedAt": "2017-07-16T13:05:56Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d8f03f02919c9c681ac8b1fe3d5064a5dd2452c9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1056,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMwNzUyMTY4",
      "title": "Resumption/PSK diagram: add PSK KE extension to initial handshake",
      "url": "https://github.com/tlswg/tls13-spec/pull/1056",
      "state": "CLOSED",
      "author": "nharper",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-07-16T13:54:46Z",
      "updatedAt": "2017-07-29T19:12:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d8f03f02919c9c681ac8b1fe3d5064a5dd2452c9",
      "headRepository": "nharper/tls13-spec",
      "headRefName": "psk_ke",
      "headRefOid": "05d9ccc7f8b8b5aa64a5e9b87a487021f2845eaa",
      "closedAt": "2017-07-29T19:12:10Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Can you say a bit more about why you want this?  If the client is not offering any PSKs, would it want to offer psk_key_exchange_modes?",
          "createdAt": "2017-07-18T15:42:43Z",
          "updatedAt": "2017-07-18T15:42:43Z"
        },
        {
          "author": "nharper",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is clarifying the diagram - it does not change the behavior specified.\r\n\r\nThe psk_key_exchange_modes extension is used both to indicate what modes the PSK on that handshake can be used for, and what modes a PSK supplied by an NST can be used for.\r\n\r\nFrom section 4.2.9: \"The semantics of this extension are that the client only supports the use of PSKs with these modes, which restricts both the use of PSKs offered in this ClientHello and those which the server might supply via NewSessionTicket.\"\r\n\r\nAlso (from the same section): \"This extension also restricts the modes for use with PSK resumption; servers SHOULD NOT send NewSessionTicket with tickets that are not compatible with the advertised modes; however, if a server does so, the impact will just be that the client\u2019s attempts at resumption fail.\"",
          "createdAt": "2017-07-18T15:50:19Z",
          "updatedAt": "2017-07-18T15:50:19Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah, right.  Thanks!",
          "createdAt": "2017-07-18T15:55:35Z",
          "updatedAt": "2017-07-18T15:55:35Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Another option would be to omit it from both diagrams, to reduce clutter, since it's now like supported_groups where it is a capability advertisement relevant to the handshake, but not tied to any particular shape.",
          "createdAt": "2017-07-18T15:55:43Z",
          "updatedAt": "2017-07-18T15:55:43Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1057,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMwODEzMTM3",
      "title": "Space after `select`",
      "url": "https://github.com/tlswg/tls13-spec/pull/1057",
      "state": "MERGED",
      "author": "stevecheckoway",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "All of the other `select`s (including in the description of the presentation) have a space between the `select` and the `(`.",
      "createdAt": "2017-07-17T09:23:06Z",
      "updatedAt": "2017-07-24T17:26:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d8f03f02919c9c681ac8b1fe3d5064a5dd2452c9",
      "headRepository": "stevecheckoway/tls13-spec",
      "headRefName": "select",
      "headRefOid": "428ea7f37a3ed5994e2ca116eb550dcdf04b30c4",
      "closedAt": "2017-07-19T07:55:03Z",
      "mergedAt": "2017-07-19T07:55:03Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2ee923289f43fd2315fdbd992a02e3ee712eb608"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1058,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMxMDAwMTg5",
      "title": "fixing a typo.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1058",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "s/security/secrecy/",
      "createdAt": "2017-07-18T04:25:53Z",
      "updatedAt": "2018-02-16T01:41:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d8f03f02919c9c681ac8b1fe3d5064a5dd2452c9",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "typo",
      "headRefOid": "92f555e211fd1d823f72f5e79d1e04fe859a1d22",
      "closedAt": "2017-07-19T07:53:46Z",
      "mergedAt": "2017-07-19T07:53:46Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4bfd4038bd09462b78b8783a7af0c6c6d0f9a0ae"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1059,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMxMjE1MjEw",
      "title": "Rephrase and tighten the 0-RTT replay protection requirements",
      "url": "https://github.com/tlswg/tls13-spec/pull/1059",
      "state": "MERGED",
      "author": "vasilvv",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This change rephrases the requirements and recommendations from\r\nprescribing specific mechanisms of 0-RTT replay protection to\r\nprescribing the guarantees expected from implementations, thus letting\r\nthe implementations to choose the way they can provide those guarantees.\r\n\r\nThis change also introduces a MUST-level requirement for protection\r\nequivalent to having at least local strike register.",
      "createdAt": "2017-07-19T00:34:25Z",
      "updatedAt": "2017-10-06T00:57:30Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d8f03f02919c9c681ac8b1fe3d5064a5dd2452c9",
      "headRepository": "vasilvv/tls13-spec",
      "headRefName": "0rtt",
      "headRefOid": "c3823571e6f13de4713aa6a01760872b6bb75f23",
      "closedAt": "2017-10-06T00:57:30Z",
      "mergedAt": "2017-10-06T00:57:30Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1d609f9d8cd1231416374e7475f3c0007aab40c3"
      },
      "comments": [
        {
          "author": "vasilvv",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've addressed all editorial nits suggested (except for the comma one, which I leave to editor's discretion).",
          "createdAt": "2017-10-04T16:49:50Z",
          "updatedAt": "2017-10-04T16:49:50Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MjY5NTU=",
          "commit": {
            "abbreviatedOid": "28431f9"
          },
          "author": "dkg",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-19T07:44:21Z",
          "updatedAt": "2017-07-19T07:44:21Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "s/orter/order/",
              "createdAt": "2017-07-19T07:44:21Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MjcwMzA=",
          "commit": {
            "abbreviatedOid": "28431f9"
          },
          "author": "dkg",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-19T07:44:38Z",
          "updatedAt": "2017-07-19T07:44:39Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "or just s/in orter to/to/",
              "createdAt": "2017-07-19T07:44:38Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MjcyODc=",
          "commit": {
            "abbreviatedOid": "28431f9"
          },
          "author": "dkg",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-19T07:45:45Z",
          "updatedAt": "2017-07-19T07:45:45Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "s/they are deem safe/they deem safe/",
              "createdAt": "2017-07-19T07:45:45Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Mjg1MTM=",
          "commit": {
            "abbreviatedOid": "28431f9"
          },
          "author": "dkg",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-19T07:51:08Z",
          "updatedAt": "2017-07-19T07:51:08Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "s/by using ClientHello recording locally/by locally recording data from recently-received ClientHellos and rejecting repeats/",
              "createdAt": "2017-07-19T07:51:08Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Mzg2NDQ=",
          "commit": {
            "abbreviatedOid": "28431f9"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-19T08:36:43Z",
          "updatedAt": "2017-07-19T08:36:43Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "This could be read as meaning that you reject handshakes, as opposed to rejecting the early data.",
              "createdAt": "2017-07-19T08:36:43Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NDYxOTI=",
          "commit": {
            "abbreviatedOid": "28431f9"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-19T09:06:34Z",
          "updatedAt": "2017-07-19T09:06:41Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "@vasilvv can you make clear that you just mean fall back to 1-RTT",
              "createdAt": "2017-07-19T09:06:34Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTAyNjg=",
          "commit": {
            "abbreviatedOid": "28431f9"
          },
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-19T21:43:35Z",
          "updatedAt": "2017-07-19T21:44:53Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "This really is a very nitty nit but you write \"only once\" here, but then \"at most once\" a short while later. I'd use the latter \"at most once\" in both places for consistency and pedantic precision. ",
              "createdAt": "2017-07-19T21:43:35Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNjg1NDI=",
          "commit": {
            "abbreviatedOid": "28431f9"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I agree with the other comments raised, but the general sense of this addresses my WGLC comment about having a MUST-level requirement for for some small bound on the number of replays accepted.",
          "createdAt": "2017-07-19T23:25:31Z",
          "updatedAt": "2017-07-19T23:32:03Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Do we prefer \"0-RTT\" or \"0-RTT data\"?",
              "createdAt": "2017-07-19T23:25:31Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyOTAwMDI=",
          "commit": {
            "abbreviatedOid": "28431f9"
          },
          "author": "vasilvv",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-20T18:26:11Z",
          "updatedAt": "2017-07-20T18:26:11Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I've attempted to clarify this.\r\n\r\nI don't remember, did we ever decide on whether servers can send fatal alerts on replays?",
              "createdAt": "2017-07-20T18:26:11Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyOTA4Njk=",
          "commit": {
            "abbreviatedOid": "28431f9"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-20T18:29:30Z",
          "updatedAt": "2017-07-20T18:29:30Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "They can, or they can reject 0-RTT and continue as for 1-RTT, and we don't give guidance as to when one is better than the other.  (Section 8.2 third paragraph, so specific to ClientHello recording. Stateful session caches would not necessarily detect the replay but would force a full handshake.)",
              "createdAt": "2017-07-20T18:29:30Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyOTEyNjQ=",
          "commit": {
            "abbreviatedOid": "28431f9"
          },
          "author": "vasilvv",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-20T18:30:54Z",
          "updatedAt": "2017-07-20T18:30:55Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I don't want to write \"0-RTT data\", because this could imply, for instance, that a server could implement a strike register keyed on the 0-RTT payload.",
              "createdAt": "2017-07-20T18:30:55Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMzNzM3MDg=",
          "commit": {
            "abbreviatedOid": "614c2b7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-09-18T14:38:59Z",
          "updatedAt": "2017-09-18T14:39:00Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "s/to provide a guarantee/to guarantee/",
              "createdAt": "2017-09-18T14:38:59Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMzNzM4MzU=",
          "commit": {
            "abbreviatedOid": "614c2b7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-09-18T14:39:20Z",
          "updatedAt": "2017-09-18T14:39:20Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "s/that the 0-RTT/that 0-RTT data/",
              "createdAt": "2017-09-18T14:39:20Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMzNzM5NDk=",
          "commit": {
            "abbreviatedOid": "614c2b7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-09-18T14:39:37Z",
          "updatedAt": "2017-09-18T14:39:37Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Remove comma after \"safety.\"",
              "createdAt": "2017-09-18T14:39:37Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMzNzQxMjA=",
          "commit": {
            "abbreviatedOid": "614c2b7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-09-18T14:40:03Z",
          "updatedAt": "2017-09-18T14:40:04Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "s/maintain the state/maintain state/",
              "createdAt": "2017-09-18T14:40:03Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMzNzQ1OTM=",
          "commit": {
            "abbreviatedOid": "614c2b7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-09-18T14:41:22Z",
          "updatedAt": "2017-09-18T14:41:22Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "s/providing a guarantee that/ensuring/",
              "createdAt": "2017-09-18T14:41:22Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjMzNzQ5MzE=",
          "commit": {
            "abbreviatedOid": "614c2b7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-09-18T14:42:17Z",
          "updatedAt": "2017-09-18T14:42:17Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Remove \"when feasible\"?",
              "createdAt": "2017-09-18T14:42:17Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM0MTE3NjI=",
          "commit": {
            "abbreviatedOid": "614c2b7"
          },
          "author": "colmmacc",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-09-18T16:34:42Z",
          "updatedAt": "2017-09-18T16:34:43Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "We've been careful to say \"at most once\" elsewhere, which is more correct. ",
              "createdAt": "2017-09-18T16:34:42Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM1MjEyMDQ=",
          "commit": {
            "abbreviatedOid": "614c2b7"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-09-18T23:59:53Z",
          "updatedAt": "2017-09-18T23:59:53Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I would prefer \"that the 0-RTT data\", using the definitive article to bind the text to a specific instance of 0-RTT data.",
              "createdAt": "2017-09-18T23:59:53Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM1NDIzMzc=",
          "commit": {
            "abbreviatedOid": "614c2b7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-09-19T03:25:53Z",
          "updatedAt": "2017-09-19T03:25:53Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "It can go either way, I suppose.",
              "createdAt": "2017-09-19T03:25:53Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ2ODM1Njg=",
          "commit": {
            "abbreviatedOid": "0205d3c"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "There are some nits noted inline (by me and others), but those are subject to editorial discretion, so I will mark my overall approval.",
          "createdAt": "2017-09-22T19:57:26Z",
          "updatedAt": "2017-09-22T20:00:00Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "\"Such a guarantee\"",
              "createdAt": "2017-09-22T19:57:26Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            },
            {
              "originalPosition": 11,
              "body": "(I'd leave this one to editorial discretion.)",
              "createdAt": "2017-09-22T19:59:06Z",
              "updatedAt": "2017-10-05T07:56:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1061,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMxODIzMTU2",
      "title": "Be more explicit about PSK requirements",
      "url": "https://github.com/tlswg/tls13-spec/pull/1061",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Both for 0-RTT and 1-RTT.\r\n\r\nGive NST- and externally-provisioned PSKs more uniform treatment.\r\n\r\nCloses: #1040\r\nCloses: #1043",
      "createdAt": "2017-07-21T17:36:46Z",
      "updatedAt": "2017-11-13T22:05:52Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2ee923289f43fd2315fdbd992a02e3ee712eb608",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "matt",
      "headRefOid": "2a17c1895d69aa00cf29b4fa6d52b3506bb11a0b",
      "closedAt": "2017-11-13T22:05:52Z",
      "mergedAt": "2017-11-13T22:05:52Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "215a30328a6d6d46615d0b2eefc13b0986db96c5"
      },
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr ping?  It would be good to get some resolution in this space, as it's somewhat relevant to https://github.com/openssl/openssl/pull/3926",
          "createdAt": "2017-08-18T16:02:24Z",
          "updatedAt": "2017-08-18T16:02:24Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I guess we could perhaps recommend that external PSKs not be provisioned with a SNI value, since the PSK value itself ought to serve as enough of a lookup key for what the intended communication semantics are.",
          "createdAt": "2017-08-18T16:14:43Z",
          "updatedAt": "2017-08-18T16:14:43Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr is there a path forward for this (e.g., does it need to go to the list)?",
          "createdAt": "2017-10-09T15:18:25Z",
          "updatedAt": "2017-10-09T15:18:25Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk: I think this is generally good except for the SNI stuff which conflicts with PR #1080, which we also need to resolve one way or another. What say we land this without those pieces and then when we resolve #1080, we will know what to do",
          "createdAt": "2017-10-27T21:23:49Z",
          "updatedAt": "2017-10-27T21:23:49Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": ">  What say we land this without those pieces and then when we resolve #1080, we will know what to do\r\n\r\nSGTM.  Do you need me to adjust the patch?",
          "createdAt": "2017-10-27T21:28:30Z",
          "updatedAt": "2017-10-27T21:28:30Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Nah, I'll do it.",
          "createdAt": "2017-10-27T21:33:03Z",
          "updatedAt": "2017-10-27T21:33:03Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "These actually just seem to make the SNI requirements clearer but no sharper, so merging.",
          "createdAt": "2017-10-30T13:06:36Z",
          "updatedAt": "2017-10-30T13:06:36Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MzQ2MzI=",
          "commit": {
            "abbreviatedOid": "fc68585"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-07-25T00:34:31Z",
          "updatedAt": "2017-07-25T00:38:34Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "list construction: remove the period",
              "createdAt": "2017-07-25T00:34:31Z",
              "updatedAt": "2017-07-25T13:27:15Z"
            },
            {
              "originalPosition": 66,
              "body": "extra line",
              "createdAt": "2017-07-25T00:35:32Z",
              "updatedAt": "2017-07-25T13:27:15Z"
            },
            {
              "originalPosition": 27,
              "body": "I would move the text on external vs. ticket after the list so that you can use a colon.  e.g.,\r\n\r\n```\r\nIn addition, it MUST verify that\r\nthe following values are consistent with those associated with the selected\r\nPSK:\r\n\r\n- ...\r\n\r\nThese requirements are a superset of those needed to perform a 1-RTT\r\nhandshake using the PSK in question.  For externally established PSKs,\r\nthe associated values are those provisioned along with the key.  For\r\nPSKs established via a NewSessionTicket message, the associated\r\nvalues are those negotiated in the connection during which the ticket\r\nwas established.\r\n```",
              "createdAt": "2017-07-25T00:38:25Z",
              "updatedAt": "2017-07-25T13:27:15Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1063,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMyNTczOTEy",
      "title": "Use the enum value.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1063",
      "state": "CLOSED",
      "author": "stevecheckoway",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-07-26T17:43:49Z",
      "updatedAt": "2017-11-24T18:28:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2ee923289f43fd2315fdbd992a02e3ee712eb608",
      "headRepository": "stevecheckoway/tls13-spec",
      "headRefName": "fix_application_data",
      "headRefOid": "586e1bd4cb802fba3a8084890ab8bf071ddc34a1",
      "closedAt": "2017-11-24T18:28:56Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Why?",
          "createdAt": "2017-07-26T17:58:13Z",
          "updatedAt": "2017-07-26T17:58:13Z"
        },
        {
          "author": "stevecheckoway",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Because the description language says you can assign enumerated elements to enumerated types. It does not say you can assign integers.\r\n\r\nFrom Section 3.5.\r\n\r\n```\r\n      Color color = Color.blue;     /* overspecified, legal */\r\n      Color color = blue;           /* correct, type implicit */\r\n```",
          "createdAt": "2017-07-26T18:08:11Z",
          "updatedAt": "2017-07-26T18:08:11Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@stevecheckoway : this doesn't seem to solve the problem because the next line is an integer assignment and we don't want to assign a code point for that, so I think we should probably adjust the language.",
          "createdAt": "2017-07-29T18:50:58Z",
          "updatedAt": "2017-07-29T18:50:58Z"
        },
        {
          "author": "stevecheckoway",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Adjusting the language is certainly doable, but I don't think `ProtocolVersion` is an issue since it's not an enumerated type, but a `uint16`.",
          "createdAt": "2017-07-29T20:38:04Z",
          "updatedAt": "2017-07-29T20:38:04Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1064,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMyNTc5Mjc5",
      "title": "Allow vector fields in structures.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1064",
      "state": "MERGED",
      "author": "stevecheckoway",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Be explicit that vectors are allowed in structures.",
      "createdAt": "2017-07-26T18:10:45Z",
      "updatedAt": "2017-07-30T20:00:44Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2ee923289f43fd2315fdbd992a02e3ee712eb608",
      "headRepository": "stevecheckoway/tls13-spec",
      "headRefName": "vectors_in_structs",
      "headRefOid": "97d4a00f31da562a335a0f891ba2b2321dbbbc5f",
      "closedAt": "2017-07-29T18:51:22Z",
      "mergedAt": "2017-07-29T18:51:22Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "09292a28f6387bcfccb2823e798c517fa2185513"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1065,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMyNTgwODc3",
      "title": "Remove embedded and anonymous structs.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1065",
      "state": "MERGED",
      "author": "stevecheckoway",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We never need embedded nor anonymous structs, so remove them from the\r\npresentation language.",
      "createdAt": "2017-07-26T18:18:40Z",
      "updatedAt": "2017-07-30T20:00:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2ee923289f43fd2315fdbd992a02e3ee712eb608",
      "headRepository": "stevecheckoway/tls13-spec",
      "headRefName": "no_anonymous_structs",
      "headRefOid": "bec60285c6714b66bf61d080db88e1ebff89b6c8",
      "closedAt": "2017-07-29T18:52:21Z",
      "mergedAt": "2017-07-29T18:52:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3fa5de1f6b411367171d530ad5b2b1e63101f9a4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1066,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMyNTg3NDY0",
      "title": "Give each select arm an optional field label.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1066",
      "state": "CLOSED",
      "author": "stevecheckoway",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Each select arm consists of a single type with an optional field label\r\n(for non-vector types).\r\n\r\n    select (E) {\r\n        case e1: Te1 [[fe1]];\r\n        case e2: Te2 [[fe2];\r\n        ....\r\n        case en: Ten [[fen]];\r\n    };\r\n\r\nPreSharedKeyExtension had an arm with two fields, a new structure,\r\nOfferedPsks` was created to hold it. This is purely a notational change.",
      "createdAt": "2017-07-26T18:51:10Z",
      "updatedAt": "2017-07-30T20:01:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2ee923289f43fd2315fdbd992a02e3ee712eb608",
      "headRepository": "stevecheckoway/tls13-spec",
      "headRefName": "optional_select_label",
      "headRefOid": "f491e394b38c554ace8995c6ccfb4346a069367d",
      "closedAt": "2017-07-29T19:51:46Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand",
          "createdAt": "2017-07-29T19:51:46Z",
          "updatedAt": "2017-07-29T19:51:46Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1067,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMyNTg4OTQ5",
      "title": "Specify type aliases.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1067",
      "state": "MERGED",
      "author": "stevecheckoway",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Now `uint16 ProtocolVersion;` is defined by the presentation language.",
      "createdAt": "2017-07-26T18:58:16Z",
      "updatedAt": "2017-07-30T20:00:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2ee923289f43fd2315fdbd992a02e3ee712eb608",
      "headRepository": "stevecheckoway/tls13-spec",
      "headRefName": "type_alias",
      "headRefOid": "4cb4d69b58c4bcc85cf0f1e1b745ad7dd164692f",
      "closedAt": "2017-07-29T18:53:04Z",
      "mergedAt": "2017-07-29T18:53:04Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5d88e2df0310429c8d9f95744ffc6bc0e4c013a5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1068,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMyNjM1NjE2",
      "title": "changes from list thread about 32 random bytes",
      "url": "https://github.com/tlswg/tls13-spec/pull/1068",
      "state": "CLOSED",
      "author": "sftcd",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-07-26T23:22:16Z",
      "updatedAt": "2017-07-27T22:32:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2ee923289f43fd2315fdbd992a02e3ee712eb608",
      "headRepository": "sftcd/tls13-spec",
      "headRefName": "master",
      "headRefOid": "2c31caa5fe8548c4b3986672f7db89466d531c93",
      "closedAt": "2017-07-27T22:32:41Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MzM2OTE=",
          "commit": {
            "abbreviatedOid": "2c31caa"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I think that this is a little overdone.  The basic introduction is good: it points out that there are problems.  But I would end the advice at the point about separating public and private values.\r\n\r\nIn the end, this is just an elaborate way of designing protection against something that you should trust.  For instance, if you think that a keyed PRF with a secret input is useful, why not add that to the PRNG?",
          "createdAt": "2017-07-27T00:40:28Z",
          "updatedAt": "2017-07-27T00:46:47Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "typo: cryptographic",
              "createdAt": "2017-07-27T00:40:28Z",
              "updatedAt": "2017-07-27T00:46:47Z"
            },
            {
              "originalPosition": 8,
              "body": "You need to create a citation here or this will fail.  `{{?CHECKOWAY=DOI.10.1145/2976749.2978395}}` should do the trick.",
              "createdAt": "2017-07-27T00:42:16Z",
              "updatedAt": "2017-07-27T00:46:47Z"
            },
            {
              "originalPosition": 12,
              "body": "s/streams of random numbers/random number generator instances/ ?",
              "createdAt": "2017-07-27T00:42:45Z",
              "updatedAt": "2017-07-27T00:46:47Z"
            },
            {
              "originalPosition": 15,
              "body": "type: advantage",
              "createdAt": "2017-07-27T00:42:56Z",
              "updatedAt": "2017-07-27T00:46:47Z"
            },
            {
              "originalPosition": 26,
              "body": "typo: different",
              "createdAt": "2017-07-27T00:43:50Z",
              "updatedAt": "2017-07-27T00:46:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2ODgyNTc=",
          "commit": {
            "abbreviatedOid": "2c31caa"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-07-27T15:11:04Z",
          "updatedAt": "2017-07-27T15:11:05Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "'of' should be outside the parens.",
              "createdAt": "2017-07-27T15:11:04Z",
              "updatedAt": "2017-07-27T15:11:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1069,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMyOTUzNTcy",
      "title": "Reserve NamedGroup(0)",
      "url": "https://github.com/tlswg/tls13-spec/pull/1069",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See https://github.com/tlswg/draft-ietf-tls-iana-registry-updates/pull/26",
      "createdAt": "2017-07-28T11:57:42Z",
      "updatedAt": "2017-07-29T18:52:49Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "465de0e189b2b59090d0eac0acbc42942af9ca77",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "group0",
      "headRefOid": "2f099d4e75575cdc5fa57b6174c392ebdba99e22",
      "closedAt": "2017-07-29T18:52:49Z",
      "mergedAt": "2017-07-29T18:52:49Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c0b7048d4ab878b5e9b3719e8121d4d7ad63ba69"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MTE0NzU=",
          "commit": {
            "abbreviatedOid": "2f099d4"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-07-28T11:58:48Z",
          "updatedAt": "2017-07-28T11:58:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1070,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMzMDE2OTc1",
      "title": "Use /* comments */ rather than //",
      "url": "https://github.com/tlswg/tls13-spec/pull/1070",
      "state": "MERGED",
      "author": "stevecheckoway",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The presentation language only specifies `/* ... */` as a comment. It\r\ndoesn't really apply to the `Transcript-Hash`, but it seems good to be\r\nconsistent.",
      "createdAt": "2017-07-28T17:33:54Z",
      "updatedAt": "2017-07-30T20:01:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "465de0e189b2b59090d0eac0acbc42942af9ca77",
      "headRepository": "stevecheckoway/tls13-spec",
      "headRefName": "fix-comment",
      "headRefOid": "531a9e8a37687e9d0f3d6fc4f24438e151c6a3eb",
      "closedAt": "2017-07-29T18:54:15Z",
      "mergedAt": "2017-07-29T18:54:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "985b2fdf5285361fb27f919bbaf8e671d173fe20"
      },
      "comments": [
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd prefer to go the other way; describe and only use // comments.\r\n",
          "createdAt": "2017-07-28T17:39:14Z",
          "updatedAt": "2017-07-28T17:39:14Z"
        },
        {
          "author": "stevecheckoway",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have no problem with that. I don't think multiline comments are used anywhere. This was simply the minimal change.",
          "createdAt": "2017-07-28T17:44:19Z",
          "updatedAt": "2017-07-28T17:44:39Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd prefer to stay consistent with the previous syntax.",
          "createdAt": "2017-07-29T18:54:00Z",
          "updatedAt": "2017-07-29T18:54:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1071,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMzMDY0MjU0",
      "title": "Normalize spacing and add missing struct to B.3.1",
      "url": "https://github.com/tlswg/tls13-spec/pull/1071",
      "state": "MERGED",
      "author": "stevecheckoway",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix the spacing in `UncompressedPointRepresentation` and add it to\r\nAppendix B.3.1.\r\n\r\nAdd missing space in `select (...){`.",
      "createdAt": "2017-07-28T22:41:54Z",
      "updatedAt": "2017-07-30T20:01:09Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "465de0e189b2b59090d0eac0acbc42942af9ca77",
      "headRepository": "stevecheckoway/tls13-spec",
      "headRefName": "add_to_appendix",
      "headRefOid": "77830242829e4d711fa7ece4251d4e1e1f4e0350",
      "closedAt": "2017-07-29T18:53:31Z",
      "mergedAt": "2017-07-29T18:53:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "8e4f499b2efd3e26bb80e661688d1efb9bfb49e5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1072,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMzNzMzNDIx",
      "title": "Be consistent with other structs.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1072",
      "state": "MERGED",
      "author": "stevecheckoway",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-08-02T15:06:35Z",
      "updatedAt": "2017-10-27T21:33:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "dfab83da94ab639141804624c76488dd9e544b48",
      "headRepository": "stevecheckoway/tls13-spec",
      "headRefName": "tlsciphertext_length",
      "headRefOid": "3903f27fb4e48e12fc7f9e409c6d5a00175e00ee",
      "closedAt": "2017-10-27T21:33:47Z",
      "mergedAt": "2017-10-27T21:33:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b23ef183619a4ff6a45bd121d396e38d03cba3e0"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1073,
      "id": "MDExOlB1bGxSZXF1ZXN0MTM1ODAwMzQy",
      "title": "How to handle padding so that TLS implementation is constant time",
      "url": "https://github.com/tlswg/tls13-spec/pull/1073",
      "state": "CLOSED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "add information on handling the padding in constant time",
      "createdAt": "2017-08-15T13:27:30Z",
      "updatedAt": "2017-08-15T17:41:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "dfab83da94ab639141804624c76488dd9e544b48",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "ct-padding",
      "headRefOid": "ca5a1bb8d3aec04cae527aee4bff4d5a1d4b809f",
      "closedAt": "2017-08-15T17:41:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it would be fine to sharpen the point about padding leaking information and I'd take a short PR for that.  I don't believe it's necessary either to require that it be constant time (for the reasons I indicated on-list and already documented in the spec) or to describe a specific algorithm, especially at this point on the document life cycle.\r\n",
          "createdAt": "2017-08-15T15:07:25Z",
          "updatedAt": "2017-08-15T15:07:25Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "obsoleted by #1074 ",
          "createdAt": "2017-08-15T17:41:37Z",
          "updatedAt": "2017-08-15T17:41:37Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1074,
      "id": "MDExOlB1bGxSZXF1ZXN0MTM1ODUyMTc4",
      "title": "Point out more clearly the limitations of the padding mechanism",
      "url": "https://github.com/tlswg/tls13-spec/pull/1074",
      "state": "CLOSED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Implementations should be explicit in their guarantees about constant time processing.\r\nPoint out most obvious implementation pitfalls of constant time processing of padding.",
      "createdAt": "2017-08-15T17:41:14Z",
      "updatedAt": "2017-11-24T18:39:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b2f17559c8dba645874dbe73018833bdaf01a509",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "ct-padding-2",
      "headRefOid": "b9577565d499c0fc29e9d083e4b5fc785cd9fa53",
      "closedAt": "2017-11-24T18:39:15Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0OTA0MzY=",
          "commit": {
            "abbreviatedOid": "0ca7af1"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-08-15T22:41:26Z",
          "updatedAt": "2017-08-15T22:41:26Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "I think this needs to be \"A fully constant time\" to be grammatical.",
              "createdAt": "2017-08-15T22:41:26Z",
              "updatedAt": "2017-10-04T16:39:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1ODk1OTU=",
          "commit": {
            "abbreviatedOid": "0ca7af1"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-08-16T10:33:59Z",
          "updatedAt": "2017-08-16T10:33:59Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "yes, that does sound better, fixed",
              "createdAt": "2017-08-16T10:33:59Z",
              "updatedAt": "2017-10-04T16:39:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcwMzgzMzU=",
          "commit": {
            "abbreviatedOid": "7f7b1ae"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-10-04T11:54:51Z",
          "updatedAt": "2017-10-04T11:55:43Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "typo: \"implemen<b>t</b>ation\"",
              "createdAt": "2017-10-04T11:54:51Z",
              "updatedAt": "2017-10-04T16:39:36Z"
            },
            {
              "originalPosition": 26,
              "body": "typo: \"add<del>d</del>ed\"",
              "createdAt": "2017-10-04T11:55:01Z",
              "updatedAt": "2017-10-04T16:39:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcxMjkxODI=",
          "commit": {
            "abbreviatedOid": "7f7b1ae"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-10-04T16:39:46Z",
          "updatedAt": "2017-10-04T16:39:46Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "thanks, fixed",
              "createdAt": "2017-10-04T16:39:46Z",
              "updatedAt": "2017-10-04T16:39:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcxMjkyMjQ=",
          "commit": {
            "abbreviatedOid": "7f7b1ae"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-10-04T16:39:56Z",
          "updatedAt": "2017-10-04T16:39:56Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "thanks, fixed",
              "createdAt": "2017-10-04T16:39:56Z",
              "updatedAt": "2017-10-04T16:39:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1075,
      "id": "MDExOlB1bGxSZXF1ZXN0MTM2MDA1NDg3",
      "title": "Make the deprecation of status_request_v2 extension more explicit",
      "url": "https://github.com/tlswg/tls13-spec/pull/1075",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-08-16T11:54:17Z",
      "updatedAt": "2017-11-03T11:35:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "dfab83da94ab639141804624c76488dd9e544b48",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "ocsp-status-request-v2",
      "headRefOid": "ae989450fc9b94e144b4189a618f60097ffc2e1e",
      "closedAt": "2017-10-27T19:48:58Z",
      "mergedAt": "2017-10-27T19:48:58Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5dbee4136b5b932598f6bbc2870fa8d18117d3fe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MTk3MDE=",
          "commit": {
            "abbreviatedOid": "4a5ecaf"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-08-16T12:55:33Z",
          "updatedAt": "2017-08-16T12:55:33Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I think a \"the\" is needed as \"the status_request_v2 extension\".",
              "createdAt": "2017-08-16T12:55:33Z",
              "updatedAt": "2017-08-17T10:37:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgwNjcyOTU=",
          "commit": {
            "abbreviatedOid": "4a5ecaf"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-08-23T12:48:38Z",
          "updatedAt": "2017-08-23T12:48:39Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "that should be fixed now",
              "createdAt": "2017-08-23T12:48:38Z",
              "updatedAt": "2017-08-23T12:48:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1076,
      "id": "MDExOlB1bGxSZXF1ZXN0MTM4MTk2MzI3",
      "title": "Updating second ClientHello based on HelloRetryRequest",
      "url": "https://github.com/tlswg/tls13-spec/pull/1076",
      "state": "CLOSED",
      "author": "dcooper16",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 4.1.2 lists the specific items that may be changed when sending a second ClientHello in response to a HelloRetryRequest. Since the HelloRetryRequest specifies a server_version and cipher_suite, then it seems that there is no reason for the second ClientHello to offer any version or cipher suite other than the ones in the HelloRetryRequest.",
      "createdAt": "2017-08-29T14:28:14Z",
      "updatedAt": "2017-08-29T16:23:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "dfab83da94ab639141804624c76488dd9e544b48",
      "headRepository": null,
      "headRefName": "HRR",
      "headRefOid": "96e72e70ebe6e3b5ca3f232a07aee0a88e0077a0",
      "closedAt": "2017-08-29T16:23:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We explicitly decided very early that we weren't going to do this, and in any case, I think it's way too late to change it now. Feel free to try to get consensus on the list, but for now I'm closing this.",
          "createdAt": "2017-08-29T16:23:37Z",
          "updatedAt": "2017-08-29T16:23:37Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1078,
      "id": "MDExOlB1bGxSZXF1ZXN0MTM5MDY2NTgz",
      "title": "Fix reference",
      "url": "https://github.com/tlswg/tls13-spec/pull/1078",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Including the first name of the author in \"ins\" causes xml2rfc to produce junk.",
      "createdAt": "2017-09-03T23:51:40Z",
      "updatedAt": "2017-09-03T23:54:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "dfab83da94ab639141804624c76488dd9e544b48",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "fix-ref",
      "headRefOid": "03851676f5ad0fc39b09599b88c17e717f2c5569",
      "closedAt": "2017-09-03T23:54:27Z",
      "mergedAt": "2017-09-03T23:54:27Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b2f17559c8dba645874dbe73018833bdaf01a509"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1080,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQwOTA0OTU3",
      "title": "Allow resumption across multiple domains",
      "url": "https://github.com/tlswg/tls13-spec/pull/1080",
      "state": "MERGED",
      "author": "vasilvv",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There is no reason from cryptographical point of view to not resume\r\nacross multiple domains.  The primary concern comes from\r\ninteroperability concerns and potential waste of tickets, hence the\r\ndefault should be to not resume.",
      "createdAt": "2017-09-13T19:03:26Z",
      "updatedAt": "2017-11-25T17:39:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3bff3580b5ba81878dff4920fb66d04406f8c437",
      "headRepository": "vasilvv/tls13-spec",
      "headRefName": "sni-resumption",
      "headRefOid": "7699a1daeee0dadd724e131961375e01d7f90c91",
      "closedAt": "2017-11-16T23:06:41Z",
      "mergedAt": "2017-11-16T23:06:41Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7699a1daeee0dadd724e131961375e01d7f90c91"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@vasilvv This looks plausible. Can you please email the list?",
          "createdAt": "2017-09-13T20:10:02Z",
          "updatedAt": "2017-09-13T20:10:02Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's perhaps more text than is needed to convey the point, but I do not object to the change itself.\r\nIt may be worth explicitly calling out the divergence from RFC 6066, though.\r\n(Also, I note that we require external PSKs to be provisioned with SNI for use with 0-RTT, though there does not seem to be a corresponding change needed to that text.)",
          "createdAt": "2017-09-14T01:02:00Z",
          "updatedAt": "2017-09-14T01:02:00Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm fine with this as long as it does not create new security problems. My sense is that this is no worse than the current situation, because the client only will do this if the server has shared certs, which is one of the cases where caution is already required based on http://antoine.delignat-lavaud.fr/doc/www15.pdf\r\n\r\n@adl, @prosecco, could you weigh in?",
          "createdAt": "2017-10-11T19:47:21Z",
          "updatedAt": "2017-10-11T19:47:21Z"
        },
        {
          "author": "ad-l",
          "authorAssociation": "NONE",
          "body": "@ekr Enabling cross-domain resumption unconditionally is still a dodgy idea for the same reasons that it was back in 2015. The main issue is that it introduces a discrepancy between the application-level security policy (which is still mostly origin based for HTTP) and the transport-level guarantees when applied to the full certificate rather than only the SNI of the connection.\r\n\r\nTo summarize the WWW'15 paper, the key observation is that it is actually very common in practice for origins with different application-level security policies to appear in the same certificate. The top 2 reasons why this happens is 1. wildcard/SAN certificates 2. CDN and other name-based cloud hosting. The later is particularly bad, because it means an attacker may be able to get his website to appear in the same certificate as an honest website it tries to attack - such an attacker becomes incredibly powerful in particular if a multi-stream application protocol such as HTTP/2, or QUIC is used for stream multiplexing above encryption (I don't believe any of the published theorems on TLS or QUIC security provide any security against this attacker) - for instance, CRIME-like attacks may become possible again.\r\n\r\nThe main way to exploit such discrepancies that I know of relies on the fact that most HTTP requests fallback to the default virtual host if the \"Host\" header of the request does not match any configured VH. Since it is commonly the case that separate servers/virtual machines are used for the different names in a certificate (or subdomains with wildcard), redirecting requests from one server to another causes pages to be loaded under the wrong origin. This lets you \"port\" web vulnerabilities (or lack of strong security, e.g. CSP/HSTS) from one domain to the other. I have tried to convince webserver developers such as apache and nginx that this behavior is too dangerous but since then given up on trying to remove this fallback-to-default mechanism (it simply breaks too much of the Web). I don't know whether current implementations of HTTP/2 still have this behavior - if they do, I think it is too much of a risk to allow cross-domain resumption unless it is explicitly enabled. If they don't, I suggest that this feature is only made available if the negotiated ALPN is NOT http/1.1 or older.\r\n\r\nIn addition, it is worth noting that cross-domain, same-certificate sharing breaks many proposed or deployed transport-level security mechanisms, including HSTS (see the paper for attack example), but also Token Binding/Channel ID (for instance, this may allow a network+web attacker to force Token-bound cookies on a website for which it shares a certificate).",
          "createdAt": "2017-10-12T09:12:24Z",
          "updatedAt": "2017-10-12T09:12:24Z"
        },
        {
          "author": "vasilvv",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ad-l Don't most of the arguments against cross-domain resumption apply to HTTP2/QUIC connection pooling too?   I agree that pooling has some tricky edge cases, but it's been already deployed as a part of HTTP/2, so I think we're currently headed in the direction of working out those cases rather than backing away from the idea altogether.\r\n\r\nCross-domain resumption is just extension of cross-domain pooling for cases where the server IP does not match (and that should not matter from the cryptographic security perspective, since DNS is not cryptographically verified anyways).  The main source of confusion I am afraid of is when the server starts using SNI from the session cache and ends up using it instead of the new SNI -- which is a problem easily solved by not storing the SNI in it ( @ekr -- should I just ban that explicitly? )\r\n\r\nI am somewhat confused by what you mean when you say those things break HSTS and tokbind.  The only attack against HSTS that I see in the paper is the one in section 2 -- and it depends on attacker's ability to send arbitrary headers from the victim domain's origin.  I am not sure how pooling or cross-resumption applies here.  Tokbind also should not be problematic -- as long as the entity with the certificate determines backends correctly and routes request to them, all of the requests can only arrive to the respective backends (also, I should note here that the TLS server in fact *has* to handle tokbind identification here, since the backends do not have access to the TLS exporter of the session).\r\n\r\nClient certificates are somewhat tricky -- I can imagine some legitimate cases where you'd want to cross-resume with them, but overall they are more problematic than useful for both pooling and cross-resumption scenarios.  I think I'll just edit the PR and ban cross-resuming if client has presented a cert.",
          "createdAt": "2017-10-12T20:07:44Z",
          "updatedAt": "2017-10-12T20:07:44Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ad-l, any response to @vasilvv ?",
          "createdAt": "2017-10-27T19:48:03Z",
          "updatedAt": "2017-10-27T19:48:03Z"
        },
        {
          "author": "grittygrease",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I personally think this is a good idea. It especially makes sense in the HTTP/2 case if the server has advertised explicit support for the new domain with an ORIGIN frame and the previous connection included the domain in its trust set.",
          "createdAt": "2017-11-01T19:51:01Z",
          "updatedAt": "2017-11-01T19:51:01Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Per WG meeting, I think we should add the following text:\r\n\r\n> On resumption, if reporting an SNI value to the calling application, implementations MUST use the value sent in the resumption ClientHello rather than the value sent in the previous session. Note that if a server implementation declines all PSK identities with different SNI values, these two values are always the same.\r\n\r\nThis matters if the server believes SNI is a per-session property rather than per-connection and does not check equality with the resumption ClientHello value. I know of one popular TLS 1.2 implementation which does this, which is why we can't unilaterally offer cross-name resumptions in TLS 1.2. today. I.e. the client SHOULD needs to be a client MUST in TLS 1.2.\r\n\r\nOtherwise, I think this is a good idea. There are clear benefits to cross-name resumption in some scenarios (same benefits as HTTP/2 cross-name pooling). But we should call this out so that implementations which got it wrong in TLS 1.2 don't continue to get it wrong in TLS 1.3 and mess this up.",
          "createdAt": "2017-11-16T02:58:16Z",
          "updatedAt": "2017-11-16T06:19:06Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@vasilvv sorry to bother you but could you please rebase this on top of master. that we we know the merge is the way you want it.",
          "createdAt": "2017-11-16T22:52:12Z",
          "updatedAt": "2017-11-16T22:52:12Z"
        },
        {
          "author": "vasilvv",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've reconciled this with changes made in #1061, so that we're consistent on SNI being per-connection value.  I've added some extra descriptive text explicitly calling this out as a change.\r\n\r\ncc @kaduk ",
          "createdAt": "2017-11-16T23:01:13Z",
          "updatedAt": "2017-11-16T23:01:13Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(I am leaving for the airport now and may not get to look until I'm back in the US)",
          "createdAt": "2017-11-16T23:05:05Z",
          "updatedAt": "2017-11-16T23:05:05Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we probably want to put back some form of:\r\n\r\n```\r\n-Clients SHOULD attempt to use each ticket no more than once, with \r\n-more recent tickets being used first.\r\n```",
          "createdAt": "2017-11-21T01:06:35Z",
          "updatedAt": "2017-11-21T01:06:35Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk this is already part of the \"Client Tracking Prevention\" section in \"Implementation Notes\"\r\n\r\nyou think it should be restated in the \"New Session Ticket Message\" section?",
          "createdAt": "2017-11-24T14:27:58Z",
          "updatedAt": "2017-11-24T14:27:58Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Maybe a reference to the \"Client Tracking Prevention\" section would suffice; I'll put together a PR.",
          "createdAt": "2017-11-25T17:39:54Z",
          "updatedAt": "2017-11-25T17:39:54Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1082,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQzOTEyODgw",
      "title": "Refer to this document as opposed to 5246 for signature_algorithms",
      "url": "https://github.com/tlswg/tls13-spec/pull/1082",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #1081. ",
      "createdAt": "2017-09-29T15:13:53Z",
      "updatedAt": "2017-10-06T00:54:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b2f17559c8dba645874dbe73018833bdaf01a509",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "fix_ref",
      "headRefOid": "a6f48c732d20b3de0f37f41cb7c27dea526a24b9",
      "closedAt": "2017-10-06T00:54:34Z",
      "mergedAt": "2017-10-06T00:54:34Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4234d382b3a96c0e26eb2f56811ce0c33a0215b6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1083,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ0NTc1MjY3",
      "title": "Fix TLSInnerPlaintext limit",
      "url": "https://github.com/tlswg/tls13-spec/pull/1083",
      "state": "MERGED",
      "author": "Lekensteyn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The TLSPlaintext size is at most 2^14, so the TLSInnerPlaintext must be\r\nat least one more to fit the content type. This matches with the end of\r\nthe record payload protection section.",
      "createdAt": "2017-10-04T03:25:39Z",
      "updatedAt": "2017-11-13T21:57:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b2f17559c8dba645874dbe73018833bdaf01a509",
      "headRepository": "Lekensteyn/tls13-spec",
      "headRefName": "fix-tlsinnerplaintext",
      "headRefOid": "552a062069725725d88958bda5ec45bac3e091a0",
      "closedAt": "2017-11-13T21:57:22Z",
      "mergedAt": "2017-11-13T21:57:22Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f7108aa3dd0a6bcfbd36345dd1b277122699758a"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Nice catch! We also misread that and applied the check to the wrong end to begin with, but the +1 seems a good idea anyway. Just seems generally simpler if TLS 1.3 doesn't have a pesky version-specific -1 in figuring out how much data can fit in an outgoing record.",
          "createdAt": "2017-10-04T04:56:19Z",
          "updatedAt": "2017-10-04T04:56:19Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Would be nice to have a new test in bogo that checks for rejection of TLSPlaintext having a size of 2^14+2 (or 2^14+1 in case of TLS 1.2).",
          "createdAt": "2017-10-04T15:04:35Z",
          "updatedAt": "2017-10-04T15:04:35Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yup, will certainly add a test when we fix it. (Though I'll wait for this PR to either go in or be rejected just to have a ruling on whether we should have a +1 in there.)",
          "createdAt": "2017-10-04T15:15:48Z",
          "updatedAt": "2017-10-04T15:15:48Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So, if we go with 2^14+1 for sizeof(TLSInnerPlaintext), that is fine.  That means that you can (absent padding) expect to be able to send 2^14 octets in every record, across every TLS version.\r\n\r\nThe issue that this causes is one for the record size limit draft.  The valid maximum for that will be 2^14 in TLS 1.2 and earlier, but 2^14+1 in TLS 1.3.  That's OK, but I'll need to change that draft to make that observation.  We already need to allow for larger values in case an extension expands the record size, so this will be a good test for that code.  It's also going to be lots more annoying to write the cross-checking in code, but that is just how things go.",
          "createdAt": "2017-11-01T23:07:34Z",
          "updatedAt": "2017-11-01T23:07:34Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcxMTk5MzE=",
          "commit": {
            "abbreviatedOid": "e14d154"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-10-04T16:08:29Z",
          "updatedAt": "2017-10-04T16:08:29Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcxNTc2Mjk=",
          "commit": {
            "abbreviatedOid": "e14d154"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-10-04T18:14:52Z",
          "updatedAt": "2017-10-04T18:14:52Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Should max_fragment_length also exclude the content type? It seems sort of weird that, if you previously believed max_send_fragment was 2^14, you don't need version-specific logic, but if you believed it was 2^9, 2^10, 2^11, or 2^12 by way of the extension, you need version-specific logic again.",
              "createdAt": "2017-10-04T18:14:52Z",
              "updatedAt": "2017-11-01T16:39:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcxNjc5ODM=",
          "commit": {
            "abbreviatedOid": "e14d154"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-10-04T18:46:25Z",
          "updatedAt": "2017-10-04T18:46:25Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Given the use case (constrained devices with limited memory) I think that it should include content type and padding. The limit seems to exist to reduce the memory requirement for the AEAD plaintext rather than the application data fragment.\r\n\r\nThe proposed text also matches with @martinthomson's https://tools.ietf.org/html/draft-ietf-tls-record-limit-01#section-4\r\n>   This value is the length of the plaintext of a protected record.  The\r\n>   value includes the content type and padding added in TLS 1.3 (that\r\n>   is, the complete length of TLSInnerPlaintext).",
              "createdAt": "2017-10-04T18:46:25Z",
              "updatedAt": "2017-11-01T16:39:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI2MTQ2NTI=",
          "commit": {
            "abbreviatedOid": "e14d154"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-10-27T19:58:35Z",
          "updatedAt": "2017-10-27T19:58:35Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I see the value of @davidben's point about version-specific logic, but I think the point that @Lekensteyn makes about padding is pretty persuasive. ISTM that there are two sensible resolutions here:\r\n\r\n- Move the record limit draft to talk about ciphertext, thus capping the maximum memory consumption under the theory that the worst-case is no padding. And then the plaintext limit would be \"whatever fits in here minus 256, which is our worst-case expansion overhead\"\r\n- Have this limit talk about the total size of the plaintext, including CT and padding.\r\n\r\n-Ekr\r\n\r\n",
              "createdAt": "2017-10-27T19:58:35Z",
              "updatedAt": "2017-11-01T16:39:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI2NDQyODk=",
          "commit": {
            "abbreviatedOid": "e14d154"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-10-27T22:24:55Z",
          "updatedAt": "2017-10-27T22:24:55Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I prefer the latter because it is more directly coupled to how records are produced.  \r\n\r\nI also think that padding needs to be included (or enforcing the limit risks exposing when padding is in use).  In the simple case, you can simply say that the space available for plaintext is one less than the size limit (the version specific logic is `if (tls13) --limit;`, which is manageable).\r\n\r\nTalking about ciphertext means that you have to include knowledge of the ciphersuite in your calculations.  In TLS 1.3, that's relatively simple, but for CBC modes in other versions, it's terrible.",
              "createdAt": "2017-10-27T22:24:55Z",
              "updatedAt": "2017-11-01T16:39:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMzMzY0OTE=",
          "commit": {
            "abbreviatedOid": "e14d154"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-10-31T21:56:38Z",
          "updatedAt": "2017-10-31T21:56:38Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I would also prefer the second option. The first option would \"waste\" some space by enforcing a plaintext limit equal to the worst-case overhead.",
              "createdAt": "2017-10-31T21:56:38Z",
              "updatedAt": "2017-11-01T16:39:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMzNDM3NTk=",
          "commit": {
            "abbreviatedOid": "e14d154"
          },
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-10-31T22:32:08Z",
          "updatedAt": "2017-10-31T22:32:08Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "nit: please capitalize the \"not\", per RFC 2119",
              "createdAt": "2017-10-31T22:32:08Z",
              "updatedAt": "2017-11-01T16:39:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1MzY3NTA=",
          "commit": {
            "abbreviatedOid": "e14d154"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-01T16:40:14Z",
          "updatedAt": "2017-11-01T16:40:14Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "done (+ another case)",
              "createdAt": "2017-11-01T16:40:14Z",
              "updatedAt": "2017-11-01T16:40:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzU5NDkzOTE=",
          "commit": {
            "abbreviatedOid": "552a062"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This change conflates two things: an editorial fix for \"MUST not\" instances, and the +1 tweak.  These are both OK though, and I think that this is the right answer to the problem.",
          "createdAt": "2017-11-12T05:00:52Z",
          "updatedAt": "2017-11-12T05:00:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1085,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ3Mzg3MjAw",
      "title": "Document no NUL bytes in labels",
      "url": "https://github.com/tlswg/tls13-spec/pull/1085",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As mentioned by @Andrei-Popov in\r\nhttps://www.ietf.org/mail-archive/web/tls/current/msg24561.html .",
      "createdAt": "2017-10-18T19:17:22Z",
      "updatedAt": "2017-10-24T15:38:12Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1d609f9d8cd1231416374e7475f3c0007aab40c3",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "label",
      "headRefOid": "5b23b07279ae8deb0224fb543c2108e272985d68",
      "closedAt": "2017-10-24T15:38:12Z",
      "mergedAt": "2017-10-24T15:38:12Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c0562246d898874242a08689e036701ec2610981"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1086,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ4Mjg0OTc2",
      "title": "Allow the padding extension to change on HRR.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1086",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The padding extension is typically computed as part of serializing the\r\nClientHello, in hopes of targetting a particular size. As specified right now,\r\nthe second ClientHello must not use this same logic and instead must retain the\r\nprevious extension sizethough this would likely not hit the same target size.\r\n\r\nThe server's going to ignore it anyway, so allow it to be recalcuated. This\r\navoids unnecessary state in clients and extra logic to serialize the first and\r\nsecond ClientHellos differently.",
      "createdAt": "2017-10-24T02:44:35Z",
      "updatedAt": "2017-10-25T03:03:49Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1d609f9d8cd1231416374e7475f3c0007aab40c3",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "hrr-padding",
      "headRefOid": "8ced9c287ee152f94b7921a54d3639f335fcd9da",
      "closedAt": "2017-10-24T15:37:06Z",
      "mergedAt": "2017-10-24T15:37:06Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "bd133849ad338b8dab29c91bcaff25c7a47ba634"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEzODYzMTI=",
          "commit": {
            "abbreviatedOid": "8ced9c2"
          },
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-10-24T03:11:51Z",
          "updatedAt": "2017-10-24T03:11:51Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Why not say it MUST be removed?",
              "createdAt": "2017-10-24T03:11:51Z",
              "updatedAt": "2017-10-24T03:11:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEzODgwOTE=",
          "commit": {
            "abbreviatedOid": "8ced9c2"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Good catch; +1",
          "createdAt": "2017-10-24T03:28:25Z",
          "updatedAt": "2017-10-24T03:28:35Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Are the middleboxes that choke on particular sized ClientHellos not going to also choke on ClientHello2s?\r\n\r\nAnyway, the whole point of the padding extension is to let you control record sizes on the wire; there seems to be no reason to restrict the available flexibility in one specific case.",
              "createdAt": "2017-10-24T03:28:25Z",
              "updatedAt": "2017-10-24T03:28:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE3MzA3MjY=",
          "commit": {
            "abbreviatedOid": "8ced9c2"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-10-25T03:03:49Z",
          "updatedAt": "2017-10-25T03:03:49Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Older TLS versions already don't have two ClientHellos, so if a middlebox is actually getting to interpret the second one as a ClientHello, we probably failed to interop much earlier. (The padding extension was originally for a confused endpoint.)\r\n\r\nBut yeah, despite being more spec text, it seemed less work all around for implementations to retain the flexibility. One could imagine maybe a datagram transport wanting something funny to apply to both messages. (QUIC does pad ClientHellos, but I don't know the details to know if cookied ones are padded or if the padding extension is suitable. It's a little weird since it's got a discontinuity after N-4 bytes.)",
              "createdAt": "2017-10-25T03:03:49Z",
              "updatedAt": "2017-10-25T03:03:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1091,
      "id": "MDExOlB1bGxSZXF1ZXN0MTUwOTIzMTY1",
      "title": "Middlebox changes2 hrr",
      "url": "https://github.com/tlswg/tls13-spec/pull/1091",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-11-06T18:16:45Z",
      "updatedAt": "2017-11-24T18:18:44Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b23ef183619a4ff6a45bd121d396e38d03cba3e0",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "middlebox_changes2_hrr",
      "headRefOid": "adaccbe0ea7179eda1f0f81bf2dc95e2a90b2dc6",
      "closedAt": "2017-11-24T18:18:44Z",
      "mergedAt": "2017-11-24T18:18:44Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c7642884134ab5cff6a9289564d6153e666d4cf2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ1Mjc1NDM=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "nharper",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-06T19:13:38Z",
          "updatedAt": "2017-11-06T19:39:58Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "nit: legacy_version",
              "createdAt": "2017-11-06T19:13:38Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            },
            {
              "originalPosition": 290,
              "body": "I'm assuming this was changed to 0x0303 so that middleboxes which view the ClientHello and ServerHello and assume TLS 1.2 was negotiated can verify that the TLSCiphertext.record_version is 0x0303 as expected.\r\n\r\nIs it worth adding language either here or in #middlebox explaining why the 0x0301 (in TLSPlaintext) and 0x0303 values were chosen?",
              "createdAt": "2017-11-06T19:34:22Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ1NTI3ODQ=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "tmshort",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-06T20:35:50Z",
          "updatedAt": "2017-11-06T20:35:51Z",
          "comments": [
            {
              "originalPosition": 328,
              "body": "I thought these were being combined?",
              "createdAt": "2017-11-06T20:35:51Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ1NTY5Mzg=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-06T20:50:44Z",
          "updatedAt": "2017-11-06T20:50:44Z",
          "comments": [
            {
              "originalPosition": 328,
              "body": "I opted to treat it as a separate message for simplicity.",
              "createdAt": "2017-11-06T20:50:44Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ3ODA1Nzc=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-07T15:06:31Z",
          "updatedAt": "2017-11-07T15:06:31Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "what does \"dummy\" mean here? It's a term not used anywhere else in the draft.\r\n\r\nDoes the CCS has to be always sent? If not, what the other side is supposed to do when it doesn't receive it? What if it receives it at different time? What if it receives multiple CCS messages one after another?",
              "createdAt": "2017-11-07T15:06:31Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ4MDA0MzY=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-07T15:52:11Z",
          "updatedAt": "2017-11-07T15:52:11Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "The receiver ignores all CCS records during the handshake, without any care as to where they do or don't appear. It's in the record layer section.\r\n\r\nThis is based on implementor feedback. Our initial prototype had the receiver enforce the CCS positions, but the handshake/CCS synchronization on the read side is a bit of a mess in TLS 1.2. There was a desire from some folks to not complicate their TLS 1.3 state machined with this. Discarding them at the record layer, on the other hand, is straightforward. (Additionally, it allows any implementation to unilaterally disable compatibility mode if it is deployed somewhere these middlebox issues are less common.)",
              "createdAt": "2017-11-07T15:52:11Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ4MjI4NDI=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "mattcaswell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-07T16:43:21Z",
          "updatedAt": "2017-11-07T16:43:21Z",
          "comments": [
            {
              "originalPosition": 246,
              "body": "\"unexpected_message\" seems more appropriate",
              "createdAt": "2017-11-07T16:43:21Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ4NzQ0Njg=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-07T19:18:38Z",
          "updatedAt": "2017-11-07T19:18:38Z",
          "comments": [
            {
              "originalPosition": 246,
              "body": "Agreed.",
              "createdAt": "2017-11-07T19:18:38Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5MzIxNjQ=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "yuhong",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-07T22:29:39Z",
          "updatedAt": "2017-11-07T22:29:39Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Yea, I don't really like it either to have two version fields.",
              "createdAt": "2017-11-07T22:29:39Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5MzY3NzE=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-07T22:46:56Z",
          "updatedAt": "2017-11-07T22:46:56Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Me neither, but it's that or an insecure version fallback. Aesthetics and cleanliness are valuable, but not at the cost of security.",
              "createdAt": "2017-11-07T22:46:56Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5MzcyMTQ=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "yuhong",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-07T22:48:49Z",
          "updatedAt": "2017-11-07T22:48:49Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "But the same problem may repeat with future middleboxes.",
              "createdAt": "2017-11-07T22:48:49Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5NDIxODI=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "tmshort",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-07T23:10:00Z",
          "updatedAt": "2017-11-07T23:10:00Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Future middleboxes should understand TLSv1.3... If they don't, then it's the manufacturers' fault.",
              "createdAt": "2017-11-07T23:10:00Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5NDMxNDY=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-07T23:14:17Z",
          "updatedAt": "2017-11-07T23:14:17Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Indeed. For the future, we need to better take into account how to defend our extension points when we design protocols. There's things like GREASE, but GREASE doesn't go far enough here. I have various ideas to try out on this front.\r\n\r\nIn the meantime, because of how much we've let ossify up to now, we sadly must live with certain constraints if we want TLS 1.3 to simultaneously be deployable and secure.",
              "createdAt": "2017-11-07T23:14:17Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5NDQwODc=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "yuhong",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-07T23:18:17Z",
          "updatedAt": "2017-11-07T23:18:18Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Is this the most common problem though?",
              "createdAt": "2017-11-07T23:18:17Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5NDUwNDk=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-07T23:22:42Z",
          "updatedAt": "2017-11-07T23:22:42Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Common enough. I'm surprised you're bothered by this particular piece. We've already moved the ClientHello version out.\r\n\r\n",
              "createdAt": "2017-11-07T23:22:42Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5NDUyNTg=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "yuhong",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-07T23:23:55Z",
          "updatedAt": "2017-11-07T23:23:55Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "I am talking a list with only one entry though, and you are talking about middleboxes not servers too.",
              "createdAt": "2017-11-07T23:23:55Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5NTc2OTA=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-08T00:32:03Z",
          "updatedAt": "2017-11-08T00:32:03Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "We have a few local middleboxes to test with. The setup is nowhere near exhaustive (the variance on these things is *huge*), but it did allow us to iterate on this locally with a number of designs before testing a few out into the wild. This PR came out of what we've learned from all those experiments.\r\n\r\nVariants that didn't fix the ServerHello version didn't even survive the local pass. :-(",
              "createdAt": "2017-11-08T00:32:03Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5NjI2MzY=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "yuhong",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-08T01:00:40Z",
          "updatedAt": "2017-11-08T01:00:40Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "So do you know why these individual middleboxes did it?",
              "createdAt": "2017-11-08T01:00:40Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5Njg0Njk=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "yuhong",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-08T01:40:11Z",
          "updatedAt": "2017-11-08T01:40:11Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Also consider that most users know or can find out if they are using middleboxes or not, so an \"insecure version fallback\" is not the only alternative.",
              "createdAt": "2017-11-08T01:40:11Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5ODEzMjQ=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-08T03:26:43Z",
          "updatedAt": "2017-11-08T03:26:43Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Mostly the only way to know is to measure, and that's just a network attacker.",
              "createdAt": "2017-11-08T03:26:43Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUyNjAzMTM=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "riking",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-08T21:44:52Z",
          "updatedAt": "2017-11-08T21:44:52Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "Perhaps specify that a \"dummy CCS record\" is one consisting of a single `0x01` byte.",
              "createdAt": "2017-11-08T21:44:52Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzU5MTYzODY=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-11T01:01:56Z",
          "updatedAt": "2017-11-11T01:18:28Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "nit: trailing space",
              "createdAt": "2017-11-11T01:01:56Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            },
            {
              "originalPosition": 64,
              "body": "Should anything be said about the order of the SV extension relative to other extensions? The definition of extensions might change between versions.",
              "createdAt": "2017-11-11T01:07:03Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzU5MTc4MDI=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "yuhong",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-11T01:25:21Z",
          "updatedAt": "2017-11-11T01:25:21Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "And is getting into an arms race with middleboxes really a good idea?",
              "createdAt": "2017-11-11T01:25:21Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzU5MjI1OTM=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-11T03:51:12Z",
          "updatedAt": "2017-11-11T03:51:12Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "nit: s/which/that/",
              "createdAt": "2017-11-11T03:51:12Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzU5MjI2MTk=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-11T03:52:13Z",
          "updatedAt": "2017-11-11T03:52:13Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "We should consider saying something about how the TLS 1.3-aware client must do the version check before the resumption check, in case some existing TLS 1.2 code does a resumption/sesion-id check early in processing and would be confused about what protocol is in use.",
              "createdAt": "2017-11-11T03:52:13Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzU5MjI2Mzk=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-11T03:53:36Z",
          "updatedAt": "2017-11-11T03:53:36Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Do we want to specify a client alert to send when receiving some other value?",
              "createdAt": "2017-11-11T03:53:36Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzU5MjMyNDE=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-11T04:29:08Z",
          "updatedAt": "2017-11-11T04:29:08Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "What should a client do if it receives something else?",
              "createdAt": "2017-11-11T04:29:08Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzU5MjM0NTM=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-11T04:43:14Z",
          "updatedAt": "2017-11-11T04:43:14Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Down at line 2050 we (now?) have:\r\n\r\n> +Upon receipt of a HelloRetryRequest, the client MUST perform the\r\n +checks specified in {{server-hello}} and then process the\r\n +extensions, starting with determining the version using\r\n +\"supported_versions\". Clients MUST abort the handshake with",
              "createdAt": "2017-11-11T04:43:14Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzU5NDUyMDE=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-11T23:54:06Z",
          "updatedAt": "2017-11-12T00:00:26Z",
          "comments": [
            {
              "originalPosition": 197,
              "body": "There is probably some editorial (?) work to be done where we still talk about HRR all over the place (in the extensions table), etc., but there is no longer a hello_retry_request message type for the actual protocol elements.",
              "createdAt": "2017-11-11T23:54:06Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            },
            {
              "originalPosition": 217,
              "body": "legacy_version",
              "createdAt": "2017-11-11T23:54:41Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            },
            {
              "originalPosition": 248,
              "body": "I wonder how much more complicated implementations will have to be to reject CCS post-handshake (as opposed to ignoring it always).",
              "createdAt": "2017-11-11T23:57:22Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            },
            {
              "originalPosition": 290,
              "body": "> Is it worth adding language ...\r\n\r\nProbably.",
              "createdAt": "2017-11-11T23:58:19Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzU5NTE3NDE=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-12T07:52:43Z",
          "updatedAt": "2017-11-12T07:52:43Z",
          "comments": [
            {
              "originalPosition": 290,
              "body": "It's not 0x0301 for plaintext and 0x0303 for ciphertext. That wouldn't get through the middleboxes anyway. It's 0x0301 for ClientHello (a long-standing quirk from TLS 1.1) and 0x0303 for everything else. And yeah, you're right that it's to match TLS 1.2.",
              "createdAt": "2017-11-12T07:52:43Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzYxNTQyMzA=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-13T16:08:12Z",
          "updatedAt": "2017-11-13T16:08:13Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "+1. In case `legacy_version` is not set to 0x0303 and `supported_versions` is present, the connection should fail with `illegal_parameter`\r\n\r\nthough it probably should be placed in the `legacy_version` description to mirror how Client Hello is described",
              "createdAt": "2017-11-13T16:08:12Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzc0MDQ1Nzk=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-17T11:15:37Z",
          "updatedAt": "2017-11-17T11:15:38Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "One detail I noticed as I was sorting out some of our tests: at one point we had text which disallowed no-op HelloRetryRequests. When HRR got moved to extensions, this turned into just a rule that the extensions block is non-empty. (That plus no unsolicited extensions did the trick.)\r\n\r\nThis is gone now, but it actually wouldn't have sufficed anyway because every HRR has a supported_versions extension now. So we probably need to go back to explicit text here somewhere.",
              "createdAt": "2017-11-17T11:15:37Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzc0MDUxMzI=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-17T11:18:18Z",
          "updatedAt": "2017-11-17T11:18:18Z",
          "comments": [
            {
              "originalPosition": 322,
              "body": "A somewhat irksome consequence of this: if you do completely stateless HRR, you need to skip the CCS before parsing your \"first\" (actually second) ClientHello and picking the version.\r\n\r\n(Then again, we only need this over TCP which is stateful...)",
              "createdAt": "2017-11-17T11:18:18Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzg5MDE4MjY=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-24T12:24:01Z",
          "updatedAt": "2017-11-24T12:24:01Z",
          "comments": [
            {
              "originalPosition": 174,
              "body": "Reference must be `{{supported-versions}}` or the build fails.",
              "createdAt": "2017-11-24T12:24:01Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzg5MjQ1NTU=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-24T14:10:46Z",
          "updatedAt": "2017-11-24T14:10:46Z",
          "comments": [
            {
              "originalPosition": 320,
              "body": "I meant that \"dummy\" is obvious to us, in this discussion, in the context of this PR. Not necessarily to somebody reading the spec in 5 years.",
              "createdAt": "2017-11-24T14:10:46Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzg5MjYwMTM=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-24T14:16:46Z",
          "updatedAt": "2017-11-24T14:16:46Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "`illegal_parameter` seems like a correct choice",
              "createdAt": "2017-11-24T14:16:46Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzg5Njg1NTQ=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-24T18:00:29Z",
          "updatedAt": "2017-11-24T18:00:29Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Actually, we should ignore it to match how we handle ClientHello.legacy_version",
              "createdAt": "2017-11-24T18:00:29Z",
              "updatedAt": "2017-11-24T18:14:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzg5Njg2MDQ=",
          "commit": {
            "abbreviatedOid": "ea43633"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-24T18:00:57Z",
          "updatedAt": "2017-11-24T18:14:59Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "And that's what the text already says.",
              "createdAt": "2017-11-24T18:00:57Z",
              "updatedAt": "2017-11-24T18:14:59Z"
            },
            {
              "originalPosition": 64,
              "body": "No, I don't think we need to order it. You just make two passes.",
              "createdAt": "2017-11-24T18:01:18Z",
              "updatedAt": "2017-11-24T18:14:59Z"
            },
            {
              "originalPosition": 76,
              "body": "Done.",
              "createdAt": "2017-11-24T18:05:01Z",
              "updatedAt": "2017-11-24T18:14:59Z"
            },
            {
              "originalPosition": 88,
              "body": "Yes, but we don't need to say it here because illegal_parameter's definitions says o.",
              "createdAt": "2017-11-24T18:05:55Z",
              "updatedAt": "2017-11-24T18:14:59Z"
            },
            {
              "originalPosition": 128,
              "body": "This is on line 2053.",
              "createdAt": "2017-11-24T18:07:37Z",
              "updatedAt": "2017-11-24T18:14:59Z"
            },
            {
              "originalPosition": 248,
              "body": "Not very it seems.",
              "createdAt": "2017-11-24T18:08:35Z",
              "updatedAt": "2017-11-24T18:14:59Z"
            },
            {
              "originalPosition": 320,
              "body": "I don't think dummy is confusing here.",
              "createdAt": "2017-11-24T18:08:58Z",
              "updatedAt": "2017-11-24T18:14:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1092,
      "id": "MDExOlB1bGxSZXF1ZXN0MTUyMDg1NTQw",
      "title": "Give close_notify half-close semantics to better match TCP and avoid truncation",
      "url": "https://github.com/tlswg/tls13-spec/pull/1092",
      "state": "MERGED",
      "author": "DavidSchinazi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Currently TLS 1.3 specifies close_notify in the same way that TLS 1.2 did.\r\nI believe that has issues and this might be the right time to fix them.\r\nThe purpose of close_notify is to protect against data truncation attacks,\r\neach side is required to send close_notify before closing the write side of\r\nthe transport connection so the other side knows that the data was not truncated.\r\nAs such, close_notify only needs half-close semantics to prevent truncation.\r\n\r\nHowever, the specification contains the following text:\r\n<< Each party MUST send a \u201cclose_notify\u201d alert before closing the write side\r\n    of the connection, unless some other fatal alert has been transmitted.\r\n    The other party MUST respond with a \u201cclose_notify\u201d alert of its own and close\r\n    down the connection immediately, discarding any pending writes. >>\r\n\r\nThis means that an application-layer client can't send a query then close their\r\nwrite transport when they know that they're done, because the server would\r\nterminate the TLS session before sending the reply. On top of this, when\r\nthe server receives the close_notify, it may have already sent part of the reply\r\n(or wrote it to the socket send buffer) so the responding close_notify would\r\nin effect be inflicting a truncation attack on the client.\r\n\r\nThis doesn't make much difference for HTTP because clients already\r\ndon't close their write transport after sending a reply, however having the\r\noption do do this could allow innovation in new protocols that can define\r\nthe semantics of when they use close_notify. An example is DNS PUSH:\r\nhttps://tools.ietf.org/html/draft-ietf-dnssd-push\r\n\r\nA proposal to solve this problem would be to give close_notify half-close\r\nsemantics: we keep the requirements that a close_notify be sent before\r\nclosing the transport, and that any data received after a close_notify is\r\nignored, but we simply remove the requirement to immediately reply\r\nwith a close_notify. This has the advantage that current implementations\r\nare already compliant but future ones can leverage this improvement.",
      "createdAt": "2017-11-12T02:35:39Z",
      "updatedAt": "2017-11-16T03:08:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b23ef183619a4ff6a45bd121d396e38d03cba3e0",
      "headRepository": "DavidSchinazi/tls13-spec",
      "headRefName": "half-close-notify",
      "headRefOid": "bb6b605c5d9e1c1a9fc62cc98bfce735a5c8f8ec",
      "closedAt": "2017-11-16T03:08:27Z",
      "mergedAt": "2017-11-16T03:08:27Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "95ffb6cea0413c53ae00bb15d4fb8b860b115b22"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzU5NDc2MDI=",
          "commit": {
            "abbreviatedOid": "19b31d5"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2017-11-12T02:38:39Z",
          "updatedAt": "2017-11-12T02:42:23Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I would change this to say \"after a closure alert has been received\" just to be totally clear.",
              "createdAt": "2017-11-12T02:38:39Z",
              "updatedAt": "2017-11-12T03:14:39Z"
            },
            {
              "originalPosition": 34,
              "body": "I think this is too much a response to the original text. I would just remove \"The other party SHOULD NOT\" and instead say \"Note that this is a change from versions of TLS prior to TLS 1.3 in which implementations were required to immediately respond to a close_notify with a close_notify of their own\"\r\n",
              "createdAt": "2017-11-12T02:41:56Z",
              "updatedAt": "2017-11-12T03:14:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzU5NDgxMDk=",
          "commit": {
            "abbreviatedOid": "19b31d5"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-12T03:15:28Z",
          "updatedAt": "2017-11-12T03:15:28Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Agreed, fixed.",
              "createdAt": "2017-11-12T03:15:28Z",
              "updatedAt": "2017-11-12T03:15:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzU5NDgxMzQ=",
          "commit": {
            "abbreviatedOid": "19b31d5"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-12T03:17:02Z",
          "updatedAt": "2017-11-12T03:17:02Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "I removed the SHOULD NOT and added the note but kept the mention of risks of truncation",
              "createdAt": "2017-11-12T03:17:02Z",
              "updatedAt": "2017-11-12T03:17:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1093,
      "id": "MDExOlB1bGxSZXF1ZXN0MTUyMzY1MTUx",
      "title": "Move server_certificate_type to EE. The idea here is to retain",
      "url": "https://github.com/tlswg/tls13-spec/pull/1093",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "the RFC 7250 semantics that both certificate types are globally\r\nnegotiated. There is no support for mixed certificates.",
      "createdAt": "2017-11-13T22:29:49Z",
      "updatedAt": "2017-11-16T10:48:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "215a30328a6d6d46615d0b2eefc13b0986db96c5",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "move_server_cert_type",
      "headRefOid": "e22826e94dd6b14b521d401c76d560168b4180c6",
      "closedAt": "2017-11-16T10:48:11Z",
      "mergedAt": "2017-11-16T10:48:11Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3bff3580b5ba81878dff4920fb66d04406f8c437"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzcwNzQ1MjE=",
          "commit": {
            "abbreviatedOid": "e22826e"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-11-16T10:45:52Z",
          "updatedAt": "2017-11-16T10:45:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1094,
      "id": "MDExOlB1bGxSZXF1ZXN0MTUyNjcwNDYz",
      "title": "Add text explaining why servers might want to vend multiple tickets",
      "url": "https://github.com/tlswg/tls13-spec/pull/1094",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, the draft says that servers MAY send multiple tickets to clients without further discussion. It might help to be concrete and provide an example for when more than one ticket is useful. This PR provides one example.",
      "createdAt": "2017-11-15T02:32:36Z",
      "updatedAt": "2017-11-15T03:42:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "215a30328a6d6d46615d0b2eefc13b0986db96c5",
      "headRepository": "chris-wood/tls13-spec",
      "headRefName": "master",
      "headRefOid": "00df8e3d6dc4437867f775601cece81b4d75ac35",
      "closedAt": "2017-11-15T03:42:42Z",
      "mergedAt": "2017-11-15T03:42:42Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6a4338e8e6efafb3e309f16acb946b2aa84619f8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzY2NjY4MjY=",
          "commit": {
            "abbreviatedOid": "1d54eb6"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-15T03:25:40Z",
          "updatedAt": "2017-11-15T03:25:47Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "If were going to add text, I think you should also  mention that you might do multiple HTTP connections",
              "createdAt": "2017-11-15T03:25:40Z",
              "updatedAt": "2017-11-15T03:34:55Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzY2Njc4ODA=",
          "commit": {
            "abbreviatedOid": "1d54eb6"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-15T03:35:59Z",
          "updatedAt": "2017-11-15T03:35:59Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Done.",
              "createdAt": "2017-11-15T03:35:59Z",
              "updatedAt": "2017-11-15T03:35:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1095,
      "id": "MDExOlB1bGxSZXF1ZXN0MTUyNzI2NzUw",
      "title": "certificate_authorities is defined in this document, not in RFC 6066",
      "url": "https://github.com/tlswg/tls13-spec/pull/1095",
      "state": "MERGED",
      "author": "grittygrease",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Minor change to where RFC 6066 is referenced.",
      "createdAt": "2017-11-15T09:44:33Z",
      "updatedAt": "2017-11-15T12:56:25Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6a4338e8e6efafb3e309f16acb946b2aa84619f8",
      "headRepository": "grittygrease/tls13-spec",
      "headRefName": "nick/ca_name",
      "headRefOid": "c081a048ea583be70eb7f0003154794d6c6d6ecd",
      "closedAt": "2017-11-15T12:56:25Z",
      "mergedAt": "2017-11-15T12:56:25Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "14c721cf11f28cd6aa278bf49f9410d5d0a8deed"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzY3NjAxMjg=",
          "commit": {
            "abbreviatedOid": "c081a04"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2017-11-15T12:03:44Z",
          "updatedAt": "2017-11-15T12:03:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1096,
      "id": "MDExOlB1bGxSZXF1ZXN0MTUyOTYwNjU3",
      "title": "Add David Schinazi to Contributors for close_notify text",
      "url": "https://github.com/tlswg/tls13-spec/pull/1096",
      "state": "MERGED",
      "author": "DavidSchinazi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-11-16T06:25:55Z",
      "updatedAt": "2017-11-16T06:31:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "95ffb6cea0413c53ae00bb15d4fb8b860b115b22",
      "headRepository": "DavidSchinazi/tls13-spec",
      "headRefName": "add-dschinazi-to-contributors",
      "headRefOid": "ebaf138d376e90a91d10cf86807c48b89ced3e3d",
      "closedAt": "2017-11-16T06:31:51Z",
      "mergedAt": "2017-11-16T06:31:51Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f40a892a6aecb0e362abb195b752ed4ca91cd920"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1098,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU0MDU0NDUw",
      "title": "Be more explicit on PSS requirements",
      "url": "https://github.com/tlswg/tls13-spec/pull/1098",
      "state": "CLOSED",
      "author": "Lekensteyn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR intends to clarify the requirements for PSS support.\r\n\r\nThe requirements are intentionally minimal to reduce implementation efforts, but recognizes that some other implementations may be more complete. Notes:\r\n\r\n- \"Supporting PSS signatures on certificates is a mandatory requirement and I think we should be very clear about the parameters we permit.\" https://www.ietf.org/mail-archive/web/tls/current/msg23007.html\r\n- Martin Rex wishes to remove TLS requirements on signature algorithms for certificates, hence the \"MAY\" for other PSS parameters in this PR. https://www.ietf.org/mail-archive/web/tls/current/msg23021.html\r\n- Regardless, rsa_pss_sha256 is currently MTI for CertificateVerify and certificates, hence the strong MUST wording in this PR.\r\n- It does not say anything about non-end-entity certificates, that's up to the PKI verifier. Consider case \"CA Key: rsa-pss; EE signature: rsa-pss; EE key: rsa\" from https://www.ietf.org/mail-archive/web/tls/current/msg24453.html\r\n- PSS params in certificates are explicitly not restricted, satisfying https://www.ietf.org/mail-archive/web/tls/current/msg24457.html\r\n\r\nFrom what I have heard, boringssl does not (or will not?) implement any PSS support in the certificates (yet?). Don't know if anything should be changed here to reflect that decision, but I thought it is worth mentioning. It is possible that I'll follow boringssl's example in tris.\r\n\r\nIf a TLS extension is introduced later, hopefully that improves interop with odd keys and signatures that are optional in this PR (PSS pubkey or custom salt lengths).",
      "createdAt": "2017-11-22T03:22:06Z",
      "updatedAt": "2017-12-06T01:37:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "261e73b09a99e077a458f8ffcce380b319d70d45",
      "headRepository": "Lekensteyn/tls13-spec",
      "headRefName": "rsa-pss-sigalg",
      "headRefOid": "18ff7df2f7b21a61db02cc44f3a9fc2598fd2131",
      "closedAt": "2017-12-06T01:37:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Added reference as suggested by @tomato42, marked id-RSASSA-PSS without params as mandatory as suggested by @nmav. Also changed the proposed text to refer explicitly to the salt length (the begin of the paragraph is already explicit about requiring MGF1).\r\n\r\nUnchanged:\r\n- No different codepoint for rsaEncryption vs id-RSASSA-PSS (*)\r\n- No requirement to forbid PSS pubkeys with params (a suggestion from @tomato42).\r\n\r\n(*) Since both rsaEncryption and id-RSASSA-PSS are mandatory, an implementation that is worried about PKCS#1 v1.5 encryption can offer and sign with an id-RSASSA-PSS key instead. The client (for SKE/server auth) or server (client auth) has no control over the signature key of the peer, but I think that is acceptable.",
          "createdAt": "2017-11-23T00:40:06Z",
          "updatedAt": "2017-11-23T00:50:51Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzgzNjYxMDY=",
          "commit": {
            "abbreviatedOid": "f70eb6d"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-22T08:37:03Z",
          "updatedAt": "2017-11-22T08:37:03Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "what about distinguishing the RSA-PSS keys with and without parameters:\r\n```\r\nan RSASSA-PSS public key (OID id-RSASSA-PSS) without parameters MUST be supported, while an RSASSA-PSS public key (OID id-RSASSA-PSS) with parameters MAY be supported`.\r\n```\r\n\r\nThe reason is that keys explicitly marked as RSA-PSS cannot be used for RSA PKCS#1 1.5 encryption, and thus they provide a way for the server to know that it must protect that key against attacks which utilize RSA ciphersuites under TLS1.2.",
              "createdAt": "2017-11-22T08:37:03Z",
              "updatedAt": "2017-11-23T00:34:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzg0NDkxNTY=",
          "commit": {
            "abbreviatedOid": "f70eb6d"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-22T13:49:30Z",
          "updatedAt": "2017-11-22T13:51:45Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "\"(OID id-RSASSA-PSS)\" should come with a reference to https://tools.ietf.org/html/rfc5756",
              "createdAt": "2017-11-22T13:49:30Z",
              "updatedAt": "2017-11-23T00:34:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4MDY3OTc=",
          "commit": {
            "abbreviatedOid": "18ff7df"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T10:57:36Z",
          "updatedAt": "2017-11-29T10:57:37Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "> but other salt lengths MAY be used\r\n\r\nI find that text a step backwards in terms of interoperability. The previous text of requiring that the salt length MUST be equal to the length of the digest output was specific and left no window of misunderstandings. This on the other hand allows a MAY of other salt lengths. What does this actually mean? Some implementations MAY drop these connections while others not?",
              "createdAt": "2017-11-29T10:57:36Z",
              "updatedAt": "2017-11-29T10:58:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4MTgwNDQ=",
          "commit": {
            "abbreviatedOid": "18ff7df"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T11:41:04Z",
          "updatedAt": "2017-11-29T11:41:04Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "The intention is that use of a standard length is guaranteed, but if a CA somehow issues certs with odd salt lengths, then TLS would not outright forbid it (and leave it up to the PKI to perform policy decisions). See also https://github.com/tlswg/tls13-spec/pull/1109#discussion_r153673401\r\n\r\nIt was added based on comments from Martin Rex (I am not strongly in favor in keeping this freedom though).",
              "createdAt": "2017-11-29T11:41:04Z",
              "updatedAt": "2017-11-29T11:41:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4MjQ5MDA=",
          "commit": {
            "abbreviatedOid": "18ff7df"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T12:09:40Z",
          "updatedAt": "2017-11-29T12:09:40Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "It is a slippery slope. TLS currently specifies exactly the combo of parameters to use for RSA-PSS signing. The negotiation includes the hash and the salt size. What the new text makes, is make the TLS negotiation include only the hash algorithm, and leaves the application to deal with the salt size requirements, which may come outside TLS. I find the previous text simpler to implement and in alignment with having MUST in RSA-PSS certificates with no parameters.",
              "createdAt": "2017-11-29T12:09:40Z",
              "updatedAt": "2017-11-29T12:10:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4NjY3MzY=",
          "commit": {
            "abbreviatedOid": "18ff7df"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T14:38:55Z",
          "updatedAt": "2017-11-29T14:38:55Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "how about \"but longer salt lengths MAY be used\"? AFAIR OpenSSL defaults to maximum allowed size (by public key size) of salt for rsa-pss signatures.\r\n\r\nI think it would be silly to reject those certificates only because the salt is too large",
              "createdAt": "2017-11-29T14:38:55Z",
              "updatedAt": "2017-11-29T14:38:55Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4ODE5OTM=",
          "commit": {
            "abbreviatedOid": "18ff7df"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T15:19:23Z",
          "updatedAt": "2017-11-29T15:19:23Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Note that PKCS#1 v2.2 (https://tools.ietf.org/html/rfc8017#page-42) seems to suggest that zero-length salts are also okay:\r\n>    4.  Typical salt lengths in octets are hLen (the length of the output\r\n>       of the hash function Hash) and 0.  In both cases, the security of\r\n>       RSASSA-PSS can be closely related to the hardness of inverting\r\n>       RSAVP1.\r\n\r\nMaybe requiring a single salt length is the best for interop purposes. Btw, I think I'm going to close this in favor of #1109, let's continue the discussion there.",
              "createdAt": "2017-11-29T15:19:23Z",
              "updatedAt": "2017-11-29T15:19:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk5MDk2NTY=",
          "commit": {
            "abbreviatedOid": "18ff7df"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T16:28:23Z",
          "updatedAt": "2017-11-29T16:28:24Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I have double-checked now - OpenSSL does default to maximum salt length possible for a given key size when making signatures - so requiring a salt length of the same size as the hash length would make all OpenSSL certificates made with default PSS settings invalid.\r\n\r\nwhile 0 length salts are ok in RFC 8017, using different hash for MGF1 and signature hash is also ok, so I don't think that's the sole data point we will want to use",
              "createdAt": "2017-11-29T16:28:24Z",
              "updatedAt": "2017-11-29T16:28:24Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1099,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU0MjgwNTcy",
      "title": "Update references",
      "url": "https://github.com/tlswg/tls13-spec/pull/1099",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The RFC editor found a few errors in a draft that used the same references.  This updates the draft to use the automatically generated DOI references from xml2rfc.tools.ietf.org rather than manual references.  This isn't perfect, but it should help the RFC editor when it comes time to publish.",
      "createdAt": "2017-11-23T00:22:01Z",
      "updatedAt": "2017-11-24T17:41:46Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "261e73b09a99e077a458f8ffcce380b319d70d45",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "keyagreement-ref",
      "headRefOid": "1e123c47262c0773d1229c515c4c2d26b6ec086f",
      "closedAt": "2017-11-24T17:41:46Z",
      "mergedAt": "2017-11-24T17:41:46Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "db06d8074221c3f224082a77e0115b601e7b325a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzg4MTM0OTM=",
          "commit": {
            "abbreviatedOid": "1e123c4"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This changes:\r\n\r\n> [SHS] **National Institute of Standards and Technology, U.S. Department of Commerce**, \"Secure Hash Standard\", NIST FIPS PUB 180-4, March 2012.\r\n> ...\r\n> [KEYAGREEMENT] Barker, E., Chen, L., Roginsky, A. and M. Smid, \"Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography\", NIST Special Publication **800-38D**, May 2013.\r\n\r\nto\r\n\r\n> [SHS] **Dang, Q.**, \"Secure Hash Standard\", National Institute of Standards and Technology report, DOI 10.6028/nist.fips.180-4, July 2015.\r\n> ...\r\n> [KEYAGREEMENT] Barker, E., Chen, L., Roginsky, A. and M. Smid, \"Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography\", National Institute of Standards and Technology report, DOI 10.6028/nist.sp.**800-56ar2**, May 2013.\r\n\r\nLGTM (Dang is the author according to https://www.nist.gov/publications/secure-hash-standard)",
          "createdAt": "2017-11-24T00:38:25Z",
          "updatedAt": "2017-11-24T00:38:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1100,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU0NjQ2MTQ0",
      "title": "Refer to client-tracking prevention from NST message",
      "url": "https://github.com/tlswg/tls13-spec/pull/1100",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Give some motivation for why servers MAY send multiple tickets.",
      "createdAt": "2017-11-25T17:42:27Z",
      "updatedAt": "2017-11-25T18:05:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "eec84b8913fa606898c6dc662aefb40ccb8eb4fc",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "nst",
      "headRefOid": "da9f6c323450edd920271058261811c71b27dfe3",
      "closedAt": "2017-11-25T18:05:27Z",
      "mergedAt": "2017-11-25T18:05:27Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "da9f6c323450edd920271058261811c71b27dfe3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1102,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU0NzE4MTMy",
      "title": "Syntax fix",
      "url": "https://github.com/tlswg/tls13-spec/pull/1102",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR fixes obvious syntax errors.",
      "createdAt": "2017-11-27T03:27:53Z",
      "updatedAt": "2018-02-16T01:41:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4febb3f96ccdd7ed061c2ee3f41f37bbef0591a5",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "syntax-fix",
      "headRefOid": "1f6a3e254e34eb4b9cd016dfa0785643696165d0",
      "closedAt": "2017-11-29T00:18:38Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand",
          "createdAt": "2017-11-29T00:18:38Z",
          "updatedAt": "2017-11-29T00:18:38Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzkxODI1MzM=",
          "commit": {
            "abbreviatedOid": "1f6a3e2"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-27T14:27:02Z",
          "updatedAt": "2017-11-27T14:27:02Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I think that `%%% Server Parameters Messages` is more appropriate.\r\n\r\n(otherwise it would have to be added to the `Protocol Data Structures and Constant Values` section)",
              "createdAt": "2017-11-27T14:27:02Z",
              "updatedAt": "2017-11-27T14:27:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk0ODA4MzU=",
          "commit": {
            "abbreviatedOid": "1f6a3e2"
          },
          "author": "kazu-yamamoto",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-28T12:04:22Z",
          "updatedAt": "2017-11-28T12:04:23Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "It's up to @ekr. :-)",
              "createdAt": "2017-11-28T12:04:22Z",
              "updatedAt": "2017-11-28T12:04:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk3MDE4NDg=",
          "commit": {
            "abbreviatedOid": "1f6a3e2"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T00:18:03Z",
          "updatedAt": "2017-11-29T00:18:03Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I concur with @Lekensteyn ",
              "createdAt": "2017-11-29T00:18:03Z",
              "updatedAt": "2017-11-29T00:18:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1103,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU0NzIwMzQ1",
      "title": "removing duplicated verification criteria in favor of Section 4.2.10.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1103",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Let's make protocol overview simpler.",
      "createdAt": "2017-11-27T03:54:38Z",
      "updatedAt": "2018-02-16T01:41:12Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4febb3f96ccdd7ed061c2ee3f41f37bbef0591a5",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "verification",
      "headRefOid": "9ea5efc5362f1e4c8c77406dd624adf28ac3fdfe",
      "closedAt": "2017-11-29T00:16:01Z",
      "mergedAt": "2017-11-29T00:16:01Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "76ef612dcdecaf076ef15bd9cfc14128ce9d59d9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1105,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU1MDY3MTIw",
      "title": "add messages that are required to have the supported_versions extension",
      "url": "https://github.com/tlswg/tls13-spec/pull/1105",
      "state": "CLOSED",
      "author": "iluxonchik",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is mentioned throughout the document, but not in the \"Mandatory-to-Implement\" section.\r\ncloses #1104",
      "createdAt": "2017-11-28T13:11:42Z",
      "updatedAt": "2017-11-28T13:16:24Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4febb3f96ccdd7ed061c2ee3f41f37bbef0591a5",
      "headRepository": "iluxonchik/tls13-spec",
      "headRefName": "mti-ext-fix",
      "headRefOid": "79fce84ac80ad74c6d1aefa1c35e5e09422ed587",
      "closedAt": "2017-11-28T13:16:24Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I will submit a new pull request with fixed formatting (some line endings were changed).",
          "createdAt": "2017-11-28T13:16:24Z",
          "updatedAt": "2017-11-28T13:16:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1106,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU1MDY4ODI1",
      "title": "add messages that are required to have the supported_versions extension",
      "url": "https://github.com/tlswg/tls13-spec/pull/1106",
      "state": "MERGED",
      "author": "iluxonchik",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is mentioned throughout the document, but not in the \"Mandatory-to-Implement\" section.\r\ncloses #1104",
      "createdAt": "2017-11-28T13:19:07Z",
      "updatedAt": "2017-11-29T00:13:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "4febb3f96ccdd7ed061c2ee3f41f37bbef0591a5",
      "headRepository": "iluxonchik/tls13-spec",
      "headRefName": "mti-ext-fix",
      "headRefOid": "75b36bbafdcd2c949c07f180b637eb666c610044",
      "closedAt": "2017-11-29T00:13:17Z",
      "mergedAt": "2017-11-29T00:13:17Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4f0c5b270c8e5131eb7590a752510d0ec5ef282d"
      },
      "comments": [
        {
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is the same as #1105, just without the extra new line additions, etc",
          "createdAt": "2017-11-28T13:20:04Z",
          "updatedAt": "2017-11-28T13:20:04Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk1MDcyOTM=",
          "commit": {
            "abbreviatedOid": "75b36bb"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-28T13:45:27Z",
          "updatedAt": "2017-11-28T13:45:28Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I was under the impression that this section discusses the requirements for the Client Hello (and how the server uses the CH). SV is mentioned a few lines up, so it should probably not be mentioned again here.",
              "createdAt": "2017-11-28T13:45:28Z",
              "updatedAt": "2017-11-28T13:45:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk1MTAwMzg=",
          "commit": {
            "abbreviatedOid": "75b36bb"
          },
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-28T13:54:13Z",
          "updatedAt": "2017-11-28T13:54:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@Lekensteyn maybe I misinterpreted it, but then only thing mentioned a few lines up is that this extension is required to be supported, not that ServerHello must have it (before, the server chose it's version using the `ServerHello.version` field, just like in TLS 1.2).\r\n\r\nI think you're right about that \"this section discusses the requirements for the Client Hello (and how the server uses the CH)\", since it states below \"Servers receiving a ClientHello which does not conform to these requirements MUST abort the handshake with a \"missing_extension\" alert.\"",
              "createdAt": "2017-11-28T13:54:13Z",
              "updatedAt": "2017-11-28T13:54:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk1MTUyMTc=",
          "commit": {
            "abbreviatedOid": "75b36bb"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-28T14:10:34Z",
          "updatedAt": "2017-11-28T14:10:34Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"Implementing the following TLS extensions\" implies that both sides must follow the requirements of the linked section of the specification. An implementation cannot claim compliance if it fails to handle the (absence of) SV in SH.",
              "createdAt": "2017-11-28T14:10:34Z",
              "updatedAt": "2017-11-28T14:10:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk1MjA0MDM=",
          "commit": {
            "abbreviatedOid": "75b36bb"
          },
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-28T14:26:17Z",
          "updatedAt": "2017-11-28T14:26:18Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@Lekensteyn okay then, thank you. Should I close this pull request myself then or should it be closed by one of the maintainers?",
              "createdAt": "2017-11-28T14:26:18Z",
              "updatedAt": "2017-11-28T14:26:18Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk1NDQ2OTQ=",
          "commit": {
            "abbreviatedOid": "75b36bb"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-28T15:30:45Z",
          "updatedAt": "2017-11-28T15:30:45Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@iluxonchik it's just my view, you could close it or let @ekr decide ;)",
              "createdAt": "2017-11-28T15:30:45Z",
              "updatedAt": "2017-11-28T15:30:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk3MDA5OTI=",
          "commit": {
            "abbreviatedOid": "75b36bb"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T00:13:11Z",
          "updatedAt": "2017-11-29T00:13:11Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Actually, I think this is an improvement. I just missed it.",
              "createdAt": "2017-11-29T00:13:11Z",
              "updatedAt": "2017-11-29T00:13:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1108,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU1MjI2MDY5",
      "title": "Hrr cleanup",
      "url": "https://github.com/tlswg/tls13-spec/pull/1108",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-11-29T01:16:18Z",
      "updatedAt": "2017-11-29T15:41:16Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "21b918648ff6e5c0dc40773c573d0f704d3c4bdc",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "hrr_cleanup",
      "headRefOid": "7f54065776f39d75c47e641ef81a2a07bdec33a2",
      "closedAt": "2017-11-29T14:08:55Z",
      "mergedAt": "2017-11-29T14:08:55Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d96e793272845af16297da7c72ad93b81852019c"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I tend to narrow things from the right....",
          "createdAt": "2017-11-29T14:08:52Z",
          "updatedAt": "2017-11-29T14:08:52Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I tend to narrow things from the right....\r\n\r\nProgrammer habits maybe, for me a \"FooTest\" is a specialization of \"Test\", so the current \"KeyShareServerHello\" looks like a specialization of \"ServerHello\" to me. It's a minor thing though.",
          "createdAt": "2017-11-29T15:23:10Z",
          "updatedAt": "2017-11-29T15:23:10Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fair enough, but my habit is the opposite. :)",
          "createdAt": "2017-11-29T15:41:16Z",
          "updatedAt": "2017-11-29T15:41:16Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk3MTc4NjQ=",
          "commit": {
            "abbreviatedOid": "7f54065"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM.\r\n\r\nAs a nitpick, maybe name it \"ServerHelloKeyShare\" instead of \"KeyShareServerHello\" (likewise for CH and HRR).",
          "createdAt": "2017-11-29T02:00:20Z",
          "updatedAt": "2017-11-29T02:00:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1109,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU1MjI2MDkz",
      "title": "Calrify what the PSS code points mean. This is one end of the spectrum,",
      "url": "https://github.com/tlswg/tls13-spec/pull/1109",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "specifically that it just means you support PSS signatures but with\r\nrsaEncryption as the SPKI type. I think we should either require this\r\nor alternately have the code point mean that I have full PSS support,\r\nbut in retrospect, I think that the empty parameters thing isn't that\r\nhelpful.",
      "createdAt": "2017-11-29T01:16:27Z",
      "updatedAt": "2017-12-06T01:37:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "21b918648ff6e5c0dc40773c573d0f704d3c4bdc",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "clarify_pss",
      "headRefOid": "6680e1803f33c225178a02d619a36f6b917636e9",
      "closedAt": "2017-12-06T01:37:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Build is probably failing because \"RFC5756\" is missing in the (informative) references section.",
          "createdAt": "2017-11-29T02:25:38Z",
          "updatedAt": "2017-11-29T02:25:38Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "I find that this is actually introducing certificate type negotiation in TLS, and more specifically, negotiation of the container of the RSA-PSS parameters. I think that it is much simpler to require supporting the RSA-PSS certificate container if RSA-PSS keys are supported.",
          "createdAt": "2017-11-29T12:27:27Z",
          "updatedAt": "2017-11-29T12:27:27Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk3MTIzODQ=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "grittygrease",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T01:21:42Z",
          "updatedAt": "2017-11-29T01:21:43Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"new value\"->\"new values\"?",
              "createdAt": "2017-11-29T01:21:43Z",
              "updatedAt": "2017-11-29T01:21:43Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk3MTM3NzI=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "If we take this approach, I would prefer that we define the second set of codepoints now and avoid confusion.  sign_rsa_pss_sha256 means rsaEncryption keys, and sign_pss_pss_sha256 means id-RSASSA-PSS keys (and we can choose whether the keys have parameters, I would say that we just follow PSS rules and the signature has to match the parameters if present, but the key can omit parameters).\r\n\r\nI guess the argument against that is that maybe we don't want to even *have* id-RSASSA-PSS keys and instead define new, more precise OIDs that didn't have key or signature parameters.  If that is a possibility, that would likely invalidate the existing codepoints anyway (since the signatures now have parameters) and I'd say that it's a bit late for that here.  Not that I'm opposed to that sort of approach, which would be far better than mess that we have here.  However, defining new OIDs and so forth adds a whole new set of delays.  My personal tolerance for delay has completely run dry.",
          "createdAt": "2017-11-29T01:30:59Z",
          "updatedAt": "2017-11-29T01:40:05Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "the \"at least\" here is problematic.  I would go with equal.",
              "createdAt": "2017-11-29T01:30:59Z",
              "updatedAt": "2017-11-29T01:40:05Z"
            },
            {
              "originalPosition": 19,
              "body": "the \"not necessarily\" phrasing here is a little distracting for me.  It implies that maybe you could use a key with a PSS OID.  That's pretty awkward.",
              "createdAt": "2017-11-29T01:33:43Z",
              "updatedAt": "2017-11-29T01:40:05Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk3MjA4MzQ=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T02:24:02Z",
          "updatedAt": "2017-11-29T02:24:02Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Motivation might have come from https://www.ietf.org/mail-archive/web/tls/current/msg24454.html:\r\n> it seems that some existing implementations use weird/unusual salt\r\n> values for RSA-PSS signature with hash algs other than SHA-1.\r\n\r\nDon't know about such systems though, does it refer to Microsoft's implementation?",
              "createdAt": "2017-11-29T02:24:02Z",
              "updatedAt": "2017-11-29T02:24:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4MjYzNTQ=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T12:15:58Z",
          "updatedAt": "2017-11-29T12:15:59Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Does it matter whether other non-TLS systems have such constraints? I'd expect any implementation to be updated anyway for TLS1.3, and conform to it. I'd stick to the\r\n```\r\nMUST be equal to the length of the digest output\r\n```\r\nAs it is (1) simple to understand, (2) straightforward to implement, (3) follows the PKCS#1 2.0 rules of tying the security level with the hash size, and (4) leaves no room for misinterpretations or corner cases.",
              "createdAt": "2017-11-29T12:15:58Z",
              "updatedAt": "2017-11-29T12:18:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4MjgwMzI=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T12:22:50Z",
          "updatedAt": "2017-11-29T12:22:50Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I'm not sure that this is the appropriate document to assert such a MUST. What can a TLS implementation do if a CA document allows including BER parameters?",
              "createdAt": "2017-11-29T12:22:50Z",
              "updatedAt": "2017-11-29T12:22:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4NjU0MDk=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T14:35:06Z",
          "updatedAt": "2017-11-29T14:35:06Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I don't think BER is allowed anywhere in X.509",
              "createdAt": "2017-11-29T14:35:06Z",
              "updatedAt": "2017-11-29T14:35:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4NjY1NjE=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T14:38:23Z",
          "updatedAt": "2017-11-29T14:38:23Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "It is.  Look for the word BER in the PKIX RFC 5280.",
              "createdAt": "2017-11-29T14:38:23Z",
              "updatedAt": "2017-11-29T14:38:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4Njk4NjA=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T14:47:35Z",
          "updatedAt": "2017-11-29T14:47:35Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "@Lekensteyn OpenSSL does use maximum salt length allowed for the public key size (since version 1.0.1).\r\nUnfortunately I don't know what's the behaviour of MS implementation.\r\n\r\n@nmav because PKI structures that use RSA-PSS signatures are already deployed and implementing any changes in them is non-trivial. If we can be compatible with them by allowing a little wiggle room (flexible salt length), I think we should do that.",
              "createdAt": "2017-11-29T14:47:35Z",
              "updatedAt": "2017-11-29T14:47:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4NzExNzY=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T14:51:11Z",
          "updatedAt": "2017-11-29T14:51:12Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I prefer here the #1089 wording:\r\n```\r\n +: An RSA public key (OID rsaEncryption) MUST be supported, an RSASSA-PSS public\r\n +  key (OID id-RSASSA-PSS {{RFC5756}}) without parameters MUST be supported (such\r\n +  that any hash algorithm and salt length can be used), while an RSASSA-PSS\r\n +  public key (OID id-RSASSA-PSS) with parameters MAY be supported.\r\n```\r\n\r\nparameter-less rsa-pss is almost exactly the same as regular rsa, so adding support for it is not big change compared to the effort required to add TLS 1.3",
              "createdAt": "2017-11-29T14:51:12Z",
              "updatedAt": "2017-11-29T14:51:12Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4NzU5MTU=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T15:03:40Z",
          "updatedAt": "2017-11-29T15:03:40Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Sorry. In my previous comment I missed that `When used in certificate signatures,` so it is not  to the point.  Seeing that phrase, I think it makes sense to link to rfc5756 instead of defining formally what to expect on such certificates.",
              "createdAt": "2017-11-29T15:03:40Z",
              "updatedAt": "2017-11-29T15:03:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4NzgxMDA=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T15:09:27Z",
          "updatedAt": "2017-11-29T15:09:27Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "@richsalz the only reference to BER I see in 5280 is:\r\n\r\n```\r\n   Where the information is available via HTTP or FTP, accessLocation\r\n   MUST be a uniformResourceIdentifier and the URI MUST point to either\r\n   a single DER encoded certificate as specified in [RFC2585] or a\r\n   collection of certificates in a BER or DER encoded \"certs-only\" CMS\r\n   message as specified in [RFC2797].\r\n```\r\n\r\nso that reiterates it - if you talk about single certificate, it MUST be DER encoded...",
              "createdAt": "2017-11-29T15:09:27Z",
              "updatedAt": "2017-11-29T15:09:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk4OTk0MDQ=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T16:02:35Z",
          "updatedAt": "2017-11-29T16:02:35Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "There's four occurences and they all say the same kind of thing. I can't find it now, but I know that BER certs are allowed, and OpenSSL had/has code to decode both so that it could verify signatures properly. I think nobody else does this so it is \"de facto\" if not \"de jure\" true.",
              "createdAt": "2017-11-29T16:02:35Z",
              "updatedAt": "2017-11-29T16:02:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Nzk5MDY1NjY=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-29T16:20:59Z",
          "updatedAt": "2017-11-29T16:20:59Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I don't think that they are allowed, it was that just some CAs were creating malformed (BER encoded) certificates and so support for it was added/ossified.\r\n\r\nI have a vague recollection of seeing somewhere among the PKCS#12 related RFCs that any structure that is signed must be DER encoded...",
              "createdAt": "2017-11-29T16:20:59Z",
              "updatedAt": "2017-11-29T16:20:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODAwNzA4MDM=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-11-30T03:44:53Z",
          "updatedAt": "2017-11-30T03:46:03Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "There is more than one RSASSA-PSS codepoint, so \"these\" is probably more appropriate.",
              "createdAt": "2017-11-30T03:44:53Z",
              "updatedAt": "2017-11-30T03:46:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA5MzExMDk=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-04T17:57:19Z",
          "updatedAt": "2017-12-04T17:57:19Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "which codepoint you refer to? there is only rsassaPss OID. What's variable is the parameters field in the Algorithm Identifier struct",
              "createdAt": "2017-12-04T17:57:19Z",
              "updatedAt": "2017-12-04T17:57:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA5MzM1MzY=",
          "commit": {
            "abbreviatedOid": "6680e18"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-04T18:05:09Z",
          "updatedAt": "2017-12-04T18:05:09Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "sha256, sha384, etc.",
              "createdAt": "2017-12-04T18:05:09Z",
              "updatedAt": "2017-12-04T18:05:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1110,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU1MzE3MzI1",
      "title": "Add $me to contributors",
      "url": "https://github.com/tlswg/tls13-spec/pull/1110",
      "state": "MERGED",
      "author": "Lekensteyn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-11-29T11:41:22Z",
      "updatedAt": "2017-11-29T13:58:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8f24b48cf2ad9fe1dbb00f6f864bc7b7444f452e",
      "headRepository": "Lekensteyn/tls13-spec",
      "headRefName": "add-contrib",
      "headRefOid": "a103cc8ee311314b642c4962d4d7da9017e87715",
      "closedAt": "2017-11-29T13:58:15Z",
      "mergedAt": "2017-11-29T13:58:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5846c4f87ca70cccebc656035e97fb34d5d63b28"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1112,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU1NDg1NzQ5",
      "title": "Clarify certificate extensions",
      "url": "https://github.com/tlswg/tls13-spec/pull/1112",
      "state": "MERGED",
      "author": "Lekensteyn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The peer must advertise extensions before they can be sent with a\r\ncertificate message.\r\n\r\nFixes #1111",
      "createdAt": "2017-11-30T00:01:02Z",
      "updatedAt": "2017-12-05T01:32:24Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "be893b64a77940ce5b808fa4ff085d3230908e45",
      "headRepository": "Lekensteyn/tls13-spec",
      "headRefName": "fix-certificate-extensions",
      "headRefOid": "39b20676a8c346df340e13ad864d201c928496c1",
      "closedAt": "2017-12-05T00:45:44Z",
      "mergedAt": "2017-12-05T00:45:44Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9f912dd7ed9b7d88bee031072c50cc0e7dc2420d"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I fixed it with a period.\n\nOn Mon, Dec 4, 2017 at 5:12 PM, kaduk <notifications@github.com> wrote:\n\n> *@kaduk* commented on this pull request.\n> ------------------------------\n>\n> In draft-ietf-tls-tls13.md\n> <https://github.com/tlswg/tls13-spec/pull/1112#discussion_r154822840>:\n>\n> > @@ -3325,11 +3325,12 @@ certificate_list\n>\n>  extensions:\n>  : A set of extension values for the CertificateEntry. The \"Extension\"\n> -  format is defined in {{extensions}}. Valid extensions include\n> -  OCSP Status extension ({{RFC6066}}) and\n> -  SignedCertificateTimestamps ({{!RFC6962}}).  An extension MUST only be present\n> -  in a Certificate message if the corresponding\n> -  ClientHello extension was presented in the initial handshake.\n> +  format is defined in {{extensions}}. Valid extensions for server certificates\n> +  include OCSP Status extension ({{RFC6066}}) and\n> +  SignedCertificateTimestamps ({{!RFC6962}}). Extensions in the Certificate\n> +  message from the server MUST correspond to one from the ClientHello message,\n> +  extensions in the Certificate from the client MUST correspond with an\n> +  extension in the CertificateRequest message from the server.\n>\n> That's a comma splice (switch to semicolon before \"extensions in the\n> Certificate from the client MUST [...]\" to fix).\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/pull/1112#pullrequestreview-81043759>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oVMITvIYAr1MFpo90f_-FWWNp9-9ks5s9Jh9gaJpZM4Qv0qR>\n> .\n>\n",
          "createdAt": "2017-12-05T01:32:24Z",
          "updatedAt": "2017-12-05T01:32:24Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODEwNDM3NTk=",
          "commit": {
            "abbreviatedOid": "39b2067"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-05T01:12:27Z",
          "updatedAt": "2017-12-05T01:12:27Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "That's a comma splice (switch to semicolon before \"extensions in the Certificate from the client MUST [...]\" to fix).",
              "createdAt": "2017-12-05T01:12:27Z",
              "updatedAt": "2017-12-05T01:12:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1113,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU2MjY3NTc1",
      "title": "Clarify that X.509 certificates carried over TLS are DER-encoded.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1113",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Without specifying the encoding, I don't think it's actually defined how\r\nyou transit the certificates. RFC 5280 only says that the TBSCertificate\r\nis DER-encoded for computing the signature, which still allows insanity like XER-encoded everything\r\nwith the receiver re-encoding the TBSCertificate to DER before verifying\r\nthe signature.",
      "createdAt": "2017-12-04T18:08:40Z",
      "updatedAt": "2017-12-05T00:45:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "be893b64a77940ce5b808fa4ff085d3230908e45",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "der-certs",
      "headRefOid": "4211d2ba6f0506d7fa992d742a35484b9aec9435",
      "closedAt": "2017-12-05T00:45:07Z",
      "mergedAt": "2017-12-05T00:45:07Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "0a9922f8709b189728464922844e2617fd9e271a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1114,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU2MzQ5Nzc1",
      "title": "Clarify pss2",
      "url": "https://github.com/tlswg/tls13-spec/pull/1114",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-12-05T01:23:22Z",
      "updatedAt": "2017-12-27T15:27:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c6df0d3044485ec0d1d8a50c6a341d70a424abe8",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "clarify_pss2",
      "headRefOid": "19e7211cca23cbf3d580b58e709937ec5d06fd1f",
      "closedAt": "2017-12-27T15:27:21Z",
      "mergedAt": "2017-12-27T15:27:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5522b677b8c384f2938b059dccf94e640a43c7cd"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The only thing that might need text (though I'm not certain) is that this doesn't describe what it means to have signature_algorithms_cert and not signature_algorithms.  I assume that it means that a signature isn't possible.  However, in previous versions it would be interpreted to mean something else based on default values for signature_algorithms.",
          "createdAt": "2017-12-05T01:30:08Z",
          "updatedAt": "2017-12-05T01:30:08Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODEwNDc3MTg=",
          "commit": {
            "abbreviatedOid": "09b3cfc"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-05T01:38:59Z",
          "updatedAt": "2017-12-05T01:39:00Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "remove \"and the\"",
              "createdAt": "2017-12-05T01:38:59Z",
              "updatedAt": "2017-12-27T15:25:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODEwNDgwNjg=",
          "commit": {
            "abbreviatedOid": "09b3cfc"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-05T01:41:23Z",
          "updatedAt": "2017-12-05T01:41:23Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "There are two extensions, maybe be explicit about the cert one?",
              "createdAt": "2017-12-05T01:41:23Z",
              "updatedAt": "2017-12-27T15:25:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODExNDE1MjY=",
          "commit": {
            "abbreviatedOid": "09b3cfc"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-05T10:54:56Z",
          "updatedAt": "2017-12-05T10:54:56Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "That's a large deviation from the -21 draft, for the benefit of specific platforms. I don't believe that text should be merged in TLS1.3 as is. The requirement:\r\n```\r\nIf a server\r\n+is authenticating via a certificate and the client has not sent a\r\n+\"signature_algorithms\" extension, then the server MUST abort the\r\n+handshake with a \"missing_extension\" alert (see {{mti-extensions}}).\r\n```\r\nis punishing clients which do not need to send this extension, i.e., clients which their validator has no issue handling RSA-PSS. Why this isn't an optional extension?",
              "createdAt": "2017-12-05T10:54:56Z",
              "updatedAt": "2017-12-27T15:25:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODExNDIwMDc=",
          "commit": {
            "abbreviatedOid": "09b3cfc"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-05T10:56:37Z",
          "updatedAt": "2017-12-05T10:56:38Z",
          "comments": [
            {
              "originalPosition": 109,
              "body": "Please spell out the OID if there is no reference given.",
              "createdAt": "2017-12-05T10:56:37Z",
              "updatedAt": "2017-12-27T15:25:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODExNDIwOTc=",
          "commit": {
            "abbreviatedOid": "09b3cfc"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-05T10:56:58Z",
          "updatedAt": "2017-12-05T10:56:58Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "Same for OID. Please spell it out or provide a reference.",
              "createdAt": "2017-12-05T10:56:58Z",
              "updatedAt": "2017-12-27T15:25:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODExNjMxOTI=",
          "commit": {
            "abbreviatedOid": "09b3cfc"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-05T12:22:10Z",
          "updatedAt": "2017-12-05T12:22:10Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "RFC5756 would probably be a good reference (https://tools.ietf.org/html/rfc5756)",
              "createdAt": "2017-12-05T12:22:10Z",
              "updatedAt": "2017-12-27T15:25:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODExODY4ODc=",
          "commit": {
            "abbreviatedOid": "09b3cfc"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-05T13:49:12Z",
          "updatedAt": "2017-12-05T13:49:12Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "This requirement has been in TLS 1.3 for some time. See:\r\nhttps://tlswg.github.io/tls13-spec/draft-ietf-tls-tls13.html#rfc.section.4.2.3\r\n\r\nIn fact, it's required to be there because the default \"signature_algorithms\" value (from 5246) does not indicate that you support SHA-256.\r\n\r\n",
              "createdAt": "2017-12-05T13:49:12Z",
              "updatedAt": "2017-12-27T15:25:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODEyMTQ0Mjk=",
          "commit": {
            "abbreviatedOid": "09b3cfc"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-05T15:06:42Z",
          "updatedAt": "2017-12-05T15:06:42Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "typo: \"the and\" unnecessary",
              "createdAt": "2017-12-05T15:06:42Z",
              "updatedAt": "2017-12-27T15:25:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODEyMTQ2NTU=",
          "commit": {
            "abbreviatedOid": "09b3cfc"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-05T15:07:17Z",
          "updatedAt": "2017-12-05T15:07:18Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "\"applies to signatures\"?",
              "createdAt": "2017-12-05T15:07:18Z",
              "updatedAt": "2017-12-27T15:25:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODEyMTYwNDI=",
          "commit": {
            "abbreviatedOid": "09b3cfc"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-05T15:10:54Z",
          "updatedAt": "2017-12-05T15:10:54Z",
          "comments": [
            {
              "originalPosition": 125,
              "body": "doesn't that prohibit use of parameter-less RSA-PSS SPKI?",
              "createdAt": "2017-12-05T15:10:54Z",
              "updatedAt": "2017-12-27T15:25:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODEzMTAyMTQ=",
          "commit": {
            "abbreviatedOid": "09b3cfc"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-05T19:38:03Z",
          "updatedAt": "2017-12-05T20:16:27Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "> SHOULD also process this extension\r\n\r\nsignature_algorithms, or signature_algorithms_cert?",
              "createdAt": "2017-12-05T19:38:03Z",
              "updatedAt": "2017-12-27T15:25:33Z"
            },
            {
              "originalPosition": 47,
              "body": "I would expect some explicit statement somewhere in here that the \"signature_algorithms_cert extension was introduced to resolve an ambiguity and mismatch with the signature_algorithms extension.  There are some signatures that are not under the control of the TLS endpoint, by virtue of having been made by an external certificate authority, and some other signatures made as part of the TLS protocol. Having separate extensions to indicate support for algorithms in the different places where signatures occur resolves the ambiguity.\"",
              "createdAt": "2017-12-05T19:39:54Z",
              "updatedAt": "2017-12-27T15:25:33Z"
            },
            {
              "originalPosition": 122,
              "body": "So now we are enforcing salt length restrictions on signatures in X509 certificates (both here and above)?",
              "createdAt": "2017-12-05T20:13:49Z",
              "updatedAt": "2017-12-27T15:25:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1115,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU2NjEzMjE3",
      "title": "Tighten language on middlebox",
      "url": "https://github.com/tlswg/tls13-spec/pull/1115",
      "state": "CLOSED",
      "author": "richsalz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Use \"network intermediary\" in all but once place.\r\nAdd forward/backward links to Appendix D\r\nAdd requirement to SHOULD use compatibility.",
      "createdAt": "2017-12-06T00:44:00Z",
      "updatedAt": "2017-12-27T15:53:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c6df0d3044485ec0d1d8a50c6a341d70a424abe8",
      "headRepository": null,
      "headRefName": "tighten-middlebox",
      "headRefOid": "6b479c1363fae768b5268cccc34e68cc9bd262be",
      "closedAt": "2017-12-27T14:47:24Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Pushed an updated commit that fixes the paren and anchor issue, thanks.\r\n",
          "createdAt": "2017-12-06T14:22:51Z",
          "updatedAt": "2017-12-06T14:22:51Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm having a little trouble with the justification for the use of \"network intermediary\" here.  The term \"middlebox\" has a well-established definition (see RFC 3234 for example).  This would seem to be less precise.\r\n\r\nThe use of \"intermediary\" implies something more than what we've observed.  I understand \"intermediary\" to involve protocol participation - TLS termination effectively - and that is not the sort of middlebox that is causing us issues, as David has explained on list.\r\n\r\nAlso, I realize that you think that the SHOULD is helpful.  I would prefer that our default mode of operation avoid the use of this hacky mode.  Firefox just shipped a pre-release with -22 and the compatibility hacks disabled and we can report an improvement in compatibility in at least one case, even without sending ChangeCipherSpec.  I can see both angles, but we might have to just disagree on this point.",
          "createdAt": "2017-12-06T22:47:38Z",
          "updatedAt": "2017-12-06T22:47:38Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Wed, Dec 6, 2017 at 2:47 PM, Martin Thomson <notifications@github.com>\nwrote\n>\n> Also, I realize that you think that the SHOULD is helpful. I would prefer\n> that our default mode of operation avoid the use of this hacky mode.\n> Firefox just shipped a pre-release with -22 and the compatibility hacks\n> disabled and we can report an improvement in compatibility in at least one\n> case, even without sending ChangeCipherSpec. I can see both angles, but we\n> might have to just disagree on this point.\n>\nI go back and forth on the SHOULD, but it's something that would have to go\nto the list...\n",
          "createdAt": "2017-12-06T23:02:42Z",
          "updatedAt": "2017-12-06T23:02:42Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I would prefer that our default mode of operation avoid the use of this hacky mode. Firefox just shipped a pre-release with -22 and the compatibility hacks disabled and we can report an improvement in compatibility in at least one case.\r\n\r\nDo you test both with and without CCS hack? Have you found cases where using CCS breaks while not sending CCS works?\r\n\r\nFWIW, in tris I have chosen for unconditionally sending CCS to simplify the implementation (less knobs and code branches that needs to be tested).",
          "createdAt": "2017-12-06T23:38:09Z",
          "updatedAt": "2017-12-06T23:38:09Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Wed, Dec 6, 2017 at 3:38 PM, Peter Wu <notifications@github.com> wrote:\n\n> I would prefer that our default mode of operation avoid the use of this\n> hacky mode. Firefox just shipped a pre-release with -22 and the\n> compatibility hacks disabled and we can report an improvement in\n> compatibility in at least one case.\n>\n> Do you test both with and without CCS hack?\n>\nWe will be doing so shortly, but it's a 3-armed study (TLS 1.2, TLS 1.3-22,\nTLS 1.3-compat), so we don't know how much we get from TLS-22 alone absent\nhistorical controls.\n\n\n> Have you found cases where using CCS breaks while not sending CCS works?\n>\nNo, we do not have such cases.\n\n\n\n\nFWIW, in tris I have chosen for unconditionally sending CCS to simplify the\n> implementation (less knobs and code branches that needs to be tested).\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/pull/1115#issuecomment-349811628>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oUcVdJXWkWkvhf5K33xLNvNdDuMYks5s9yVjgaJpZM4Q3MRp>\n> .\n>\n",
          "createdAt": "2017-12-06T23:45:55Z",
          "updatedAt": "2017-12-06T23:45:55Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If folks don't like the intermediary term, so be it.  But it's important to collect all the compatibility changes into one place with appropriate links.",
          "createdAt": "2017-12-07T00:25:06Z",
          "updatedAt": "2017-12-07T00:25:06Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@richsalz: I added the links but omitted the name change and the SHOULD. At this point, a normative change like the SHOULD would need to go through the WG.\r\n\r\n@richsalz: I see you aren't in acknowledgements. Please send me a PR to add yourself.",
          "createdAt": "2017-12-27T14:48:54Z",
          "updatedAt": "2017-12-27T14:48:54Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes I am, right after Joe :)\r\nThe changes you made are okay.\r\n",
          "createdAt": "2017-12-27T15:53:47Z",
          "updatedAt": "2017-12-27T15:53:47Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE0MTAyMzU=",
          "commit": {
            "abbreviatedOid": "76efae3"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-06T03:52:37Z",
          "updatedAt": "2017-12-06T03:54:03Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Are we talking cascading style sheets or change cipher spec?",
              "createdAt": "2017-12-06T03:52:37Z",
              "updatedAt": "2017-12-06T18:45:41Z"
            },
            {
              "originalPosition": 85,
              "body": "(and here)",
              "createdAt": "2017-12-06T03:53:07Z",
              "updatedAt": "2017-12-06T18:45:41Z"
            },
            {
              "originalPosition": 98,
              "body": "For all time?",
              "createdAt": "2017-12-06T03:53:47Z",
              "updatedAt": "2017-12-06T18:45:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE0MTEyNjc=",
          "commit": {
            "abbreviatedOid": "76efae3"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-06T04:02:47Z",
          "updatedAt": "2017-12-06T04:02:47Z",
          "comments": [
            {
              "originalPosition": 98,
              "body": "Yes  Think about it.  If you know it's time to stop doing it, then you have out of band information.\r\n",
              "createdAt": "2017-12-06T04:02:47Z",
              "updatedAt": "2017-12-06T18:45:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE0NjcxNzE=",
          "commit": {
            "abbreviatedOid": "6a80035"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-06T09:58:30Z",
          "updatedAt": "2017-12-06T09:58:30Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "unbalanced paren",
              "createdAt": "2017-12-06T09:58:30Z",
              "updatedAt": "2017-12-06T18:45:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE0OTQ3NjU=",
          "commit": {
            "abbreviatedOid": "6a80035"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-06T11:47:17Z",
          "updatedAt": "2017-12-06T11:47:17Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I don't think that you can use inline anchors like that, the parser does not seem to provide such a feature: https://github.com/cabo/kramdown-rfc2629",
              "createdAt": "2017-12-06T11:47:17Z",
              "updatedAt": "2017-12-06T18:45:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE0OTU0Nzg=",
          "commit": {
            "abbreviatedOid": "6a80035"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-06T11:50:19Z",
          "updatedAt": "2017-12-06T11:50:19Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Independent to this PR, but related: is it possible to provide a reference for these \"field measurements\"? Something like https://www.ietf.org/mail-archive/web/tls/current/msg24517.html (but preferably something more specific). Might be useful for the archeologists in the future.",
              "createdAt": "2017-12-06T11:50:19Z",
              "updatedAt": "2017-12-06T18:45:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE1MzU1NDY=",
          "commit": {
            "abbreviatedOid": "6a80035"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-06T14:22:25Z",
          "updatedAt": "2017-12-06T14:22:25Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Perhaps bring that up on the list.  A non-normative link to @davidben's IETF-100 slides might be do-able.",
              "createdAt": "2017-12-06T14:22:25Z",
              "updatedAt": "2017-12-06T18:45:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE2MTc4OTE=",
          "commit": {
            "abbreviatedOid": "9eccafa"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-06T18:17:46Z",
          "updatedAt": "2017-12-06T18:17:46Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "There is another unsupported inline anchor here. It seems also unhappy about the use of `client_hello`, maybe try `client-hello`?",
              "createdAt": "2017-12-06T18:17:46Z",
              "updatedAt": "2017-12-06T18:45:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE2MjY0Nzc=",
          "commit": {
            "abbreviatedOid": "9eccafa"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-06T18:45:25Z",
          "updatedAt": "2017-12-06T18:45:25Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "Thanks, I fixed this. And I moved a sentence from the 2nd to 3rd paragraph.",
              "createdAt": "2017-12-06T18:45:25Z",
              "updatedAt": "2017-12-06T18:45:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1116,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU2Nzk4MDQ0",
      "title": "Clarify TLS protocol invariants.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1116",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This clarifies the versioning rules used by TLS. They are immediate\r\ncorrollaries from how we've always evolved the protocol, but draft-22\r\ndemonstrates that there are widely-deployed non-compliant intermediaries\r\nin the network. Document the rules more clearly.",
      "createdAt": "2017-12-06T17:55:34Z",
      "updatedAt": "2017-12-26T14:26:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c6df0d3044485ec0d1d8a50c6a341d70a424abe8",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "protocol-invariants",
      "headRefOid": "2ffebc175744c193389385fbd16ddffe98484c2c",
      "closedAt": "2017-12-26T14:26:02Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand,",
          "createdAt": "2017-12-26T14:26:02Z",
          "updatedAt": "2017-12-26T14:26:02Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE2MTM0NzA=",
          "commit": {
            "abbreviatedOid": "2ffebc1"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2017-12-06T18:02:56Z",
          "updatedAt": "2017-12-06T18:06:32Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "SHOULD. Also, I note you are being vague about \"preferred\". TLS has generally assumed that the server picks the *highest* version but otherwise has discretion about how to pick the rest of the params.",
              "createdAt": "2017-12-06T18:02:56Z",
              "updatedAt": "2017-12-06T18:06:32Z"
            },
            {
              "originalPosition": 22,
              "body": "I'm not sure what the downgrade protection text means here.",
              "createdAt": "2017-12-06T18:04:00Z",
              "updatedAt": "2017-12-06T18:06:32Z"
            },
            {
              "originalPosition": 37,
              "body": "In TLS 1.3 you need to add some text about the client handling NST and CR extensions.",
              "createdAt": "2017-12-06T18:04:49Z",
              "updatedAt": "2017-12-06T18:06:32Z"
            },
            {
              "originalPosition": 53,
              "body": "This seems like it might be a little strong. If it forwards only parameters it understands, then it can presumably could minimally syntax check the response, right?",
              "createdAt": "2017-12-06T18:05:39Z",
              "updatedAt": "2017-12-06T18:06:32Z"
            },
            {
              "originalPosition": 57,
              "body": "This MAY isn't a normative statement, so probably not capitalized. I think I would do s/MAY/might/ for the rest of this graf.\r\n",
              "createdAt": "2017-12-06T18:06:18Z",
              "updatedAt": "2017-12-06T18:06:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE2MjcwNzI=",
          "commit": {
            "abbreviatedOid": "2ffebc1"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-06T18:47:16Z",
          "updatedAt": "2017-12-06T18:47:16Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "It should probably be \" 1.2; see\" for style consistency with the rest of the DOC.",
              "createdAt": "2017-12-06T18:47:16Z",
              "updatedAt": "2017-12-06T18:47:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE2Mjg5NjA=",
          "commit": {
            "abbreviatedOid": "2ffebc1"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-06T18:53:35Z",
          "updatedAt": "2017-12-06T18:53:35Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "I think this item is a bit misguided in that it lumps CDN's with network devices. I say that not to defend my employer :) but rather because tls-terminating intermediaries has been the problem area.  Maybe that confusion can be cleaned up by a better definition in the first sentence.",
              "createdAt": "2017-12-06T18:53:35Z",
              "updatedAt": "2017-12-06T18:53:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE2Mjk1OTI=",
          "commit": {
            "abbreviatedOid": "2ffebc1"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-06T18:55:38Z",
          "updatedAt": "2017-12-06T18:55:38Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "this implies all earlier versions, the forward-pointer at the top only says 1.2",
              "createdAt": "2017-12-06T18:55:38Z",
              "updatedAt": "2017-12-06T18:55:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE2NjMyNDA=",
          "commit": {
            "abbreviatedOid": "2ffebc1"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-06T20:50:12Z",
          "updatedAt": "2017-12-06T20:50:12Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "No, TLS-terminating devices have *not* been the problem area for these purposes. It's the non-terminating devices (which forward the ClientHello but then incorrectly try to parse out the response), and the weird \"hybrid\" cases where a TLS-terminating device has aspects of a non-terminating one. See my slides from IETF 100.\r\n\r\nA TLS-terminator is \"easy\". You take a TLS server and TLS client and connect them back-toback. Your obligations are thus to be a correct server on one end and a correct client on the other. These obligations hold for both CDNs and MITM boxes. Your server needs to ignore unknown values in the ClientHello. Your client needs to not send ClientHello values it doesn't understand.\r\n\r\nThankfully, I haven't heard of any CDNs that broke since you all just do the obvious thing, while some MITM boxes try to be clever about it (like forwarding the original ClientHello along and then sometimes terminate anyway) and make invalid assumptions.",
              "createdAt": "2017-12-06T20:50:12Z",
              "updatedAt": "2017-12-06T20:50:12Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE2NjY4MzU=",
          "commit": {
            "abbreviatedOid": "2ffebc1"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-06T21:02:58Z",
          "updatedAt": "2017-12-06T21:02:58Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Okay, then I still think you made my point.  Should we even talk about TLS-terminating entities, other than to say it's like two TLS connections?  The problems in this protocol were caused by non-terminating, izzat right?\r\n\r\nA TLS terminator has no additional requirements beyond any other TLS terminator.  That's a tautology, but it seems to be what you're saying in your comment.\r\n\r\nI still think this item needs more clarity.",
              "createdAt": "2017-12-06T21:02:58Z",
              "updatedAt": "2017-12-06T21:02:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE3Mjg1Nzg=",
          "commit": {
            "abbreviatedOid": "2ffebc1"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Generally this looks good; I didn't comment on some things that others have already noted.",
          "createdAt": "2017-12-07T02:01:11Z",
          "updatedAt": "2017-12-07T02:09:09Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "\"is expected to negotiate the most-preferred common parameters, and any attempt to interfere with the negotiation MUST result in either failure of the interference or of the handshake\" takes a slightly different approach.\r\nThough that is rather duplicating the next sentence...",
              "createdAt": "2017-12-07T02:01:11Z",
              "updatedAt": "2017-12-07T02:09:09Z"
            },
            {
              "originalPosition": 33,
              "body": "Do we rather want to say \"the client will fail to interoperate if the server selects one of those parameters\"?",
              "createdAt": "2017-12-07T02:04:47Z",
              "updatedAt": "2017-12-07T02:09:09Z"
            },
            {
              "originalPosition": 48,
              "body": "\"the intermediary's certificate authority\" is a bit weird, since we don't exactly mean \"the certificate authority that issued the intermediary's certificate\" and rather \"a certificate authority controlled by the intermediate\".",
              "createdAt": "2017-12-07T02:06:23Z",
              "updatedAt": "2017-12-07T02:09:09Z"
            },
            {
              "originalPosition": 62,
              "body": "I wonder if it would be more clear to s/This specification/TLS 1.3/ since we've been talking about some other semi-related things for a few paragraphs.",
              "createdAt": "2017-12-07T02:08:45Z",
              "updatedAt": "2017-12-07T02:09:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1117,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU3MDI0OTQy",
      "title": "Allow a future extension to allow external PSKs and certificate-based\u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/1117",
      "state": "MERGED",
      "author": "russhousley",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026 authentication",
      "createdAt": "2017-12-07T15:30:53Z",
      "updatedAt": "2017-12-27T14:41:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c6df0d3044485ec0d1d8a50c6a341d70a424abe8",
      "headRepository": "russhousley/tls13-spec",
      "headRefName": "allow-psk-with-extn",
      "headRefOid": "a05266ae720d799b236edf482d5f9e99d05a26c1",
      "closedAt": "2017-12-27T14:41:31Z",
      "mergedAt": "2017-12-27T14:41:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4385cb2824b1a65d0b36a75fd70b379c413cbc72"
      },
      "comments": [
        {
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm inclined to agree with @kaduk. A `TLS` extension can change anything it wants about the protocol, which means that in the limit, the text you suggested can be added next to every prohibition present in the draft, and while it does make sense to put it some places, this doesn't seem to be such a critical part that needs this mentioned, it just bulks up the spec. \r\n\r\nIf this edit is accepted, however, it might be a good idea to be consistent with the already existing wording and use \r\n> `unless negotiated by some extension`\r\n \r\ninstead, which is also less wordy and cognitively complex than the current one, while conveying the same information.",
          "createdAt": "2017-12-10T02:54:23Z",
          "updatedAt": "2017-12-10T02:55:06Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed with others. I won't be unhappy if the text is there, but I think it's redundant and makes an already rather long specification ever so slightly longer. Any extension is a minor (or major, in this document!) protocol revision and is thus allowed to define whatever semantics or protocol tweaks it needs to.",
          "createdAt": "2017-12-10T05:09:56Z",
          "updatedAt": "2017-12-10T05:09:56Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE5NTc1NjQ=",
          "commit": {
            "abbreviatedOid": "9ca2f9f"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This feels like a strange wording to me (and I also personally don't feel that explicit text to this effect is needed, though neither do I object to such text).\r\n(I would be more likely to use a phrasing that involves appending to the end of the (old) sentence something like \", unless explicitly enabled by some future protocol extension.\")",
          "createdAt": "2017-12-07T18:56:12Z",
          "updatedAt": "2017-12-07T18:56:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1118,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU3MzI1MzE1",
      "title": "Try to clarify SupportedVersions encoding in HRR",
      "url": "https://github.com/tlswg/tls13-spec/pull/1118",
      "state": "MERGED",
      "author": "ctz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-12-08T20:17:21Z",
      "updatedAt": "2017-12-22T21:08:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c6df0d3044485ec0d1d8a50c6a341d70a424abe8",
      "headRepository": "ctz/tls13-spec",
      "headRefName": "jbp-versions-in-hrr",
      "headRefOid": "eaca46d1e90195545d1015af408bf4735decd1b8",
      "closedAt": "2017-12-22T21:08:15Z",
      "mergedAt": "2017-12-22T21:08:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "88d6eed9937ba26e46313690493938198e1d6fc7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1119,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU3NDE1NDc5",
      "title": "put commands between code tags",
      "url": "https://github.com/tlswg/tls13-spec/pull/1119",
      "state": "MERGED",
      "author": "iluxonchik",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Command-line commands are now surrounded within code tags, which results in a nicer Markdown rendering.",
      "createdAt": "2017-12-10T03:43:25Z",
      "updatedAt": "2017-12-10T12:35:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c6df0d3044485ec0d1d8a50c6a341d70a424abe8",
      "headRepository": "iluxonchik/tls13-spec",
      "headRefName": "submitting-styling",
      "headRefOid": "c77a6d76d8f7d7f181ccc489cc78c86b0b0f8069",
      "closedAt": "2017-12-10T12:35:55Z",
      "mergedAt": "2017-12-10T12:35:55Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "97caff8fce54ff2c0441795a69a45169dd67ae24"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1120,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU3NDI3MTE1",
      "title": "fix .version mentions with either .legacy_version or supported_versions",
      "url": "https://github.com/tlswg/tls13-spec/pull/1120",
      "state": "CLOSED",
      "author": "iluxonchik",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some of the places in the draft were still using .version field\r\nreferrences in ServerHello and HelloRetryRequest, those were replaced\r\nwith either .legacy_version field or \"supporeted_versions\" extension.",
      "createdAt": "2017-12-10T11:28:38Z",
      "updatedAt": "2017-12-27T00:49:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "97caff8fce54ff2c0441795a69a45169dd67ae24",
      "headRepository": "iluxonchik/tls13-spec",
      "headRefName": "replace-version-field-by-extension",
      "headRefOid": "0ef378418174faa2a3ac1482e5f6f81e674e06ce",
      "closedAt": "2017-12-26T14:34:59Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@iluxonchik I merged this by hand. Please send me a PR to add your name to the acknowledgements",
          "createdAt": "2017-12-26T14:34:59Z",
          "updatedAt": "2017-12-26T14:34:59Z"
        },
        {
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr okay :smile: I'm in the process of setting up a new domain and a new e-mail server, so I will do a PR as soon as the process is done.",
          "createdAt": "2017-12-27T00:49:41Z",
          "updatedAt": "2017-12-27T00:49:41Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODIzNDg5Nzk=",
          "commit": {
            "abbreviatedOid": "ac5134a"
          },
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-10T12:33:05Z",
          "updatedAt": "2017-12-10T12:33:05Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "This is wrong. HelloRetryRequest should be removed (will do in a rebase).",
              "createdAt": "2017-12-10T12:33:05Z",
              "updatedAt": "2017-12-12T08:55:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODIzNjQxNjI=",
          "commit": {
            "abbreviatedOid": "07ae6ed"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-10T22:01:45Z",
          "updatedAt": "2017-12-10T22:05:02Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I think there is a \"the\" missing here.",
              "createdAt": "2017-12-10T22:01:45Z",
              "updatedAt": "2017-12-12T08:55:59Z"
            },
            {
              "originalPosition": 38,
              "body": "\"as well as the ClientHello and ServerHello \"supported_versions\" extensions\".\r\nIt's not clear whether the HelloRetryRequest specialization of ServerHello requires a separate callout here.",
              "createdAt": "2017-12-10T22:03:15Z",
              "updatedAt": "2017-12-12T08:55:59Z"
            },
            {
              "originalPosition": 47,
              "body": "I don't think this change is correct -- \"versions'\" with a trailing apostrophe is the possessive form of the plural \"versions\", i.e., \"the handshakes of prior versions of TLS\".",
              "createdAt": "2017-12-10T22:04:41Z",
              "updatedAt": "2017-12-12T08:55:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODI1NTYyNzU=",
          "commit": {
            "abbreviatedOid": "07ae6ed"
          },
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-11T16:41:29Z",
          "updatedAt": "2017-12-11T16:41:30Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "@kaduk you're correct, thank you.",
              "createdAt": "2017-12-11T16:41:29Z",
              "updatedAt": "2017-12-12T08:55:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODI1NTczNTc=",
          "commit": {
            "abbreviatedOid": "07ae6ed"
          },
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-11T16:44:23Z",
          "updatedAt": "2017-12-11T16:44:24Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "@kaduk thank you, I agree, I'll add it.",
              "createdAt": "2017-12-11T16:44:23Z",
              "updatedAt": "2017-12-12T08:55:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODI1NjA2NTc=",
          "commit": {
            "abbreviatedOid": "07ae6ed"
          },
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-11T16:53:27Z",
          "updatedAt": "2017-12-11T16:53:27Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "@kaduk isn't `extension` (singular) the correct form? We're talking about the same extension, not multiple ones. Your observation applies to my other edit as well, I made it explicit in the previous case, so I'll add it here too.",
              "createdAt": "2017-12-11T16:53:27Z",
              "updatedAt": "2017-12-12T08:55:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODI2ODYxODk=",
          "commit": {
            "abbreviatedOid": "07ae6ed"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-12T00:24:28Z",
          "updatedAt": "2017-12-12T00:24:28Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "It's kind of subtle.  To start off with, we're talking about version negotiation, which means we care about the contents of the extension blocks, not the type off extension.  And there are distinct instances of the same extension type in ClientHello and ServerHello, potentially holding different contents (used for negotiation).  So the presence of different instances justifies the use of the plural, to me.",
              "createdAt": "2017-12-12T00:24:28Z",
              "updatedAt": "2017-12-12T08:55:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODI3NTQ0MDQ=",
          "commit": {
            "abbreviatedOid": "07ae6ed"
          },
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-12T08:49:27Z",
          "updatedAt": "2017-12-12T08:49:27Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "@kaduk yeah, I see where you're coming from. Actually since we're on it, shouldn't I add the `ServerHello.legacy_version` to the text too? I missed that one.",
              "createdAt": "2017-12-12T08:49:27Z",
              "updatedAt": "2017-12-12T08:55:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODI3NTYzMTg=",
          "commit": {
            "abbreviatedOid": "07ae6ed"
          },
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-12T08:57:09Z",
          "updatedAt": "2017-12-12T08:57:09Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "@kaduk I added `ServerHello.legacy_version`, as well as accepted your grammar suggestion in 0ef3784",
              "createdAt": "2017-12-12T08:57:09Z",
              "updatedAt": "2017-12-12T08:57:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1122,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU3NDMwMTc0",
      "title": "fix Backward Compatibility section paragraph",
      "url": "https://github.com/tlswg/tls13-spec/pull/1122",
      "state": "MERGED",
      "author": "iluxonchik",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "closes #1121",
      "createdAt": "2017-12-10T13:00:26Z",
      "updatedAt": "2017-12-22T21:08:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "97caff8fce54ff2c0441795a69a45169dd67ae24",
      "headRepository": "iluxonchik/tls13-spec",
      "headRefName": "backwards-compatiblity-protocol-versions",
      "headRefOid": "01080000e45d8feb78ba922740495693a7eed244",
      "closedAt": "2017-12-22T21:08:53Z",
      "mergedAt": "2017-12-22T21:08:53Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d01697e3858198298b882473a8355ee27a69d86b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODIzNjM1Njc=",
          "commit": {
            "abbreviatedOid": "7aec91b"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-10T21:41:46Z",
          "updatedAt": "2017-12-10T21:41:46Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I might word it as \"there is at least one protocol version supported by both the client and the server\", but that's editorial.\r\nOverall this seems an okay direction to go in.",
              "createdAt": "2017-12-10T21:41:46Z",
              "updatedAt": "2017-12-11T16:36:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODI1NTE0MjA=",
          "commit": {
            "abbreviatedOid": "7aec91b"
          },
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-11T16:28:14Z",
          "updatedAt": "2017-12-11T16:28:14Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "@kaduk agree, your version is easier to read. Also, there's a typo in \"least\".",
              "createdAt": "2017-12-11T16:28:14Z",
              "updatedAt": "2017-12-11T16:36:22Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1123,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU3NDk2OTI1",
      "title": "Added section on cross-protocol attacks",
      "url": "https://github.com/tlswg/tls13-spec/pull/1123",
      "state": "CLOSED",
      "author": "nmav",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-12-11T07:50:06Z",
      "updatedAt": "2018-01-04T17:02:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cb3982fb95a705ab21ce86de0f38d67685ff7848",
      "headRepository": "nmav/tls13-spec",
      "headRefName": "tmp-add-security-considerations-for-rsa-pss",
      "headRefOid": "9da7b8ba1470c7e848e9a460006c42503c5a72d4",
      "closedAt": "2017-12-27T15:13:01Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Does the versioning advice (as opposed to the advice to separate PKCS1 and PSS keys) actually do anything? We put a context string in the signature, so cross-protocol woes where both protocols perform the same private key operation are fine (e.g. ECDSA keys or RSA-PSS in both 1.2 and 1.3).\r\n\r\nAs for PSS and PKCS1 separation, I don't think unilateral separation at the server will do anything:\r\n\r\nFor PSS signing against PKCS1 signing, I find it hard to imagine a scenario where separating the keys at signing would help given that RFC 4055 already does not separate them at verification and the signing inputs include fresh server entropy. And the fact that they *weren't* separated was the whole reason TLS 1.3 thought it could get away with switching to PSS in the same revision that added it. If the WG believes they ought to be separated, it should burn the rsaEncryption provision in RFC 4055 and then allow PKCS1 again. Otherwise, if we're not burning that provision, we should get some analysis on sharing a key here as any text we put in forbidding it is just wishful thinking. (Given that lots of software today accepts RSA-PSS X.509 signatures on rsaEncryption SPKIs per RFC 4055, that analysis is probably needed regardless.)\r\n\r\nFor PSS signing against PKCS1 decryption, there is indeed the same concern as PKCS1 signing against PKCS1 decryption, that your PKCS1 decryption logic had better not be vulnerable to the Bleichenbacher attack. But note that key separation on the server does not save you from this attack. A successful Bleichenbacher attack on one of the server's keys means I have a raw decryption oracle and can perform any operation I like, at whatever TLS version I like, with the key.\r\n\r\nThat is, when the attacker's got a Bleichenbacher oracle, what matters isn't what the server *uses* the key for, but what the client *accepts* it for. Though you do not need anything cross-protocol anyway as most clients still accept static RSA. Removing that would be lovely but, sadly, still far from practical. (If the client does *not* accept static RSA and *does* enforce the key usage bit on the certificate *then* you are probably okay.)\r\n\r\nPS: Bleichenbacher only gives you an RSA decryption oracle, not the key itself, no? So \"will recover the key used for TLS1.3 signatures\" is not really right. (The distinction being that the attacker only gets to perform private key operations as long as the oracle is online.)",
          "createdAt": "2017-12-11T16:42:12Z",
          "updatedAt": "2017-12-11T16:43:51Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "> I think that this could be said more succinctly. That is, something like:\r\n>>    Use of the same private key for different versions of TLS exposes that key to attacks in all versions of the protocol. Using a different key for each version isolates each key from vulnerabilities in other versions.\r\n\r\nThank you. I like that text and I updated to include it. However I believe there should be more concrete analysis pointing to the actual issues, thus I've also included references.\r\n\r\n> Then the specific recommendations:\r\n>>    A deployment of TLS 1.3 that supports earlier versions SHOULD use different keys for each version. For RSA keys, a deployment SHOULD use different keys for RSASS-PSS signatures, PKCS#1v1.5 signatures, and RSA key transport.\r\n\r\nYou take that proposal one step further. What about making more specific what flags should be there to allow implementation distinguishing these keys?\r\n```\r\nFor RSA keys, a deployment SHOULD use different keys for RSASS-PSS signatures,\r\nPKCS#1v1.5 signatures, and RSA key transport. The certificates of these keys SHOULD\r\nbe marked for their usage (see Key Usage of {{RFC5280}}) as follows.\r\n\r\n|Purpose of key               |Key usage flags  |Subject Public Key Algorithm     |\r\n|:---------------------------:|:---------------:|:-------------------------------:|\r\n|TLS1.2 RSA key transport     | keyEncipherment |1.2.840.113549.1.1.1 or 2.5.8.1.1|\r\n|TLS1.2 RSA signatures        | digitalSignature|1.2.840.113549.1.1.1 or 2.5.8.1.1|\r\n|TLS1.3 RSASSA-PSS signatures | digitalSignature|  1.2.840.113549.1.1.10          |\r\n|TLS1.3 RSASSA-PSS compat signatures | digitalSignature|  1.2.840.113549.1.1.1           |\r\n\r\nCertificates for use with TLS 1.3, SHOULD NOT be marked for keyEncipherment.\r\n```\r\n",
          "createdAt": "2017-12-12T10:09:20Z",
          "updatedAt": "2017-12-12T10:39:25Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "> Does the versioning advice (as opposed to the advice to separate PKCS1 and PSS keys) actually do anything? We put a context string in the signature, so cross-protocol woes where both protocols perform the same private key operation are fine (e.g. ECDSA keys or RSA-PSS in both 1.2 and 1.3).\r\n\r\nThat versioning only protects when the key is used for signatures only. It wouldn't do anything if you use it for different purpose (decryption and signatures). I made that more apparent in the text.\r\n\r\n> For PSS signing against PKCS1 decryption, there is indeed the same concern as PKCS1 signing against PKCS1 decryption, that your PKCS1 decryption logic had better not be vulnerable to the Bleichenbacher attack.\r\n\r\nRight. Isn't however the point of the security analysis section to underline these risks? The pace under which we find new vulnerabilities related to that original attack in 90's shows that we should consider a world where it is hard to make a RSA (PKCS#1 1.5) decryption not vulnerable to a variant of the Bleichenbacher attack.\r\n\r\n \r\n> But note that key separation on the server does not save you from this attack. A successful Bleichenbacher attack on one of the server's keys means I have a raw decryption oracle and can perform any operation I like, at whatever TLS version I like, with the key.\r\n\r\nCould you elaborate on that? Would the amendment based on @martinthomson 's suggestion on the comment above address that?\r\n\r\n> Bleichenbacher only gives you an RSA decryption oracle, not the key itself, no? So \"will recover the key used for TLS1.3 signatures\" is not really right.\r\n\r\nThanks, that's correct. I've updated the text.",
          "createdAt": "2017-12-12T10:32:16Z",
          "updatedAt": "2017-12-12T10:40:04Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben \r\n> For PSS signing against PKCS1 decryption, there is indeed the same concern as PKCS1 signing against PKCS1 decryption, that your PKCS1 decryption logic had better not be vulnerable to the Bleichenbacher attack.\r\n\r\nyet it is something that significant portion of top internet domains were vulnerable to ([ROBOT](https://robotattack.org/)), despite two freely available and Open Source test suites being able to detect it\r\n\r\n> PS: Bleichenbacher only gives you an RSA decryption oracle, not the key itself, no?\r\n\r\nno, it also allows you to sign arbitrary messages; so having ability to mark a key as \"never use it for RSA key exchange\" is valuable",
          "createdAt": "2017-12-13T14:22:22Z",
          "updatedAt": "2017-12-13T14:22:22Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> You take that proposal one step further. What about making more specific what flags should be there to allow implementation distinguishing these keys?\r\n\r\nwhile I very like that idea, I'm afraid that that ship has sailed, sunk, was dredged up and now sits in a museum...",
          "createdAt": "2017-12-13T14:31:23Z",
          "updatedAt": "2017-12-13T14:31:23Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The new text is better in that it explains the motivations more clearly (that you are concerned about the signing vs. decryption collision, not the signing vs. signing collision), but the recommendations are neither necessary nor sufficient to address those concerns. They're also a bit redundant.\r\n\r\nAnswering your question above may make the the problem clearer:\r\n\r\n>> But note that key separation on the server does not save you from this attack. A successful Bleichenbacher attack on one of the server's keys means I have a raw decryption oracle and can perform any operation I like, at whatever TLS version I like, with the key.\r\n>\r\n> Could you elaborate on that? Would the amendment based on @martinthomson 's suggestion on the comment above address that?\r\n\r\nIt would not. Remember key separation is not a unilateral thing. Both client and server must know to separate the keys. The proposed split point, TLS versions, is not reflected in the certificate. Suppose we have a server with a TLS 1.2 key and a TLS 1.3 key which implemented static RSA badly and exposed a Bleichenbacher oracle. The attacker can still use the TLS 1.2 key to sign for TLS 1.3, which the client will happily accept. The client doesn't know this is the TLS 1.2 key and that a separate TLS 1.3 key exists.\r\n\r\nMoreover, one does not have to attack TLS 1.3. The client probably still supports TLS 1.2, so you can sign a TLS 1.2 ServerKeyExchange. Or one could just attack TLS 1.2 static RSA because the client still supports that one too. (Much as I would love to lose that, usage rates are such that it's not remotely plausible right now.) Put it another way: key separation would not save you from DROWN because the attacker would just use your SSLv2 key to speak SSLv3/TLS.\r\n\r\nThe advice also does too much in other scenarios. With an ECDSA key, there are no signing vs decryption concerns. The CertificateVerify construction works fine. *We want and designed TLS 1.3 to be usable with the same keys as TLS 1.2*. We wish for TLS 1.3 to be widely deployable and thus with minimal friction. You should be able to update your system TLS library and have TLS 1.3 available. That implies we need the same keys to work. Moreover, whatever wishful thinking we put in the text, sharing keys is just how people deploy TLS versions today, and will continue to be how they do it tomorrow. Key management is hard. It will take a while for all of today's server tooling to be replaced with fancy automated ACME things.\r\n\r\nOtherwise we'd just drop RSA altogether. Maybe even ECDSA. Just declare Ed25519 MTI for TLS 1.3.\r\n\r\nI believe what you wanted is:\r\n\r\n* If you can, turn off static RSA. That thing is terrible. But this is also wishful thinking and won't happen. Too much legacy.\r\n\r\n* If you can't do that, separate RSA signing and decrypt keys *with separate key usage bits in the certificate*.\r\n\r\nThe key usage part is important for this to meaningful. That prevents the client from accepting a forged signature off of that key. This is not worthless, but it's only of marginal value:\r\n\r\n* Key management is still hard. No one will actually do this.\r\n\r\n* In practice, clients don't actually check the cipher-specific RSA key usage bit. My understanding is CAs and antivirus MITMs and the like have massively screwed this up. Chrome checks it for TLS 1.3 because that's new, but I need to get some metrics for what it'd take to clear through this one.\r\n\r\n* But it doesn't matter that no one check because clients still support static RSA. The attacker can still attack that one. So we're still stuck needing to implement static RSA without the Bleichenbacher oracle. It's a pity because, as we repeatedly learn, folks keep messing that up. But this PR does not fix that.\r\n\r\nNow, what could be interesting is some extension in the certificate that says \"I am new enough to do ECDHE. If you are also new enough to do ECDHE, reject this certificate, even for static RSA\". That would make key separation actually do something. A new extension would also clear whatever legacy mess we have with key usage bits. But I don't think that's for this specification.",
          "createdAt": "2017-12-13T15:43:19Z",
          "updatedAt": "2017-12-13T15:46:13Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "@tomato42 \r\n>>    You take that proposal one step further. What about making more specific what flags \r\n>>should be there to allow implementation distinguishing these keys?\r\n> while I very like that idea, I'm afraid that that ship has sailed, sunk, was dredged up and now sits in a museum...\r\n\r\nThat may be the case for <TLS1.2, but I do not think that's the case for TLS1.3. At TLS1.3 one can simply define that digitalSignature is the only allowed flag.\r\n",
          "createdAt": "2017-12-14T08:38:08Z",
          "updatedAt": "2017-12-14T08:38:08Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "@davidben \r\n> Moreover, one does not have to attack TLS 1.3. The client probably still supports TLS 1.2, so you can sign a TLS 1.2 ServerKeyExchange. Or one could just attack TLS 1.2 static RSA because the client still supports that one too. (Much as I would love to lose that, usage rates are such that it's not remotely plausible right now.) Put it another way: key separation would not save you from DROWN because the attacker would just use your SSLv2 key to speak SSLv3/TLS.\r\n\r\nIf I can read your point right, it narrows down that if that proposal doesn't protect TLS1.2 clients which do RSA, it is not worth it. I understand, though I disagree. That proposal can  keep TLS1.3 communications safe, even if there are issues under TLS1.2, and I've made that explicit now in the text. \r\n\r\n> With an ECDSA key, there are no signing vs decryption concerns.\r\n\r\nThere is. An ECDSA key is actually in ECDH key with different key usage flags. The same protection should be there, and I've included that in the text.\r\n\r\n>    If you can, turn off static RSA. That thing is terrible. But this is also wishful thinking and won't happen. Too much legacy.\r\n\r\nToo many attacks also. One was just yesterday. That's why I believe TLS1.3 shouldn't stay silent on that. It should recommend against using it, and that's what this proposal aims for.\r\n\r\n> If you can't do that, separate RSA signing and decrypt keys with separate key usage bits in the certificate. he key usage part is important for this to meaningful. That prevents the client from accepting a forged signature off of that key. This is not worthless, but it's only of marginal value\r\n\r\nAs I mentioned above, I disagree here. The value is being able to ensure that TLS1.3 communications are secure, even if your TLS1.2 implementation is vulnerable. That's not marginal in my opinion.\r\n\r\n> In practice, clients don't actually check the cipher-specific RSA key usage bit. My understanding is CAs and antivirus MITMs and the like have massively screwed this up. Chrome checks it for TLS 1.3 because that's new, but I need to get some metrics for what it'd take to clear through this one.\r\n\r\nTell me about this. However, just because TLS1.3 is new, we have the opportunity to clarify these details on the protocol, to allow these or new implementors to get it right. In fact for TLS1.3 the story can be very simple; only the 'digitalSignature' flag is allowed. This proposal may not even be followed by all (it's a recommendation after all), however, it is the point to refer to when one wants to prevent attacks on TLS1.x to propagate to TLS1.3.\r\n\r\nNote that this proposal doesn't affect interoperability in any way. RSA key transport is still allowed. It however makes sure that if you use it, you will not be able to attack clients which check the key/certificate flags.\r\n\r\n\r\n",
          "createdAt": "2017-12-14T08:58:31Z",
          "updatedAt": "2017-12-14T08:58:31Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If I can read your point right, it narrows down that if that proposal doesn't protect TLS1.2 clients which do RSA, it is not worth it. I understand, though I disagree. That proposal can keep TLS1.3 communications safe, even if there are issues under TLS1.2, and I've made that explicit now in the text.\r\n\r\n No, you did not read my point right.\r\n\r\nKey separations not reflected in the certificate do not do anything. Your text proposes a versions split. Your table proposes a key usages AND versions split. The versions split does not do anything. If your TLS 1.2 key is compromised, the attacker can use that to speak TLS 1.3 because the client has no clue that the key isn't used for TLS 1.3.\r\n\r\nFrom the first message:\r\n\r\n> A successful Bleichenbacher attack on one of the server's keys means I have a raw decryption oracle and can perform any operation I like, *at whatever TLS version I like*, with the key.\r\n\r\nFrom the second message:\r\n\r\n> Suppose we have a server with a TLS 1.2 key and a TLS 1.3 key which implemented static RSA badly and exposed a Bleichenbacher oracle. *The attacker can still use the TLS 1.2 key to sign for TLS 1.3, which the client will happily accept.* The client doesn't know this is the TLS 1.2 key and that a separate TLS 1.3 key exists.\r\n\r\nMaking noise about separating \"TLS 1.2 RSA signatures\" and \"TLS 1.3 RSASSA-PSS signatures\" is useless because the client will accept the former keys in the latter context.\r\n\r\nSeparately, yes, none of the key separations you describe will protect clients which accept static RSA. I do indeed think that makes them not worth it, given how hard key management is and how long it will be before such clients actually exist. (I will note that the text doesn't even say what protections its recommendation does and doesn't provide.) If no one will follow the recommendation, we should not clutter what is already an overly long specification with it.\r\n\r\n> There is. An ECDSA key is actually in ECDH key with different key usage flags. The same protection should be there, and I've included that in the text.\r\n\r\nSure, recommending that ECDSA keys only be used for ECDSA and marked via key usage is reasonable. Though I expect people are already getting this right.\r\n\r\n> Tell me about this. However, just because TLS1.3 is new, we have the opportunity to clarify these details on the protocol, to allow these or new implementors to get it right. In fact for TLS1.3 the story can be very simple; only the 'digitalSignature' flag is allowed.\r\n\r\nIndeed. But this PR does not clarify that. It instead goes on about splitting keys by version.\r\n\r\n> Note that this proposal doesn't affect interoperability in any way. RSA key transport is still allowed. It however makes sure that if you use it, you will not be able to attack clients which check the key/certificate flags.\r\n\r\nThe second iteration of the text, which I was commenting on, did *not* do this. Your text said to separate by protocol version, not by key usage. Were on to do only that, the TLS 1.2 key would have both keyEncipherment AND digitalSignature while the TLS 1.3 key have only digitalSignature. You still could use the former for the latter.\r\n\r\nNow your text says to separate by versions, but your table by versions AND key usage. I'm going to assume you meant what your table says. That works, but only one of your proposed separations does anything.",
          "createdAt": "2017-12-14T14:37:58Z",
          "updatedAt": "2017-12-14T14:37:58Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I also don't think this is the right PR.\r\n\r\nFrom my perspective, the operational constraint is that servers be able to\r\nuse their existing RSA certificates which generally need to have both\r\nkeyEncipherment (to use static RSA) and digitalSignature (to use (EC)DHE)\r\nset for TLS 1.3. This means that we can't require (or even encourage)\r\nclients to enforce that keyEncipherment is not present.\r\n\r\nFrom my perspective, the threat that needs to be noted is the use of\r\na Bleichenbacher-type oracle from an RSA-encryption capable TLS 1.2 or\r\nbelow server to construct digital signatures that can be used in the\r\ncontext of TLS 1.3 (as described by Jaeger et al). Unfortunately,\r\nI don't believe that that threat can be prevented as long as:\r\n\r\n(a) the server is prepared to do TLS 1.2 static RSA (and of course\r\n    is vulnerable)\r\n(b) the client will accept the same key for TLS 1.3 as is used with\r\n    TLS 1.2 (which, as I said, is a requirement)\r\n\r\nHaving the server just use separate keys doesn't help, as long as the\r\nclient will accept the key intended for static RSA.\r\n\r\nIn other words, I think it would be fine to say something to the effect\r\nof:\r\n\r\n    Although TLS 1.3 does not use RSA key transport and so is not\r\n    directly susceptible to Bleichenbacher-type attacks, if TLS 1.3\r\n    servers also support static RSA in the context of previous\r\n    versions of TLS, then it may be possible to impersonate the server\r\n    for TLS 1.3 connections, as shown by Ja\\\"{e}ger et el [REF]. TLS\r\n    1.3 implementations can prevent this attack by disabling support\r\n    for static RSA across all versions of TLS.\r\n\r\nI don't think anything else is useful, for the reasons indicated by\r\nDavid Benjamin.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2017-12-14T15:11:24Z",
          "updatedAt": "2017-12-14T15:11:24Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note that you *could* address this problem by having two keys with one you just used for static RSA and marked for keyEncipherment and the other used for signature and marked as digitalSignature. If we assume clients enforce then this would help, but it's a big pain for the server because it means two new certs, and so I doubt people will do it.",
          "createdAt": "2017-12-14T15:17:00Z",
          "updatedAt": "2017-12-14T15:17:00Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "> Note that you could address this problem by having two keys with one you just used for static RSA and marked for keyEncipherment and the other used for signature and marked as digitalSignature. If we assume clients enforce then this would help, but it's a big pain for the server because it means two new certs, and so I doubt people will do it.\r\n\r\nSome servers already do that. See for example 'www.google.com'. It uses different certificates with different key usage flags for RSA and *DHE-RSA ciphersuites, so I believe it is feasible and it makes sense to recommend it as good practice which defends against this attack. That's what my last update does.\r\n\r\nSecurity-wise the best defense is to forbid non-RSASSA-PSS certificates for TLS1.3. That would eliminate any clash of algorithms between protocols, at the cost of not being able to re-use your old RSA key under TLS1.3. However, given the importance of the latter, that's no longer an option.",
          "createdAt": "2017-12-15T12:04:20Z",
          "updatedAt": "2017-12-15T12:04:34Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "@davidben Very nice comments. I believe I got your point. Indeed there is no real separation of protocols (since we cannot mandate RSASSA-PSS certs for TLS1.3). The only separation that can be achieved only between RSA encryption under TLS1.3 and RSA signatures under TLS1.x.",
          "createdAt": "2017-12-15T12:35:04Z",
          "updatedAt": "2017-12-15T12:35:04Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> See for example 'www.google.com'. It uses different certificates with different key usage flags for RSA and *DHE-RSA ciphersuites, so I believe it is feasible and it makes sense to recommend it as good practice which defends against this attack.\r\n\r\nI'm pretty sure our servers do not currently do this. :-)",
          "createdAt": "2017-12-15T14:28:36Z",
          "updatedAt": "2017-12-15T14:28:36Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(Is it possible you got switched from an RSA to an ECDSA certificate when you did that test? We do, of course, use different certificates for RSA and ECDHE-ECDSA.)",
          "createdAt": "2017-12-15T14:31:08Z",
          "updatedAt": "2017-12-15T14:31:08Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "> (Is it possible you got switched from an RSA to an  ECDSA certificate when you did that test? We do, of course, use  different certificates for RSA and ECDHE-ECDSA.)\r\n\r\nActually yes. Then I was wrong, no example of such good practice then :)\r\n\r\n\r\n",
          "createdAt": "2017-12-15T14:56:50Z",
          "updatedAt": "2017-12-15T14:56:50Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "@ekr why was this closed? Was it for the recommendation present in that section? A section on cross-protocol attacks is missing from the security analysis of the protocol.",
          "createdAt": "2018-01-04T09:27:57Z",
          "updatedAt": "2018-01-04T09:27:57Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I added the following text, which I felt captured the relevant points.\r\nhttps://tlswg.github.io/tls13-spec/draft-ietf-tls-tls13.html#rfc.appendix.E.6\r\n",
          "createdAt": "2018-01-04T14:35:40Z",
          "updatedAt": "2018-01-04T14:35:40Z"
        },
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "Indeed it captures the issue with the RSA ciphersuites. However, we have always seen new attacks taking advantage of obscure ciphersuites of the past, so in a security analysis, I wouldn't rule out cross-protocol attacks in general, even if we don't know any attack now.",
          "createdAt": "2018-01-04T16:22:28Z",
          "updatedAt": "2018-01-04T16:22:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Nor would I, but I don't think there's anything particularly useful to say in this section about it.",
          "createdAt": "2018-01-04T17:02:56Z",
          "updatedAt": "2018-01-04T17:02:56Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODI1MzEyMDQ=",
          "commit": {
            "abbreviatedOid": "aa45b56"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I think that this could be said more succinctly.  That is, something like:\r\n\r\n> Use of the same private key for different versions of TLS exposes that key to attacks in all versions of the protocol.  Using a different key for each version isolates each key from vulnerabilities in other versions.\r\n\r\nThen the specific recommendations:\r\n\r\n> A deployment of TLS 1.3 that supports earlier versions SHOULD use different keys for each version.  For RSA keys, a deployment SHOULD use different keys for RSASS-PSS signatures, PKCS#1v1.5 signatures, and RSA key transport.",
          "createdAt": "2017-12-11T15:36:03Z",
          "updatedAt": "2017-12-11T15:43:36Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Sentence Case for Titles",
              "createdAt": "2017-12-11T15:36:03Z",
              "updatedAt": "2017-12-15T12:38:24Z"
            },
            {
              "originalPosition": 16,
              "body": "Space between name and number.  \"TLS 1.3\".",
              "createdAt": "2017-12-11T15:36:36Z",
              "updatedAt": "2017-12-15T12:38:24Z"
            },
            {
              "originalPosition": 24,
              "body": "https://grammarpartyblog.com/2012/01/17/use-versus-utilize/",
              "createdAt": "2017-12-11T15:36:57Z",
              "updatedAt": "2017-12-15T12:38:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODI3NzQ1ODk=",
          "commit": {
            "abbreviatedOid": "aa45b56"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-12T10:00:54Z",
          "updatedAt": "2017-12-12T10:00:55Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "thanks",
              "createdAt": "2017-12-12T10:00:54Z",
              "updatedAt": "2017-12-15T12:38:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODI3NzQ2Mjc=",
          "commit": {
            "abbreviatedOid": "aa45b56"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-12T10:01:04Z",
          "updatedAt": "2017-12-12T10:01:04Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "replaced",
              "createdAt": "2017-12-12T10:01:04Z",
              "updatedAt": "2017-12-15T12:38:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODI3NzQ3MDA=",
          "commit": {
            "abbreviatedOid": "aa45b56"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-12T10:01:20Z",
          "updatedAt": "2017-12-12T10:01:20Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "replaced",
              "createdAt": "2017-12-12T10:01:20Z",
              "updatedAt": "2017-12-15T12:38:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODMxODc0MjU=",
          "commit": {
            "abbreviatedOid": "276a5f1"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-13T14:27:01Z",
          "updatedAt": "2017-12-13T14:27:01Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "> , possible,\r\n\r\nthese commas seem excessive to me",
              "createdAt": "2017-12-13T14:27:01Z",
              "updatedAt": "2017-12-15T12:38:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODMxODc4MTA=",
          "commit": {
            "abbreviatedOid": "276a5f1"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-13T14:28:14Z",
          "updatedAt": "2017-12-13T14:28:14Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "\"Use a key with public key ID of RSASSA-PSS for TLS 1.3\" ?",
              "createdAt": "2017-12-13T14:28:14Z",
              "updatedAt": "2017-12-15T12:38:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODM0MjI1NzQ=",
          "commit": {
            "abbreviatedOid": "276a5f1"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-14T08:11:24Z",
          "updatedAt": "2017-12-14T08:11:24Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "thanks, that seems like a typo",
              "createdAt": "2017-12-14T08:11:24Z",
              "updatedAt": "2017-12-15T12:38:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODM0MjMyODg=",
          "commit": {
            "abbreviatedOid": "276a5f1"
          },
          "author": "nmav",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2017-12-14T08:15:30Z",
          "updatedAt": "2017-12-14T08:15:30Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "I do not think we can easily make it more specific; the subject public key identifier which I believe you refer to is only on certificates. PKCS#8 private keys use the algorithmIdentifier field. I think it is better to keep it generic as there are quite few private key types, and what could an RSASSA-PSS-only key may mean on each will vary.",
              "createdAt": "2017-12-14T08:15:30Z",
              "updatedAt": "2017-12-15T12:38:24Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1124,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU3NjY4NDQ0",
      "title": "update reference 5226->8126",
      "url": "https://github.com/tlswg/tls13-spec/pull/1124",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "8126 obsoleted 5226.  Saving us a GENART comment.",
      "createdAt": "2017-12-11T20:51:09Z",
      "updatedAt": "2017-12-11T20:54:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "97caff8fce54ff2c0441795a69a45169dd67ae24",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "nit_8126",
      "headRefOid": "a70c2d11c2371b0dba1d6444a97b2eb239a41d90",
      "closedAt": "2017-12-11T20:54:51Z",
      "mergedAt": "2017-12-11T20:54:51Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "cb3982fb95a705ab21ce86de0f38d67685ff7848"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1125,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU3NjY5NzQz",
      "title": "8174 updated 2119",
      "url": "https://github.com/tlswg/tls13-spec/pull/1125",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "RFC 8174 updates RFC 2119 so the boilerplate words have changed slightly according to s2 of RFC 8174.  Just trying to save us another GENART comment.",
      "createdAt": "2017-12-11T20:57:11Z",
      "updatedAt": "2017-12-22T21:07:05Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cb3982fb95a705ab21ce86de0f38d67685ff7848",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "nit_8174",
      "headRefOid": "7e2903792834797544217b531e227d3fa3ee8448",
      "closedAt": "2017-12-22T21:07:05Z",
      "mergedAt": "2017-12-22T21:07:05Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6d5483afc297b527913d2ccaaceba59969cb4195"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1126,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU5OTc4NDIx",
      "title": "Update Happy Eyeballs reference.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1126",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-12-23T19:58:24Z",
      "updatedAt": "2017-12-23T21:32:05Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d01697e3858198298b882473a8355ee27a69d86b",
      "headRepository": "chris-wood/tls13-spec",
      "headRefName": "master",
      "headRefOid": "8e123d9854d4716afc6800c4b6543a52498a41f9",
      "closedAt": "2017-12-23T21:32:05Z",
      "mergedAt": "2017-12-23T21:32:05Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "463a97672ad02f762d1fe9fa3191d2d163eef92f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1128,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYwMjYwOTE3",
      "title": "Renumber key share",
      "url": "https://github.com/tlswg/tls13-spec/pull/1128",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-12-27T15:01:22Z",
      "updatedAt": "2018-01-04T17:53:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5522b677b8c384f2938b059dccf94e640a43c7cd",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "renumber_key_share",
      "headRefOid": "8274f97a8c52aff61ab773f5885dea1e6c42bb9c",
      "closedAt": "2018-01-04T17:53:42Z",
      "mergedAt": "2018-01-04T17:53:42Z",
      "mergedBy": "seanturner",
      "mergeCommit": {
        "oid": "4844c4a901750177a402e7d30584e9bb7cb20625"
      },
      "comments": [
        {
          "author": "mimoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "isn't this change potentially allowing backdoored TLS implementations to work with TLS 1.3? If so I object to it :/ gotta break some bad eggs.",
          "createdAt": "2017-12-28T08:18:14Z",
          "updatedAt": "2017-12-28T08:18:14Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "TLS 1.3 has hit enough friction as it is. Renumbering allows us to separate the two pressure points, which is very valuable. Remember, the only way \"break everything\" strategies can ever work is if you do it gradually enough. Bundling them together is *not* desirable.\r\n\r\nMoreover, these implementations presumably exist as both clients and servers. If we use 40 for TLS 1.3, trying to catch the clients becomes much more difficult. (Perhaps someone has already written a firewall that blocks extension 40 in ClientHellos!) If we keep them separate, this kind of strategy is still possible.",
          "createdAt": "2017-12-28T08:23:44Z",
          "updatedAt": "2017-12-28T08:23:44Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with DavidBen here. We could, if one wanted, have a separate RFC\ntelling people how to provide a dummy extension 40 for this purpose...\n\n-Ekr\n\n\nOn Thu, Dec 28, 2017 at 12:23 AM, David Benjamin <notifications@github.com>\nwrote:\n\n> TLS 1.3 has hit enough friction as it is. Renumbering allows us to\n> separate the two pressure points, which is very valuable. Remember, the\n> only way \"break everything\" strategies can ever work is if you do it\n> gradually enough. Bundling them together is *not* desirable.\n>\n> Moreover, these implementations presumably exist as both clients and\n> servers. If we use 40 for TLS 1.3, trying to catch the clients becomes much\n> more difficult. (Perhaps someone has already written a firewall that blocks\n> extension 40 in ClientHellos!) If we keep them separate, this kind of\n> strategy is still possible.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/pull/1128#issuecomment-354249751>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oeqdN-LD7ldhi4b0lzciHLHTTVinks5tE1ARgaJpZM4RNkDu>\n> .\n>\n",
          "createdAt": "2017-12-28T12:10:16Z",
          "updatedAt": "2017-12-28T12:10:16Z"
        },
        {
          "author": "agl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I support landing this change. We would like to get another draft published with this included so that we can try again at deploying TLS 1.3 in Chrome.",
          "createdAt": "2018-01-03T02:44:07Z",
          "updatedAt": "2018-01-03T02:44:07Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODY3MDk4ODM=",
          "commit": {
            "abbreviatedOid": "8274f97"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Merge when you are ready!",
          "createdAt": "2018-01-04T17:53:13Z",
          "updatedAt": "2018-01-04T17:53:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1129,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYwNTAxNTgy",
      "title": "Clarify when in the handshake we ignore CCS records",
      "url": "https://github.com/tlswg/tls13-spec/pull/1129",
      "state": "MERGED",
      "author": "mattcaswell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2017-12-29T10:53:32Z",
      "updatedAt": "2018-01-05T20:15:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5522b677b8c384f2938b059dccf94e640a43c7cd",
      "headRepository": "mattcaswell/tls13-spec",
      "headRefName": "ccs-first",
      "headRefOid": "33d1dc70e01b7c450a5de6e6f4e2036056cc3af9",
      "closedAt": "2018-01-05T20:15:54Z",
      "mergedAt": "2018-01-05T20:15:54Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "92002b1d66854b15df68c7d15f4199e68fc2afe1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODYwNjk5NTI=",
          "commit": {
            "abbreviatedOid": "1d1c9d8"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM, modulo the link issue",
          "createdAt": "2018-01-01T21:41:40Z",
          "updatedAt": "2018-01-01T21:42:32Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "this link won't work, try `{{record-protocol}}`",
              "createdAt": "2018-01-01T21:41:40Z",
              "updatedAt": "2018-01-02T10:26:00Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODYxMTE1Nzc=",
          "commit": {
            "abbreviatedOid": "1d1c9d8"
          },
          "author": "mattcaswell",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-01-02T10:25:44Z",
          "updatedAt": "2018-01-02T10:25:44Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Fixed!",
              "createdAt": "2018-01-02T10:25:44Z",
              "updatedAt": "2018-01-02T10:26:00Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODY3MDA2NDA=",
          "commit": {
            "abbreviatedOid": "33d1dc7"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I'm fine with this.",
          "createdAt": "2018-01-04T17:18:35Z",
          "updatedAt": "2018-01-04T17:18:35Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODY3MDE1Nzc=",
          "commit": {
            "abbreviatedOid": "33d1dc7"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-01-04T17:21:46Z",
          "updatedAt": "2018-01-04T17:21:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1130,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYwNTg2ODI1",
      "title": "Add Chris A Wood to contributors for his text on vending multiple tickets",
      "url": "https://github.com/tlswg/tls13-spec/pull/1130",
      "state": "MERGED",
      "author": "DavidSchinazi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Add Chris A Wood to contributors for his text on vending multiple tickets (PR 1094)",
      "createdAt": "2017-12-30T11:31:14Z",
      "updatedAt": "2017-12-30T12:13:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5522b677b8c384f2938b059dccf94e640a43c7cd",
      "headRepository": "DavidSchinazi/tls13-spec",
      "headRefName": "add-chris-wood-to-contributors",
      "headRefOid": "eb304d1bfe07eae47d0cc7fdba913cf1e64a59ea",
      "closedAt": "2017-12-30T12:13:57Z",
      "mergedAt": "2017-12-30T12:13:57Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "46e3a9e651a01cd4ee1a2d6ea0de31aa9c47f249"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for catching that.",
          "createdAt": "2017-12-30T12:13:54Z",
          "updatedAt": "2017-12-30T12:13:54Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1131,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYxMDIxMTg0",
      "title": "Add missing newline.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1131",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-01-03T23:12:07Z",
      "updatedAt": "2018-01-03T23:12:52Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "46e3a9e651a01cd4ee1a2d6ea0de31aa9c47f249",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "newline",
      "headRefOid": "d988a9bd13a04119dc99b49c97761863788b4de5",
      "closedAt": "2018-01-03T23:12:52Z",
      "mergedAt": "2018-01-03T23:12:52Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e4d8f4e7c35a0d40e7df347544ee3821be772769"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1132,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYxMDI0Mzc1",
      "title": "Tweak protocol invariants text a little.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1132",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- There are many sorts of TLS middleboxes (CDN, decrypting proxy, local\r\n  antivirus, actual attack, etc), with acceptabilities ranging from\r\n  reasonable to extremely questionable to a terrible idea.\r\n  (Categorization is left as an exercise to the reader.) They also have\r\n  very different security considerations.\r\n\r\n  Fundamentally, TLS secures a connection between two endpoints. As\r\n  such, we have something to say about the endpoint-to-endpoint\r\n  connections that make up such a system, but we shouldn't imply this\r\n  section is *sufficient*, merely *necessary*. Adjust the text\r\n  accordingly.\r\n\r\n- I wrote \"intermediary\" in the original PR, predictively based on PR\r\n  #1115. Since the spec seems to have settled on \"middlebox\", align the\r\n  terminology. (I don't really care what is used, just that it is\r\n  consistent.)",
      "createdAt": "2018-01-03T23:37:27Z",
      "updatedAt": "2018-01-05T20:01:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e4d8f4e7c35a0d40e7df347544ee3821be772769",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "protocol-invariants-2",
      "headRefOid": "fe7423df969f7ae177c6037e7d7f40c4d3989554",
      "closedAt": "2018-01-05T20:01:41Z",
      "mergedAt": "2018-01-05T20:01:41Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f0abf9459bf670810b03c7c61379842ff7c4a67d"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Should the legacy_session_id description, which also mentions intermediaries, also be tweaked?\r\n\r\nAh yeah. Fixed. I used \"implementations\" for this one because there is an \"(also known as ossification)\" parenthetical and, in the general case, endpoints can cause ossification too. Even here, I dunno, maybe a sufficiently confused endpoint will do something silly there. :-)",
          "createdAt": "2018-01-04T17:33:17Z",
          "updatedAt": "2018-01-04T17:33:17Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODY3MDE5ODk=",
          "commit": {
            "abbreviatedOid": "1e73536"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Consistent terminology is good, and the other change looks good too.",
          "createdAt": "2018-01-04T17:23:09Z",
          "updatedAt": "2018-01-04T17:23:09Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODY3MDIzMTU=",
          "commit": {
            "abbreviatedOid": "1e73536"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Should the legacy_session_id description, which also mentions intermediaries, also be tweaked?",
          "createdAt": "2018-01-04T17:24:11Z",
          "updatedAt": "2018-01-04T17:24:11Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODY3MDU3Njg=",
          "commit": {
            "abbreviatedOid": "16ad8c4"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-01-04T17:37:28Z",
          "updatedAt": "2018-01-04T17:37:28Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "If we're touching this line, maybe we should remove the doubled \"but SHOULD be unpredictable to avoid\"?\r\n(The actual change itself seems fine.)",
              "createdAt": "2018-01-04T17:37:28Z",
              "updatedAt": "2018-01-04T18:04:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODY3MTI4NzU=",
          "commit": {
            "abbreviatedOid": "16ad8c4"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-01-04T18:04:56Z",
          "updatedAt": "2018-01-04T18:04:56Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Fixed.",
              "createdAt": "2018-01-04T18:04:56Z",
              "updatedAt": "2018-01-04T18:04:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODY3MjQ1ODU=",
          "commit": {
            "abbreviatedOid": "fe7423d"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2018-01-04T18:50:06Z",
          "updatedAt": "2018-01-04T18:50:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1133,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYxMDU0NTI3",
      "title": "Renumber rsa_pss_pss_sha{384,512}",
      "url": "https://github.com/tlswg/tls13-spec/pull/1133",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-01-04T05:22:22Z",
      "updatedAt": "2018-01-04T14:36:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e4d8f4e7c35a0d40e7df347544ee3821be772769",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "pss_pss_codepoints",
      "headRefOid": "570b8cda13906cf0a56cf7d1a57b61fb18850a05",
      "closedAt": "2018-01-04T14:36:10Z",
      "mergedAt": "2018-01-04T14:36:10Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "0f5753beef13c1046b90da940e618e7b14639f3f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1134,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYxMTE0NTYw",
      "title": "Added access_denied_by_intermediary AlertDescription ",
      "url": "https://github.com/tlswg/tls13-spec/pull/1134",
      "state": "CLOSED",
      "author": "matjon",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Network intermediaries (for example ISPs) may block traffic by using e.g. access_denied anyway. Make it more explicit by adding access_denied_by_intermediary.\r\n\r\nThis will make censorship more transparent.\r\n  \r\n  ",
      "createdAt": "2018-01-04T12:35:31Z",
      "updatedAt": "2018-01-05T20:01:03Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e4d8f4e7c35a0d40e7df347544ee3821be772769",
      "headRepository": "matjon/tls13-spec",
      "headRefName": "master",
      "headRefOid": "03aa8e287bb117b56738d726efb53d5abc794335",
      "closedAt": "2018-01-05T20:01:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 1135,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYxNTMyOTA4",
      "title": "Fix typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/1135",
      "state": "MERGED",
      "author": "alagoutte",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "implementatations -> implementations",
      "createdAt": "2018-01-07T18:27:28Z",
      "updatedAt": "2018-02-13T02:02:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "46f325e28a881df9c5ac8181812cc7b1ceae7393",
      "headRepository": "alagoutte/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "0abaf31c506c10a1431474215385cff09ef93f8b",
      "closedAt": "2018-02-13T02:02:19Z",
      "mergedAt": "2018-02-13T02:02:19Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a7237529ee5402710033a41038469d314e4189af"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1136,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYxNTg2MDE1",
      "title": "Fix a typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/1136",
      "state": "MERGED",
      "author": "yanesca",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-01-08T09:19:16Z",
      "updatedAt": "2018-02-13T02:02:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "46f325e28a881df9c5ac8181812cc7b1ceae7393",
      "headRepository": "yanesca/tls13-spec",
      "headRefName": "fix-typo",
      "headRefOid": "c2dd42b9ef3c230b50512155e0e0b465e8bfa3c6",
      "closedAt": "2018-02-13T02:02:34Z",
      "mergedAt": "2018-02-13T02:02:34Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4c0ffb7eba2a716adb68b9e09da529181f04bcc3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODcyMTM5ODk=",
          "commit": {
            "abbreviatedOid": "c2dd42b"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-01-08T13:59:19Z",
          "updatedAt": "2018-01-08T13:59:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1137,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYxNzg2NzEw",
      "title": "deleting a deplicated word.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1137",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-01-09T05:09:53Z",
      "updatedAt": "2018-02-13T03:10:02Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "46f325e28a881df9c5ac8181812cc7b1ceae7393",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "del-dup",
      "headRefOid": "06ce9cc44d71c83eedba229cabf48ffbeccf03c5",
      "closedAt": "2018-02-13T02:02:51Z",
      "mergedAt": "2018-02-13T02:02:51Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e1fab4028ef019fc4363f24cff63ae864b5c4c3d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODgwMjI0OTE=",
          "commit": {
            "abbreviatedOid": "06ce9cc"
          },
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-01-11T00:10:20Z",
          "updatedAt": "2018-01-11T00:10:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1138,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYyMjY5MTUy",
      "title": "add myself to contributors",
      "url": "https://github.com/tlswg/tls13-spec/pull/1138",
      "state": "MERGED",
      "author": "iluxonchik",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As requested in #1120",
      "createdAt": "2018-01-11T01:00:01Z",
      "updatedAt": "2018-01-11T01:20:09Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "46f325e28a881df9c5ac8181812cc7b1ceae7393",
      "headRepository": "iluxonchik/tls13-spec",
      "headRefName": "add-illya-gerasymchuk-to-contributors",
      "headRefOid": "52737b74f210cf7307ab8dace09620c58c80dc73",
      "closedAt": "2018-01-11T01:20:08Z",
      "mergedAt": "2018-01-11T01:20:08Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "43461876882a60251ecf24fb097f0ce2d7be4745"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODgwMzE1MDM=",
          "commit": {
            "abbreviatedOid": "c1fc8f9"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-01-11T01:08:02Z",
          "updatedAt": "2018-01-11T01:08:02Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Can you add this in sorted order please",
              "createdAt": "2018-01-11T01:08:02Z",
              "updatedAt": "2018-01-11T01:19:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODgwMzI5MDc=",
          "commit": {
            "abbreviatedOid": "c1fc8f9"
          },
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-01-11T01:17:01Z",
          "updatedAt": "2018-01-11T01:17:01Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Oh, it's sorted by last name, I only noticed this now. Yes, of course, give me a moment.",
              "createdAt": "2018-01-11T01:17:01Z",
              "updatedAt": "2018-01-11T01:19:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODgwMzMzNDM=",
          "commit": {
            "abbreviatedOid": "c1fc8f9"
          },
          "author": "iluxonchik",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-01-11T01:20:07Z",
          "updatedAt": "2018-01-11T01:20:07Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "@ekr done",
              "createdAt": "2018-01-11T01:20:07Z",
              "updatedAt": "2018-01-11T01:20:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1139,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYyMjkxNjE4",
      "title": "adding reserved.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1139",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "46 was used but never assigned.\r\nLet's add the same comment as 40.",
      "createdAt": "2018-01-11T04:36:51Z",
      "updatedAt": "2018-02-16T01:41:09Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43461876882a60251ecf24fb097f0ce2d7be4745",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "adding-reserved",
      "headRefOid": "6662c7e9eadbcb59fe6ab3bdf678b5dffbd1e811",
      "closedAt": "2018-02-13T02:09:01Z",
      "mergedAt": "2018-02-13T02:09:01Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "629d3e736021bf7d3a8f68dfccdbeccde64d40a6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1141,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYyODk1OTMy",
      "title": "Fix typo (remove duplicate words)",
      "url": "https://github.com/tlswg/tls13-spec/pull/1141",
      "state": "CLOSED",
      "author": "ttaubert",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-01-15T08:49:05Z",
      "updatedAt": "2018-01-16T10:13:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43461876882a60251ecf24fb097f0ce2d7be4745",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "144a08f226eb4bd1590a6542100ff91d6c94a004",
      "closedAt": "2018-01-16T10:13:14Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "leonklingele",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dup of #1137 ?",
          "createdAt": "2018-01-15T23:34:01Z",
          "updatedAt": "2018-01-15T23:34:01Z"
        },
        {
          "author": "ttaubert",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, indeed.",
          "createdAt": "2018-01-16T10:13:14Z",
          "updatedAt": "2018-01-16T10:13:14Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1142,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYzNzA4NjY0",
      "title": "Clarify behavior of signature_algorithms_cert",
      "url": "https://github.com/tlswg/tls13-spec/pull/1142",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-01-18T13:15:33Z",
      "updatedAt": "2018-02-14T19:05:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43461876882a60251ecf24fb097f0ce2d7be4745",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "clarify_signature_algorithms_cert",
      "headRefOid": "a4a4de64fdfbf6f74de05fc4b49a2dc4fed779e9",
      "closedAt": "2018-02-14T19:05:22Z",
      "mergedAt": "2018-02-14T19:05:22Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "858a57b5df016eaafc866f57e86cd8b030f70182"
      },
      "comments": [
        {
          "author": "mattcaswell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In your answer to my question on list you say:\r\n\r\n > Neither side need send it if it has a consistent policy for CertVerify\r\nand chain validation.\r\n\r\nI don't see that covered by this PR. Shouldn't this be explicit?\r\n",
          "createdAt": "2018-01-18T13:22:51Z",
          "updatedAt": "2018-01-18T13:22:51Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If no \"signature_algorithms_cert\" extension is present,\r\nthen the \"signature_algorithms\" extension also applies to signatures\r\nappearing in certificates.\r\n\r\nis unaffected by this change",
          "createdAt": "2018-01-18T13:24:04Z",
          "updatedAt": "2018-01-18T13:24:04Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As @kaduk says, there is already text that implies that you need not send \"signature_algorithms\" cert, so I don't think new text is really needed here.",
          "createdAt": "2018-01-18T13:29:31Z",
          "updatedAt": "2018-01-18T13:29:31Z"
        },
        {
          "author": "mattcaswell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> As @kaduk says, there is already text that implies that you need not send \"signature_algorithms\" cert, so I don't think new text is really needed here.\r\n\r\nThat sentence says nothing about under what circumstances it is ok to omit \"signature_algorithms_cert\". It only implies that you may not always get it. I think it would not hurt to be more explicit.",
          "createdAt": "2018-01-18T13:46:21Z",
          "updatedAt": "2018-01-18T13:46:21Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODk3NzgzNTA=",
          "commit": {
            "abbreviatedOid": "a6638b6"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "signature_algorithms_cert is still optional if it is identical with signature_algorithms, right?",
          "createdAt": "2018-01-18T13:22:58Z",
          "updatedAt": "2018-01-18T13:22:58Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTAwMDcxOTM=",
          "commit": {
            "abbreviatedOid": "a6638b6"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-01-19T03:59:47Z",
          "updatedAt": "2018-01-19T04:01:54Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "If signature_algorithms_cert is supposed to apply to signatures relevant to the X.509 library, then it only matters for the signature *on* the leaf certificate, not signatures made *by* the leaf cert (right?).  So only signature_algorithms is relevant for this purpose.",
              "createdAt": "2018-01-19T03:59:47Z",
              "updatedAt": "2018-02-14T19:02:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTY2MTg4OTU=",
          "commit": {
            "abbreviatedOid": "a6638b6"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-02-14T19:04:35Z",
          "updatedAt": "2018-02-14T19:04:35Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "No, because this applies to chain certs.\r\n",
              "createdAt": "2018-02-14T19:04:35Z",
              "updatedAt": "2018-02-14T19:04:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTY2MTg5MzM=",
          "commit": {
            "abbreviatedOid": "a6638b6"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-02-14T19:04:41Z",
          "updatedAt": "2018-02-14T19:04:41Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "as well",
              "createdAt": "2018-02-14T19:04:41Z",
              "updatedAt": "2018-02-14T19:04:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1143,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYzODM0MTIz",
      "title": "Clarify rules around \"supported_versions\" extension in SH and HRR",
      "url": "https://github.com/tlswg/tls13-spec/pull/1143",
      "state": "MERGED",
      "author": "roelfdutoit",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Issue 1: supported_versions is required in TLS 1.3 SH.\r\nIssue 2: supported_versions.selected_version must be identical in HRR and SH",
      "createdAt": "2018-01-18T22:03:24Z",
      "updatedAt": "2018-02-14T19:52:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43461876882a60251ecf24fb097f0ce2d7be4745",
      "headRepository": "roelfdutoit/tls13-spec",
      "headRefName": "master",
      "headRefOid": "7cd1fcc2b07d7a5795d51e75ca3d83f0a3ed653a",
      "closedAt": "2018-02-14T19:52:52Z",
      "mergedAt": "2018-02-14T19:52:52Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "970938f8ab827b599a7395c9d78211119a45b219"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@roelfdutoit  please submit a PR to add yourself to acknowledgements",
          "createdAt": "2018-02-14T19:52:57Z",
          "updatedAt": "2018-02-14T19:52:57Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTAxNjM5ODI=",
          "commit": {
            "abbreviatedOid": "e8157b3"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-01-19T16:18:29Z",
          "updatedAt": "2018-01-19T16:21:18Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "We are going from \"current\" to \"all MUST\" w.r.t. having at least one of pre_shared_key and key_share, which seems to rule out future modes that use neither.  I'm not sure I want to commit us to that indefinitely.",
              "createdAt": "2018-01-19T16:18:29Z",
              "updatedAt": "2018-01-19T16:32:53Z"
            },
            {
              "originalPosition": 20,
              "body": "\"the ServerHello\"",
              "createdAt": "2018-01-19T16:18:55Z",
              "updatedAt": "2018-01-19T16:32:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTAxNjkxNjU=",
          "commit": {
            "abbreviatedOid": "e8157b3"
          },
          "author": "roelfdutoit",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-01-19T16:33:29Z",
          "updatedAt": "2018-01-19T16:33:29Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Updated.",
              "createdAt": "2018-01-19T16:33:29Z",
              "updatedAt": "2018-01-19T16:33:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTAyOTY1MTU=",
          "commit": {
            "abbreviatedOid": "7cd1fcc"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks for the fixup.",
          "createdAt": "2018-01-20T06:53:38Z",
          "updatedAt": "2018-01-20T06:53:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1144,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY3NTA1Nzg0",
      "title": "fix typo in constant name",
      "url": "https://github.com/tlswg/tls13-spec/pull/1144",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "remove extra _ at the end of name -- the name in SignatureScheme\r\nenum lacks it",
      "createdAt": "2018-02-06T19:20:20Z",
      "updatedAt": "2018-02-13T11:40:36Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43461876882a60251ecf24fb097f0ce2d7be4745",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "fix-typo",
      "headRefOid": "f7b0aacecca4881442855f5e1a4db02ad0fd0b0b",
      "closedAt": "2018-02-13T02:03:14Z",
      "mergedAt": "2018-02-13T02:03:14Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b8033ae70578230bb6d84e4ca841994b51b97924"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1146,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY4NTg3MDA5",
      "title": "forbid fragmenting and coalescing of CCS messages",
      "url": "https://github.com/tlswg/tls13-spec/pull/1146",
      "state": "CLOSED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-02-12T14:06:35Z",
      "updatedAt": "2018-02-15T10:39:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43461876882a60251ecf24fb097f0ce2d7be4745",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "ccs-fragment",
      "headRefOid": "7c816f9e7e8e87fab189fee58d40a0a5e2271e7d",
      "closedAt": "2018-02-12T15:59:46Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is required elsewhere and in more detail.",
          "createdAt": "2018-02-12T15:59:46Z",
          "updatedAt": "2018-02-12T15:59:46Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr where and what's missing?",
          "createdAt": "2018-02-12T16:52:27Z",
          "updatedAt": "2018-02-12T16:52:27Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I responded on-list",
          "createdAt": "2018-02-12T16:53:49Z",
          "updatedAt": "2018-02-12T16:53:49Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1147,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY4NTk5MzM3",
      "title": "fix signature_algorithms_cert typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/1147",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "the type is called signature_algorithms_cert (singular) everywhere,\r\nnot signature_algorithms_certs (plural)",
      "createdAt": "2018-02-12T14:54:18Z",
      "updatedAt": "2018-02-13T11:40:59Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "43461876882a60251ecf24fb097f0ce2d7be4745",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "certs-typo",
      "headRefOid": "73bf493bf3641ce17b2230b117c35142eb1e108c",
      "closedAt": "2018-02-13T02:08:21Z",
      "mergedAt": "2018-02-13T02:08:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3bce058176b6f487299af8e0aa38c3a574a1cbe2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1149,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY5MjI4NjI3",
      "title": "Send 0303 after HRR",
      "url": "https://github.com/tlswg/tls13-spec/pull/1149",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-02-14T21:36:56Z",
      "updatedAt": "2018-02-14T22:03:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "970938f8ab827b599a7395c9d78211119a45b219",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "ch2_uses_0303",
      "headRefOid": "93760583d9382b60a8760e0abce4c9e00903ce8c",
      "closedAt": "2018-02-14T22:03:28Z",
      "mergedAt": "2018-02-14T22:03:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "36c3d3260a2dfbb55bde1f0c44db1b9726e8453c"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben @roelfdutoit PTAL",
          "createdAt": "2018-02-14T21:37:07Z",
          "updatedAt": "2018-02-14T21:37:07Z"
        },
        {
          "author": "roelfdutoit",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looks good.  Minor typo: \"a records\"",
          "createdAt": "2018-02-14T21:44:28Z",
          "updatedAt": "2018-02-14T21:44:28Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTY2Njc4Mzg=",
          "commit": {
            "abbreviatedOid": "4a39514"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-02-14T21:43:23Z",
          "updatedAt": "2018-02-14T21:43:23Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTY2NzE2ODM=",
          "commit": {
            "abbreviatedOid": "4a39514"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-02-14T21:55:59Z",
          "updatedAt": "2018-02-14T21:55:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1150,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY5MzM4NzEy",
      "title": "add psk_key_exchange_modes ext to MTI",
      "url": "https://github.com/tlswg/tls13-spec/pull/1150",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\"A client MUST provide a 'psk_key_exchange_modes' extension\r\nif it offers a 'pre_shared_key' extension.\"",
      "createdAt": "2018-02-15T10:54:41Z",
      "updatedAt": "2018-02-15T14:32:24Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "35427e6365361fb933672bbab9f6eac775136ed0",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "MTI-extensions",
      "headRefOid": "d63cc8d7df7c52009e59d9316603369b1258aeec",
      "closedAt": "2018-02-15T13:39:52Z",
      "mergedAt": "2018-02-15T13:39:52Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "cde03c3bbe7d44e531c875da9442056ea6a18bb1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1151,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY5Mzc4MzY5",
      "title": "legacy PSKs note",
      "url": "https://github.com/tlswg/tls13-spec/pull/1151",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Given that it's common to select the strongest cipher by default\r\n(thus likely using SHA-384 PRF) and that the default Hash associated\r\nwith a PSK is SHA-256, simple upgrade of server and client\r\nto TLS 1.3 may cause handshake failures if only PSK key exchanges\r\nwere configured and the existing implementor's note is followed.",
      "createdAt": "2018-02-15T13:58:57Z",
      "updatedAt": "2018-03-02T21:35:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cde03c3bbe7d44e531c875da9442056ea6a18bb1",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "psk-prf",
      "headRefOid": "c036934199556bc00e2d801f325d5eae934fc66f",
      "closedAt": "2018-03-02T21:35:55Z",
      "mergedAt": "2018-03-02T21:35:55Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ae4eeb2c7a01ef9d8ef6dbacd409698e5873f15e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1152,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY5NDI1Njc5",
      "title": "Update Contributors section",
      "url": "https://github.com/tlswg/tls13-spec/pull/1152",
      "state": "MERGED",
      "author": "roelfdutoit",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-02-15T16:49:24Z",
      "updatedAt": "2018-02-15T17:25:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cde03c3bbe7d44e531c875da9442056ea6a18bb1",
      "headRepository": "roelfdutoit/tls13-spec",
      "headRefName": "master",
      "headRefOid": "d88e189aaa7c8bb76f7013342e8090698bba59c7",
      "closedAt": "2018-02-15T17:25:47Z",
      "mergedAt": "2018-02-15T17:25:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a5f016316e42a72af51123a700e20b4bbe2309d7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1153,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY5NDMzMDQ1",
      "title": "dropping RFC4681 (user mapping) reference)",
      "url": "https://github.com/tlswg/tls13-spec/pull/1153",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Address an I-D nit.",
      "createdAt": "2018-02-15T17:17:05Z",
      "updatedAt": "2018-02-15T17:25:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cde03c3bbe7d44e531c875da9442056ea6a18bb1",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "drop_usermap_ref",
      "headRefOid": "5e3183e75d0f6c6d6d77fc6f4be6bc4a465bdafe",
      "closedAt": "2018-02-15T17:25:58Z",
      "mergedAt": "2018-02-15T17:25:58Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c01343410227b482fb962062d4f21bac5a81b0a8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1154,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY5NTM0ODY0",
      "title": "using SHOULD intead of MUST for 0x0301 in CH1.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1154",
      "state": "MERGED",
      "author": "kazu-yamamoto",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "`legacy_record_version` says:\r\n\r\n> This value MUST be set to 0x0303 for all records generated by a TLS 1.3 implementation other than an initial ClientHello (i.e., one not generated after a HelloRetryRequest), where it *MAY* also be 0x0301 for compatibility purposes.\r\n\r\nBut the following text follows:\r\n\r\n> n order to maximize backwards compatibility, records containing an initial ClientHello *MUST* have version 0x0301 and a record containing a second ClientHello or a ServerHello MUST have version 0x0303, reflecting TLS 1.0 and TLS 1.2\r\n\r\nMAY and MUST mismatch. Let's s/MUST/SHOULD/",
      "createdAt": "2018-02-16T02:12:49Z",
      "updatedAt": "2018-03-02T21:28:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c01343410227b482fb962062d4f21bac5a81b0a8",
      "headRepository": "kazu-yamamoto/tls13-spec",
      "headRefName": "should",
      "headRefOid": "2d6f077761d66e2110d2d5a1aab706bbd54c613c",
      "closedAt": "2018-03-02T21:28:26Z",
      "mergedAt": "2018-03-02T21:28:26Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "90ea21519a8dbc04d5e789a4a47f8937c34d83ae"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1155,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcwODA3MjI0",
      "title": "Fixes section number referencing transcript hash",
      "url": "https://github.com/tlswg/tls13-spec/pull/1155",
      "state": "MERGED",
      "author": "kriskwiatkowski",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes section number which describes transcript hash",
      "createdAt": "2018-02-22T16:55:38Z",
      "updatedAt": "2018-02-22T17:32:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "c01343410227b482fb962062d4f21bac5a81b0a8",
      "headRepository": null,
      "headRefName": "fix_section_nr",
      "headRefOid": "95491e9f3a04c399db98b03d66f8f28698f3e7c2",
      "closedAt": "2018-02-22T17:32:27Z",
      "mergedAt": "2018-02-22T17:32:27Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3f712ac89f891cb31507e06a5156bc5859698c5c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1156,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcwODk4ODIy",
      "title": "The ServerHello does not convey client preferences.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1156",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-02-22T23:50:51Z",
      "updatedAt": "2018-02-23T00:29:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "3f712ac89f891cb31507e06a5156bc5859698c5c",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "fix-typo",
      "headRefOid": "581efbd494ba4b4cb1204ececaacf1b5575e98c9",
      "closedAt": "2018-02-23T00:29:51Z",
      "mergedAt": "2018-02-23T00:29:51Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "83ce9487806ba7d3ebef0e6d429e437df5da4eea"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1157,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcxMDI5Mjgw",
      "title": "Adjust the wording around KCI attacks",
      "url": "https://github.com/tlswg/tls13-spec/pull/1157",
      "state": "MERGED",
      "author": "katrielalex",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The previous wording implied that a session in which an actor's key has been compromised should enjoy \"peer authentication\", which is defined just above to mean that both parties should authenticate each other. This adjusts the wording to make it clear what we intend, which is that compromising Alice's key should not allow you to impersonate Bob to Alice. (cc @cascremers)",
      "createdAt": "2018-02-23T14:34:20Z",
      "updatedAt": "2018-03-02T21:28:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "83ce9487806ba7d3ebef0e6d429e437df5da4eea",
      "headRepository": "katrielalex/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "e3324b903f097f5717781691085cd538b760b250",
      "closedAt": "2018-03-02T21:28:56Z",
      "mergedAt": "2018-03-02T21:28:56Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c43616053f139bd1f0fe9e0f50ea8908c5944689"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTk5MDgwMjk=",
          "commit": {
            "abbreviatedOid": "e3324b9"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "+0.5 I'm not sure I fully see the difference but am willing to believe it is an improvement.",
          "createdAt": "2018-02-28T00:29:25Z",
          "updatedAt": "2018-02-28T00:29:25Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTk5MDk2MzM=",
          "commit": {
            "abbreviatedOid": "e3324b9"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This is more understandable.  I see no substantive difference if you interpret \"peer authentication\" as \"authentication of a remote peer\", as I did originally.\r\n\r\nI appreciate that \"peer authentication\" might be interpreted in a more abstract sense.  That is, authentication of endpoints, which includes the endpoint (or peer) with the compromised key.  For that, if the long-term secret of client is compromised, then it's fairly obvious that impersonation of that client is possible and there isn't anything that can be done, so that reading would be invalid.",
          "createdAt": "2018-02-28T00:37:23Z",
          "updatedAt": "2018-02-28T00:37:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1158,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcxMDY0OTY1",
      "title": "Add the record header to additional data for AEAD (de)protection.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1158",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, checking the legacy_record_version fields of the TLSCiphertext is not mandatory, and checking the opaque_type is unspecified. These values need to be enforced for reasons discussed in issue #1145.",
      "createdAt": "2018-02-23T16:57:14Z",
      "updatedAt": "2018-03-03T00:29:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "83ce9487806ba7d3ebef0e6d429e437df5da4eea",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "b3464925feeabe815cbb4ab8c64619c0ca58686d",
      "closedAt": "2018-03-03T00:29:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This would change the wire protocol yet again.  Is it really necessary or just a nice-to-have?\r\n\r\n\r\n",
          "createdAt": "2018-02-23T17:14:15Z",
          "updatedAt": "2018-02-23T17:14:15Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "At a minimum, the values of opaque_type and legacy_record_version need to be enforced.",
          "createdAt": "2018-02-23T17:40:22Z",
          "updatedAt": "2018-02-23T17:40:22Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@richsalz This would not change the wire protocol, just the logic for encapsulating / decapsulating records. ",
          "createdAt": "2018-02-23T17:45:30Z",
          "updatedAt": "2018-02-23T17:45:30Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I see what you mean.  It wouldn't change the header octets, but it would change the AEAD output (e.g., the authentication tag).",
          "createdAt": "2018-02-23T20:06:01Z",
          "updatedAt": "2018-02-23T20:06:01Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So if we follow practice, this is yet another incompatible change and different draft-id.  Or we wait and roll this up into the post-LC draft.  Or what?  What is bad if we don't do this, and just say it's too late in the process?",
          "createdAt": "2018-02-23T20:15:06Z",
          "updatedAt": "2018-02-23T20:15:06Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@richsalz, could you please explain what you mean by \"incompatible change\"?",
          "createdAt": "2018-02-23T21:33:01Z",
          "updatedAt": "2018-02-23T21:33:18Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Will a server that implements this be able to properly decode packets sent by a client that doesn't, or vice-versa?\r\n",
          "createdAt": "2018-02-23T21:47:56Z",
          "updatedAt": "2018-02-23T21:47:56Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The idea is that it would not, to make enforcing the header contents a mandatory part of protocol implementation.",
          "createdAt": "2018-02-23T22:18:10Z",
          "updatedAt": "2018-02-23T22:18:10Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Which is my point; this is an *incompatible change.*  How important is it?  How we will handle it in terms of marking the draft in an extension, coordinating with browsers, etc?",
          "createdAt": "2018-02-23T22:42:19Z",
          "updatedAt": "2018-02-23T22:42:19Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rich, I worry people are talking past each other here. Let me try to state what I believe to be the case.\r\n\r\nRight now, people are deploying TLS 1.3-23. If a client supports TLS 1.3-23 and a server supports TLS 1.3-24, they will not be able to negotiate TLS 1.3, but will successfully be able to negotiate TLS 1.2 if both support that. Similarly, if servers deploy TLS 1.3 (RFC) they will not be able to talk to TLS 1.3-23 clients (and vice versa), but will be able to negotiate TLS 1.2. This is true even if nothing else in the drafts changes but the version numbers (which is nearly the case for 23->24).\r\n\r\nThe same thing will continue to be true  if we make this change in -25 or the RFC version.\r\n",
          "createdAt": "2018-02-23T23:15:32Z",
          "updatedAt": "2018-02-23T23:15:32Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I understand that, except that we\u2019ve seen browsers not change the draft recently, right?\r\n\r\nI am only talking about 1.3 interop.  If this change is made on only one side, there is no interop even though the wire protocol has not changed.  Right?  Therefore, should we make this change, should we issue a new draft, how will we do interop testing?  Or should we not do this change? Or should we wait until the RFC and not put out a new draft?\r\n",
          "createdAt": "2018-02-23T23:21:24Z",
          "updatedAt": "2018-02-23T23:21:24Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we make this change we'd need to issue a new draft to do interop testing usefully.",
          "createdAt": "2018-02-23T23:33:57Z",
          "updatedAt": "2018-02-23T23:33:57Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Fri, Feb 23, 2018 at 3:33 PM, kaduk <notifications@github.com> wrote:\n\n> If we make this change we'd need to issue a new draft to do interop\n> testing usefully.\n>\n\nYes, we would need to issue a new draft # to do interop.\n",
          "createdAt": "2018-02-23T23:40:29Z",
          "updatedAt": "2018-02-23T23:40:29Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And now, finally, we're all on the same page and I can repeat my initial question: How important is it that we do this?",
          "createdAt": "2018-02-23T23:48:29Z",
          "updatedAt": "2018-02-23T23:48:29Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think it's essential, but as I said above, it's not hard to implement, seems to add some analytical value, and will make reasoning about the various DTLS header variants much easier.",
          "createdAt": "2018-02-23T23:55:04Z",
          "updatedAt": "2018-02-23T23:55:04Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is there enough time to do a draft re-spin and actually get people to test?  It seems to me that the cycle is four weeks, maybe three if we're lucky.  Is anyone signing up to do that?  Else we have to decide if it goes into the RFC or if it's worth delaying publication by having another cycle.\r\n",
          "createdAt": "2018-02-24T00:05:06Z",
          "updatedAt": "2018-02-24T00:05:06Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If the consensus is to do this, we will be able to have an implementation in a week or two. Note that the IESG decision date is 2 weeks out and the RFC queue has a certain length to it.",
          "createdAt": "2018-02-24T00:09:35Z",
          "updatedAt": "2018-02-24T00:09:35Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> some analytical value\r\n\r\nI think it is worth being clear on what that value is. From the earlier bug, the \"value\" is that it authenticates the (trivially information-less) TLS-level framing layer, which is useful if one's security model is \"the (trivially information-less) TLS-level framing layer is authenticated, but it is okay if the transport-level (TCP) framing layer is not\", yes? This a little circular.\r\n\r\nIncorporating the length is especially fiddly as there are two lengths, the plaintext and the ciphertext length. The names of the variables do imply the latter (just called `length` here), but I am sure every implementer on the planet will first mess up and encrypt with plaintext length and decrypt with ciphertext length, as those as the lengths which are naturally available at those stages. It will be caught with any interop test, but if the gains here are so trivial, why bother?",
          "createdAt": "2018-02-24T00:19:26Z",
          "updatedAt": "2018-02-24T00:20:15Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, the only real motivation I see to do this is if it makes things easier for DTLS 1.3, which I haven't gotten a chance to think about very hard.  Since we're going to try to shave some extra bytes off the header it might be actually useful, though perhaps it requires there to be multiple accepted variant headers in order to achieve \"actually useful\" status.",
          "createdAt": "2018-02-24T03:03:52Z",
          "updatedAt": "2018-02-24T03:03:52Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "First a bit of terminology: **authenticating** the record header means to use it as AD for (de)protection (i.e. this PR); **enforcing** the record header means to simply check that the received _opaque_type_ and _legacy_record_version_ are correct.\r\n\r\n> From the earlier bug, the \"value\" is that it authenticates the (trivially information-less) TLS-level framing layer, which is useful if one's security model is \"the (trivially information-less) TLS-level framing layer is authenticated, but it is okay if the transport-level (TCP) framing layer is not\", yes? This a little circular.\r\n\r\nIn the intended model (see #1145  for details), the channel is under attack if the sequence of bits consumed differs from the sequence of bits produced. Thus, fiddling with TCP (even just the headers) will at worst amount to an attack. To detect it, we must authenticate (or at least enforce the values of) _all_ of the consumed bits, and not just the ciphertext. All this to say: I don't see how this is circular, since authenticating (or enforcing) the TLS header suffices to detect any attack on TCP that is relevant to the security goals of the channel (i.e., privacy and integrity).\r\n\r\n**Is the model too strong?** I don't think so. For one, it's security conservative. Not enforcing the record header values permits compliant implementations that use these values in unintended ways. For example, an implementation might receive _opaque_type_ = 21 (alert) and immediately close the channel. This may seem farfetched, particularly to folks who are actually working on deploying TLS 1.3. But I think it's important to be precise about this kind of stuff, and currently, the draft is not precise about the record header semantics.\r\n\r\n**Why authenticate?** Enforcing the record header values is sufficient for security. One reason I favor authentication is that it reduces the complexity of a formal analysis: _If all of the bits produced by the channel sender are authenticated, then one can prove that the details of the record header's format are irrelevant to security_.  Of course, this is not true if we are just enforcing the values. Authentication also permits a certain amount of flexibility for the spec. For example, if in a later version of TLS, the value of _opaque_type_ is changed to 89, then this does not break interoperability with TLS 1.3 (AFAICT). To take a more useful example, if the maximum record length is changed to 2^17 bytes, then we will need more than 16 bits to encode the _length_ field; this can be changed in the spec without impacting security.\r\n\r\nI appreciate the fact that making this change will require effort. From where I stand, authentication is the better way forward, and it doesn't much matter to me if this change gets adopted now or later. That said,  if the consensus is to enforce rather than authenticate, I will open a new PR and close this one.",
          "createdAt": "2018-02-24T16:35:01Z",
          "updatedAt": "2018-02-24T17:59:34Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": ">  but I am sure every implementer on the planet will first mess up and encrypt with plaintext length and decrypt with ciphertext length, as those as the lengths which are naturally available at those stages. It will be caught with any interop test, but if the gains here are so trivial, why bother?\r\n\r\nexactly this, and all AEADs we have in TLS 1.3 (AES-GCM, AES-CCM, Chacha20/Poly1305) feed ciphertext length (sans tag) to the authentication tag internally, so adding it to Authenticated Data is redundant\r\n\r\nso the only thing that the attacker can change are the version and type, which either _do not affect the state of the system under attack_ or will cause connection abort.\r\n\r\nthe change should be limited to just **enforcing** the record header for protected records as that will not cause new interoperability pains and can be verified with no more complex testing than the **authenticate** option",
          "createdAt": "2018-02-25T14:28:30Z",
          "updatedAt": "2018-02-25T14:28:30Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Incorporating the length is especially fiddly as there are two lengths, the plaintext and the ciphertext length. The names of the variables do imply the latter (just called length here), but I am sure every implementer on the planet will first mess up and encrypt with plaintext length and decrypt with ciphertext length, as those as the lengths which are naturally available at those stages.\r\n\r\nIndeed, there are actually three lengths the implementor needs to worry about: the unpadded plaintext, the plaintext, and the ciphertext. The spec needs to be clear about which length is intended, but  this seems easy to do, e.g. my last commit (b346492).",
          "createdAt": "2018-02-25T23:23:56Z",
          "updatedAt": "2018-02-26T00:04:36Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": ">  all AEADs we have in TLS 1.3 (AES-GCM, AES-CCM, Chacha20/Poly1305) feed ciphertext length (sans tag) to the authentication tag internally, so adding it to Authenticated Data is redundant\r\n\r\nThis point was brought up before, and it's well taken. I would only emphasize that not every AEAD scheme incorporates the length into authentication; sometimes it's needed for the proof, but not always. From an analytical perspective, it's useful to not have to make assumptions about the structure of your primitives: in this case, your AEAD scheme.\r\n\r\nI think the more important point (and one that @ekr has made) is that authenticating _length_ is simply not needed. If this value is mangled in transit, then it necessarily changes the inputs to the deprotection function, so the attack will be detected. However, this logic is somewhat brittle, since for it to be true, the receiver needs to precisely interpret _length_ as the length (in bytes) of the next ciphertext. For example, it wouldn't be safe (from the point of of view of our security model) for implementations whose ciphertexts are always the same length to ignore this field.\r\n\r\nThus, the reason to authenticate the _length_ field along with the others is that authenticating the whole header reduces the complexity of the analysis; doing so means we needn't worry about these weird edge-case implementations. There are also \"future proving\" benefits as I mentioned above. Another benefit is better alignment with DTLS as other have suggested.\r\n\r\nAt the end of the day, I think the decision to authenticate or enforce should weigh these future benefits against the cost of deployment now.",
          "createdAt": "2018-02-25T23:38:24Z",
          "updatedAt": "2018-02-26T00:12:51Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": ">  doing so means we needn't worry about these weird edge-case implementations.\r\n\r\nwe don't have to worry about them at all, they aren't implementing _TLS_ if they ignore length tag\r\n\r\n> However, this logic is somewhat brittle, since for it to be true, the receiver needs to precisely interpret length as the length (in bytes) of the next ciphertext.\r\n\r\nand if it doesn't do that, it'll interpret ciphertext as authentication tag which will almost certainly cause the tag verification to fail, and even if attacker picks that ciphertext block carefully, how is that different from an attack that just modifies the authentication tag directly?",
          "createdAt": "2018-02-26T11:10:05Z",
          "updatedAt": "2018-02-26T11:10:05Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In terms of what was ADed I would proposes that the rule would simply be \"everything up to the plaintexT\" as it appears on the wire. That is straightforward to understand and implement, especially on the receiver. \r\n\r\nThe one complexity from the implementation perspective is on the protecting side, you need to know the AEAD output length in advance. However, with all our existing AEAD algorithms, the expansion is constant and so this is straightforward, and of course it was required to be able to do this for TLS 1.2 and below anyway.",
          "createdAt": "2018-02-26T13:10:25Z",
          "updatedAt": "2018-02-26T13:10:25Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In fact, determining the ciphertext length is straight-forward for any RFC5116-compliant AEAD scheme, right? From my read of the RFC, it seems to require that the length of the ciphertext be easily computable from the length of the plaintext.",
          "createdAt": "2018-02-26T14:21:48Z",
          "updatedAt": "2018-02-26T14:23:01Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Mon, Feb 26, 2018 at 6:21 AM, Christopher Patton <\nnotifications@github.com> wrote:\n\n> In fact, determining the ciphertext length is straight-forward for any\n> RFC5116-compliant AEAD scheme, right? From my read of the RFC, it seems to\n> require that the length of the ciphertext be easily computable from the\n> length of the plaintext.\n>\n\nI assume you are referring to:\n\n   Each AEAD algorithm MUST provide a description relating the length of\n   the plaintext to that of the ciphertext.  This relation MUST NOT\n   depend on external parameters, such as an authentication strength\n   parameter (e.g., authentication tag length).  That sort of dependence\n   would complicate the use of the algorithm by creating a situation in\n   which the information from the AEAD registry was not sufficient to\n   ensure interoperability.\n\nThat does seem dispositive.\n\n-Ekr\n\n\n\n\n> This is fairly mild condition.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/pull/1158#issuecomment-368518332>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABD1oe2zCj51SwOGsY5Bi7cvLJ2ltP2yks5tYr3_gaJpZM4SRLAU>\n> .\n>\n",
          "createdAt": "2018-02-26T15:00:57Z",
          "updatedAt": "2018-02-26T15:00:57Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually getting around to looking at the dtls spec, the \"interesting\" part comes in from having both DTLSCiphertext and DTLSShortCiphertext as possibilities (mostly discounting DTLSPlaintext for now).  De-muxing is done based on the first byte (\"ContentType\", nominally, in the historical order).  The non-short version also has the opaque content type and length fields that we've been discussing already, and both have a subset of the full epoch and sequence number used for protection.  Now, the epoch+sequence are already used as input to the AEAD, either for key selection or as part of the IV, but the bits on the wire are not the full epoch+sequence in either case.  It would be hard to not enforce the headers for the short DTLS ciphertext and still interoperate, but I guess it would be pretty easy to ignore the content type and length from the long DTLS header.  So, I guess there is some marginal benefit from AAD-ing the DTLS header(s), which puts me barely over the edge of thinking we should do this, but it remains a pretty close call to me.\r\n\r\n(I think the DTLS draft should also ask IANA to add a note to the ContentType 0 (reserved) entry that the 0 value is used for de-muxing the DTLS short ciphertext, but that's a matter for elsewhere.)",
          "createdAt": "2018-02-27T15:27:29Z",
          "updatedAt": "2018-02-27T15:27:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Does [draft-ietf-tls-dtls-connection-id](https://tools.ietf.org/html/draft-ietf-tls-dtls-connection-id) change this any?",
          "createdAt": "2018-02-27T22:16:40Z",
          "updatedAt": "2018-02-27T22:16:40Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Does draft-ietf-tls-dtls-connection-id change this any?\r\n\r\nI suppose it does, yes.  (It makes the case for authenticating the headers stronger.)",
          "createdAt": "2018-02-28T00:53:26Z",
          "updatedAt": "2018-02-28T00:53:26Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Obsoleted by #1162",
          "createdAt": "2018-03-02T21:44:59Z",
          "updatedAt": "2018-03-02T21:44:59Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1159,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcyMDc0MTY1",
      "title": "Addressing IANA questions",
      "url": "https://github.com/tlswg/tls13-spec/pull/1159",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "During the IANA review some questions were raised and this addresses them.\r\n\r\nOne remaining question needs to be resolved:\r\n\r\nrsa_pss_sha256, rsa_pss_sha384, and rsa_pss_sha512 are listed in the SignatureScheme registry text in the IANA consideration, but we changed that extension so now the values need to be chosen from:\r\nrsa_pss_rsae_sha256\r\nrsa_pss_rsae_sha384\r\nrsa_pss_rsae_sha512\r\nrsa_pss_pss_sha256\r\nrsa_pss_pss_sha384\r\nrsa_pss_pss_sha512",
      "createdAt": "2018-02-28T21:13:26Z",
      "updatedAt": "2018-03-02T21:38:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "83ce9487806ba7d3ebef0e6d429e437df5da4eea",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "iana_comments",
      "headRefOid": "0a2e45ca6a638e2fd9e1006c04c3e05887f06c5a",
      "closedAt": "2018-03-02T21:38:32Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Do we also want to add text about the location of the SignatureScheme registry?",
          "createdAt": "2018-02-28T23:50:46Z",
          "updatedAt": "2018-02-28T23:50:46Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I didn't include text about where to put SignatureScheme because I'm not quite sure how to say put it here.  I'm also less worried about having a trail of crumbs for instructions on where to put it; I also think IANA will place it based on our email.",
          "createdAt": "2018-03-01T01:01:04Z",
          "updatedAt": "2018-03-01T01:01:04Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand",
          "createdAt": "2018-03-02T21:38:04Z",
          "updatedAt": "2018-03-02T21:38:04Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwMjY3MzMz",
          "commit": {
            "abbreviatedOid": "2ac27b9"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "(Only requesting changes on line 5295; the DTLS stuff is a side note)\r\nI don't think we really have a choice but to mark all six of those SignatureSchemes as recommended, for now.",
          "createdAt": "2018-02-28T23:16:22Z",
          "updatedAt": "2018-02-28T23:17:50Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I guess we were maybe talking about removing key_update for DTLS in favor of just using the epoch, but presumably DLTS 1.3 could update the registry as needed.\r\nThough, hmm, since DTLS 1.3 doesn't actually exist yet and these are 1.3-only messages, maybe it makes sense to not mark them okay until DTLS 1.3 exists, i.e., in the DTLS 1.3 IANA considerations.",
              "createdAt": "2018-02-28T23:16:22Z",
              "updatedAt": "2018-03-02T02:11:17Z"
            },
            {
              "originalPosition": 29,
              "body": "Is this shall/has spurious so that we should just start with \"Values\"?",
              "createdAt": "2018-02-28T23:16:59Z",
              "updatedAt": "2018-03-02T02:11:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwMjcxODU0",
          "commit": {
            "abbreviatedOid": "2ac27b9"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-02-28T23:36:24Z",
          "updatedAt": "2018-02-28T23:36:24Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "The current plan is to use key_update in DTLS.  There are a few reasons why maintaining some degree of parity with TLS is nice here.  Asymmetric updates are one.",
              "createdAt": "2018-02-28T23:36:24Z",
              "updatedAt": "2018-03-02T02:11:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwMjg3MDg2",
          "commit": {
            "abbreviatedOid": "2ac27b9"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-01T00:55:34Z",
          "updatedAt": "2018-03-01T00:55:34Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "No I think it's just a bad cut/paste job.  I'll fix shortly.",
              "createdAt": "2018-03-01T00:55:34Z",
              "updatedAt": "2018-03-02T02:11:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwOTE5OTYx",
          "commit": {
            "abbreviatedOid": "0a2e45c"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-02T21:31:05Z",
          "updatedAt": "2018-03-02T21:31:05Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Doesn't this belong in the IANA draft?",
              "createdAt": "2018-03-02T21:31:05Z",
              "updatedAt": "2018-03-02T21:31:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1160,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcyMzI2MTE5",
      "title": "Clarify requirements between key_share in HRR and SH.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1160",
      "state": "MERGED",
      "author": "knekritz",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This clarifies two items relevant to stateless HelloRetryRequests:\r\n1) If a HelloRetryRequest does not contain a key_share extension, the negotiated group does not have to match the non-existent selected group in the HRR.\r\n2) If a HelloRetryRequest does select a group, the server can still choose to use psk_ke key exchange. When sending a stateless HelloRetryRequest, the server may not know if it will accept a PSK yet. This allows the server to still select a group in the HelloRetryRequest which it would need for a full handshake, but later decide to accept the PSK with psk_ke mode.",
      "createdAt": "2018-03-01T19:09:33Z",
      "updatedAt": "2018-03-02T21:31:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "83ce9487806ba7d3ebef0e6d429e437df5da4eea",
      "headRepository": "knekritz/tls13-spec",
      "headRefName": "master",
      "headRefOid": "4cde6c627a50cf09bbdd6fff10b7e89b14e13eb8",
      "closedAt": "2018-03-02T21:31:38Z",
      "mergedAt": "2018-03-02T21:31:38Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "62cc31ba14410fd37b69fc0b448e3625ad097695"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNjU4Nzcx",
          "commit": {
            "abbreviatedOid": "4cde6c6"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Seems reasonable to me.",
          "createdAt": "2018-03-02T02:05:13Z",
          "updatedAt": "2018-03-02T02:05:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1161,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcyNjExNDQ3",
      "title": "6961 is obsoleted",
      "url": "https://github.com/tlswg/tls13-spec/pull/1161",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Need to change the header to obsolete 6961 (as noted in the text).",
      "createdAt": "2018-03-02T21:40:30Z",
      "updatedAt": "2018-03-02T21:44:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "9749cc6a865ecc8f68c2f90fcceeaa1ee7f91d11",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "header_6961",
      "headRefOid": "cb188eea7dcf95ab1bcb91626317b6cfbb51bc56",
      "closedAt": "2018-03-02T21:44:01Z",
      "mergedAt": "2018-03-02T21:44:01Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a8b456b505a479d23218872f95b8870e26dc94aa"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1162,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcyNjEyMjcx",
      "title": "Additional data",
      "url": "https://github.com/tlswg/tls13-spec/pull/1162",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Previous PR plus some cleanup.",
      "createdAt": "2018-03-02T21:44:34Z",
      "updatedAt": "2018-03-03T00:26:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a8b456b505a479d23218872f95b8870e26dc94aa",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "additional_data",
      "headRefOid": "ced73fa1501c489cb04152c43e08b9d0088b0022",
      "closedAt": "2018-03-03T00:26:19Z",
      "mergedAt": "2018-03-03T00:26:18Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5efe572f049d58b3a8da2bf0ab281aa3945484f2"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looks good to me, for what it's worth :)",
          "createdAt": "2018-03-02T22:08:10Z",
          "updatedAt": "2018-03-02T22:08:10Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "ekr: please merge this so we can get a new version out for the IESG.",
          "createdAt": "2018-03-02T23:10:06Z",
          "updatedAt": "2018-03-02T23:10:06Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk: can you be more precise about the appendix D text? is the issue that we say \"ignored\" but then use it as additional_data?",
          "createdAt": "2018-03-03T00:03:20Z",
          "updatedAt": "2018-03-03T00:03:20Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "```\r\nThe value of\r\n   TLSCiphertext.legacy_record_version MAY be ignored, or MAY be\r\n   validated to match the fixed constant value.\r\n```",
          "createdAt": "2018-03-03T00:10:11Z",
          "updatedAt": "2018-03-03T00:10:11Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk : PTAL",
          "createdAt": "2018-03-03T00:21:49Z",
          "updatedAt": "2018-03-03T00:21:49Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwOTI0OTQy",
          "commit": {
            "abbreviatedOid": "b36d96e"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-02T21:50:35Z",
          "updatedAt": "2018-03-02T21:50:35Z",
          "comments": [
            {
              "originalPosition": 81,
              "body": "Probably want a paragraph break here.",
              "createdAt": "2018-03-02T21:50:35Z",
              "updatedAt": "2018-03-03T00:15:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwOTI2MzAz",
          "commit": {
            "abbreviatedOid": "b36d96e"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "There is some legacy_record_version text in Appendix D that should go away as well.\r\nOtherwise, this looks good",
          "createdAt": "2018-03-02T21:55:57Z",
          "updatedAt": "2018-03-02T21:55:57Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwOTQxOTE1",
          "commit": {
            "abbreviatedOid": "b36d96e"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-03-02T23:10:28Z",
          "updatedAt": "2018-03-02T23:10:28Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwOTUyMTE2",
          "commit": {
            "abbreviatedOid": "ced73fa"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-03T00:23:29Z",
          "updatedAt": "2018-03-03T00:23:29Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I guess this works, since just being included in the AAD does not necessarily imply that the sender used the right values.",
              "createdAt": "2018-03-03T00:23:29Z",
              "updatedAt": "2018-03-03T00:23:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwOTUyNDE0",
          "commit": {
            "abbreviatedOid": "ced73fa"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-03T00:26:11Z",
          "updatedAt": "2018-03-03T00:26:11Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "That was my reasoning.",
              "createdAt": "2018-03-03T00:26:11Z",
              "updatedAt": "2018-03-03T00:26:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1163,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcyNjM3NjIy",
      "title": "Clarify that you can't negotiate pre-TLS 1.3 with supported_versions.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1163",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-03T00:41:11Z",
      "updatedAt": "2018-03-04T18:40:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "5efe572f049d58b3a8da2bf0ab281aa3945484f2",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "supported_versions_12",
      "headRefOid": "7cf4c67f829d90db3d1cfcab99a5791fc3eb1e8a",
      "closedAt": "2018-03-04T18:40:42Z",
      "mergedAt": "2018-03-04T18:40:42Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "8001047751e43ef4fe97665353b58d3c545e8b94"
      },
      "comments": [
        {
          "author": "nmav",
          "authorAssociation": "NONE",
          "body": "LGTM!",
          "createdAt": "2018-03-03T21:35:43Z",
          "updatedAt": "2018-03-03T21:35:43Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwOTU0MTcx",
          "commit": {
            "abbreviatedOid": "7cf4c67"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2018-03-03T00:43:26Z",
          "updatedAt": "2018-03-03T00:43:26Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwOTU3Nzc1",
          "commit": {
            "abbreviatedOid": "7cf4c67"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-03-03T01:24:11Z",
          "updatedAt": "2018-03-03T01:24:11Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwOTYwMTE1",
          "commit": {
            "abbreviatedOid": "7cf4c67"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This is natural, since if you negotiate prior to 1.3 you must use the ServerHello rules for the negotiated version.",
          "createdAt": "2018-03-03T02:05:48Z",
          "updatedAt": "2018-03-03T02:05:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1164,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcyODY4MTg5",
      "title": "removing double and and the",
      "url": "https://github.com/tlswg/tls13-spec/pull/1164",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Based on Saravanan's comments.",
      "createdAt": "2018-03-05T13:34:17Z",
      "updatedAt": "2018-03-09T14:38:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8001047751e43ef4fe97665353b58d3c545e8b94",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "doubles",
      "headRefOid": "41e7be13cc4cdfbe76114202fc243633b983ba15",
      "closedAt": "2018-03-09T14:38:18Z",
      "mergedAt": "2018-03-09T14:38:18Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1c3e1bdad2c4dcee9bce040293d5c89cde37de96"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1165,
      "id": "MDExOlB1bGxSZXF1ZXN0MTczMDA4NDE5",
      "title": "adding TLS PskKeyExchangeMode Registry rules",
      "url": "https://github.com/tlswg/tls13-spec/pull/1165",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It appears we should have included rules for populating a registry for the psk_key_exchange_modes extension.",
      "createdAt": "2018-03-05T22:42:39Z",
      "updatedAt": "2018-03-09T14:41:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8001047751e43ef4fe97665353b58d3c545e8b94",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "psk_mode_registry",
      "headRefOid": "61e1d71241c117b417cff296cc823c549ca5e585",
      "closedAt": "2018-03-09T14:41:45Z",
      "mergedAt": "2018-03-09T14:41:45Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "08ffe37cf6f859e91fcd5bf2ae8fac9f8b99d00b"
      },
      "comments": [
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, an obvious oversight in our oversite. :)  I approve.\r\n",
          "createdAt": "2018-03-05T23:05:16Z",
          "updatedAt": "2018-03-05T23:05:16Z"
        },
        {
          "author": "yoavnir",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1",
          "createdAt": "2018-03-05T23:06:03Z",
          "updatedAt": "2018-03-05T23:06:03Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "FWIW, +1",
          "createdAt": "2018-03-05T23:45:06Z",
          "updatedAt": "2018-03-05T23:45:06Z"
        },
        {
          "author": "grittygrease",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 to a new registry.",
          "createdAt": "2018-03-07T00:57:28Z",
          "updatedAt": "2018-03-07T00:57:28Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAxMzgxNDU4",
          "commit": {
            "abbreviatedOid": "61e1d71"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Yes, we should create a registry.  But:\r\n\r\n* We need to update the \"this document defines a new registry\" to match the new number of registries (two)\r\n\r\n* the space of allowed values is only one byte, so we don't need to talk about \"first byte\"",
          "createdAt": "2018-03-06T00:30:44Z",
          "updatedAt": "2018-03-06T00:30:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1166,
      "id": "MDExOlB1bGxSZXF1ZXN0MTczMjg3NDA5",
      "title": "Notes from kaduk's IESG review",
      "url": "https://github.com/tlswg/tls13-spec/pull/1166",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A number of things I noticed while doing my \"IESG\" review.\r\n\r\nSome of these may be a little controversial; I'll try to note them in inline comments and why I wanted to make them.",
      "createdAt": "2018-03-06T21:33:03Z",
      "updatedAt": "2018-03-09T21:30:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "8001047751e43ef4fe97665353b58d3c545e8b94",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "iesg",
      "headRefOid": "60084dfdf693b7b516336fe87550cad7841c359f",
      "closedAt": "2018-03-09T21:30:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged by hand.",
          "createdAt": "2018-03-09T21:30:40Z",
          "updatedAt": "2018-03-09T21:30:40Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAxNzI1ODQw",
          "commit": {
            "abbreviatedOid": "c912fca"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-06T21:36:35Z",
          "updatedAt": "2018-03-06T21:44:05Z",
          "comments": [
            {
              "originalPosition": 108,
              "body": "I think we've talked about this statement before, so feel free to tell me that it's already decided to keep it this way -- I don't have any new arguments to add.",
              "createdAt": "2018-03-06T21:36:35Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 161,
              "body": "Not entirely clear that we actually need to say this, since we do call it an informal presentation language.  But I believe we need a fixed per-element size in order to do arrays, and don't think we say that explicitly anywhere.",
              "createdAt": "2018-03-06T21:37:28Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 170,
              "body": "This is a potentially big change, letting future extensions modify ClientHello2 without a formal Update to the core spec.",
              "createdAt": "2018-03-06T21:37:57Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 237,
              "body": "This is just normalizing to match the language used for PKCS#1 and is not intended to be a behavior change",
              "createdAt": "2018-03-06T21:38:51Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 257,
              "body": "This is a new restriction, but I think it matches the intent.",
              "createdAt": "2018-03-06T21:39:10Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 291,
              "body": "This is somewhat awkward language, but I do think we want to note that not all PSKs allow this.",
              "createdAt": "2018-03-06T21:40:21Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 300,
              "body": "Is it better for us to make up numbers or implementers to make up numbers?",
              "createdAt": "2018-03-06T21:40:47Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 309,
              "body": "(Parallelism with the previous item)",
              "createdAt": "2018-03-06T21:41:08Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 362,
              "body": "Please double-check this, but the pictures don't show a server Certificate for resumption.",
              "createdAt": "2018-03-06T21:41:46Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 502,
              "body": "These alerts are only usable for client_certificate_url, which we deemed to be silly and removed a while ago.",
              "createdAt": "2018-03-06T21:42:37Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 523,
              "body": "I don't understand what the removed clause was trying to say.",
              "createdAt": "2018-03-06T21:42:59Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 532,
              "body": "tickets that are lookup keys to a database will need to be looked up before they could be used, and if you can't find it, you know it's not usable at all, let alone for 0-RTT.",
              "createdAt": "2018-03-06T21:43:32Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 541,
              "body": "This one I could go either way on, but it seems that if you're going to allow 1.3 to be negotiated, you still need to provide what 1.3 will need.",
              "createdAt": "2018-03-06T21:44:01Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAxNzUyMjQ2",
          "commit": {
            "abbreviatedOid": "c912fca"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-06T23:04:36Z",
          "updatedAt": "2018-03-06T23:12:03Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "This is not the case.  You can have an array of variable-length elements.  Those elements necessarily include length prefixes.  What you can't have is arrays of things that do not have a means by which the length is known.\r\n\r\nSee for example from ClientHello:\r\n```\r\n           Extension extensions<8..2^16-1>;\r\n```\r\n\r\n",
              "createdAt": "2018-03-06T23:04:36Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 170,
              "body": "I think that this is reasonable.  We do this for key_share.\r\n\r\nNit: period.",
              "createdAt": "2018-03-06T23:05:52Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 257,
              "body": "Seems weak.  Is there a prohibition on repeated values? Should there be?  If so, then this is an alertable offense.  If there are reasons to allow duplicate values, then we don't need this.",
              "createdAt": "2018-03-06T23:07:25Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 291,
              "body": "+1",
              "createdAt": "2018-03-06T23:07:49Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 300,
              "body": "Implementers will manage.  FWIW, NSS kicks the can even further down the road.",
              "createdAt": "2018-03-06T23:08:52Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 362,
              "body": "Yes.  This is correct.  \"PSK\" rather than resumption perhaps?",
              "createdAt": "2018-03-06T23:09:38Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 523,
              "body": "Oh, if a server accepts a ClientHello and sends its flight as part of processing that, then it has the full exporter immediately available.  A single exporter interface would return the full exporter.",
              "createdAt": "2018-03-06T23:11:40Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAxODA1MDIw",
          "commit": {
            "abbreviatedOid": "c912fca"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-07T04:23:01Z",
          "updatedAt": "2018-03-07T04:28:16Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "Wow, massive braino, sorry about that.  Presumably I was thinking about C arrays or something",
              "createdAt": "2018-03-07T04:23:01Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 170,
              "body": "ack.",
              "createdAt": "2018-03-07T04:23:30Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 257,
              "body": "I don't have a great understanding of how the filters actually work, myself, so I can only say that I *think* there is not a reason to allow duplicate values.  I also had in my head that this was going to be MUST when I first noticed it, so I'll go ahead and make the MAY-->MUST change for now -- thanks for pointing it out.",
              "createdAt": "2018-03-07T04:24:53Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 300,
              "body": "Okay.",
              "createdAt": "2018-03-07T04:25:19Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 523,
              "body": "Ah. I will propose a rewording.",
              "createdAt": "2018-03-07T04:28:04Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyMjY4NzUz",
          "commit": {
            "abbreviatedOid": "f2d7ad6"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-08T11:30:35Z",
          "updatedAt": "2018-03-08T11:30:36Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "s/handshake performing/handshake and perform/ ?",
              "createdAt": "2018-03-08T11:30:35Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyMjY5MDEx",
          "commit": {
            "abbreviatedOid": "f2d7ad6"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-08T11:31:46Z",
          "updatedAt": "2018-03-08T11:31:46Z",
          "comments": [
            {
              "originalPosition": 197,
              "body": "> servers MUST NOT the\r\n\r\n??",
              "createdAt": "2018-03-08T11:31:46Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyMjczNTMy",
          "commit": {
            "abbreviatedOid": "f2d7ad6"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-08T11:50:50Z",
          "updatedAt": "2018-03-08T11:50:51Z",
          "comments": [
            {
              "originalPosition": 447,
              "body": "\"negotiated limit\" feels more appropriate here",
              "createdAt": "2018-03-08T11:50:51Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNDY2NjE2",
          "commit": {
            "abbreviatedOid": "f2d7ad6"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-08T21:31:01Z",
          "updatedAt": "2018-03-08T21:31:01Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "I'm going with a slightly different disambiguation.",
              "createdAt": "2018-03-08T21:31:01Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjcxNTI2",
          "commit": {
            "abbreviatedOid": "f2d7ad6"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2018-03-09T14:52:46Z",
          "updatedAt": "2018-03-09T15:12:27Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "Seems like kind of an odd time to make these changes, as this will all be removed.",
              "createdAt": "2018-03-09T14:52:46Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 108,
              "body": "I think \"until the record layer\" is superfluous. The 0-RTT part seems fine.",
              "createdAt": "2018-03-09T14:54:19Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 141,
              "body": "spelling error: \"against\"",
              "createdAt": "2018-03-09T14:55:18Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 141,
              "body": "Also, I think \"that is\" is too weak. The PSK mode is actually weaker than even a non-PAKE mode, because you can do a passive dictionary attack. I think you need to say \"Specifically, it does not\"",
              "createdAt": "2018-03-09T14:56:07Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 197,
              "body": "I assume you mean \"MUST NOT use\"",
              "createdAt": "2018-03-09T14:56:53Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 257,
              "body": "So, it does seem like there might be a valid reason to provide multiple copies, or at least a coherent interpretation.\r\n\r\nSpecifically, because the semantics are all values must be present.\r\n\r\n```\r\nX = [A, B]\r\n```\r\nand\r\n```\r\nX=[A]\r\nX=[B]\r\n```\r\n\r\nSeem equivalent.\r\n\r\nI agree we have to resolve this, but I think MAY is the worst way, because then it creates interop problems. Either duplicates may appear or they may not, so we should say *that*",
              "createdAt": "2018-03-09T15:00:51Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 265,
              "body": "I'm inclined not to have this. Why do people need to know this at this point?",
              "createdAt": "2018-03-09T15:01:16Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 300,
              "body": "I would say instead \"see [] for the security rationale for this requirement\"",
              "createdAt": "2018-03-09T15:02:25Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 325,
              "body": "I tend to use \"its\" here.",
              "createdAt": "2018-03-09T15:03:03Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 374,
              "body": "I'm not sure this is needed, but it's ungrammatical in any case.\r\n\r\nI think you instead need a semicolon \"; future extensions may\"",
              "createdAt": "2018-03-09T15:09:34Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 386,
              "body": "This seems unnecessary.",
              "createdAt": "2018-03-09T15:09:50Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 447,
              "body": "It's not negotiated, it's just imposed. The record limit extension is an announcement",
              "createdAt": "2018-03-09T15:10:46Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 508,
              "body": "The actual rationale was for security, so I would prefer not to add this text. There are lots of ways to screw up your database.",
              "createdAt": "2018-03-09T15:11:35Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            },
            {
              "originalPosition": 541,
              "body": "Concur.",
              "createdAt": "2018-03-09T15:12:15Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjg4OTkw",
          "commit": {
            "abbreviatedOid": "f2d7ad6"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T15:42:06Z",
          "updatedAt": "2018-03-09T15:42:06Z",
          "comments": [
            {
              "originalPosition": 447,
              "body": "I read \"configured\" in this context as something externally configured (as in application/framework configuration), not something configured through Handshake\r\n\r\nthough I don't agree that it's imposed - if the server doesn't reply with an extension to notify the client that it understood the extension, the limit is not in force. Just the fact that the server needs to answer to extension that client sent makes it a \"negotiated limit\", not \"configured limit\" or \"imposed limit\"",
              "createdAt": "2018-03-09T15:42:06Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjg5Mzkz",
          "commit": {
            "abbreviatedOid": "c912fca"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T15:43:15Z",
          "updatedAt": "2018-03-09T15:43:16Z",
          "comments": [
            {
              "originalPosition": 108,
              "body": "It is a little redundant, yes, though it serves to emphasize the needed functionality instead of just laying out steps to be followed.  But, the use of encryption keys is slightly messy due to the encrypted handshake messages.",
              "createdAt": "2018-03-09T15:43:15Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjkwODY5",
          "commit": {
            "abbreviatedOid": "f2d7ad6"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T15:47:27Z",
          "updatedAt": "2018-03-09T15:47:27Z",
          "comments": [
            {
              "originalPosition": 197,
              "body": "Yes.  (I had fixed some things and then failed to actually push it up.)",
              "createdAt": "2018-03-09T15:47:27Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjkxMjcx",
          "commit": {
            "abbreviatedOid": "f2d7ad6"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T15:48:28Z",
          "updatedAt": "2018-03-09T15:48:28Z",
          "comments": [
            {
              "originalPosition": 447,
              "body": "negotiated still seems better than configured, though neither is great.",
              "createdAt": "2018-03-09T15:48:28Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjkyMDAw",
          "commit": {
            "abbreviatedOid": "f2d7ad6"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T15:50:27Z",
          "updatedAt": "2018-03-09T15:50:27Z",
          "comments": [
            {
              "originalPosition": 265,
              "body": "This one I agree is not needed.  I was first looking at the CertificateType enum, which we are not adding any values to, so is not otherwise mentioned in the IANA considerations and it seemed worth mentioning that IANA is involved in those values.  Here, we are creating a new registry, and that's enough mention of IANA.",
              "createdAt": "2018-03-09T15:50:27Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjkzMTEw",
          "commit": {
            "abbreviatedOid": "f2d7ad6"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T15:53:29Z",
          "updatedAt": "2018-03-09T15:53:29Z",
          "comments": [
            {
              "originalPosition": 325,
              "body": "\"servers\" is plural, though.  But that's easy to fix",
              "createdAt": "2018-03-09T15:53:29Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjkzNTc3",
          "commit": {
            "abbreviatedOid": "f2d7ad6"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T15:54:41Z",
          "updatedAt": "2018-03-09T15:54:41Z",
          "comments": [
            {
              "originalPosition": 386,
              "body": "The idea was to clarify that signature_algorithms_cert is not relevant for this choice, as opposed to in the next bullet point.",
              "createdAt": "2018-03-09T15:54:41Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjk0ODk4",
          "commit": {
            "abbreviatedOid": "f2d7ad6"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T15:58:13Z",
          "updatedAt": "2018-03-09T15:58:13Z",
          "comments": [
            {
              "originalPosition": 508,
              "body": "So you want to go back to \"especially on a server where a single interface can make the early exporter inaccessible\", or just stop after \"is RECOMMENDED.\"?",
              "createdAt": "2018-03-09T15:58:13Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNzE0MTgz",
          "commit": {
            "abbreviatedOid": "f2d7ad6"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T16:53:30Z",
          "updatedAt": "2018-03-09T16:53:30Z",
          "comments": [
            {
              "originalPosition": 386,
              "body": "OK, I can live with it.",
              "createdAt": "2018-03-09T16:53:30Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNzE1OTA0",
          "commit": {
            "abbreviatedOid": "c912fca"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T16:58:25Z",
          "updatedAt": "2018-03-09T16:58:25Z",
          "comments": [
            {
              "originalPosition": 523,
              "body": "I actually am concerned about the opposite mistake :)",
              "createdAt": "2018-03-09T16:58:25Z",
              "updatedAt": "2018-03-09T21:27:10Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1167,
      "id": "MDExOlB1bGxSZXF1ZXN0MTczNDM0NDk3",
      "title": "prevent trivial enumeration of externally set PSKs on server",
      "url": "https://github.com/tlswg/tls13-spec/pull/1167",
      "state": "CLOSED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "as I mentioned on mailing list previously (and @ekr expressed [tepid approval](https://www.ietf.org/mail-archive/web/tls/current/msg25429.html) of) current recommendation allows for enumeration of externally set identities (in case they are simple user names or other human-readable identifiers) as previously bugs like this were considered to be severe vulnerabilities\r\n\r\nthis PR aims to close off that attack",
      "createdAt": "2018-03-07T12:15:53Z",
      "updatedAt": "2018-03-18T15:27:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f47bfe6b8551f7ebcf63240be3ec1c605659d6a1",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "psk-non-enumeration",
      "headRefOid": "22fd7abd240aeaf20e2bba1ae1ee964473e6a496",
      "closedAt": "2018-03-18T15:27:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "while there was also a comment expressed saying that the session tickets should be self-validating, I think the existing text is sufficient:\r\n```\r\nticket\r\n: The value of the ticket to be used as the PSK identity.\r\n  The ticket itself is an opaque label. It MAY either be a database\r\n  lookup key or a self-encrypted and self-authenticated value. Section\r\n  4 of {{RFC5077}} describes a recommended ticket construction mechanism.\r\n```",
          "createdAt": "2018-03-07T12:19:04Z",
          "updatedAt": "2018-03-07T12:19:04Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "FWIW, TLS 1.2 PSK has the same issue, though it does say:\r\n\r\n> If the server does not recognize the PSK identity, it MAY respond\r\n>  with an \"unknown_psk_identity\" alert message.  Alternatively, if the\r\n>  server wishes to hide the fact that the PSK identity was not known,\r\n>   it MAY continue the protocol as if the PSK identity existed but the\r\n>  key was incorrect: that is, respond with a \"decrypt_error\" alert.\r\n\r\nwhich is basically the (rather silly) RSA premaster mitigation and does work in TLS 1.3.",
          "createdAt": "2018-03-08T04:13:49Z",
          "updatedAt": "2018-03-08T04:13:49Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> FWIW, TLS 1.2 PSK has the same issue\r\n\r\nin TLS 1.2 the client can present just one identity so attacker can't leverage captured client hello to try to guess other identities.\r\n\r\nThat's also the reason why I added the mandatory checking of length of binders, so that you can't put a known-good at the end and see an abort if none of the previous identities match by not sending the binder for that known good one.",
          "createdAt": "2018-03-08T11:17:47Z",
          "updatedAt": "2018-03-08T11:57:53Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't follow why a captured ClientHello is important for 1.2. The attacker can just connect, present a different identity and see if it worked. You don't need a known good value.\r\n\r\nA known good one isn't of any use in 1.3 either because the binder incorporates the other identities too (just not the binders). Once you change the identity list, the known good binder is no longer known good.\r\n\r\n(Ignore my claim about the RSA premaster trick being a suitable mitigation in 1.3. Not sure what I was thinking there. That doesn't work.)",
          "createdAt": "2018-03-08T16:16:26Z",
          "updatedAt": "2018-03-08T16:16:26Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I don't follow why a captured ClientHello is important for 1.2. The attacker can just connect, present a different identity and see if it worked. You don't need a known good value.\r\n\r\nthat was in relation to the changes I made to the patch, not your comment\r\n\r\n> A known good one isn't of any use in 1.3 either because the binder incorporates the other identities too (just not the binders)\r\n\r\nyes, you're right, for some reason I though the whole extension is truncated off for the binder calculation. That does indeed make captured client helllo's with known-good identities of less use.\r\n\r\nit does not help us though when the attacker has one valid PSK (both identity and secret) and wants to guess other identities.",
          "createdAt": "2018-03-08T16:40:23Z",
          "updatedAt": "2018-03-08T16:40:23Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> it does not help us though when the attacker has one valid PSK (both identity and secret) and wants to guess other identities.\r\n\r\nThat's true, although I don't think the current state of the PR helps that case. Suppose I send:\r\n\r\nidentities = [tomato42, davidben]\r\nbinders = [garbage, binder_for_davidben]\r\n\r\nthen the server will chose no PSK identity if tomato42 is a user and davidben otherwise.",
          "createdAt": "2018-03-08T17:43:31Z",
          "updatedAt": "2018-03-08T17:43:31Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "exactly, though @kaduk mentioned in https://github.com/tlswg/tls13-spec/pull/1167#discussion_r172954034 that skipping PSKs in case the binder does not validate is a good idea: \"There are security considerations in not attempting to validate multiple binders, as mentioned in #1166 \"\r\n\r\nThough I can't find the specific part that discusses that...",
          "createdAt": "2018-03-08T17:47:47Z",
          "updatedAt": "2018-03-08T17:47:47Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Though I can't find the specific part that discusses that...\r\n\r\nhttps://github.com/tlswg/tls13-spec/pull/1166/files#diff-9d84740dcc569a0a5a359d0fba461a05R3183 ",
          "createdAt": "2018-03-08T21:36:11Z",
          "updatedAt": "2018-03-08T21:36:11Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk yes I've noticed that part, but it just redirects to \"Client Hello Recording\"\r\n\r\nand there, the most severe consequence I found is a _possibility_ of cache pollution:\r\n```\r\nThis will cause the ClientHello to be accepted, and may cause side\r\neffects such as replay cache pollution, although any 0-RTT data will\r\nnot be decryptable because it will use different keys.\r\n```\r\n\r\nisn't almost certain identity enumeration a more severe issue? and wouldn't be able to reconcile that cache pollution with continuing verification of binders?",
          "createdAt": "2018-03-09T12:14:41Z",
          "updatedAt": "2018-03-09T12:14:41Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is far too big a change to make in a PR after IESG approval.\r\n\r\nI think the proposal here is OK and unless I am misunderstanding @davidben's comment, will work, but you need to get it signed off on by the chairs (presumably on-list)\r\n",
          "createdAt": "2018-03-09T23:32:01Z",
          "updatedAt": "2018-03-09T23:32:01Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is way late in the process to just approve/merge.  You MUST take this to the list.",
          "createdAt": "2018-03-10T00:46:10Z",
          "updatedAt": "2018-03-10T00:46:10Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyMDYwODEw",
          "commit": {
            "abbreviatedOid": "0d2c9ca"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-07T19:15:59Z",
          "updatedAt": "2018-03-07T19:16:00Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "There are security considerations in not attempting to validate multiple binders, as mentioned in #1166 .  Do we really want to remove this text?",
              "createdAt": "2018-03-07T19:16:00Z",
              "updatedAt": "2018-03-08T11:07:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyMDY1NjQ2",
          "commit": {
            "abbreviatedOid": "0d2c9ca"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-07T19:29:23Z",
          "updatedAt": "2018-03-07T19:29:23Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Uh no.\r\n\r\nThe current algorithm is:\r\n\r\n```\r\n1. Select a PSK X\r\n2. Validate the binder corresponding to X.\r\n3. If the binder does not validate, abort the connection\r\n4. If the binder validates, proceed with X.\r\n````\r\n\r\nI would be willing to have us consider replacing step 3 with\r\n\r\n```\r\n3. If the binder does not validate, continue the connection as if no PSK had been presented.\r\n```\r\n\r\nBut I agree that we can't just remove this text.",
              "createdAt": "2018-03-07T19:29:23Z",
              "updatedAt": "2018-03-08T11:07:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyMzcxNjQ2",
          "commit": {
            "abbreviatedOid": "0d2c9ca"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-08T16:47:25Z",
          "updatedAt": "2018-03-08T16:47:26Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "@kaduk thing is that if I have one valid PSK, I can then leverage it to enumerate other identities on the server, can't I?",
              "createdAt": "2018-03-08T16:47:25Z",
              "updatedAt": "2018-03-08T16:47:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyMzc5MTg3",
          "commit": {
            "abbreviatedOid": "0d2c9ca"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-08T17:07:15Z",
          "updatedAt": "2018-03-08T17:07:15Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "That's what we are trying to prevent by forcing the server to pick one binder to validate and only considering that one binder.  Having a known-good PSK doesn't help, as either you have the server try that one first and it works, or the server tries a different one first and it (presumably) doesn't work.  But the known-good PSK doesn't come into play at all in the second case -- you could do just as well guessing things without putting a known-good value in.",
              "createdAt": "2018-03-08T17:07:15Z",
              "updatedAt": "2018-03-08T17:07:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyMzg5MDU4",
          "commit": {
            "abbreviatedOid": "0d2c9ca"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-08T17:35:30Z",
          "updatedAt": "2018-03-08T17:35:30Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "if the sever needs to stick to an _identity_ then both existing and proposed algorithms don't help.\r\n\r\nI have my own identity. Say `test`. Server actually has also other identity I'm trying to guess.\r\n\r\nI send CH, list the identities `example` and `test`. Server notices that `example` is one it knows about, tries to verify the binder then either aborts (current draft) or continues to non-PSK handshake.\r\n\r\nAlternatively, I list the identities `non-working` and `test`. Server ignores the `non-working` as it doesn't recognise it, notices `test`, verifies binder (since I am able to create valid binder for it as I posses the secret value) and continues to PSK handshake.\r\n\r\nThat differentiation is sufficient to enumerate other identities on the server.\r\n\r\n",
              "createdAt": "2018-03-08T17:35:30Z",
              "updatedAt": "2018-03-08T17:35:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODMwNDE0",
          "commit": {
            "abbreviatedOid": "22fd7ab"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "We need to make sure there is agreement on list.",
          "createdAt": "2018-03-10T00:47:12Z",
          "updatedAt": "2018-03-10T00:47:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1169,
      "id": "MDExOlB1bGxSZXF1ZXN0MTczNTU0MjU0",
      "title": "Addressing Adam's IESG comments",
      "url": "https://github.com/tlswg/tls13-spec/pull/1169",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-07T19:44:18Z",
      "updatedAt": "2018-03-09T16:40:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f47bfe6b8551f7ebcf63240be3ec1c605659d6a1",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "iesg_adam",
      "headRefOid": "8922feb31498d396b10c4cda04ecc06273678ede",
      "closedAt": "2018-03-09T16:40:09Z",
      "mergedAt": "2018-03-09T16:40:09Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "791e19b7bbb6c2a7d504b7778d10d11b1484275a"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr I did not:\r\n1) add the \"Chosen ciphertext attacks against protocols based on the RSA encryption standard PKCS #1\" reference because it's already in the [JSS15] reference that's later in the sentence.\r\n2) I also didn't made [AEAD-LIMITS] normative.",
          "createdAt": "2018-03-07T20:23:01Z",
          "updatedAt": "2018-03-07T20:23:01Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyMTgwOTE2",
          "commit": {
            "abbreviatedOid": "9fadc51"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-03-08T03:50:54Z",
          "updatedAt": "2018-03-08T03:53:58Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I think this will conflict with #1166 (but don't care which version is used).",
              "createdAt": "2018-03-08T03:50:55Z",
              "updatedAt": "2018-03-09T16:04:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjg1MTIz",
          "commit": {
            "abbreviatedOid": "9fadc51"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2018-03-09T15:31:13Z",
          "updatedAt": "2018-03-09T15:31:42Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "If we are going to indent like this, then you should remove the quotes. I tend to think we should just tell RFC-ed to break the line in the convenient place.",
              "createdAt": "2018-03-09T15:31:13Z",
              "updatedAt": "2018-03-09T16:04:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjk2MzUy",
          "commit": {
            "abbreviatedOid": "9fadc51"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T16:02:25Z",
          "updatedAt": "2018-03-09T16:02:25Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "Can do.",
              "createdAt": "2018-03-09T16:02:25Z",
              "updatedAt": "2018-03-09T16:04:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1170,
      "id": "MDExOlB1bGxSZXF1ZXN0MTczNjAzNjE5",
      "title": "Adding Jon's email address",
      "url": "https://github.com/tlswg/tls13-spec/pull/1170",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-07T23:28:02Z",
      "updatedAt": "2018-03-09T14:37:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f47bfe6b8551f7ebcf63240be3ec1c605659d6a1",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "jons_address",
      "headRefOid": "79b328bb90b437d0a59c792960bf6e17517803d0",
      "closedAt": "2018-03-09T14:37:48Z",
      "mergedAt": "2018-03-09T14:37:48Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ff25e18b0f9dd0919c5380662ac5a7807b10799c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1171,
      "id": "MDExOlB1bGxSZXF1ZXN0MTczNjE1MDMz",
      "title": "Addressing Ben's IESG Comment",
      "url": "https://github.com/tlswg/tls13-spec/pull/1171",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-08T00:42:48Z",
      "updatedAt": "2018-03-09T16:40:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f47bfe6b8551f7ebcf63240be3ec1c605659d6a1",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "iesg_ben",
      "headRefOid": "71b3172e8cc101c046d6b334d3d72385354a9b0f",
      "closedAt": "2018-03-09T16:40:26Z",
      "mergedAt": "2018-03-09T16:40:26Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "fe8cfc2710b33cbe5c2231f84595e6cdccb362be"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyMTg1NDc2",
          "commit": {
            "abbreviatedOid": "a429471"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-08T04:26:22Z",
          "updatedAt": "2018-03-08T04:26:23Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Or just its first TLS message?",
              "createdAt": "2018-03-08T04:26:22Z",
              "updatedAt": "2018-03-08T13:22:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyMjk0OTU0",
          "commit": {
            "abbreviatedOid": "a429471"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-08T13:21:55Z",
          "updatedAt": "2018-03-08T13:21:55Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yeah I could see that.",
              "createdAt": "2018-03-08T13:21:55Z",
              "updatedAt": "2018-03-08T13:22:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1172,
      "id": "MDExOlB1bGxSZXF1ZXN0MTczNzM2MTc3",
      "title": "Addressing Spencer's IESG comments",
      "url": "https://github.com/tlswg/tls13-spec/pull/1172",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-08T13:31:37Z",
      "updatedAt": "2018-03-09T16:42:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f47bfe6b8551f7ebcf63240be3ec1c605659d6a1",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "iesg_spencer",
      "headRefOid": "5dda9091d6fb555e8793b2782df41dbf58667098",
      "closedAt": "2018-03-09T16:42:15Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNTAxMTg3",
          "commit": {
            "abbreviatedOid": "5dda909"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-08T23:36:41Z",
          "updatedAt": "2018-03-08T23:36:42Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think that the intent was to remove normative language here.\r\n\r\n\"when communicating with newer peers, negotiate common parameters based on the server's preferences\"  or similar might be ideal.\r\n\r\nNote that preference is still correct, but I'm not aware of any way in which the client's preference matters, except for it's ability to withhold options.",
              "createdAt": "2018-03-08T23:36:42Z",
              "updatedAt": "2018-03-08T23:36:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNTE2Mjgx",
          "commit": {
            "abbreviatedOid": "5dda909"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T01:00:21Z",
          "updatedAt": "2018-03-09T01:00:21Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "If that's the case then, yeah we can drop the 2119-language because there is only one way to do it.",
              "createdAt": "2018-03-09T01:00:21Z",
              "updatedAt": "2018-03-09T01:00:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1173,
      "id": "MDExOlB1bGxSZXF1ZXN0MTczNzg2MDYw",
      "title": "Forced additions to the abstract",
      "url": "https://github.com/tlswg/tls13-spec/pull/1173",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The I-D checklist requires that updates and obsoletes be included in the abstract; thought RFC.  I personally feel this is [redacted] stupid, but I do not think that we should risk a process appeal to fight this battle.",
      "createdAt": "2018-03-08T16:37:26Z",
      "updatedAt": "2018-03-09T20:02:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f47bfe6b8551f7ebcf63240be3ec1c605659d6a1",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "forced_abstract_additions",
      "headRefOid": "dfdd6ca71b2a3a3ac58fc005453b1de29cb0b472",
      "closedAt": "2018-03-09T20:02:13Z",
      "mergedAt": "2018-03-09T20:02:13Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "58b92684c326d326f6c9285bdbac466728e1daf4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyMzc0NzU3",
          "commit": {
            "abbreviatedOid": "dfdd6ca"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-03-08T16:55:40Z",
          "updatedAt": "2018-03-08T16:55:40Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjY0NTM3",
          "commit": {
            "abbreviatedOid": "dfdd6ca"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T14:32:40Z",
          "updatedAt": "2018-03-09T14:33:17Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Also obsoletes 7627, no?",
              "createdAt": "2018-03-09T14:32:40Z",
              "updatedAt": "2018-03-09T14:33:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjY1ODk1",
          "commit": {
            "abbreviatedOid": "dfdd6ca"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T14:36:37Z",
          "updatedAt": "2018-03-09T14:36:37Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "We don't seem to mention that anywhere at the moment.",
              "createdAt": "2018-03-09T14:36:37Z",
              "updatedAt": "2018-03-09T14:36:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNjY5MzY2",
          "commit": {
            "abbreviatedOid": "dfdd6ca"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T14:46:56Z",
          "updatedAt": "2018-03-09T14:46:56Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "No, but 7627 applies only to TLS 1.2 and below, so I think transitively.",
              "createdAt": "2018-03-09T14:46:56Z",
              "updatedAt": "2018-03-09T14:46:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNzM1Mzc5",
          "commit": {
            "abbreviatedOid": "dfdd6ca"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T18:03:32Z",
          "updatedAt": "2018-03-09T18:03:32Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "D.1 contains:\r\n\r\n~~~~\r\nTLS 1.2 and prior supported an \"Extended Master Secret\" [RFC7627]\r\nextension which digested large parts of the handshake transcript into\r\nthe master secret.  Because TLS 1.3 always hashes in the transcript\r\nup to the server CertificateVerify, implementations which support\r\nboth TLS 1.3 and earlier versions SHOULD indicate the use of the\r\nExtended Master Secret extension in their APIs whenever TLS 1.3 is\r\nused.\r\n~~~~\r\n\r\nI'm worried that following this logic to the extreme we'll need to obsolete all of the RFCs listed in the 1.2 header:\r\n\r\nFrom RFC 5246:\r\n~~~~\r\nUpdated by RFC 6176, RFC 7905, RFC 5878, RFC 5746, RFC 7465, RFC 7568, RFC 7919, RFC 7507, RFC 7685, RFC 7627\r\nObsoletes RFC 3268, RFC 4366, RFC 4346\r\n~~~~\r\n\r\nBut maybe we don't have to ... when you refer to a draft that's been updated you don't necessarily have to include the document that did the updating it's just assumed to be part of it (this is part of chasing references); you can include the reference if you really want to.  I think the same should hold true here - if we're obsoleting the base document (RFC5246) then everything that updates it really ought to just be obsoleting automagically.  I'm not sure it does actually work that way but maybe it ought to.",
              "createdAt": "2018-03-09T18:03:32Z",
              "updatedAt": "2018-03-09T18:03:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyNzcxNzY5",
          "commit": {
            "abbreviatedOid": "dfdd6ca"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T20:02:03Z",
          "updatedAt": "2018-03-09T20:02:03Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I have comet o a similar conclusion. Merging.",
              "createdAt": "2018-03-09T20:02:03Z",
              "updatedAt": "2018-03-09T20:02:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1174,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0MDAzNTQ1",
      "title": "Bodo wanted his address changed",
      "url": "https://github.com/tlswg/tls13-spec/pull/1174",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-09T13:21:40Z",
      "updatedAt": "2018-03-09T14:26:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "f47bfe6b8551f7ebcf63240be3ec1c605659d6a1",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "bodo_address",
      "headRefOid": "4bb815981228d96de0eb0eab2860df727386f116",
      "closedAt": "2018-03-09T14:26:56Z",
      "mergedAt": "2018-03-09T14:26:56Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ecd66b37e813ed28b08bed7bbc5a1dcc1c660052"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1175,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0MDE5MTAw",
      "title": "Updating Antoine's address",
      "url": "https://github.com/tlswg/tls13-spec/pull/1175",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-09T14:31:23Z",
      "updatedAt": "2018-03-09T14:31:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "ecd66b37e813ed28b08bed7bbc5a1dcc1c660052",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "antoine_address",
      "headRefOid": "04adce2741258169f0ae64dc26baa3612a04fdbf",
      "closedAt": "2018-03-09T14:31:55Z",
      "mergedAt": "2018-03-09T14:31:55Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b3b7a46f75b9574339bb9f5ba610de9e3fd80d71"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1176,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0MTAwNTU0",
      "title": "One more item from Ben (Campbell)'s review",
      "url": "https://github.com/tlswg/tls13-spec/pull/1176",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "if I am understanding correctly the nature of the complaint.",
      "createdAt": "2018-03-09T20:26:19Z",
      "updatedAt": "2018-03-09T20:32:09Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "58b92684c326d326f6c9285bdbac466728e1daf4",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "benprime",
      "headRefOid": "86c18f339d43a189c62d84416dac062717e69b54",
      "closedAt": "2018-03-09T20:32:08Z",
      "mergedAt": "2018-03-09T20:32:08Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "1447f6ca169b1840afd3fdbfe10c3fcc2543e10f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1177,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0MTA0ODMw",
      "title": "Note reliable transport required, per Mirja",
      "url": "https://github.com/tlswg/tls13-spec/pull/1177",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-09T20:48:23Z",
      "updatedAt": "2018-03-09T21:07:20Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1447f6ca169b1840afd3fdbfe10c3fcc2543e10f",
      "headRepository": "kaduk/tls13-spec",
      "headRefName": "mirja",
      "headRefOid": "7655d07c10bb3f4b3033eedf70182dec3f81610f",
      "closedAt": "2018-03-09T21:07:20Z",
      "mergedAt": "2018-03-09T21:07:20Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f7b1abdd1cdfb9c36d00c988ea572e5be85db05a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1178,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0MTA4NjA2",
      "title": "Dale Worley's Gen-ART comments",
      "url": "https://github.com/tlswg/tls13-spec/pull/1178",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-09T21:07:00Z",
      "updatedAt": "2018-03-09T23:47:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d9707a5833e6d38fb8693861ffdc7fbfc9f3622a",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "worley_comments",
      "headRefOid": "d434f0c66e1ead666ccbbcad9a3a3f7809b5874c",
      "closedAt": "2018-03-09T23:47:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not my best day.",
          "createdAt": "2018-03-09T23:27:20Z",
          "updatedAt": "2018-03-09T23:27:20Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk: PTAL now",
          "createdAt": "2018-03-09T23:33:03Z",
          "updatedAt": "2018-03-09T23:33:03Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged",
          "createdAt": "2018-03-09T23:47:17Z",
          "updatedAt": "2018-03-09T23:47:17Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODA5MTU0",
          "commit": {
            "abbreviatedOid": "dcea907"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T22:26:49Z",
          "updatedAt": "2018-03-09T22:26:49Z",
          "comments": [
            {
              "originalPosition": 248,
              "body": "Is this missing a closing ) ?",
              "createdAt": "2018-03-09T22:26:49Z",
              "updatedAt": "2018-03-09T23:42:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODEwMTc1",
          "commit": {
            "abbreviatedOid": "dcea907"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think there's just one thing to double check.",
          "createdAt": "2018-03-09T22:31:33Z",
          "updatedAt": "2018-03-09T22:31:33Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODEyNjcx",
          "commit": {
            "abbreviatedOid": "dcea907"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-09T22:43:22Z",
          "updatedAt": "2018-03-09T22:43:22Z",
          "comments": [
            {
              "originalPosition": 248,
              "body": "Fixed.",
              "createdAt": "2018-03-09T22:43:22Z",
              "updatedAt": "2018-03-09T23:42:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODE4MDU0",
          "commit": {
            "abbreviatedOid": "b6538bc"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "These changes did not introduce any substantive changes so I think there's no need to recycle.  Ship it!",
          "createdAt": "2018-03-09T23:12:13Z",
          "updatedAt": "2018-03-09T23:12:13Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODE2ODg1",
          "commit": {
            "abbreviatedOid": "b6538bc"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "A few more nits.",
          "createdAt": "2018-03-09T23:05:34Z",
          "updatedAt": "2018-03-09T23:20:02Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "We lost the \"Once a handshake has completed, the server can\"?",
              "createdAt": "2018-03-09T23:05:34Z",
              "updatedAt": "2018-03-09T23:42:26Z"
            },
            {
              "originalPosition": 134,
              "body": "This is a little rough, maybe \"verify that both X and Y are integers in the correct interval\"?",
              "createdAt": "2018-03-09T23:08:46Z",
              "updatedAt": "2018-03-09T23:42:26Z"
            },
            {
              "originalPosition": 271,
              "body": "\"is is\"?",
              "createdAt": "2018-03-09T23:11:50Z",
              "updatedAt": "2018-03-09T23:42:26Z"
            },
            {
              "originalPosition": 318,
              "body": "'content' was correct. (and no period after 'fragment')",
              "createdAt": "2018-03-09T23:14:03Z",
              "updatedAt": "2018-03-09T23:42:26Z"
            },
            {
              "originalPosition": 374,
              "body": "\"I think at this point\"?",
              "createdAt": "2018-03-09T23:16:29Z",
              "updatedAt": "2018-03-09T23:42:26Z"
            },
            {
              "originalPosition": 385,
              "body": "\"used with failed connection\" doesn't parse.",
              "createdAt": "2018-03-09T23:17:13Z",
              "updatedAt": "2018-03-09T23:42:26Z"
            },
            {
              "originalPosition": 496,
              "body": "No comma before \"will\"",
              "createdAt": "2018-03-09T23:19:09Z",
              "updatedAt": "2018-03-09T23:42:26Z"
            },
            {
              "originalPosition": 508,
              "body": "s/may of/may be/",
              "createdAt": "2018-03-09T23:19:29Z",
              "updatedAt": "2018-03-09T23:42:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODIwODUy",
          "commit": {
            "abbreviatedOid": "b3917f7"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2018-03-09T23:29:54Z",
          "updatedAt": "2018-03-09T23:30:53Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "We lost \"forget\", it looks like?",
              "createdAt": "2018-03-09T23:29:54Z",
              "updatedAt": "2018-03-09T23:42:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODIzMjYy",
          "commit": {
            "abbreviatedOid": "d434f0c"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2018-03-09T23:47:00Z",
          "updatedAt": "2018-03-09T23:47:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1181,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0MTE0OTI4",
      "title": "Why separate early exporter. Fixes #1180",
      "url": "https://github.com/tlswg/tls13-spec/pull/1181",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-09T21:38:25Z",
      "updatedAt": "2018-03-09T22:20:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "cd97b3ae8a0736e11ad40339906ce0b76ede5181",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1180_separate_interface",
      "headRefOid": "196c6c877d8966043c58d2f05916f1a672c3e4e9",
      "closedAt": "2018-03-09T22:20:38Z",
      "mergedAt": "2018-03-09T22:20:38Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "166b2ba884c29cdaf2e343e571c4c42e13679f48"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODAyODYz",
          "commit": {
            "abbreviatedOid": "196c6c8"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-03-09T21:59:42Z",
          "updatedAt": "2018-03-09T21:59:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1182,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0MTIyODQ4",
      "title": "clarify which checks have to happen",
      "url": "https://github.com/tlswg/tls13-spec/pull/1182",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-09T22:19:37Z",
      "updatedAt": "2018-03-09T23:15:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1a52332944454e91e476aa4f784a6cd0e13a1231",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "kaduk2",
      "headRefOid": "a45e0c2af38cf009eb79956a07035f6f4f2d65a9",
      "closedAt": "2018-03-09T23:15:28Z",
      "mergedAt": "2018-03-09T23:15:28Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9020d8099e92801d5262d85be8100f4e079b37cc"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk @davidben ",
          "createdAt": "2018-03-09T22:19:44Z",
          "updatedAt": "2018-03-09T22:19:44Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODA5MDE2",
          "commit": {
            "abbreviatedOid": "a45e0c2"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "works for me",
          "createdAt": "2018-03-09T22:26:07Z",
          "updatedAt": "2018-03-09T22:26:07Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODE4MjI5",
          "commit": {
            "abbreviatedOid": "a45e0c2"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-03-09T23:13:12Z",
          "updatedAt": "2018-03-09T23:13:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1183,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0MTI2NzA2",
      "title": "Address Alexey Melnikov's comments",
      "url": "https://github.com/tlswg/tls13-spec/pull/1183",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-09T22:42:28Z",
      "updatedAt": "2018-03-09T23:57:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "d9707a5833e6d38fb8693861ffdc7fbfc9f3622a",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "melnikov_comments",
      "headRefOid": "c23dafa4b734950bfac09b7738ee19124f4e287b",
      "closedAt": "2018-03-09T23:57:01Z",
      "mergedAt": "2018-03-09T23:57:01Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "63f8e0fd407a4cf26c59368d7cbb1e13b5cb09e7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODE5NTAx",
          "commit": {
            "abbreviatedOid": "2e73203"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-03-09T23:20:52Z",
          "updatedAt": "2018-03-09T23:20:52Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODIzOTMy",
          "commit": {
            "abbreviatedOid": "c23dafa"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2018-03-09T23:51:14Z",
          "updatedAt": "2018-03-09T23:51:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1184,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0MTM2NjY3",
      "title": "I wasn't happy withthe EC cleanup, so I tried Dale's approach",
      "url": "https://github.com/tlswg/tls13-spec/pull/1184",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-09T23:56:47Z",
      "updatedAt": "2018-03-10T03:23:36Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2e95c52cb2ba16a8a9a8b59b5472155768454d43",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "clean_up_point_checking",
      "headRefOid": "ef9a29468e8a1c55952320c8a2faefe4b9796e77",
      "closedAt": "2018-03-10T00:01:02Z",
      "mergedAt": "2018-03-10T00:01:02Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "957f6e8a5bf889f3a19c51fd6065a02aeb002ff9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODI1MDY4",
          "commit": {
            "abbreviatedOid": "c51079e"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I might do \"both integers x and y\" but I can see how it would be okay as-is.",
          "createdAt": "2018-03-09T23:59:49Z",
          "updatedAt": "2018-03-09T23:59:49Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODM4Mjcy",
          "commit": {
            "abbreviatedOid": "ef9a294"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-10T03:15:03Z",
          "updatedAt": "2018-03-10T03:15:03Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Make this a real list.",
              "createdAt": "2018-03-10T03:15:03Z",
              "updatedAt": "2018-03-10T03:15:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAyODM4NTA4",
          "commit": {
            "abbreviatedOid": "ef9a294"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-10T03:23:36Z",
          "updatedAt": "2018-03-10T03:23:36Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I can do this, but it's the same non-list as before :)",
              "createdAt": "2018-03-10T03:23:36Z",
              "updatedAt": "2018-03-10T03:23:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1185,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0MjA2MDUx",
      "title": "Remove misleading clause.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1185",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "ClientHello, etc., processing rules are in earlier versions too. We're just\r\ncalling out some corollaries of it all.",
      "createdAt": "2018-03-11T05:57:21Z",
      "updatedAt": "2018-03-11T15:28:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "957f6e8a5bf889f3a19c51fd6065a02aeb002ff9",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "protocol-invariants-3",
      "headRefOid": "cf6d3b041e2e1a2831c9aec51eda66826b4cb31e",
      "closedAt": "2018-03-11T15:28:32Z",
      "mergedAt": "2018-03-11T15:28:32Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2a8f3c9d699ff389ef9969214879ba999838b58f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1186,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc0NDk1MzU5",
      "title": "No filter duplication. Fixes #1179",
      "url": "https://github.com/tlswg/tls13-spec/pull/1186",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-12T21:09:01Z",
      "updatedAt": "2018-03-12T23:06:53Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "2a8f3c9d699ff389ef9969214879ba999838b58f",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1179_duplicate_oids",
      "headRefOid": "ecaa8b1d291b3d5c91aacc0413bb0e8fa5fd9aa5",
      "closedAt": "2018-03-12T23:06:53Z",
      "mergedAt": "2018-03-12T23:06:53Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e8f8d381ce520c8446b0f99dac55f633dca0d3f8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAzMjIzMjU1",
          "commit": {
            "abbreviatedOid": "ecaa8b1"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I guess it's implicit that there is no meaning to the order in which oid/values appear, and we don't need to say anything about that.",
          "createdAt": "2018-03-12T21:17:54Z",
          "updatedAt": "2018-03-12T21:17:54Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAzMjQ0MjIz",
          "commit": {
            "abbreviatedOid": "ecaa8b1"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-03-12T22:33:48Z",
          "updatedAt": "2018-03-12T22:33:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1187,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc1MzQxMzA2",
      "title": "Editorial changes",
      "url": "https://github.com/tlswg/tls13-spec/pull/1187",
      "state": "MERGED",
      "author": "dcollinsn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This pull request just reformats two of the handshake diagrams to match the rest of the draft, namely, removing blank lines and aligning the arrow with the last line of the packet it relates to.",
      "createdAt": "2018-03-15T18:29:56Z",
      "updatedAt": "2018-03-18T09:18:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "e8f8d381ce520c8446b0f99dac55f633dca0d3f8",
      "headRepository": "dcollinsn/tls13-spec",
      "headRefName": "editorial-changes",
      "headRefOid": "cb242087de852ada0bfe87914c24b9a122d341b1",
      "closedAt": "2018-03-18T09:18:48Z",
      "mergedAt": "2018-03-18T09:18:48Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "a72cc24fb63ed562d329ccad744e2c727015dc71"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1188,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc1NzQ0MzM5",
      "title": "Explain identity exposure attack",
      "url": "https://github.com/tlswg/tls13-spec/pull/1188",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "My sense of the discussion on the list (and talking to the chairs) is that there is not consensus to make a change. This just attempts to document the situation.",
      "createdAt": "2018-03-18T10:29:33Z",
      "updatedAt": "2018-03-18T15:27:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "a72cc24fb63ed562d329ccad744e2c727015dc71",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "psk_enumeration",
      "headRefOid": "fcfff33be14c57e144218671bafc91359673a4da",
      "closedAt": "2018-03-18T15:27:06Z",
      "mergedAt": "2018-03-18T15:27:06Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "fade0caa20ea98cc362c8b3da4d2d547f6e49662"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA0NzkyNzY2",
          "commit": {
            "abbreviatedOid": "55ab85a"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-03-18T10:47:12Z",
          "updatedAt": "2018-03-18T10:47:40Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I might say \"valid PSK identity\" but it's probably okay as-is.",
              "createdAt": "2018-03-18T10:47:12Z",
              "updatedAt": "2018-03-18T13:15:21Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA0Nzk2NTA4",
          "commit": {
            "abbreviatedOid": "55ab85a"
          },
          "author": "jsalowey",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-03-18T13:01:22Z",
          "updatedAt": "2018-03-18T13:01:22Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA0Nzk2NzIy",
          "commit": {
            "abbreviatedOid": "55ab85a"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Feel free to merge.",
          "createdAt": "2018-03-18T13:08:22Z",
          "updatedAt": "2018-03-18T13:08:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1189,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc2MTc5OTIw",
      "title": "reference the security section about external identities in PSK description",
      "url": "https://github.com/tlswg/tls13-spec/pull/1189",
      "state": "MERGED",
      "author": "tomato42",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As na\u00efve handling of external identities may cause the server to\r\nbe vulnerable to identity enumeration attacks, refer the section\r\nthat discusses that danger in the PSK section itself.",
      "createdAt": "2018-03-20T12:50:58Z",
      "updatedAt": "2018-03-20T14:09:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "fade0caa20ea98cc362c8b3da4d2d547f6e49662",
      "headRepository": "tomato42/tls13-spec",
      "headRefName": "psk-security-ref",
      "headRefOid": "cb23337fb599be3e9571bac1b50447364a6ca85c",
      "closedAt": "2018-03-20T14:07:46Z",
      "mergedAt": "2018-03-20T14:07:46Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "bd46c3be8529405a9532023c868fce21bedfef40"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1190,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc2MzcxOTQw",
      "title": "Editorial: Add missing brace.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1190",
      "state": "MERGED",
      "author": "Librazy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add missing brace for first paragraph of 4.6.1.",
      "createdAt": "2018-03-21T02:54:25Z",
      "updatedAt": "2018-03-21T08:05:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "1c4914f0683fba989378068612b65ca5831b52ab",
      "headRepository": "Librazy/tls13-spec",
      "headRefName": "master",
      "headRefOid": "c16f6aeaf8691b57d36aa80392983655660a7f55",
      "closedAt": "2018-03-21T08:05:45Z",
      "mergedAt": "2018-03-21T08:05:45Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6fb032968d20d4a6ec390aa118155a5632102fd9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1191,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc2ODg2OTUz",
      "title": "Fix a typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/1191",
      "state": "MERGED",
      "author": "vasilvv",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-22T19:33:53Z",
      "updatedAt": "2018-03-26T01:28:29Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6fb032968d20d4a6ec390aa118155a5632102fd9",
      "headRepository": "vasilvv/tls13-spec",
      "headRefName": "fix-typo",
      "headRefOid": "4f1feed5365bb27094002c896a2df4c0d91b61e3",
      "closedAt": "2018-03-26T01:28:29Z",
      "mergedAt": "2018-03-26T01:28:29Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5efc720e2b9369e85de1404417583d185527d9b0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA2NzUwODQ0",
          "commit": {
            "abbreviatedOid": "4f1feed"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I believe the markdown has not yet been sent to the RFC Editor, so we can save them the trouble by getting this in.",
          "createdAt": "2018-03-26T00:38:36Z",
          "updatedAt": "2018-03-26T00:38:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1192,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc3MjY0ODMz",
      "title": "Fix \"the the\" typo",
      "url": "https://github.com/tlswg/tls13-spec/pull/1192",
      "state": "MERGED",
      "author": "zzq1015",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "in section 4.2.10",
      "createdAt": "2018-03-24T23:51:26Z",
      "updatedAt": "2018-03-26T01:28:44Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "6fb032968d20d4a6ec390aa118155a5632102fd9",
      "headRepository": "zzq1015/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "b9624494afa544c6bf46ff3ddc6db150a49b51b5",
      "closedAt": "2018-03-26T01:28:44Z",
      "mergedAt": "2018-03-26T01:28:44Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b7fc444ed1a937429ccc489a9f1dfb0a50976827"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1193,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk1MDQ3NTYx",
      "title": "RFC Ed. Changes 1 ",
      "url": "https://github.com/tlswg/tls13-spec/pull/1193",
      "state": "CLOSED",
      "author": "fluffy",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-06-14T23:56:58Z",
      "updatedAt": "2018-06-14T23:58:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b7fc444ed1a937429ccc489a9f1dfb0a50976827",
      "headRepository": null,
      "headRefName": "rfced-prop1",
      "headRefOid": "f4e52246a9f993ba36af0a11721c3534206e0bd0",
      "closedAt": "2018-06-14T23:58:14Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 1194,
      "id": "MDExOlB1bGxSZXF1ZXN0MjAyMDA5NTYy",
      "title": "Fix minor mistakes, extension name",
      "url": "https://github.com/tlswg/tls13-spec/pull/1194",
      "state": "CLOSED",
      "author": "tniessen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I am not sure whether the specification still permits changes, feel free to close this if not.",
      "createdAt": "2018-07-17T17:09:41Z",
      "updatedAt": "2018-07-27T09:06:40Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b7fc444ed1a937429ccc489a9f1dfb0a50976827",
      "headRepository": "tniessen/tls13-spec",
      "headRefName": "fix-grammar-1",
      "headRefOid": "dc4c942c5dd10c1d517ca2e17111d9ddb1b44992",
      "closedAt": "2018-07-27T09:06:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "These all look like things best left to the RFC Editor staff (and this repo should effectively be considered closed at this point).",
          "createdAt": "2018-07-27T00:05:50Z",
          "updatedAt": "2018-07-27T00:05:50Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1197,
      "id": "MDExOlB1bGxSZXF1ZXN0NDYzMDA5OTg0",
      "title": "Erratum5682",
      "url": "https://github.com/tlswg/tls13-spec/pull/1197",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-08-04T21:07:53Z",
      "updatedAt": "2020-08-04T21:08:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b7fc444ed1a937429ccc489a9f1dfb0a50976827",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "erratum5682",
      "headRefOid": "f4a6b6085fd9b2e6eab25bb2f9106e06beb53c7a",
      "closedAt": "2020-08-04T21:08:31Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 1198,
      "id": "MDExOlB1bGxSZXF1ZXN0NDY1NTExMjcz",
      "title": "Framing text",
      "url": "https://github.com/tlswg/tls13-spec/pull/1198",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-08-10T13:46:20Z",
      "updatedAt": "2020-08-10T14:16:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b7fc444ed1a937429ccc489a9f1dfb0a50976827",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "framing_text",
      "headRefOid": "e0ab4609d0fecd500a5f397ebe454c44c6d33dfd",
      "closedAt": "2020-08-10T14:16:07Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 1199,
      "id": "MDExOlB1bGxSZXF1ZXN0NDY1NTI5NDYw",
      "title": "Framing text",
      "url": "https://github.com/tlswg/tls13-spec/pull/1199",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-08-10T14:16:59Z",
      "updatedAt": "2020-08-10T14:17:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "master",
      "baseRefOid": "b7fc444ed1a937429ccc489a9f1dfb0a50976827",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "framing_text",
      "headRefOid": "e0ab4609d0fecd500a5f397ebe454c44c6d33dfd",
      "closedAt": "2020-08-10T14:17:18Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 1202,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIwODcwNzYy",
      "title": "Shorten some unnecessarily long names.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1202",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "While we're renaming these anyway, exporter_secret and resumption_secret\r\nare just as descriptive. Closes #1200.",
      "createdAt": "2020-11-13T21:54:17Z",
      "updatedAt": "2021-02-19T18:29:14Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "b71bdb739c75ec18f13bbbaaebb4a2efb9a2e93a",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "shorten-secret-names",
      "headRefOid": "b93311e2da5290886449d78c5797ce01f39fa6d8",
      "closedAt": "2021-02-19T18:29:14Z",
      "mergedAt": "2021-02-19T18:29:14Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2fb7b0ad77d9cca4c845a93a705ffda3b27a3517"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1204,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIyMjAxMTEy",
      "title": "Align TLS 1.2 terminology with this document",
      "url": "https://github.com/tlswg/tls13-spec/pull/1204",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1203. I wasn't sure where to put this text. There was an Appendix talking about TLS 1.2, so I figured it could go nearby. And then it probably wanted to go before that Appendix so there isn't ambiguity about how to refer to EMS.",
      "createdAt": "2020-11-17T07:26:09Z",
      "updatedAt": "2021-02-19T18:20:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "b71bdb739c75ec18f13bbbaaebb4a2efb9a2e93a",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "tls12-names",
      "headRefOid": "eea31f7261940dc3a2115651bf34323da2c8c38e",
      "closedAt": "2021-02-19T18:20:37Z",
      "mergedAt": "2021-02-19T18:20:37Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3c0e8c0f9a79a080645770077071669f6cc74848"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1205,
      "id": "MDExOlB1bGxSZXF1ZXN0NTMxMzM0MzQx",
      "title": "Discuss tracking implications of session resumption.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1205",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In WG discussion of draft-vvv-tls-cross-sni-resumption-00, tracking\r\nimplications came up. While that draft does expand the set of servers\r\nthat can cross-resume, it's not a new issue. For instance, on the Web,\r\nif https://a.example and https://b.example both include a subresource to\r\na common https://tracker.example, TLS session resumption may be used to\r\ncorrelate activity across the two sites.\r\n\r\nAdd some text to discuss this. This is distinct from the single-use\r\nticket mitigation, which only covers correlation by passive observers.\r\nCorrelation by the server itself is pretty much inherent to session\r\nresumption and other cache-like optimizations. Instead, the text points\r\nthis out and gives an example of how applications can keep their\r\nresumption scopes consistent with their privacy goals.\r\n\r\nFixes #1201.\r\n\r\n(CC @vasilvv)",
      "createdAt": "2020-12-02T22:42:17Z",
      "updatedAt": "2021-02-19T18:15:33Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "b71bdb739c75ec18f13bbbaaebb4a2efb9a2e93a",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "resumption-tracking",
      "headRefOid": "1a67fd23382d0f2c1f1edfd5131e5af7f0be4c7a",
      "closedAt": "2021-02-19T18:15:33Z",
      "mergedAt": "2021-02-19T18:15:33Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "8f8c841329cde2b2e42a7bc42205ae0e9c41139d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMzQ2NDMy",
          "commit": {
            "abbreviatedOid": "1a67fd2"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-03T00:23:55Z",
          "updatedAt": "2020-12-03T00:23:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1210,
      "id": "MDExOlB1bGxSZXF1ZXN0NTcxNjYyMzg5",
      "title": "Security Property - Protection of endpoint identities",
      "url": "https://github.com/tlswg/tls13-spec/pull/1210",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed on the TLS list. It seems like cipher suites without confidentiality is already registered. Feel free to reformulate in any way. Refering to the cipher suites in the document is not very useful for the reader, and it does not seem to be a rule that a NULL encryption could not be recommended even if that seems very unlikely.\r\n\r\nI also suggest adding \"(certificate)\" after client identity. The security property does obviously not hold for PSK authentication.",
      "createdAt": "2021-02-11T08:53:49Z",
      "updatedAt": "2021-02-19T18:19:36Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "b71bdb739c75ec18f13bbbaaebb4a2efb9a2e93a",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "dde8adb75b8fa93fca2b4dfce1a1483809e0b7c6",
      "closedAt": "2021-02-19T18:19:36Z",
      "mergedAt": "2021-02-19T18:19:36Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ec5d7e6e04c7c9f54a19da972695f933f2bfee89"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Why not simply must be protected (or MUST)?\r\n\r\nBeing consistent about TLS 1.3 depending on the use of confidentiality protection would be better.",
          "createdAt": "2021-02-11T11:06:04Z",
          "updatedAt": "2021-02-11T11:06:04Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that enforcing MUST would be better. I am quite bored of writing TLS profiling documents for various SDOs and products forbidding weak options. Reading RFC 8446 Appedix E, I understood the security properties as something that would be enforced in the future. I would support that interpretation of the security properties.\r\n\r\nHowever:\r\n- Now is seems like registration of cipher suites breaking one of the security properties might already have been done.\r\n- The TLS WG has adopted draft-ietf-tls-external-psk-guidance, which breaks some of the other security properties.\r\n",
          "createdAt": "2021-02-11T11:47:10Z",
          "updatedAt": "2021-02-11T11:47:10Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There were \"always\" registrations of null ciphersuites going back to SSLv3 (and I think SSLv2).  The comments imply they were newly added, which isn't true; they were just carried forward.\r\n\r\nIn the earlier days of TLS evolution it was \"BYOC\" bring your own cipher.  Not true any more.\r\n",
          "createdAt": "2021-02-11T13:09:07Z",
          "updatedAt": "2021-02-11T13:09:07Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "TLS 1.3 deliberately broke with this history by making no pre-existing cipher suite work with it.  I think that it might be entirely reasonable to say that it assumes encryption.  Though I guess what needs to happen now is that we need to decide whether to state that assumption or to say something else.",
          "createdAt": "2021-02-11T23:29:10Z",
          "updatedAt": "2021-02-11T23:29:10Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NDQ1NTcz",
          "commit": {
            "abbreviatedOid": "f63175b"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-19T18:18:48Z",
          "updatedAt": "2021-02-19T18:18:56Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n  suites without confidentiality; while this specification does not define any such cipher suites,\r\n  other documents may do so.\r\n```",
              "createdAt": "2021-02-19T18:18:48Z",
              "updatedAt": "2021-02-19T18:19:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1211,
      "id": "MDExOlB1bGxSZXF1ZXN0NTcxNjY3NzYz",
      "title": "Editorial: \"Client Authentication\" -> \"Certificate-Based Client Authentication\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/1211",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Based on the PSK authentication was not included in the past. I think specification has some places where \"Client Authentication\" refer to only certificate-based client authentication and not client authentication is general.\r\n\r\nNot a big thing, but I think it might confuse some readers, and would be good to clarify.",
      "createdAt": "2021-02-11T09:04:32Z",
      "updatedAt": "2021-02-19T18:14:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "b71bdb739c75ec18f13bbbaaebb4a2efb9a2e93a",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-2",
      "headRefOid": "e7a4f1d3a7925a2fa47d41478b1dcc273409a44b",
      "closedAt": "2021-02-19T18:14:51Z",
      "mergedAt": "2021-02-19T18:14:51Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f2be3bc092a62cf63ff2313a1bddf1268bdc0fe2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1213,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc2NjQyMzU4",
      "title": "Changelog for -01",
      "url": "https://github.com/tlswg/tls13-spec/pull/1213",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-19T18:34:31Z",
      "updatedAt": "2021-02-19T18:39:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "2fb7b0ad77d9cca4c845a93a705ffda3b27a3517",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "changelog-01",
      "headRefOid": "1239ccac502cf3dc8f992563c4dc9f980ac3b88e",
      "closedAt": "2021-02-19T18:39:37Z",
      "mergedAt": "2021-02-19T18:39:37Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "97abde007caa7aeb249656b1f7fae86026b53ec8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NDYxNzky",
          "commit": {
            "abbreviatedOid": "6cc2c6f"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-19T18:38:40Z",
          "updatedAt": "2021-02-19T18:39:23Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n[[RFC EDITOR: Please remove in final RFC.]]\r\n```",
              "createdAt": "2021-02-19T18:38:40Z",
              "updatedAt": "2021-02-19T18:39:34Z"
            },
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n* Clarify that privacy guarantees don't apply when you have null encryption\r\n```",
              "createdAt": "2021-02-19T18:39:18Z",
              "updatedAt": "2021-02-19T18:39:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1215,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc2NzMxOTg2",
      "title": "minor editorial spelling",
      "url": "https://github.com/tlswg/tls13-spec/pull/1215",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-19T21:08:45Z",
      "updatedAt": "2021-02-19T21:19:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "97abde007caa7aeb249656b1f7fae86026b53ec8",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-3",
      "headRefOid": "a571a4a3657da66518bf42df453a705d7da20830",
      "closedAt": "2021-02-19T21:19:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just fixed separately",
          "createdAt": "2021-02-19T21:19:06Z",
          "updatedAt": "2021-02-19T21:19:06Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1217,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc3MTI4Nzc4",
      "title": "Random Number Generation and Seeding",
      "url": "https://github.com/tlswg/tls13-spec/pull/1217",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Does not \"require\" a PRNG, a TRNG works as well.\r\n\r\nSince TLS 1.3 was published, CFRG has published RFC 8937. I think RFC 8937 is a great idea. I think it would be good if TLS 1.3 pointed implementors to that. Given the history of Dual EC, tls extended random, and that several different signal intelligence agencies have been controlling hardware security companies like Crypto AG in secret I think it is essential to not trust a single of randomness.\r\n\r\nhttps://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjN39aenfvuAhWvtIsKHQ-wArgQFjABegQIAxAD&url=https%3A%2F%2Fwww.washingtonpost.com%2Fgraphics%2F2020%2Fworld%2Fnational-security%2Fcia-crypto-encryption-machines-espionage%2F&usg=AOvVaw0gGtw_W1_z-DVSlMSqi9Zr",
      "createdAt": "2021-02-21T15:21:50Z",
      "updatedAt": "2021-10-25T20:58:40Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "0cdd4602ea6e732f9a65eb1592521c35a9b538bc",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-4",
      "headRefOid": "7f03b1f95e55c41ec85937c61cf57a3a10cb9b25",
      "closedAt": "2021-10-25T20:58:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "-1\r\nwe should not recommend use of TRNGs, they commonly have biased output and as such require whitening. If you whiten the output you get a CSPRNGs",
          "createdAt": "2021-02-24T13:22:02Z",
          "updatedAt": "2021-02-24T13:22:02Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The PR did not \"recommend\" TRNGs. I don't have any interest in using TRNGs and I don't really care. I just saw it as a correction. With your terminlogy, the current text is correct, but I am not sure TRNGs with withening is typically described as CSPRNG even if I agrre with you that they could be seen as such.\r\n\r\nThe important part of the PR is to include RFC 8937.",
          "createdAt": "2021-02-24T14:06:43Z",
          "updatedAt": "2021-02-24T14:06:43Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm ok with adding reference to RFC8937",
          "createdAt": "2021-02-24T19:38:34Z",
          "updatedAt": "2021-02-24T19:38:34Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think this is generally applicable enough to go as strong as RECOMMENDED here. For instance, it assumes you have a deterministic signature scheme available with your key. And while faulty entropy source are a bit more general of a concern, the worries about bad CSPRNG algorithms are a bit more specific. Applications that get to pick the CSPRNG algorithm can just pick one they believe in. (After all, what's the HKDF machinery in RFC8937 itself but way to consume entropy? Or really most of symmetric cryptography.)",
          "createdAt": "2021-02-24T19:47:45Z",
          "updatedAt": "2021-02-24T19:47:45Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Superseded by PR #1238",
          "createdAt": "2021-10-25T20:58:40Z",
          "updatedAt": "2021-10-25T20:58:40Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA1Nzk0OTg5",
          "commit": {
            "abbreviatedOid": "7f03b1f"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-06T23:12:13Z",
          "updatedAt": "2021-03-06T23:12:17Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nor a true random number generator (TRNG).\r\n```\r\n\r\nI suggest we remove this piece. The rest makes sense.",
              "createdAt": "2021-03-06T23:12:13Z",
              "updatedAt": "2021-03-06T23:12:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1218,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc3MTMwNjEx",
      "title": "Recommending deterministic ECDSA for IoT devices without any security\u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/1218",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026 considerations is not good.\r\n\r\nDeterministic ECDSA is good in many cases but may not be the best case in accesable IoT devices.\r\n\r\nIn the last 5 years, there has been a large amount of academic papers showing that purely deterministic ECC algorithms in accesable IoT devices suffers from side-channel and fault injection attacks. For a list of papers see e.g. Section 1 of https://tools.ietf.org/html/draft-mattsson-cfrg-det-sigs-with-noise-02\r\n\r\nRecommending deterministic ECDSA for IoT devices without any security considerations is not good...\r\n\r\nWould be good with some further guidance. Section 1 of https://tools.ietf.org/html/draft-mattsson-cfrg-det-sigs-with-noise-02 is probably the best overview but it is a draft. Any of the paper references there would do. No standardized solutions yet.",
      "createdAt": "2021-02-21T15:33:51Z",
      "updatedAt": "2021-03-06T23:11:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "0cdd4602ea6e732f9a65eb1592521c35a9b538bc",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-6",
      "headRefOid": "55a175ca6c0d5484f637fd60246c476f63e5250e",
      "closedAt": "2021-03-06T23:11:35Z",
      "mergedAt": "2021-03-06T23:11:35Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9219c0a5f1f746fb2b6a32b69bcb15eebbaa17eb"
      },
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "how is this relevant to TLS? client random and server random ensure that the peers will not make a signature over the same handshake hash...",
          "createdAt": "2021-02-24T13:28:11Z",
          "updatedAt": "2021-02-24T13:28:11Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the requirement to have signatures over the the same message was specific to the Minerva attack. Side-channel attacks seems to be a general problem when the whole or parts of the signed message is known. TLS stops attacks where the attacker choses the message but does to my understanding not stop all of the published side-channel attacks on deterministic ECDSA. By using randomness, TLS protects against these kind of side-channel attacks much better than e.g. COSE. I do not know it the reamining attacks are mostly theoretical or if they are practical.",
          "createdAt": "2021-02-24T14:33:25Z",
          "updatedAt": "2021-02-24T14:33:25Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "why you're mentioning Minerva? it's about leaking the bit size of k, it doesn't matter if the k was calculated from the deterministic algorithm or if it was selected randomly, the leak is equally destructive in either case",
          "createdAt": "2021-02-24T18:49:42Z",
          "updatedAt": "2021-02-24T18:49:42Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1220,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc5NTQzOTgy",
      "title": "Clarify that trailing data in extensions is forbidden.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1220",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This was already a compliance requirement, but spell it out more explicitly.\r\n\r\nCloses #1219.",
      "createdAt": "2021-02-24T19:18:13Z",
      "updatedAt": "2021-10-25T20:59:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "0cdd4602ea6e732f9a65eb1592521c35a9b538bc",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "clarify",
      "headRefOid": "eb93730143dbed5b2b3ae75f53dbca9327917bd4",
      "closedAt": "2021-10-25T20:59:37Z",
      "mergedAt": "2021-10-25T20:59:37Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2cb5b550ac7fa355f0cfb5daaa154c6683f249af"
      },
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "LGTM",
          "createdAt": "2021-02-24T19:40:57Z",
          "updatedAt": "2021-02-24T19:40:57Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Why is this specific to extension_data? Why not require this for every length-prefixed construct that contains fields that might not extend to the full length?\r\n\r\nAFAICT it isn't.\r\n\r\nhttps://tools.ietf.org/html/draft-ietf-quic-http-34#section-10.8 also comes to mind",
          "createdAt": "2021-02-25T01:45:27Z",
          "updatedAt": "2021-02-25T01:45:27Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "@martinthomson Good catch.",
          "createdAt": "2021-02-25T01:48:46Z",
          "updatedAt": "2021-02-25T01:48:46Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Why is this specific to extension_data? Why not require this for every length-prefixed construct that contains fields that might not extend to the full length?\r\n\r\nIt's already required. Length prefixes typically come from the `T field<floor..ceiling>` syntax in the presentation language. Not only would a parser that allows trailing data be non-compliant, but it'd be totally incoherent. Vectors don't tell you the number of elements, so the only way to parse it is to loop until empty, peeling off `T`s. That means, if there is any trailing data, it'll be immediately interpreted as another instance of `T`, not trailing data.\r\n\r\nWhereas `extension_data` is a little different because it's an `opaque extension_data<0..2^16-1>` byte string whose contents happen to be another structure. TBH, I don't think this case *needed* a clarification either (it's pretty obvious, IMO), but a clarification doesn't hurt so whatever.",
          "createdAt": "2021-02-25T02:10:13Z",
          "updatedAt": "2021-02-25T02:10:13Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben, I think that you are right when it comes to lists of things.  I was thinking about structs in general.  However, in QUIC, we have transport parameters, which would share the need for this exact treatment; that we decided to manage that within QUIC rather than use the TLS grammar means that we don't need to worry about it, but it suggests that nested extension points will hit this problem too.\r\n\r\nI was trying to find other such instances, but I can't find any offhand.  I was looking at [server_name](https://datatracker.ietf.org/doc/html/rfc6066#section-3), and that uses a `switch` statement, which suggests that it is simply impossible to include a non-zero type value (another reason that server name extension is irredeemably busted; and of course, that's not how NSS implements it; from memory, we assume every type has a 1 byte length prefix...).\r\n\r\nI thought that handshake messages might need this, but the grammar seems to prevent that in the same way as server_name.  An unknown handshake message hits a switch statement and falls out, presumably into an error condition.  So even though the format might allow an unknown handshake message to be ignored the grammar suggests that it is always an error (which, to be clear, is a good thing from a protocol perspective).\r\n\r\nThe encapsulation of handshake messages in records is another place that is interesting.  In TLS, that doesn't matter much because the extra bytes roll over and we are back in your \"next instance of `T`\" case, but it is a problem in DTLS where each record needs to contain discrete fragments.\r\n\r\nSo I do think that it would be better to have this be a general statement, even if it there is precisely one instance where we know it definitely applies.",
          "createdAt": "2021-02-25T03:28:17Z",
          "updatedAt": "2021-02-25T03:28:17Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "the only place where trailing data is allowed is after ClientHello for implementations that don't support extensions",
          "createdAt": "2021-02-25T10:55:13Z",
          "updatedAt": "2021-02-25T10:55:13Z"
        },
        {
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> It's already required. Length prefixes typically come from the `T field<floor..ceiling>` syntax in the presentation language. Not only would a parser that allows trailing data be non-compliant, but it'd be totally incoherent. Vectors don't tell you the number of elements, so the only way to parse it is to loop until empty, peeling off `T`s. That means, if there is any trailing data, it'll be immediately interpreted as another instance of `T`, not trailing data.\r\n\r\nA receiver will not necessarily parse every entry in the vector, if it finds what it's looking for before it gets through the whole vector.",
          "createdAt": "2021-02-26T00:03:24Z",
          "updatedAt": "2021-02-26T00:03:24Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> So I do think that it would be better to have this be a general statement, even if it there is precisely one instance where we know it definitely applies.\r\n\r\nHmm. Where were you envisioning putting this generally? The definition of various length prefixes are kind of scattered all over the place.",
          "createdAt": "2021-02-26T21:19:36Z",
          "updatedAt": "2021-02-26T21:19:36Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Section 3.9?",
          "createdAt": "2021-03-01T05:12:06Z",
          "updatedAt": "2021-03-01T05:12:06Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk3ODUyMTUx",
          "commit": {
            "abbreviatedOid": "bf72f13"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-24T19:35:14Z",
          "updatedAt": "2021-02-24T19:35:14Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk4MDg2MTU4",
          "commit": {
            "abbreviatedOid": "bf72f13"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Why is this specific to extension_data?  Why not require this for every length-prefixed construct that contains fields that might not extend to the full length?",
          "createdAt": "2021-02-25T01:41:08Z",
          "updatedAt": "2021-02-25T01:41:08Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk4MTg0NDg5",
          "commit": {
            "abbreviatedOid": "bf72f13"
          },
          "author": "briansmith",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-25T04:20:47Z",
          "updatedAt": "2021-02-25T04:20:47Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Could you please clarify this so that it is clear that if the receiver doesn't parse the extension data, then it doesn't have to check it? The way it is worded now seems to imply that receivers must parse every extension every time, just to comply with this.",
              "createdAt": "2021-02-25T04:20:47Z",
              "updatedAt": "2021-02-26T21:18:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk5OTQ4NzMy",
          "commit": {
            "abbreviatedOid": "eb93730"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-26T21:18:48Z",
          "updatedAt": "2021-02-26T21:18:48Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Fair enough. Does the new text work?",
              "createdAt": "2021-02-26T21:18:48Z",
              "updatedAt": "2021-02-26T21:18:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1222,
      "id": "MDExOlB1bGxSZXF1ZXN0NTg2MzU2MDk0",
      "title": "Clarify that indications are just requests with no response. Fixes #1221",
      "url": "https://github.com/tlswg/tls13-spec/pull/1222",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-03-08T00:05:22Z",
      "updatedAt": "2021-03-08T14:45:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "9219c0a5f1f746fb2b6a32b69bcb15eebbaa17eb",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1221_extension_indications",
      "headRefOid": "ec6412aae451d1b33874be0d079d9e7cb9f3ca8d",
      "closedAt": "2021-03-08T14:45:11Z",
      "mergedAt": "2021-03-08T14:45:11Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "bee46547e4b2b5000a2cb72d6404fb95157b99d9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA1OTAzNTMy",
          "commit": {
            "abbreviatedOid": "ec6412a"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-08T00:25:39Z",
          "updatedAt": "2021-03-08T00:25:39Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA1OTA3NDc5",
          "commit": {
            "abbreviatedOid": "ec6412a"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-08T00:53:54Z",
          "updatedAt": "2021-03-08T00:53:54Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA2MjI2NDgw",
          "commit": {
            "abbreviatedOid": "ec6412a"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-08T12:11:39Z",
          "updatedAt": "2021-03-08T12:11:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1228,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYyMzM1MTc3",
      "title": "Outdated references to ITU-T/ISO/IEC specifications",
      "url": "https://github.com/tlswg/tls13-spec/pull/1228",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- The references to X501 and X690 are to very old version. Ignore this part if that is intentional.\r\n\r\nhttps://www.itu.int/rec/T-REC-X.690-202102-I/en\r\nhttps://www.itu.int/rec/T-REC-X.501-201910-I/en\r\nhttps://webstore.iec.ch/publication/68163\r\n\r\n- The references to X501 and X690 have differenct format where X609 refer to both ITU-T and ISO/IEC while X501 only refer to ITU-T. Ignore this part if that is intentional.\r\n\r\n- The X690 reference seems incorrect. Seems like it refers to the 2015 version of ITU-T and the 2002 version of ISO\r\n    \"ISO/IEC 8825-1:2002, November 2015.\"",
      "createdAt": "2021-06-05T08:02:47Z",
      "updatedAt": "2021-10-25T14:37:12Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "bee46547e4b2b5000a2cb72d6404fb95157b99d9",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-7",
      "headRefOid": "73b3be61da254acab13c51d5454633a5d2dfb603",
      "closedAt": "2021-10-25T14:37:12Z",
      "mergedAt": "2021-10-25T14:37:12Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "99835efc6840ef939c29a462d515af3bf74525d1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1229,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYyMzM3MjQz",
      "title": "Updates and obsolete in abstract",
      "url": "https://github.com/tlswg/tls13-spec/pull/1229",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The paragraph \"This document supersedes and obsoletes previous\" in the introduction also needs to be updated...",
      "createdAt": "2021-06-05T08:10:05Z",
      "updatedAt": "2022-03-07T18:15:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "bee46547e4b2b5000a2cb72d6404fb95157b99d9",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-8",
      "headRefOid": "6308950263057fbba2551cfbdf71181ef555c98a",
      "closedAt": "2022-03-07T18:15:13Z",
      "mergedAt": "2022-03-07T18:15:13Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "cc575a1c1ba57a23666a3c39996b8d1f4fcdadaa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os4u-u45",
          "commit": {
            "abbreviatedOid": "c0251ca"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T14:24:03Z",
          "updatedAt": "2021-10-25T14:24:03Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Why do you think this updates 4492 and 7627",
              "createdAt": "2021-10-25T14:24:03Z",
              "updatedAt": "2021-10-25T14:24:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os4wAmN2",
          "commit": {
            "abbreviatedOid": "6308950"
          },
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-14T11:58:00Z",
          "updatedAt": "2021-11-14T11:58:01Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "This was just a correction to align the abstract with the document heading.\r\n\r\n`\"Updates: 4492, 5705, 6066, 7627 (if approved)\"`\r\n\r\nLooking at why, I think the update of the document header was correct. RFC8446bis do update these documents. But RFC 4492 has been obsoleted by 8422 so I think 4492 is wrong and should be replaced by 8422. \r\n\r\n- RFC8446bis redefines the name of the extention \"extended_master_secret\" defined by RFC 7627.\r\n\r\n- RFC8446 and RFC8446bis updates two entries x25519 and x448 defined by RFC 8422.\r\n\r\nI updated the PR to 8422. If you do not think RFC8446bis should update these documents the document heading needs to be changed instead.",
              "createdAt": "2021-11-14T11:58:00Z",
              "updatedAt": "2021-11-14T12:01:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os41xJEJ",
          "commit": {
            "abbreviatedOid": "6308950"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T18:15:00Z",
          "updatedAt": "2022-03-07T18:15:00Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I think this is now correct.",
              "createdAt": "2022-03-07T18:15:00Z",
              "updatedAt": "2022-03-07T18:15:00Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1230,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYyMzQyNjcw",
      "title": "RFC 8996 \"Deprecating TLS 1.0 and TLS 1.1\"",
      "url": "https://github.com/tlswg/tls13-spec/pull/1230",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "RFC 8996 should be referenced like RFCs 6176 and 7568",
      "createdAt": "2021-06-05T08:29:52Z",
      "updatedAt": "2022-03-07T18:12:46Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "bee46547e4b2b5000a2cb72d6404fb95157b99d9",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-9",
      "headRefOid": "ff711b5131d599f805d5ae0b5193341b7ee8cdf3",
      "closedAt": "2022-03-07T18:12:45Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd like to get some second opinions on this. Despite 8996 we still do expect people to do 1.0 and 1.1 for a while and if they do it should be safe. @martinthomson @davidben ?",
          "createdAt": "2021-10-25T14:29:09Z",
          "updatedAt": "2021-10-25T14:29:09Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, I think removing that text is slightly premature, particularly the downgrade protection bits.",
          "createdAt": "2021-10-25T14:49:26Z",
          "updatedAt": "2021-10-25T14:49:49Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm okay with adding the reference.  The text seems too strong too early.  Maybe make it a MAY?  Like \"Servers that strictly follow {{RFC8896}} MAY reject ...\"\r\n",
          "createdAt": "2021-10-28T16:24:32Z",
          "updatedAt": "2021-10-28T16:24:32Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I provided an alternate PR in https://github.com/tlswg/tls13-spec/pull/1252",
          "createdAt": "2022-03-07T18:12:45Z",
          "updatedAt": "2022-03-07T18:12:45Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1231,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYyMzQ2NzU1",
      "title": "RFC 8773 TLS 1.3 Extension for Certificate-Based Authentication with \u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/1231",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\"Implementations MUST NOT combine external PSKs with certificate-based authentication of\r\neither the client or server. Future specifications MAY provide an\r\nextension to permit this.\"\r\n\r\nThis can now be made a bit more specific",
      "createdAt": "2021-06-05T08:44:58Z",
      "updatedAt": "2023-03-13T20:24:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "bee46547e4b2b5000a2cb72d6404fb95157b99d9",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-12",
      "headRefOid": "42af584840bb85a5f9e12d900dc48a927d4f971c",
      "closedAt": "2023-03-13T20:24:00Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Alt in PR #1296",
          "createdAt": "2023-03-13T18:55:33Z",
          "updatedAt": "2023-03-13T18:55:42Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing based on #1296",
          "createdAt": "2023-03-13T20:23:48Z",
          "updatedAt": "2023-03-13T20:23:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1233,
      "id": "MDExOlB1bGxSZXF1ZXN0NjcyNjk0NjY4",
      "title": "Correct NST extensions length",
      "url": "https://github.com/tlswg/tls13-spec/pull/1233",
      "state": "MERGED",
      "author": "mattcaswell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "All other extensions blocks have a max length of 2^16-1 except this one which was 2^16-2.",
      "createdAt": "2021-06-17T14:31:36Z",
      "updatedAt": "2021-10-25T14:22:57Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "bee46547e4b2b5000a2cb72d6404fb95157b99d9",
      "headRepository": "mattcaswell/tls13-spec",
      "headRefName": "sessionticklen",
      "headRefOid": "2206939c4136dff02e803f53959c6a3283c74060",
      "closedAt": "2021-10-25T14:22:57Z",
      "mergedAt": "2021-10-25T14:22:57Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c60900df7ae986e46a953cc8f2bcd0b40aa7c3ce"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg2NDUyNzUw",
          "commit": {
            "abbreviatedOid": "2206939"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-06-17T15:19:47Z",
          "updatedAt": "2021-06-17T15:19:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1234,
      "id": "MDExOlB1bGxSZXF1ZXN0NjkzNjIxNDYy",
      "title": "Fix a couple references to sig_algs/sig_algs_cert.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1234",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The discussion about root certificates should mention signature_algorithms_cert. The discussion about what algorithms the key must support signing with should not, as that's the TLS signature.\r\n\r\n(CC @sleevi)",
      "createdAt": "2021-07-20T16:30:23Z",
      "updatedAt": "2021-10-25T21:11:12Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "bee46547e4b2b5000a2cb72d6404fb95157b99d9",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "sig-algs-cert",
      "headRefOid": "6ba74aa5b923e19fafe04d01e58d9f10fc17f235",
      "closedAt": "2021-10-25T21:11:12Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEwODEzODM4",
          "commit": {
            "abbreviatedOid": "461df43"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-20T16:33:06Z",
          "updatedAt": "2021-07-20T16:33:07Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "The lead-in here is \"certificates\" plural sent by the server, and I think this change only makes sense if the rules only apply to the EE cert.",
              "createdAt": "2021-07-20T16:33:07Z",
              "updatedAt": "2021-07-20T16:33:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEwODgxMDkw",
          "commit": {
            "abbreviatedOid": "461df43"
          },
          "author": "sleevi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-20T17:20:01Z",
          "updatedAt": "2021-07-20T17:20:02Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "The existing language also only makes sense if it applies to the EE cert (`digitalSignature` is for EEs, we'd expect `keyCertSign` for the CA certificates).\r\n\r\nI believe \"the certificate\" referenced in the lead-in here is in reference to the previous bullet point (\"the server's end entity certificate\"), but perhaps that same language could/should just be repeated here for this bullet?",
              "createdAt": "2021-07-20T17:20:02Z",
              "updatedAt": "2021-07-20T17:20:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEwODg4OTc5",
          "commit": {
            "abbreviatedOid": "461df43"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-20T17:28:50Z",
          "updatedAt": "2021-07-20T17:28:50Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Ah yeah there are a few odd things here. I've added the word \"end-entity\". I've also merged in the bullet point above, since it's really talking about the same thing. It's also weird that the second bullet point believes we've already selected a signature algorithm, while the third believes we haven't yet. I didn't carry over \"server's\" from the second bullet point because that's already implicit from the whole section.\r\n\r\n(I suspect that second bullet point was originally talking about the cipher suite, but we've taken the auth portions out of the cipher suites.)",
              "createdAt": "2021-07-20T17:28:50Z",
              "updatedAt": "2021-07-20T17:28:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1236,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA2MDIxODA1",
      "title": "Clarifying the security properties of 0-RTT data.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1236",
      "state": "MERGED",
      "author": "nimia",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is following issue #1235.\r\n0-RTT data may sometimes be forward-secret, and sometimes not.\r\nThis commit attempts to clarify that in Sections 2.3 and 8.1.",
      "createdAt": "2021-08-08T10:48:55Z",
      "updatedAt": "2021-10-25T14:36:13Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "bee46547e4b2b5000a2cb72d6404fb95157b99d9",
      "headRepository": "nimia/tls13-spec",
      "headRefName": "nimia-0-rtt",
      "headRefOid": "0fb3084ae1d6c9d9da9c7d89ca4d11906bb73a4b",
      "closedAt": "2021-10-25T14:35:58Z",
      "mergedAt": "2021-10-25T14:35:58Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e3e018afa3e1f422ec18aedb0cfdad2eda84bf72"
      },
      "comments": [
        {
          "author": "cbartle891",
          "authorAssociation": "NONE",
          "body": "This is great. Thanks so much for writing this up!",
          "createdAt": "2021-08-16T16:50:02Z",
          "updatedAt": "2021-08-16T16:50:02Z"
        },
        {
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"forward secret\" as an adjective is wierd.",
          "createdAt": "2021-08-16T17:47:01Z",
          "updatedAt": "2021-08-16T17:47:01Z"
        },
        {
          "author": "cbartle891",
          "authorAssociation": "NONE",
          "body": "> I don't get excited by having the initial statement be \"not necessarily forward secret\" but can't put my finger on exactly why, and I don't have an alternative suggestion, so I won't object to this.\r\n\r\nPresumably because it doesn't indicate in what circumstances it's forward secret (e.g. it could be completely random). Maybe it's more accurate to say \"forward secret only under certain circumstances on the server side.\"",
          "createdAt": "2021-08-16T17:53:10Z",
          "updatedAt": "2021-08-16T17:57:37Z"
        },
        {
          "author": "nimia",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How about this:\r\nThe protocol does not provide any forward secrecy guarantees for this data. The server's behavior determines what forward secrecy guarantees, if any, are applicable (see {{single-use-tickets}}). This behavior is not communicated to the client as part of the protocol. Therefore, absent out-of-band knowledge of the server's behavior, the client should assume that this data is not forward secret.\r\n\r\nThanks Carrick :-) \r\n@kaduk, @richsalz What do you think? ",
          "createdAt": "2021-08-17T09:21:23Z",
          "updatedAt": "2021-08-18T09:36:50Z"
        },
        {
          "author": "cbartle891",
          "authorAssociation": "NONE",
          "body": "@nimia Sounds good to me.",
          "createdAt": "2021-08-17T16:57:29Z",
          "updatedAt": "2021-08-17T16:57:29Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@nimia please send me a PR to add your name to the acknowledgements.",
          "createdAt": "2021-10-25T14:36:13Z",
          "updatedAt": "2021-10-25T14:36:13Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMwMjQ0Njg5",
          "commit": {
            "abbreviatedOid": "ed20cf6"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-16T00:50:10Z",
          "updatedAt": "2021-08-16T00:51:10Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "In light of my comment on the linked issue, I'd suggest a phrasing more akin to:\r\n\r\nThe client in general must assume that this data is not forward secret: it is encrypted solely under keys derived using the offered PSK and the presented ticket inherently must allow for recovery of that PSK.  In specific circumstances, with a cooperating server, some level of forward secrecy may be provided for this data; see {{single-use-tickets}}.",
              "createdAt": "2021-08-16T00:50:10Z",
              "updatedAt": "2021-08-16T00:51:10Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nusing PSKs enjoy not only anti-replay protection, but also forward secrecy once all copies of the PSK from the database entry have been deleted.\r\n```",
              "createdAt": "2021-08-16T00:51:04Z",
              "updatedAt": "2021-08-16T00:51:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMwOTE5MzEy",
          "commit": {
            "abbreviatedOid": "22543b2"
          },
          "author": "nimia",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-16T16:37:16Z",
          "updatedAt": "2021-08-16T16:37:17Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I pushed a new phrasing, hope this is better?\r\n(The new phrasing tries to give a high-level answer as to \"forward secret, yes or no\", and avoids mentioning the PSK for conciseness.)",
              "createdAt": "2021-08-16T16:37:17Z",
              "updatedAt": "2021-08-16T16:37:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMwOTMxODMy",
          "commit": {
            "abbreviatedOid": "22543b2"
          },
          "author": "cbartle891",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-16T16:51:13Z",
          "updatedAt": "2021-08-16T16:51:13Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMwOTY4NTIw",
          "commit": {
            "abbreviatedOid": "22543b2"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This seems okay.\r\nI don't get excited by having the initial statement be \"not necessarily forward secret\" but can't put my finger on exactly why, and I don't have an alternative suggestion, so I won't object to this.",
          "createdAt": "2021-08-16T17:33:57Z",
          "updatedAt": "2021-08-16T17:33:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1238,
      "id": "PR_kwDOASA0os4tpcQA",
      "title": "Emanjon prng",
      "url": "https://github.com/tlswg/tls13-spec/pull/1238",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-25T20:57:58Z",
      "updatedAt": "2021-10-25T21:23:00Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "99835efc6840ef939c29a462d515af3bf74525d1",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "emanjon-prng",
      "headRefOid": "5f77d541c83e6d49c4048b76d5842b794b660fea",
      "closedAt": "2021-10-25T21:23:00Z",
      "mergedAt": "2021-10-25T21:23:00Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d4a8afac498d52cdfe79faa471fce2395cf687ff"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os4vAZcK",
          "commit": {
            "abbreviatedOid": "5f77d54"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T21:22:36Z",
          "updatedAt": "2021-10-25T21:22:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1239,
      "id": "PR_kwDOASA0os4tpoJk",
      "title": "Add reference to RFC 8879. Fixes #1232",
      "url": "https://github.com/tlswg/tls13-spec/pull/1239",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-25T22:16:34Z",
      "updatedAt": "2021-10-25T22:29:42Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "d4a8afac498d52cdfe79faa471fce2395cf687ff",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1232_cert_compression",
      "headRefOid": "9a4a885da110f7ee2418ccc3b25ca47749a4f376",
      "closedAt": "2021-10-25T22:29:42Z",
      "mergedAt": "2021-10-25T22:29:42Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "68f88475b0b929a10d7664a181124e64483fbd91"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os4vAkOH",
          "commit": {
            "abbreviatedOid": "9a4a885"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T22:29:17Z",
          "updatedAt": "2021-10-25T22:29:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1240,
      "id": "PR_kwDOASA0os4tppiD",
      "title": "Add cached info to extension table. Fixes #1237",
      "url": "https://github.com/tlswg/tls13-spec/pull/1240",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@kaduk ",
      "createdAt": "2021-10-25T22:27:30Z",
      "updatedAt": "2021-10-25T22:29:09Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "d4a8afac498d52cdfe79faa471fce2395cf687ff",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1237_cached_info",
      "headRefOid": "05af7e2687b84365541ab0db576b68fa873ee7eb",
      "closedAt": "2021-10-25T22:29:09Z",
      "mergedAt": "2021-10-25T22:29:09Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5fd3e2c72a9b1c3dc00e78fb1a8737a760ffb973"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os4vAkMe",
          "commit": {
            "abbreviatedOid": "05af7e2"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T22:29:05Z",
          "updatedAt": "2021-10-25T22:29:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1242,
      "id": "PR_kwDOASA0os4t4Jbh",
      "title": "Adding Nimrod Aviram as a contributor.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1242",
      "state": "MERGED",
      "author": "nimia",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Thanks ekr :-)",
      "createdAt": "2021-10-30T10:34:30Z",
      "updatedAt": "2021-11-08T19:47:35Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "68f88475b0b929a10d7664a181124e64483fbd91",
      "headRepository": "nimia/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "b12b44a36d9ad237ee7e3bfac5a1a046f72ee852",
      "closedAt": "2021-11-08T19:47:35Z",
      "mergedAt": "2021-11-08T19:47:35Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5fdb370347077c8caffb1e5e7302cbca19a05bf3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os4vTbmn",
          "commit": {
            "abbreviatedOid": "b12b44a"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-30T21:11:47Z",
          "updatedAt": "2021-10-30T21:11:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os4vjJeZ",
          "commit": {
            "abbreviatedOid": "b12b44a"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-04T13:32:46Z",
          "updatedAt": "2021-11-04T13:32:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1244,
      "id": "PR_kwDOASA0os4ufjJt",
      "title": "Resumption is allowed before the initial connection is closed",
      "url": "https://github.com/tlswg/tls13-spec/pull/1244",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "#1243",
      "createdAt": "2021-11-14T05:33:06Z",
      "updatedAt": "2021-11-14T20:34:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "5fdb370347077c8caffb1e5e7302cbca19a05bf3",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-13",
      "headRefOid": "1f8e27137355c3bf32e6d278cebf3a7c9b6aac23",
      "closedAt": "2021-11-14T20:34:31Z",
      "mergedAt": "2021-11-14T20:34:31Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e48cf0f8fff7171452931e13d89ca361f5c747f7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1246,
      "id": "PR_kwDOASA0os4ufnSr",
      "title": "Forward secrecy, long connections, and key exfiltration",
      "url": "https://github.com/tlswg/tls13-spec/pull/1246",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "#1245",
      "createdAt": "2021-11-14T07:59:37Z",
      "updatedAt": "2022-03-07T18:17:52Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "5fdb370347077c8caffb1e5e7302cbca19a05bf3",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-15",
      "headRefOid": "d337a0675609618e57f6d9d54680110467ed5dc1",
      "closedAt": "2022-03-07T18:17:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os41xJRm",
          "commit": {
            "abbreviatedOid": "d337a06"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T18:15:48Z",
          "updatedAt": "2022-03-07T18:15:48Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I think this is good except for the final recommendation which I'm wary of. I'm going to merge it without that and file an issue.",
              "createdAt": "2022-03-07T18:15:48Z",
              "updatedAt": "2022-03-07T18:15:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1251,
      "id": "PR_kwDOASA0os4uzbvg",
      "title": "Expand the duty of the certificate alerts to PSKs (external and resum\u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/1251",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "discuss-vienna"
      ],
      "body": "Expand the duty of the certificate alerts to PSKs (External and resumption)\r\n\r\n#1247",
      "createdAt": "2021-11-20T15:59:23Z",
      "updatedAt": "2022-07-11T22:52:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "e48cf0f8fff7171452931e13d89ca361f5c747f7",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-16",
      "headRefOid": "c25158fa3606b2d03592ed3ce59865416e2f393c",
      "closedAt": "2022-07-11T22:52:53Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 on the changes, but -1 overall: I think we should change those definitions together with adding information about handling expiration of certificates and PSKs while the connection is running (even if it's \"the upper layer protocol is responsible for handling it\", so that the division of duties is explicit, not implicit)",
          "createdAt": "2021-11-23T14:22:11Z",
          "updatedAt": "2021-11-23T14:23:01Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think more would be needed here because in many cases PSKs are optional (e.g., resumption). I would suggest we just have an \"invalid_psk\" alert but with more text.\r\n\r\n",
          "createdAt": "2022-03-07T18:06:04Z",
          "updatedAt": "2022-03-07T18:06:04Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing per discussion in Vienna.",
          "createdAt": "2022-07-11T22:52:53Z",
          "updatedAt": "2022-07-11T22:52:53Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1252,
      "id": "PR_kwDOASA0os40Dzx1",
      "title": "This attempts to split the difference on the 1.1 and 1.0 deprecation.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1252",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-07T18:12:06Z",
      "updatedAt": "2022-03-07T21:59:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "e48cf0f8fff7171452931e13d89ca361f5c747f7",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "deprecating_tls_1_1",
      "headRefOid": "15940de0dbf5d5efb16159e0c522e5dba9e5f3bd",
      "closedAt": "2022-03-07T21:59:47Z",
      "mergedAt": "2022-03-07T21:59:47Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d26f67506e3f1306a788ed058d66b95671aa5bd4"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is what we want here.",
          "createdAt": "2022-03-07T18:12:19Z",
          "updatedAt": "2022-03-07T18:12:19Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1254,
      "id": "PR_kwDOASA0os40D7h9",
      "title": "No rekey in early data. Fixes #1249",
      "url": "https://github.com/tlswg/tls13-spec/pull/1254",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-07T18:51:19Z",
      "updatedAt": "2022-03-09T02:21:25Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "d80dbfff912f5520ae5bd2ec6a7126c1dc54dd13",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1249_aead_limits",
      "headRefOid": "e4b1ce42cb08c49b661370f5d4f33eaaf3a73add",
      "closedAt": "2022-03-07T22:00:02Z",
      "mergedAt": "2022-03-07T22:00:01Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ca6a51ba68c9b90ad890b7b177934c8dbdb97602"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The reason for the SHOULD is that the current text says: \r\n> primitive (AES or ChaCha20) has no weaknesses. Implementations SHOULD\r\ndo a key update as described in {{key-update}} prior to reaching these limits.\r\nNote that it is not possible to perform a KeyUpdate for early data\r\nand therefore implementations SHOULD not exceed the limits\r\nwhen sending early data.\r\n\r\nWe could of course change both.",
          "createdAt": "2022-03-09T02:21:25Z",
          "updatedAt": "2022-03-09T02:21:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os413m2r",
          "commit": {
            "abbreviatedOid": "e4b1ce4"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-09T01:24:55Z",
          "updatedAt": "2022-03-09T01:24:56Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I might prefer:\r\n\r\n> therefore implementations MUST stop sending early data before exceeding these limits.\r\n\r\nNo point in being all \"SHOULD\"y when it comes to this.\r\n\r\nFWIW, I worked out that you can exceed the key usage limits with AES and early data.  You need an awful lot of it, but it is at least theoretically possible with one record per byte.  2^32 bytes > 2^24.5 records.",
              "createdAt": "2022-03-09T01:24:55Z",
              "updatedAt": "2022-03-09T01:24:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1255,
      "id": "PR_kwDOASA0os40D9Ow",
      "title": "Issue1248 traffic key use",
      "url": "https://github.com/tlswg/tls13-spec/pull/1255",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-07T19:00:32Z",
      "updatedAt": "2022-03-07T22:00:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "d80dbfff912f5520ae5bd2ec6a7126c1dc54dd13",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1248_traffic_key_use",
      "headRefOid": "c781fdb22eb45f525a4a8dcaff35857a9546439a",
      "closedAt": "2022-03-07T22:00:21Z",
      "mergedAt": "2022-03-07T22:00:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c889a5994f8f3aa147cd9436b89698c341453627"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1267,
      "id": "PR_kwDOASA0os47Of7r",
      "title": "General error. Fixes #1212",
      "url": "https://github.com/tlswg/tls13-spec/pull/1267",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-11T23:06:48Z",
      "updatedAt": "2022-07-11T23:06:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "41ff95ec879069ddde0ce34c6d17d189f114fc81",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1212_general_alert",
      "headRefOid": "18a4978cc092883819bd97afcd6cd8370f08ea24",
      "closedAt": "2022-07-11T23:06:54Z",
      "mergedAt": "2022-07-11T23:06:54Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6190229262a4272b632365765ada10f3e499da74"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1269,
      "id": "PR_kwDOASA0os5BT1y2",
      "title": "Errors for bogus tickets. Fixes #1247",
      "url": "https://github.com/tlswg/tls13-spec/pull/1269",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-21T19:46:22Z",
      "updatedAt": "2022-11-10T09:51:59Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "6190229262a4272b632365765ada10f3e499da74",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1247_psk_invalid",
      "headRefOid": "0b9bfa0ac7dcadf9792227411951eb2b8869b6a0",
      "closedAt": "2022-11-10T09:51:59Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As noted in the original issue, we he have unknown_psk_identity, so I think this is unnecessary after all.\r\n\r\n@emanjon @chris-wood ?",
          "createdAt": "2022-10-21T21:06:34Z",
          "updatedAt": "2022-10-21T21:06:34Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Shouldn't we add a security section to that? It feels to me like it may be very easy to mess up the identity checks in a way that provides information to the attacker (Bleichenbacher style).",
          "createdAt": "2022-10-24T11:46:22Z",
          "updatedAt": "2022-10-24T11:46:22Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Do you have some specific text to propose?\n\nOn Mon, Oct 24, 2022 at 4:46 AM Hubert Kario ***@***.***>\nwrote:\n\n> Shouldn't we add a security section to that? It feels to me like it may be\n> very easy to mess up the identity checks in a way that provides information\n> to the attacker (Bleichenbacher style).\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/pull/1269#issuecomment-1288914406>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAIPLIIGGFOVI66OHOOUGCLWEZZJTANCNFSM6AAAAAARLOWL54>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>\n",
          "createdAt": "2022-10-24T12:57:26Z",
          "updatedAt": "2022-10-24T12:57:26Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's very implementation dependent, how the ticket is constructed. A ticket that's RSA encrypted, AES encrypted, or just a database key will have completely different behaviours and possible attacks, so unfortunately at best I think we can provide only something vague and generic.\r\n\r\nRather bad, bad something like this:\r\n```\r\nNote that the decryption and processing of the ticket may provide a side channel about information contained in the ticket or internal state of the server.\r\nImplements should analyse if the particular ticket construction doesn't leak sensitive information when processed from malformed messages or unexpected sources. Using authenticated encryption over all fields of the ticket is one of recommended mitigation strategies. \r\n```",
          "createdAt": "2022-10-24T14:27:32Z",
          "updatedAt": "2022-10-24T14:27:32Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks. We have so far remained agnostic about ticket construction and I\nthink we should do the same here. The introduction of this error would not\nchange what the client learns, I don't think.\n\nNote that I actually don't plan to land this PR anyway, as there is already\na fine alert.\n\nOn Mon, Oct 24, 2022 at 7:27 AM Hubert Kario ***@***.***>\nwrote:\n\n> It's very implementation dependent, how the ticket is constructed. A\n> ticket that's RSA encrypted, AES encrypted, or just a database key will\n> have completely different behaviours and possible attacks, so unfortunately\n> at best I think we can provide only something vague and generic.\n>\n> Rather bad, bad something like this:\n>\n> Note that the decryption and processing of the ticket may provide a side channel about information contained in the ticket or internal state of the server.\n> Implements should analyse if the particular ticket construction doesn't leak sensitive information when processed from malformed messages or unexpected sources. Using authenticated encryption over all fields of the ticket is one of recommended mitigation strategies.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/pull/1269#issuecomment-1289122773>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAIPLIOM3ZTPYMSLBYWX6CLWE2MF7ANCNFSM6AAAAAARLOWL54>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>\n",
          "createdAt": "2022-10-24T14:55:21Z",
          "updatedAt": "2022-10-24T14:55:21Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I wasn't thinking about the presence or even value of the alert being the side channel, I was thinking about timing side-channels.",
          "createdAt": "2022-10-24T18:31:32Z",
          "updatedAt": "2022-10-24T18:34:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This really seems out of scope then.\n\nOn Mon, Oct 24, 2022 at 11:31 AM Hubert Kario ***@***.***>\nwrote:\n\n> I wasn't thinking about the presence or even value of the ticket being the\n> side channel, I was thinking about timing side-channels.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tlswg/tls13-spec/pull/1269#issuecomment-1289429564>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAIPLIJQZ7KXSAVQPVFRVW3WE3IY7ANCNFSM6AAAAAARLOWL54>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>\n",
          "createdAt": "2022-10-24T19:43:25Z",
          "updatedAt": "2022-10-24T19:43:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5EsDob",
          "commit": {
            "abbreviatedOid": "0b9bfa0"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-23T23:55:56Z",
          "updatedAt": "2022-10-23T23:59:33Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "\"ticket\" has a very specific connotation that I think you might want to avoid here.  How about `psk_rejected`?  My only reservation there is that it looks like your goal is to signal that the psk *identifier* is not acceptable to the server.",
              "createdAt": "2022-10-23T23:57:23Z",
              "updatedAt": "2022-10-23T23:59:34Z"
            },
            {
              "originalPosition": 17,
              "body": "Do you really want 2119 language here?  This is just how session resumption is supposed to work.\r\n\r\n```suggestion\r\nis being used for session resumption, the server is expected\r\nto ignore the ticket and perform a full handshake instead.\r\n```",
              "createdAt": "2022-10-23T23:58:28Z",
              "updatedAt": "2022-10-23T23:59:34Z"
            },
            {
              "originalPosition": 36,
              "body": "```suggestion\r\n   describing their previous usage.\r\n```\r\n\r\nOther list items have a period.",
              "createdAt": "2022-10-23T23:59:20Z",
              "updatedAt": "2022-10-23T23:59:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1270,
      "id": "PR_kwDOASA0os5BT7NN",
      "title": "Update KeyUpdate limits with text from RFC 9147. Fixed #1257",
      "url": "https://github.com/tlswg/tls13-spec/pull/1270",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-21T20:15:12Z",
      "updatedAt": "2023-03-13T18:50:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "14cd57776e59d5065dc1481599dd529e1b69692f",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1257_key_updates",
      "headRefOid": "c7e3cdd5d11eb79214fd1b3d15fb91ae6c1d1fa0",
      "closedAt": "2023-03-13T18:50:17Z",
      "mergedAt": "2023-03-13T18:50:17Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "688b038cbcbb3af2757bfdf65d77eca8d3ceacf8"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note that this is precisely the language that appears in 9147.",
          "createdAt": "2022-10-24T00:16:38Z",
          "updatedAt": "2022-10-24T00:16:38Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I made some updates, and am just merging in anticipation of the draft deadline. Feel free to file a PR if you think changes are indicated. @martinthomson ",
          "createdAt": "2023-03-13T18:50:12Z",
          "updatedAt": "2023-03-13T18:50:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5EsBp-",
          "commit": {
            "abbreviatedOid": "7b2a492"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-23T23:22:39Z",
          "updatedAt": "2022-10-23T23:38:28Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nwhen sending early data.\r\n```",
              "createdAt": "2022-10-23T23:22:39Z",
              "updatedAt": "2022-10-23T23:38:28Z"
            },
            {
              "originalPosition": 6,
              "body": "So you start by saying that rekeying has a high collision chance, but then you say that it doesn't because the nonce also has a random starting point and therefore expands the space.  This is confusing.\r\n\r\nThere are two analyses you might use here:\r\n\r\n1. The key analysis (the first sentence), which is pretty simple.  Simplistic even.\r\n2. The joint analysis of key + nonce, which is 224 bits wide, which the note implies.\r\n\r\n\r\nThis latter one needs to consider the number of records in each epoch as well.  If the per-epoch record limit is 2^25, then assuming a purely random key + a sequential nonce (which is not true but it should work for the purposes of rough analysis), then you can treat the space as drawing from a 199 bit space at random, so you really only need to worry about 2^99 key updates.  Rekeying only 2^48 times retains an advantage in excess of 2^50 there, so maybe that's a good approach.  And should that ever happen, nonces will be used far less (2^48 records is an unlikely number of records for a single connection, let alone 2^72.5), so the odds of collision are probably much lower still.\r\n\r\nSo I would probably drop this note, except to *maybe* say - at the end - while the risk of collision for a key is low, the use of random base nonces further reduces the risk of collision for record protection, even where keys do happen to be reused.",
              "createdAt": "2022-10-23T23:32:31Z",
              "updatedAt": "2022-10-23T23:38:28Z"
            },
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nWith a 128-bit key as in AES-128, rekeying 2<sup>64</sup> times has a high\r\n```\r\n\r\nYou might like to do this throughout.  It does read better (in HTML) and the text output remains the same.",
              "createdAt": "2022-10-23T23:33:05Z",
              "updatedAt": "2022-10-23T23:38:28Z"
            },
            {
              "originalPosition": 10,
              "body": "Well, this is all based on a predicate (128-bit keys) that might not hold true for all cipher suites.  I would instead say that this version of the specification applies this limit for all AEADs, no matter what their key size, but implementations MUST NOT enforce this limit as it could be extended in future versions of the specification.",
              "createdAt": "2022-10-23T23:37:51Z",
              "updatedAt": "2022-10-23T23:38:28Z"
            },
            {
              "originalPosition": 13,
              "body": "Do you need to advise that the connection be abandoned at this point, or maybe when this last set of keys expires?",
              "createdAt": "2022-10-23T23:38:25Z",
              "updatedAt": "2022-10-23T23:38:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5PvCSR",
          "commit": {
            "abbreviatedOid": "7b2a492"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T18:40:13Z",
          "updatedAt": "2023-03-13T18:40:13Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Well, I don't think this text is incorrect. It says that there is a high chance of key collision which there is, so this is correct.\r\n\r\n\r\n\r\n",
              "createdAt": "2023-03-13T18:40:13Z",
              "updatedAt": "2023-03-13T18:40:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5PvEFH",
          "commit": {
            "abbreviatedOid": "7b2a492"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T18:45:27Z",
          "updatedAt": "2023-03-13T18:45:27Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I don't think we need to. 9147 doesn't say anything about this.\r\n",
              "createdAt": "2023-03-13T18:45:27Z",
              "updatedAt": "2023-03-13T18:45:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1271,
      "id": "PR_kwDOASA0os5BT_MR",
      "title": "Clarify how message reinjection is done. Fixes #1227",
      "url": "https://github.com/tlswg/tls13-spec/pull/1271",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-21T20:30:15Z",
      "updatedAt": "2022-10-24T19:48:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "6190229262a4272b632365765ada10f3e499da74",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1227_which_hash",
      "headRefOid": "0b7910f7f10d47368de24a9b35b370716dee5808",
      "closedAt": "2022-10-24T19:48:34Z",
      "mergedAt": "2022-10-24T19:48:34Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "420f558db3ee4905f5a5c9d65ae71184ecf44202"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1272,
      "id": "PR_kwDOASA0os5BT_Zn",
      "title": "Reduce emphasis on timing in the 0-RTT cache attack",
      "url": "https://github.com/tlswg/tls13-spec/pull/1272",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This attack is often possible even without a timing channel due to application-layer behaviors that allow cache probing (e.g. in HTTP and DNS).\r\n\r\nThis change addresses the original concern in #1225. A more thorough revamp of the anti-replay and side channel recommendations might be needed to address all the questions raised there.",
      "createdAt": "2022-10-21T20:31:28Z",
      "updatedAt": "2022-10-21T20:40:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "6190229262a4272b632365765ada10f3e499da74",
      "headRepository": "bemasc/tls13-spec",
      "headRefName": "bemasc-1225",
      "headRefOid": "9235abd5dd7be07f7b18b6e85e5ffe132738e98d",
      "closedAt": "2022-10-21T20:40:50Z",
      "mergedAt": "2022-10-21T20:40:50Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "05f97de6ffd876356fc93118d4d303a716235767"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1273,
      "id": "PR_kwDOASA0os5BUDfx",
      "title": "Attempt to clarify user_canceled. Fixes #1208",
      "url": "https://github.com/tlswg/tls13-spec/pull/1273",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-21T20:53:17Z",
      "updatedAt": "2022-10-24T19:43:32Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "05f97de6ffd876356fc93118d4d303a716235767",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1208_close_notify",
      "headRefOid": "0c86bc6c9ccbe10176caa8c29a25b1f7df010417",
      "closedAt": "2022-10-24T19:43:32Z",
      "mergedAt": "2022-10-24T19:43:32Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "db326cbbe9d82a089fedc944d81d36097f61ba53"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5EsDVN",
          "commit": {
            "abbreviatedOid": "0c86bc6"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-23T23:48:54Z",
          "updatedAt": "2022-10-23T23:48:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1275,
      "id": "PR_kwDOASA0os5BUFIL",
      "title": "Clarify unsolicited",
      "url": "https://github.com/tlswg/tls13-spec/pull/1275",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@kaduk PTAL.",
      "createdAt": "2022-10-21T21:02:46Z",
      "updatedAt": "2023-03-11T20:41:12Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "05f97de6ffd876356fc93118d4d303a716235767",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "unsolicited_responses",
      "headRefOid": "4ea3c58353f729c8563447069d3980a0786f0936",
      "closedAt": "2023-03-11T20:41:12Z",
      "mergedAt": "2023-03-11T20:41:12Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "8d1e46eaf4877868480ba957904d28e9cefc720f"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson can you read?",
          "createdAt": "2022-11-10T09:51:43Z",
          "updatedAt": "2022-11-10T09:51:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5GESLn",
          "commit": {
            "abbreviatedOid": "4ea3c58"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-10T11:18:02Z",
          "updatedAt": "2022-11-10T11:18:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1276,
      "id": "PR_kwDOASA0os5BUGMs",
      "title": "Clarify 0-RTT cache further. Fixes #1225",
      "url": "https://github.com/tlswg/tls13-spec/pull/1276",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-21T21:08:58Z",
      "updatedAt": "2022-10-24T19:47:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "05f97de6ffd876356fc93118d4d303a716235767",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1225_cache_issues",
      "headRefOid": "a6a6548bc665fdd0100461422c637bae9500dfd6",
      "closedAt": "2022-10-24T19:47:14Z",
      "mergedAt": "2022-10-24T19:47:14Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "6cc0d4bfc539967e58d982e92abc90f47b493f2e"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As provided by @davidben",
          "createdAt": "2022-10-21T21:10:08Z",
          "updatedAt": "2022-10-21T21:10:08Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1277,
      "id": "PR_kwDOASA0os5BUJNU",
      "title": "Update extension table. Fixes #1241",
      "url": "https://github.com/tlswg/tls13-spec/pull/1277",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-21T21:27:09Z",
      "updatedAt": "2022-10-24T19:44:09Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "05f97de6ffd876356fc93118d4d303a716235767",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1241_update_extensions",
      "headRefOid": "873a36f77d66101aac1696a4adf5acb42b4269c2",
      "closedAt": "2022-10-24T19:44:09Z",
      "mergedAt": "2022-10-24T19:44:09Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ca7140c9ddbf5b9c73a1479f4c5e2952ef253492"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1279,
      "id": "PR_kwDOASA0os5B68CU",
      "title": "Fix reference to MGF1",
      "url": "https://github.com/tlswg/tls13-spec/pull/1279",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "MGF1 got unhelpfully spelled out as \"mask generation function 1\" in RFC 8446. I'm guessing this is the result of an acronym expansion editting pass, but the function is simply called \"MGF1\". There is no such thing as \"mask generation function 1\".\r\n\r\nCorrect this back to MGF1. In hopes this doesn't get hit the same editing pass later, I've tweaked the wording and moved the citation so that \"mask generation function\" is still uttered before MGF1, and it's clearer that both primitives are defined in RFC 8017.",
      "createdAt": "2022-10-31T21:53:02Z",
      "updatedAt": "2022-11-09T17:14:25Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "28ac62b1bf589e24d048780dd3a76032f21fa2de",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "mgf1",
      "headRefOid": "677ee7e4373caaf7741271ce35efe2a4401532db",
      "closedAt": "2022-11-09T17:14:25Z",
      "mergedAt": "2022-11-09T17:14:24Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3461a954fe98549c6d4851e0df73ff49b986ae1f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1282,
      "id": "PR_kwDOASA0os5Gaykd",
      "title": "#1281 describe effects of creating new long-term keys",
      "url": "https://github.com/tlswg/tls13-spec/pull/1282",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think it would make sense to give more guidance on what to do when the connection closes.\r\n\r\n#1281",
      "createdAt": "2022-12-31T09:25:42Z",
      "updatedAt": "2023-03-11T22:30:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3461a954fe98549c6d4851e0df73ff49b986ae1f",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-17",
      "headRefOid": "51ee405e2ed768d12ee9df387d74833dad5ecd70",
      "closedAt": "2023-03-11T22:30:21Z",
      "mergedAt": "2023-03-11T22:30:21Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "39f1fe30ec27150df063f7716efc58e6e5987555"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": ">Can we just describe in non-normative prose the risks/hazards of failing to do so?\r\n\r\nYes, that seems like an acceptable outcome that it likely is easy to reach consensus about. I'll change the PR to do that.",
          "createdAt": "2023-01-05T18:46:03Z",
          "updatedAt": "2023-01-05T18:46:03Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk I made a new proposal. Just stating that the \"Forward secret with respect to long-term keys\" is no longer satisfied if the implementation creates new long-term keys. I did not describe the risks/hazards of failing to do so as I feel it would be too long and detailed to describe al the cases.",
          "createdAt": "2023-01-06T10:13:04Z",
          "updatedAt": "2023-01-06T10:13:04Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ben's rewriting has been merged and the two comments from Martin has been addressed.",
          "createdAt": "2023-01-10T08:19:21Z",
          "updatedAt": "2023-01-10T08:19:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5JjShm",
          "commit": {
            "abbreviatedOid": "57ac3d3"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I don't think we have strong grounds for making this a MUST-level protocol requirement.  (How does it aid interoperability?)\r\nCan we just describe in non-normative prose the risks/hazards of failing to do so?",
          "createdAt": "2023-01-02T21:30:53Z",
          "updatedAt": "2023-01-02T21:30:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os5J5jpd",
          "commit": {
            "abbreviatedOid": "43eec87"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I'm not a huge fan of the way this reads; an alternate approach is outlined in the inline comments/suggestions.",
          "createdAt": "2023-01-08T19:22:54Z",
          "updatedAt": "2023-01-08T19:25:15Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "```suggestion\r\n  session key (see {{?DOW92=DOI.10.1007/BF00124891}}), as long as the session key itself (and all material that could be used to recreate the session key) has\r\n  been erased. In particular, the key shares, shared secrets, and keys derived in the TLS Key Schedule other than `binder_key`, `resumption_secret`, and PSKs derived from the `resumption_Secret` also need to be erased.  The forward secrecy property is not satisfied\r\n```",
              "createdAt": "2023-01-08T19:22:54Z",
              "updatedAt": "2023-01-08T19:25:15Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n  when PSK is used in the \"psk_ke\" PskKeyExchangeMode.  Failing to erase keys or secrets intended to be ephemeral or connection-specific in effect creates additional long-term keys that must be protected, and compromise of those long-term keys (even after the handshake is complete) can result in loss of secrecy of the connection's traffic.\r\n```",
              "createdAt": "2023-01-08T19:24:45Z",
              "updatedAt": "2023-01-08T19:25:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5J5pz3",
          "commit": {
            "abbreviatedOid": "43eec87"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-08T23:18:55Z",
          "updatedAt": "2023-01-08T23:18:55Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "You don't need to erase the shares, you need to erase the secrets from which those shares were generated (I don't know a name that would allow you to concisely identify those).",
              "createdAt": "2023-01-08T23:18:55Z",
              "updatedAt": "2023-01-08T23:18:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5J5p2C",
          "commit": {
            "abbreviatedOid": "43eec87"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-08T23:19:55Z",
          "updatedAt": "2023-01-08T23:19:56Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Avoid the comma splice on \"protected, and compromise\" -> \"protected. Compromise\"",
              "createdAt": "2023-01-08T23:19:55Z",
              "updatedAt": "2023-01-08T23:19:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5KAUMg",
          "commit": {
            "abbreviatedOid": "43eec87"
          },
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-10T06:44:54Z",
          "updatedAt": "2023-01-10T06:44:54Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "Changed to \"private keys related to key shares\". I think \"private keys related to key shares, shared secrets\" cover everything.\r\n\r\nFor DH you need to delete both private keys and the resulting shared secret. In a KEM you need to delete one private key and the shared secret.",
              "createdAt": "2023-01-10T06:44:54Z",
              "updatedAt": "2023-01-10T06:44:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5KAUQy",
          "commit": {
            "abbreviatedOid": "43eec87"
          },
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-10T06:45:17Z",
          "updatedAt": "2023-01-10T06:45:17Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I fixed the comma splice",
              "createdAt": "2023-01-10T06:45:17Z",
              "updatedAt": "2023-01-10T06:45:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1283,
      "id": "PR_kwDOASA0os5GazCq",
      "title": "Adding John Preu\u00df Mattsson as contributor",
      "url": "https://github.com/tlswg/tls13-spec/pull/1283",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "After the whole paragraph on forward secrecy and exfiltration was merged to Appendix F.1 I probably deserve to be included.",
      "createdAt": "2022-12-31T09:35:27Z",
      "updatedAt": "2023-03-11T20:40:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3461a954fe98549c6d4851e0df73ff49b986ae1f",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-18",
      "headRefOid": "bf81dfd91dc02f88e6798fe905d2ecb1ac903b54",
      "closedAt": "2023-03-11T20:40:50Z",
      "mergedAt": "2023-03-11T20:40:50Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "e8b732a5a67898f756516c8856b49cfffa2e19d5"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Absolutely. I apologize for not asking you to submit this PR.",
          "createdAt": "2023-03-11T20:40:43Z",
          "updatedAt": "2023-03-11T20:40:43Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1286,
      "id": "PR_kwDOASA0os5G0Jj7",
      "title": "Reusing key shares enables  client and server tracking",
      "url": "https://github.com/tlswg/tls13-spec/pull/1286",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "#1285",
      "createdAt": "2023-01-06T12:13:23Z",
      "updatedAt": "2023-03-11T20:50:55Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3461a954fe98549c6d4851e0df73ff49b986ae1f",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-19",
      "headRefOid": "0d48f9e383a899b4e39d119227c96492fffcae10",
      "closedAt": "2023-03-11T20:50:55Z",
      "mergedAt": "2023-03-11T20:50:54Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "fcc6177771927e626bd4dfce96b513e3bcbea8da"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "#1289",
          "createdAt": "2023-01-12T16:44:24Z",
          "updatedAt": "2023-01-12T16:44:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1288,
      "id": "PR_kwDOASA0os5HQu22",
      "title": " Reusing psk identities enables client and server tracking",
      "url": "https://github.com/tlswg/tls13-spec/pull/1288",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "propose-close"
      ],
      "body": "#1287",
      "createdAt": "2023-01-12T16:14:05Z",
      "updatedAt": "2023-03-13T18:37:47Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3461a954fe98549c6d4851e0df73ff49b986ae1f",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-20",
      "headRefOid": "8cee6811c8e804315847e2c4491fdf2f5529d58c",
      "closedAt": "2023-03-13T18:37:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "#1289\r\nAdded server tracking by changing the heading. The rest of the text talks about connections and therefore apply to both client and server tracking.",
          "createdAt": "2023-01-12T16:43:06Z",
          "updatedAt": "2023-01-12T16:43:06Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A PSK identifier could be a nonce (random), plus an encryption of the true identifier, using that nonce as input to the key derivation process.  There are options for similar protections that use something like FPE (such as [this](https://quicwg.org/load-balancers/draft-ietf-quic-load-balancers.html#section-4)), but they might not be strong enough to pass serious scrutiny as a generic mechanism.",
          "createdAt": "2023-01-16T02:30:07Z",
          "updatedAt": "2023-01-16T02:30:07Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't agree that SHOULD NOT and MUST NOT are almost the same. In some cases the difference between SHOULD NOT and MUST NOT can be drastic with people treating SHOULD NOT as \"I don't need to change\" and MUST NOT as \"Ok, I actually need to change\". That said, recommendations for what to do is certainly needed.\r\n\r\nI think there are at least three strategies inside TLS 1.3:\r\n\r\n- Use the external psk identifier the first time and then use a new ticket for each new connection. It is hard to see why ticket reuse is \"SHOULD NOT\" and general psk identifier reuse is not. In many external PSK use cases it would be preferable to reuse the ticket instead of reusing the external psk identifier. The requirement that \"Servers MUST NOT use any value greater than 604800 seconds (7 days)\" could maybe cause problems here. Using long lived tickets seems very much preferable to reusing a psk identifier.\r\n- Use long connection. With key_update this is possible. \r\n- Use Encrypted Client Hello.\r\n\r\nThere are also things that can be done outside of TLS.:\r\n\r\n- As Martin says one option is to encrypt the psk identifier. This is what 5G does to mitigate the serious problems with IMSI catchers. This will hopefully be mandatory in future mobile networks.\r\n- You can have encryption on a layer (IP, MAC) below TLS.\r\n- You can derive a new psk identifier as new psk identifier = HMAC(psk, old psk identifier).\r\n- You can use PSK for a single full handshake and then get a new PSK for next full handshake.\r\n\r\nI think there are a lot of solutions here both in TLS and for the application and they can potentially be used together. If some use case does not have a strategy for how to mitigate this type of tracking and fingerprinting, then I think it is hard to recommend the use external PSK at all.\r\n\r\nEven a mechanism that does not give 100% privacy is probably much better than always reusing a single psk identifier for a long time, sometimes decades.",
          "createdAt": "2023-01-16T10:09:14Z",
          "updatedAt": "2023-01-16T10:11:50Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that this is a real issue but I also think that the SHOULD NOT is too strong given the state of the art. I don't really think that a SHOULD NOT is that great. PR #1294 takes a more descriptive approach.",
          "createdAt": "2023-03-11T22:18:23Z",
          "updatedAt": "2023-03-11T22:18:23Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am closing based on PR #1294. ",
          "createdAt": "2023-03-13T18:37:47Z",
          "updatedAt": "2023-03-13T18:37:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5KeQe-",
          "commit": {
            "abbreviatedOid": "8cee681"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "If we're going to strongly disrecommend (SHOULD NOT is essentially \"MUST NOT unless you have a good excuse), we should probably have some plausible, generic, strategy for an alternative.  For connections that use actual pre-shared keys, how might you propose that they produce non-reused psk identifiers when the actual shared key does not change?",
          "createdAt": "2023-01-16T02:20:03Z",
          "updatedAt": "2023-01-16T02:20:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1290,
      "id": "PR_kwDOASA0os5HSnID",
      "title": "Specify the alert level of close_notify.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1290",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "close_notify has always used a warning alert level, but this is not actually written down anywhere. It seems to have gotten lost as early as RFC 4346 (TLS 1.1!). In RFC 2246, there is some text that mentions the correct level is warning as an aside in describing something else.\r\n\r\n>   close_notify\r\n>       This message notifies the recipient that the sender will not send\r\n>       any more messages on this connection. The session becomes\r\n>       unresumable if any connection is terminated without proper\r\n>       close_notify messages with level equal to warning.\r\n\r\nI wasn't able to find any other text that discussed this. Then, RFC 4346 dropped the session termination behavior:\r\n\r\n>   close_notify\r\n>      This message notifies the recipient that the sender will not send\r\n>      any more messages on this connection.  Note that as of TLS 1.1,\r\n>      failure to properly close a connection no longer requires that a\r\n>      session not be resumed.  This is a change from TLS 1.0 to conform\r\n>      with widespread implementation practice.\r\n\r\nBut in doing so, it dropped any mention of which alert level to use. That text has carried over to RFC 8446 as:\r\n\r\n>   close_notify:  This alert notifies the recipient that the sender will\r\n>      not send any more messages on this connection.  Any data received\r\n>      after a closure alert has been received MUST be ignored.\r\n\r\nIn RFC 8446, we said alert levels no longer matter and can be \"safely ignored\", but this still leaves unspecified what the sender should do. Skimming implementations, both BoringSSL and NSS will treat \"fatal\" close_notify as an error, so using \"warning\" is also necessary for interop.",
      "createdAt": "2023-01-13T01:03:13Z",
      "updatedAt": "2023-03-11T20:40:05Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3461a954fe98549c6d4851e0df73ff49b986ae1f",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "close-notify-level",
      "headRefOid": "128387ddf309dfc60cc532d7cd47e0db196f0591",
      "closedAt": "2023-03-11T20:40:04Z",
      "mergedAt": "2023-03-11T20:40:04Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "03af7839685c54e31796e37b8536b89229adebbd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1292,
      "id": "PR_kwDOASA0os5ItxGT",
      "title": "same certificate as both server and client cert",
      "url": "https://github.com/tlswg/tls13-spec/pull/1292",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "propose-close"
      ],
      "body": "Suggestion to add explicit text that this is allowed. Otherwise people might wonder if it is secure to do so.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/tls/5MlYCijn65C4yZ6SiFI5xLOlX8Q/",
      "createdAt": "2023-01-27T21:52:40Z",
      "updatedAt": "2023-03-26T22:06:08Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3461a954fe98549c6d4851e0df73ff49b986ae1f",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-21",
      "headRefOid": "dc9ec8228883d4e90f3cbe506608883cf1659e5c",
      "closedAt": "2023-03-26T22:06:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Surely we should mention Drucker, N. and S. Gueron, \"Selfie: reflections on TLS 1.3 with PSK\", DOI 10.1007/s00145-021-09387-y, May 2021, <https://eprint.iacr.org/2019/347.pdf>. if we are to admit the possibility of using the same certificate for client and server connections",
          "createdAt": "2023-01-30T21:41:36Z",
          "updatedAt": "2023-01-30T21:41:36Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk I would also be fine to specify that is shall not be done, but I think TLS 1.3 should say something. Seems to be done already and seems to be provable secure if used with only TLS 1.3. Could limited the MAY to TLS 1.3 or higher.\r\n\r\nWhat would the mention of \"Selfie: reflections on TLS 1.3 with PSK\" say more concretely? My understanding is that the paper is talking about PSK and while certificates in TLS have public signature keys.",
          "createdAt": "2023-01-31T15:55:31Z",
          "updatedAt": "2023-01-31T15:55:31Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think the MAY helps here. I think instead we should be clear that we don't have a lot of formal analysis on this topic.\r\n\r\n@karthikbhargavan is anything known about this?",
          "createdAt": "2023-03-11T22:11:19Z",
          "updatedAt": "2023-03-11T22:11:19Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing based on alternate PR#1300",
          "createdAt": "2023-03-26T22:02:49Z",
          "updatedAt": "2023-03-26T22:02:49Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1293,
      "id": "PR_kwDOASA0os5JNUv9",
      "title": "FIPS.186-5 has been published by NIST",
      "url": "https://github.com/tlswg/tls13-spec/pull/1293",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- FIPS 186-4 is obsolete\r\n- Curve definitions have moved to the new NIST SP 800-186\r\n- ANSI X9.62 is behind a paywall and should be avoided if possible. References behind paywall can not be accessed by most readers. This makes it harder to implement and to evaluate the security of the protocol. FIPS 186-5 removed the dependency on ANSI X9.62 and defines ECDSA itself. Point validation is defined in the new  NIST SP 800-186.",
      "createdAt": "2023-02-03T14:39:26Z",
      "updatedAt": "2023-03-11T20:41:45Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3461a954fe98549c6d4851e0df73ff49b986ae1f",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-22",
      "headRefOid": "bac25fb4139e7bb36a641d1f73c4d17eb119dc19",
      "closedAt": "2023-03-11T20:41:44Z",
      "mergedAt": "2023-03-11T20:41:44Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "37cab99db49ef3985760f49bf1dd9c682f2318e5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5Me_Fv",
          "commit": {
            "abbreviatedOid": "bac25fb"
          },
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-03T15:40:29Z",
          "updatedAt": "2023-02-03T15:40:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1294,
      "id": "PR_kwDOASA0os5L073v",
      "title": "Discuss the implications of external PSK reuse. Fixes #1287",
      "url": "https://github.com/tlswg/tls13-spec/pull/1294",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-11T22:17:37Z",
      "updatedAt": "2023-03-13T18:35:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "fcc6177771927e626bd4dfce96b513e3bcbea8da",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "reuse_of_external_psk",
      "headRefOid": "e83b12bffff89af9826e593350c065cfbc5cd531",
      "closedAt": "2023-03-13T18:35:07Z",
      "mergedAt": "2023-03-13T18:35:07Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "14cd57776e59d5065dc1481599dd529e1b69692f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1295,
      "id": "PR_kwDOASA0os5L08ei",
      "title": "Ignore NST if you don't support resumption. Fixes #1280",
      "url": "https://github.com/tlswg/tls13-spec/pull/1295",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-11T22:34:21Z",
      "updatedAt": "2023-03-13T18:34:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "bcc49272b451eb98b12c13bb487ac04df89e52e9",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1280_ignore_nst",
      "headRefOid": "1f22ddbf8dca9b26d40d5e6638a288584dfa7c5d",
      "closedAt": "2023-03-13T18:34:38Z",
      "mergedAt": "2023-03-13T18:34:38Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "cc12740ee6a20bf7d7c8de1619074726607d2250"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1296,
      "id": "PR_kwDOASA0os5L7Kjh",
      "title": "Certs plus psk",
      "url": "https://github.com/tlswg/tls13-spec/pull/1296",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-13T18:54:43Z",
      "updatedAt": "2023-03-13T20:20:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "688b038cbcbb3af2757bfdf65d77eca8d3ceacf8",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "certs_plus_psk",
      "headRefOid": "bbf9d9346f8143f1a8e52af2ff07cabf3b970b44",
      "closedAt": "2023-03-13T20:20:07Z",
      "mergedAt": "2023-03-13T20:20:07Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4b520c313e4f61e3c3dfa4064036b25bc5a56728"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5Pvjmq",
          "commit": {
            "abbreviatedOid": "bbf9d93"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T20:04:34Z",
          "updatedAt": "2023-03-13T20:04:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1297,
      "id": "PR_kwDOASA0os5L7NBe",
      "title": "Issue1284 auth text",
      "url": "https://github.com/tlswg/tls13-spec/pull/1297",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-13T19:01:08Z",
      "updatedAt": "2023-03-13T20:19:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "688b038cbcbb3af2757bfdf65d77eca8d3ceacf8",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1284_auth_text",
      "headRefOid": "a2e9cfcf37f4122ba6ed7afaca1e957731509635",
      "closedAt": "2023-03-13T20:19:58Z",
      "mergedAt": "2023-03-13T20:19:58Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5bf48d83de5f29cbd25e0454f53ac34afe3c63bf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5PvjiA",
          "commit": {
            "abbreviatedOid": "a2e9cfc"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T20:04:20Z",
          "updatedAt": "2023-03-13T20:04:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1298,
      "id": "PR_kwDOASA0os5L7nl6",
      "title": "Changelog entries",
      "url": "https://github.com/tlswg/tls13-spec/pull/1298",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-13T20:24:11Z",
      "updatedAt": "2023-03-13T20:24:56Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "4b520c313e4f61e3c3dfa4064036b25bc5a56728",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "changelog",
      "headRefOid": "9e91187de7dff17db9528f5712e33114faa8fc07",
      "closedAt": "2023-03-13T20:24:55Z",
      "mergedAt": "2023-03-13T20:24:55Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "df0ce2b25573c9b9d5cd2ac1070cdd2e3fb9ec02"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1300,
      "id": "PR_kwDOASA0os5M5tME",
      "title": "clarify same certificatE",
      "url": "https://github.com/tlswg/tls13-spec/pull/1300",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-26T01:22:07Z",
      "updatedAt": "2023-03-26T22:02:31Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "476f7d859e939b9dece0ed1d21022deab98ea745",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1291_same_key",
      "headRefOid": "724677af05f372db81dc2a3ec90441a9bd6f3c38",
      "closedAt": "2023-03-26T22:02:31Z",
      "mergedAt": "2023-03-26T22:02:30Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2560c009255d91ba0dc08299c7f1383d89c33439"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5Q8Ey7",
          "commit": {
            "abbreviatedOid": "724677a"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This is a reasonable outcome.",
          "createdAt": "2023-03-26T01:42:34Z",
          "updatedAt": "2023-03-26T01:42:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os5Q8242",
          "commit": {
            "abbreviatedOid": "724677a"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-26T21:59:41Z",
          "updatedAt": "2023-03-26T21:59:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1301,
      "id": "PR_kwDOASA0os5M65q9",
      "title": "Fixes #1299. Require key updates",
      "url": "https://github.com/tlswg/tls13-spec/pull/1301",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": " but tell receiving implementations not to enforce them.\r\n\r\nThis addresses #1299. @martinthomson PTAL.",
      "createdAt": "2023-03-26T22:09:29Z",
      "updatedAt": "2023-03-27T01:32:40Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "2560c009255d91ba0dc08299c7f1383d89c33439",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1299_key_limits",
      "headRefOid": "d4ab8bfd195f76451898dd66daf86c29dd5ea3d4",
      "closedAt": "2023-03-27T01:32:39Z",
      "mergedAt": "2023-03-27T01:32:39Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "b69ee7395965b926a378e72934bd1f81a31bd52a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5Q87Qt",
          "commit": {
            "abbreviatedOid": "96439f7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-26T23:12:53Z",
          "updatedAt": "2023-03-26T23:12:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os5Q9FVf",
          "commit": {
            "abbreviatedOid": "96439f7"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-27T01:15:15Z",
          "updatedAt": "2023-03-27T01:15:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os5Q9F7L",
          "commit": {
            "abbreviatedOid": "d4ab8bf"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-27T01:20:26Z",
          "updatedAt": "2023-03-27T01:20:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1303,
      "id": "PR_kwDOASA0os5M7R8C",
      "title": "Update the changelog",
      "url": "https://github.com/tlswg/tls13-spec/pull/1303",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- Change \"should\" -> \"SHOULD\" around user_canceled\r\n- Replicate the 8773 language to another place where external PSKs is discussed.\r\n- Remove an OPEN ISSUE marker",
      "createdAt": "2023-03-27T02:02:27Z",
      "updatedAt": "2023-03-27T02:25:28Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "b69ee7395965b926a378e72934bd1f81a31bd52a",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "changelog_plus",
      "headRefOid": "dfc4c5906a1f942bf90979303db1fe7a6bfc6499",
      "closedAt": "2023-03-27T02:25:28Z",
      "mergedAt": "2023-03-27T02:25:27Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "c2a9f86ad5fe6cac9e567ed3336da564fa88420c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5Q9N6A",
          "commit": {
            "abbreviatedOid": "cedc968"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-27T02:12:52Z",
          "updatedAt": "2023-03-27T02:13:47Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n- Upgrade the requirement to initiate key update before exceeding\r\n  key usage limits to MUST.\r\n\r\n- Limit the number of permitted KeyUpdate messages.\r\n```",
              "createdAt": "2023-03-27T02:12:52Z",
              "updatedAt": "2023-03-27T02:13:47Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1304,
      "id": "PR_kwDOASA0os5M7UNj",
      "title": "Update IANA considerations to clarify what is new",
      "url": "https://github.com/tlswg/tls13-spec/pull/1304",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-27T02:11:24Z",
      "updatedAt": "2023-03-27T02:25:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "b69ee7395965b926a378e72934bd1f81a31bd52a",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "iana_considerations_bis",
      "headRefOid": "56fb7c37c6d292e3139dd1372922e5225591e70e",
      "closedAt": "2023-03-27T02:25:51Z",
      "mergedAt": "2023-03-27T02:25:51Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2afa45fcaf792f4d3057629e96a1a30a2241c1e4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5Q9OFP",
          "commit": {
            "abbreviatedOid": "3f7145f"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-27T02:14:12Z",
          "updatedAt": "2023-03-27T02:14:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os5Q9Osh",
          "commit": {
            "abbreviatedOid": "3f7145f"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-27T02:18:37Z",
          "updatedAt": "2023-03-27T02:18:38Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "It might not matter, but shouldn't it be \"changes since 8447\"?",
              "createdAt": "2023-03-27T02:18:37Z",
              "updatedAt": "2023-03-27T02:18:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5Q9QY-",
          "commit": {
            "abbreviatedOid": "3f7145f"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-27T02:25:46Z",
          "updatedAt": "2023-03-27T02:25:46Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I think both, because some of the changes were in 8446.",
              "createdAt": "2023-03-27T02:25:46Z",
              "updatedAt": "2023-03-27T02:25:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1307,
      "id": "PR_kwDOASA0os5M7l_N",
      "title": "IANA tweak",
      "url": "https://github.com/tlswg/tls13-spec/pull/1307",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I believe we are asking IANA to also update all references to \"this RFC\".",
      "createdAt": "2023-03-27T03:59:30Z",
      "updatedAt": "2023-03-27T04:06:54Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "c9bf87b5704e2bbc87db185784fc03e88f979186",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "seanturner-IANA-tweak",
      "headRefOid": "b7ad1ac8d1789da4a589797d0f078f2c0c8cf54b",
      "closedAt": "2023-03-27T04:06:53Z",
      "mergedAt": "2023-03-27T04:06:53Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d7bb422d9dd36dff7e26644422bc29bcb7a2696e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1314,
      "id": "PR_kwDOASA0os5Q8Z-3",
      "title": "(EC)DHE instead of EC(DHE)",
      "url": "https://github.com/tlswg/tls13-spec/pull/1314",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "#1312",
      "createdAt": "2023-05-20T18:00:13Z",
      "updatedAt": "2023-05-21T22:59:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "d7bb422d9dd36dff7e26644422bc29bcb7a2696e",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-23",
      "headRefOid": "b82699992d4460878bdfa7b06953ea33f10d23e1",
      "closedAt": "2023-05-21T22:59:22Z",
      "mergedAt": "2023-05-21T22:59:22Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "18ee21a9ddee125f61f13f4f70078459cd8960ff"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5VkCH7",
          "commit": {
            "abbreviatedOid": "b826999"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-21T10:07:28Z",
          "updatedAt": "2023-05-21T10:07:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1316,
      "id": "PR_kwDOASA0os5TIw7O",
      "title": "Fix a missed name change.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1316",
      "state": "MERGED",
      "author": "sayrer",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just a typo.",
      "createdAt": "2023-06-15T21:52:05Z",
      "updatedAt": "2023-06-16T13:25:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "18ee21a9ddee125f61f13f4f70078459cd8960ff",
      "headRepository": "sayrer/tls13-spec",
      "headRefName": "naming",
      "headRefOid": "85706d6307bba92c7a0c3042207e5c08b89ef5ce",
      "closedAt": "2023-06-16T13:25:40Z",
      "mergedAt": "2023-06-16T13:25:40Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d393ed5356661d4033b01efad7fcc75765f1d301"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1317,
      "id": "PR_kwDOASA0os5TIxAj",
      "title": "Make replay attack wording consistent.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1317",
      "state": "CLOSED",
      "author": "sayrer",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Consistent phrasing in the Replay Attack section.",
      "createdAt": "2023-06-15T21:52:32Z",
      "updatedAt": "2023-07-07T20:22:46Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "18ee21a9ddee125f61f13f4f70078459cd8960ff",
      "headRepository": "sayrer/tls13-spec",
      "headRefName": "replay_wording",
      "headRefOid": "839156217ce302d4293d40c20a05c18a215cad7e",
      "closedAt": "2023-07-07T20:22:46Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't actually think that this is an improvement. In the second case, attackers actually *can* mount this attack, but in the first two cases, they are potential attacks. I don't think the parallel structure is necessary.",
          "createdAt": "2023-07-07T02:57:56Z",
          "updatedAt": "2023-07-07T02:57:56Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1318,
      "id": "PR_kwDOASA0os5TIxF5",
      "title": "Remove em dashes.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1318",
      "state": "CLOSED",
      "author": "sayrer",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Rewritten, as Ekr indicated this might be worth looking at. Not attached to my solution.",
      "createdAt": "2023-06-15T21:52:59Z",
      "updatedAt": "2023-07-07T02:28:21Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "18ee21a9ddee125f61f13f4f70078459cd8960ff",
      "headRepository": "sayrer/tls13-spec",
      "headRefName": "post_handshake_em_dash",
      "headRefOid": "7bda04e4aa5c3cd66894f692c9565a4238acb70d",
      "closedAt": "2023-07-07T02:28:21Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Upon reflection I feel that the current text is fine.",
          "createdAt": "2023-07-07T02:28:21Z",
          "updatedAt": "2023-07-07T02:28:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1319,
      "id": "PR_kwDOASA0os5TIx3F",
      "title": "Wire format compatibility.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1319",
      "state": "CLOSED",
      "author": "sayrer",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes \"negotiation\" and comes with a slight rewrite. Not attached to my solution.",
      "createdAt": "2023-06-15T21:57:18Z",
      "updatedAt": "2023-07-07T03:14:18Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "18ee21a9ddee125f61f13f4f70078459cd8960ff",
      "headRepository": "sayrer/tls13-spec",
      "headRefName": "wire_format_compat",
      "headRefOid": "588c533c504f18a40858e0cecf780341dceff911",
      "closedAt": "2023-07-07T03:14:18Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "sayrer",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I noticed #1310 also adjusts this text. They could be combined, but even if neither patch is incorporated, the typo \"negotation\" needs to be fixed.",
          "createdAt": "2023-06-19T16:25:04Z",
          "updatedAt": "2023-06-19T16:25:04Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing in favor of PR#1321",
          "createdAt": "2023-07-07T03:14:18Z",
          "updatedAt": "2023-07-07T03:14:18Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1320,
      "id": "PR_kwDOASA0os5TNoLl",
      "title": "Clarify that double brackets are not part of the presentation language",
      "url": "https://github.com/tlswg/tls13-spec/pull/1320",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "They denote optional components of the presentation language and are not literal components of the presentation language itself.\r\n\r\nFixes #1315",
      "createdAt": "2023-06-16T17:30:10Z",
      "updatedAt": "2023-07-07T02:27:25Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "d393ed5356661d4033b01efad7fcc75765f1d301",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "double-brackets",
      "headRefOid": "abf78ffeb6de8cd3ac05869a85dea141f2af5c21",
      "closedAt": "2023-07-07T02:27:25Z",
      "mergedAt": "2023-07-07T02:27:25Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "5a5818b1546f0114e6e5359c53da59b37da000f5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1321,
      "id": "PR_kwDOASA0os5U3pTv",
      "title": "MT's proposed change. Fixes #1310. Fixes #1319",
      "url": "https://github.com/tlswg/tls13-spec/pull/1321",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-07T03:02:28Z",
      "updatedAt": "2023-07-07T20:55:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "5a5818b1546f0114e6e5359c53da59b37da000f5",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1310",
      "headRefOid": "1c10608a0f59984026a7c3531637f2b6e0a98ae4",
      "closedAt": "2023-07-07T20:55:19Z",
      "mergedAt": "2023-07-07T20:55:19Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3a0330499f68e736b03765746810300505048a0e"
      },
      "comments": [
        {
          "author": "sayrer",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's \"negotiation\" ...as raised in #1319. Maybe this typo is just being missed? ",
          "createdAt": "2023-07-07T20:31:10Z",
          "updatedAt": "2023-07-07T20:31:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5ad1Ml",
          "commit": {
            "abbreviatedOid": "332a7c0"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-07T04:18:51Z",
          "updatedAt": "2023-07-07T04:18:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os5ala9c",
          "commit": {
            "abbreviatedOid": "332a7c0"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-07T20:37:17Z",
          "updatedAt": "2023-07-07T20:37:17Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os5alfdl",
          "commit": {
            "abbreviatedOid": "332a7c0"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-07T20:54:04Z",
          "updatedAt": "2023-07-07T20:54:05Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nthe negotiation of TLS versions below 1.2. However, server\r\n```",
              "createdAt": "2023-07-07T20:54:04Z",
              "updatedAt": "2023-07-07T20:54:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1322,
      "id": "PR_kwDOASA0os5U3qKS",
      "title": "Remove things that are already obsolete. Fixes #1309.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1322",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-07T03:06:38Z",
      "updatedAt": "2023-07-07T20:53:19Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "5a5818b1546f0114e6e5359c53da59b37da000f5",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1309_obsoletes",
      "headRefOid": "f7aaf01b147e26d3d3a9f6c3b7eb7e66dc6a4d4c",
      "closedAt": "2023-07-07T20:53:19Z",
      "mergedAt": "2023-07-07T20:53:19Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "76c269fb6e2fe23dd34cb8413fb6d3c67f783942"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5ala14",
          "commit": {
            "abbreviatedOid": "f7aaf01"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-07T20:36:43Z",
          "updatedAt": "2023-07-07T20:36:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1323,
      "id": "PR_kwDOASA0os5U3qvn",
      "title": "Add changelog entry for CertificateRequest. Fixes #1311",
      "url": "https://github.com/tlswg/tls13-spec/pull/1323",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@martinthomson ",
      "createdAt": "2023-07-07T03:09:39Z",
      "updatedAt": "2023-07-07T20:53:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "5a5818b1546f0114e6e5359c53da59b37da000f5",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1311_certificate_request",
      "headRefOid": "8137642826732ba15543953d75e4dce48aa67ee1",
      "closedAt": "2023-07-07T20:53:11Z",
      "mergedAt": "2023-07-07T20:53:11Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2d5c33ff061e3520cd01039e4b89a05314477f67"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5ad8bk",
          "commit": {
            "abbreviatedOid": "8137642"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-07T04:37:50Z",
          "updatedAt": "2023-07-07T04:37:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os5alay9",
          "commit": {
            "abbreviatedOid": "8137642"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-07T20:36:34Z",
          "updatedAt": "2023-07-07T20:36:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1324,
      "id": "PR_kwDOASA0os5U3rcH",
      "title": "Fix punctuation changes that didn't get ported from RFC 8446. Fixes #\u2026",
      "url": "https://github.com/tlswg/tls13-spec/pull/1324",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u20261313",
      "createdAt": "2023-07-07T03:12:43Z",
      "updatedAt": "2023-07-07T20:53:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "5a5818b1546f0114e6e5359c53da59b37da000f5",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1313_punctuation",
      "headRefOid": "0d5fdbdf3f0bf160afab50ba9daa74e7de71d4f8",
      "closedAt": "2023-07-07T20:53:00Z",
      "mergedAt": "2023-07-07T20:53:00Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "21f66aacf2be557ac89c2e0792ab719077a79027"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5alawT",
          "commit": {
            "abbreviatedOid": "0d5fdbd"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-07T20:36:22Z",
          "updatedAt": "2023-07-07T20:36:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1325,
      "id": "PR_kwDOASA0os5VF8j_",
      "title": "Recommend not using legible identities. Fixes #1308",
      "url": "https://github.com/tlswg/tls13-spec/pull/1325",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-10T14:17:11Z",
      "updatedAt": "2023-07-27T21:16:34Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "9cd36491ffa8bb93f0846dd52b452b97f3fa255b",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1308_meaningful_external_identities",
      "headRefOid": "02cb675217656c2c0d4a3846cdaab97feb0ecf55",
      "closedAt": "2023-07-27T20:52:11Z",
      "mergedAt": "2023-07-27T20:52:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "da712dccede1bcf5266c9b52ef08887523bb1456"
      },
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "`s/Hello Encrypted Client Hello/Encrypted Client Hello/` ?",
          "createdAt": "2023-07-10T14:56:47Z",
          "updatedAt": "2023-07-10T14:56:47Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed\r\n\r\nOn Mon, Jul 10, 2023 at 7:56\u202fAM Hubert Kario ***@***.***>\r\nwrote:\r\n\r\n> s/Hello Encrypted Client Hello/Encrypted Client Hello/ ?\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/tlswg/tls13-spec/pull/1325#issuecomment-1629140761>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AAIPLIONUT7PR5XKZIKQKALXPQJ3TANCNFSM6AAAAAA2ETUDZM>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2023-07-10T15:40:39Z",
          "updatedAt": "2023-07-10T15:40:39Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood @martinthomson @emanjon ",
          "createdAt": "2023-07-11T16:10:30Z",
          "updatedAt": "2023-07-11T16:10:30Z"
        },
        {
          "author": "sayrer",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Doesn't look like the \"Hello Encrypted Client Hello\" thing is fixed. Maybe just not pushed?",
          "createdAt": "2023-07-11T18:45:23Z",
          "updatedAt": "2023-07-11T18:45:23Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5bHphK",
          "commit": {
            "abbreviatedOid": "a6dac32"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-13T15:34:43Z",
          "updatedAt": "2023-07-13T15:34:44Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nusing the Encrypted Client Hello {{?I-D.ietf-tls-esni}} extension.\r\n```",
              "createdAt": "2023-07-13T15:34:43Z",
              "updatedAt": "2023-07-13T15:34:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5bHwOo",
          "commit": {
            "abbreviatedOid": "f6e3344"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-13T15:49:10Z",
          "updatedAt": "2023-07-13T15:49:10Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "i would remove the parens here as this is not really an \"aside.\"",
              "createdAt": "2023-07-13T15:49:10Z",
              "updatedAt": "2023-07-13T15:49:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5bVVTo",
          "commit": {
            "abbreviatedOid": "02cb675"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-17T09:05:53Z",
          "updatedAt": "2023-07-17T09:05:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os5cb2cH",
          "commit": {
            "abbreviatedOid": "02cb675"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I might have swapped the order of the two paragraphs talking about external PSK identities, but it doesn't really matter",
          "createdAt": "2023-07-27T21:15:07Z",
          "updatedAt": "2023-07-27T21:16:33Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "FWIW, the actual protocol element is the \"identity\", which we describe as \"a label for a key.  For instance...a label for a pre-shared key established externally\".  We do use the phrasing \"PSK identity\" in the subsequent paragraph, so maybe \"the identities used to identify (label) externally shared keys\" if we want to increase consistency?",
              "createdAt": "2023-07-27T21:15:07Z",
              "updatedAt": "2023-07-27T21:16:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1328,
      "id": "PR_kwDOASA0os5WuhhU",
      "title": "Use aasvg for pictures",
      "url": "https://github.com/tlswg/tls13-spec/pull/1328",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1326 ",
      "createdAt": "2023-07-30T04:41:30Z",
      "updatedAt": "2023-11-05T17:36:10Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "da712dccede1bcf5266c9b52ef08887523bb1456",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "aasvg",
      "headRefOid": "29a31e3b72d94c9c4e682f5c49e9222e2ae3bbf3",
      "closedAt": "2023-11-05T17:36:09Z",
      "mergedAt": "2023-11-05T17:36:09Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "0bbbfb2dbbf071f5a69a9cbee99c3b5cf1dbade4"
      },
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr @chris-wood unless there's an objection this one LGTM.",
          "createdAt": "2023-10-18T16:57:51Z",
          "updatedAt": "2023-10-18T16:57:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1329,
      "id": "PR_kwDOASA0os5dKnnG",
      "title": "md fixes",
      "url": "https://github.com/tlswg/tls13-spec/pull/1329",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1327 and addresses some I-D nits.\r\n\r\n@martinthomson PTAL (obviously needs to be squshed).",
      "createdAt": "2023-10-18T16:43:50Z",
      "updatedAt": "2023-11-05T17:35:43Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "da712dccede1bcf5266c9b52ef08887523bb1456",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "seanturner-md-fixes",
      "headRefOid": "952b27bba55b5270650410d25124277804c0c2d1",
      "closedAt": "2023-11-05T17:35:43Z",
      "mergedAt": "2023-11-05T17:35:43Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "f4362060abe1197f6d5b61a1fabe079e2956a491"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5kgVzL",
          "commit": {
            "abbreviatedOid": "952b27b"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-18T21:41:58Z",
          "updatedAt": "2023-10-18T21:42:12Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "For citations, I generally advise people to use `{{RFC8446}}` rather than `[RFC8446]`.  kramdown-rfc will complain if you have `{{NON-EXISTENT}}`, but just put `[NON-EXISTENT]` straight into the document without a link, so the former is safer.",
              "createdAt": "2023-10-18T21:41:58Z",
              "updatedAt": "2023-10-18T21:42:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5mKfnp",
          "commit": {
            "abbreviatedOid": "952b27b"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-05T17:35:39Z",
          "updatedAt": "2023-11-05T17:35:39Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "I may fix this later, but for now let's merge.",
              "createdAt": "2023-11-05T17:35:39Z",
              "updatedAt": "2023-11-05T17:35:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1331,
      "id": "PR_kwDOASA0os5fNFEr",
      "title": "Clarify how to negotiate groups if you want to respect the client order.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1331",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This tries to make the situation clearer. It does add a normative SHOULD but I think it's obvious.\r\n\r\n",
      "createdAt": "2023-11-11T07:06:49Z",
      "updatedAt": "2023-11-29T17:45:50Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "0bbbfb2dbbf071f5a69a9cbee99c3b5cf1dbade4",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "clarify_key_share_order",
      "headRefOid": "5f9a44a6fb2d93a89d94ccc718abd5f8ab64dd41",
      "closedAt": "2023-11-29T17:45:49Z",
      "mergedAt": "2023-11-29T17:45:49Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "55a718b2314e60f5529a0769115c46584b7e912a"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davidben ",
          "createdAt": "2023-11-11T07:07:03Z",
          "updatedAt": "2023-11-11T07:07:03Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The SHOULD is scoped to \"servers that wish to respect the client's group preferences\" anyway; it could equally well be \"need to\" in my opinion.\r\n\r\nYes, we could if we were trying to avoid 2119 language, but it seems like a circumlocution",
          "createdAt": "2023-11-12T23:38:30Z",
          "updatedAt": "2023-11-12T23:38:30Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kaduk Is this good-to-go from your perspective?",
          "createdAt": "2023-11-27T15:17:46Z",
          "updatedAt": "2023-11-27T15:17:46Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @kaduk Is this good-to-go from your perspective?\r\n\r\nOnce Chris's suggestion is taken, it is okay from my perspective.",
          "createdAt": "2023-11-29T17:28:42Z",
          "updatedAt": "2023-11-29T17:28:42Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > @kaduk Is this good-to-go from your perspective?\r\n> \r\n> Once Chris's suggestion is taken, it is okay from my perspective.\r\n\r\nSuggestion committed",
          "createdAt": "2023-11-29T17:35:07Z",
          "updatedAt": "2023-11-29T17:35:07Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5m4pfs",
          "commit": {
            "abbreviatedOid": "8aed03e"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "The SHOULD is scoped to \"servers that wish to respect the client's group preferences\" anyway; it could equally well be \"need to\" in my opinion.",
          "createdAt": "2023-11-11T21:02:57Z",
          "updatedAt": "2023-11-11T21:03:06Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Is \"complete the handshake\" what we want here?  I would say that both branches of the decision tree are completing the handshake, it's just that one is not doing so immediately.",
              "createdAt": "2023-11-11T21:02:57Z",
              "updatedAt": "2023-11-11T21:03:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5m5kTE",
          "commit": {
            "abbreviatedOid": "8aed03e"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-12T23:39:30Z",
          "updatedAt": "2023-11-12T23:39:30Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Sure. How about \"send either a ServerHello or a HelloRetryRequest depending...\"",
              "createdAt": "2023-11-12T23:39:30Z",
              "updatedAt": "2023-11-12T23:39:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5m_dkF",
          "commit": {
            "abbreviatedOid": "8aed03e"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-13T18:00:20Z",
          "updatedAt": "2023-11-13T18:00:21Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nselect a group based \"supported_groups\" and then either send a\r\nServerHello or a HelloRetryRequest depending on the contents of\r\nKeyshareClienthello.\r\n```",
              "createdAt": "2023-11-13T18:00:21Z",
              "updatedAt": "2023-11-13T18:00:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5m_dl0",
          "commit": {
            "abbreviatedOid": "8aed03e"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-13T18:00:24Z",
          "updatedAt": "2023-11-13T18:00:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os5nmDu4",
          "commit": {
            "abbreviatedOid": "8aed03e"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-17T22:20:52Z",
          "updatedAt": "2023-11-17T22:23:19Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Optional: Is it worth calling out explicitly out the security issue explicitly?\r\n\r\nPerhaps something like:\r\n\r\n> For this reason, the omission of a share for group A and inclusion of one for group B does not mean that the client prefers B to A. Selecting a group based on \"key_share\" alone may result a less preferred group than the client and server mutually support. Although this saves the round trip of HelloRetryRequest, the selected group may be less secure than another common option. Servers MAY preferentially select a group based on \"key_share\" to reduce round trips, but MUST consider all options in \"supported_groups\" when making this decision.",
              "createdAt": "2023-11-17T22:20:52Z",
              "updatedAt": "2023-11-17T22:23:19Z"
            },
            {
              "originalPosition": 9,
              "body": "Nit: This may not just be client prefs, but also server prefs. I think really this is about the server not believing in equipreference groups, either by way of the client's prefs (since the client can't express them) or its own.\r\n\r\nBut talking about equipreference groups in a spec that intentionally doesn't talk about selection criteria is kinda weird. Not sure what to do here. Maybe we don't need that example if we've spelled it out in the preceding text clearly enough?",
              "createdAt": "2023-11-17T22:21:26Z",
              "updatedAt": "2023-11-17T22:23:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5nmh0A",
          "commit": {
            "abbreviatedOid": "8aed03e"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-18T01:58:07Z",
          "updatedAt": "2023-11-18T01:58:07Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I think the explanatory text is good, but the MUST in the last sentence is too strong. Like, suppose my policy is: I am happy with groups A, B, or C, though I prefer A. In that case, I don't need to look at supported_groups, I just need to pick the one I like best out of KeyShare if present, right?",
              "createdAt": "2023-11-18T01:58:07Z",
              "updatedAt": "2023-11-18T01:58:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5nmh0r",
          "commit": {
            "abbreviatedOid": "8aed03e"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-18T01:58:22Z",
          "updatedAt": "2023-11-18T01:58:22Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "That's my hope.",
              "createdAt": "2023-11-18T01:58:22Z",
              "updatedAt": "2023-11-18T01:58:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5nml_M",
          "commit": {
            "abbreviatedOid": "8aed03e"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-18T02:48:19Z",
          "updatedAt": "2023-11-18T02:48:20Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Ah fair. Yeah if you know that you only have one equipreference group then it doesn't matter. Maybe a SHOULD? Or we could just drop the sentence. Not attached to it.",
              "createdAt": "2023-11-18T02:48:20Z",
              "updatedAt": "2023-11-18T02:48:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5nnz9c",
          "commit": {
            "abbreviatedOid": "8aed03e"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-18T21:57:17Z",
          "updatedAt": "2023-11-18T21:58:14Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I think we do want a MUST-level requirement on the server, but for something like \"MUST account for the possibility that supported_groups contains a more-preferred group than is present in key_share\".  Knowing that you only have a single equipreference grouping accounts for that possibility by rendering it impossible.",
              "createdAt": "2023-11-18T21:57:18Z",
              "updatedAt": "2023-11-18T21:58:14Z"
            },
            {
              "originalPosition": 11,
              "body": "Chris has put in the suggestion; thanks (looks good to me)",
              "createdAt": "2023-11-18T21:58:09Z",
              "updatedAt": "2023-11-18T21:58:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5nn5J1",
          "commit": {
            "abbreviatedOid": "8aed03e"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-19T00:21:34Z",
          "updatedAt": "2023-11-19T00:21:34Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I don't see how \"MUST account for\" is operationalizable.\r\n\r\nAs @davidben says, we've never made any requirements at all about how the server negotiates, so I don't think doing so now unconditionally is really appropriate.\r\n\r\n\r\n",
              "createdAt": "2023-11-19T00:21:34Z",
              "updatedAt": "2023-11-19T00:21:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5oqFIs",
          "commit": {
            "abbreviatedOid": "5f9a44a"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-29T17:37:23Z",
          "updatedAt": "2023-11-29T17:37:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1333,
      "id": "PR_kwDOASA0os5iPN96",
      "title": "Privacy and PSK identifiers",
      "url": "https://github.com/tlswg/tls13-spec/pull/1333",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Based on Christian Huitema discussion of potential solutions.\r\nhttps://mailarchive.ietf.org/arch/msg/tls/QuKsIu1gZFDfLn1x-ZnOE_LQxyc/\r\n\r\nEncrypting the PSK identity using mechanisms external to TLS is missing in the current text. I added as little as possible. I did not go into details of the external encryption (could be asymmetric, symmetric group key, or pairwise symmetric with trial decryption).\r\n",
      "createdAt": "2023-12-18T09:35:43Z",
      "updatedAt": "2024-02-17T14:55:06Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "55a718b2314e60f5529a0769115c46584b7e912a",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-24",
      "headRefOid": "7c771387dfb142140005e029f6bf7e389718ebbc",
      "closedAt": "2024-02-17T14:55:05Z",
      "mergedAt": "2024-02-17T14:55:05Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "4fbb9ea3f37e4906aa2469c5e532fed0d8b5c177"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Christian Huitema pointed out in a private discussion that alternatively the PSK can be encrypted instead of the PSK ID. This is already used in real-world systems, e.g., IETF ACE. I think it would be good to mention that as well. This is very similar to the TLS internal session tickets but external to TLS.",
          "createdAt": "2023-12-28T10:09:42Z",
          "updatedAt": "2023-12-28T10:09:42Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Does this need more words to describe what sort of encryption would be acceptable?\r\n\r\nSomething that included a nonce would be OK, just as something rerandomizable would.  But something that is effectively static would not achieve the stated goal.",
          "createdAt": "2024-01-03T04:42:42Z",
          "updatedAt": "2024-01-03T04:42:42Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@emanjon thoughts?",
          "createdAt": "2024-01-10T13:56:21Z",
          "updatedAt": "2024-01-10T13:56:21Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am just going to merge this minimal change. We're giving people a hint, not telling them how to design it.",
          "createdAt": "2024-02-17T14:55:02Z",
          "updatedAt": "2024-02-17T14:55:02Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5qrrhb",
          "commit": {
            "abbreviatedOid": "7c77138"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This LGTM. Will give it a few days to see if anyone objects.",
          "createdAt": "2023-12-19T22:56:44Z",
          "updatedAt": "2023-12-19T22:56:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1334,
      "id": "PR_kwDOASA0os5i4ZKn",
      "title": "Tracking by replaying a flight of 0-RTT data",
      "url": "https://github.com/tlswg/tls13-spec/pull/1334",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "propose-close"
      ],
      "body": "Information that the replay attack described in Section 8 can be used for server tracking is missing.",
      "createdAt": "2023-12-28T12:09:10Z",
      "updatedAt": "2024-02-17T15:10:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "55a718b2314e60f5529a0769115c46584b7e912a",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-25",
      "headRefOid": "e3a482fbed2b4fd601bbb62cbeb23929c5805d95",
      "closedAt": "2024-02-17T15:10:51Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@emanjon I'm not sure if this is correct.  Suppose instead that we set of servers with some distributed state system so that they behave as one even though they are physically distinct\r\n",
          "createdAt": "2024-01-01T19:31:28Z",
          "updatedAt": "2024-01-01T19:31:28Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, I'm similarly unsure.\r\n\r\nThe basic idea of the attack relies on the server recognizing 0-RTT in a way that is observable, but not having anti-replay protections in place such that replay is possible.  Generally speaking, those two things are aligned.\r\n\r\nA server can recognize that this is a 0-RTT attempt - like NSS could recognize 0-RTT attempts from other NSS server implementations - but if it recognizes the attempt to the point that it is observable beyond that, then it should also share the anti-replay state.  Having decryption keys, but not anti-replay state is a pretty big error.",
          "createdAt": "2024-01-03T06:50:20Z",
          "updatedAt": "2024-01-03T06:50:20Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I was mostly thinking of a single IoT device that is moving around together with a person. IoT devices using TLS are often TLS servers.",
          "createdAt": "2024-01-03T13:14:22Z",
          "updatedAt": "2024-01-03T13:14:58Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I feel like I'm still missing something, because this device will have the same certificate (or I guess maybe PSK?), right? So when you connect to it, won't you be able to tell that it's the same just from that?\r\n\r\nI had assumed that the idea here was that you wanted to distinguish two devices which had the same identity.\r\n\r\n\r\n",
          "createdAt": "2024-01-03T17:56:25Z",
          "updatedAt": "2024-01-03T17:56:25Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@emanjon: following up here. I'm planning to submit a clean version for pubreq at end of month and will close this then unless I hear from you by 2/29.",
          "createdAt": "2024-02-17T14:53:59Z",
          "updatedAt": "2024-02-17T14:59:48Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": " Sorry that I forgot to follow up on this even even Sean poked me.\r\n \r\n>feel like I'm still missing something, because this device will have the same certificate (or I guess maybe PSK?), right? So >when you connect to it, won't you be able to tell that it's the same just from that?\r\n>\r\n>I had assumed that the idea here was that you wanted to distinguish two devices which had the same identity.\r\n\r\nYes, that is correct. The attack already exists. An active attacker can identify a sever by sending a new CH (in the cert case) or by replaying a CH in the PSK case. These seems like simpler attacks achieving the same thing. I think we can close this and not do any changes.",
          "createdAt": "2024-02-17T15:10:51Z",
          "updatedAt": "2024-02-17T15:10:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1335,
      "id": "PR_kwDOASA0os5kRITS",
      "title": "s/level/same level",
      "url": "https://github.com/tlswg/tls13-spec/pull/1335",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-17T03:42:29Z",
      "updatedAt": "2024-02-17T14:49:38Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "55a718b2314e60f5529a0769115c46584b7e912a",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "same-level",
      "headRefOid": "11b8623970e57cde3b8b3b513b70f201ae80a4f6",
      "closedAt": "2024-02-17T14:49:38Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5s955z",
          "commit": {
            "abbreviatedOid": "11b8623"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-17T20:52:55Z",
          "updatedAt": "2024-01-17T20:52:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os5s_Bg7",
          "commit": {
            "abbreviatedOid": "11b8623"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-18T00:15:17Z",
          "updatedAt": "2024-01-18T00:15:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1336,
      "id": "PR_kwDOASA0os5kRIYB",
      "title": "not-same might be greater, this is less",
      "url": "https://github.com/tlswg/tls13-spec/pull/1336",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "So say that, alternative to #1335.\r\n\r\nCloses #1335.",
      "createdAt": "2024-01-17T03:42:55Z",
      "updatedAt": "2024-02-17T14:49:37Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "55a718b2314e60f5529a0769115c46584b7e912a",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "less-analysis",
      "headRefOid": "4580594cbdc03ed9cb9f1f4a132403af1c3d7dff",
      "closedAt": "2024-02-17T14:49:37Z",
      "mergedAt": "2024-02-17T14:49:37Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "dd841d342d91cfe8ef295d1f3a313bae309831d9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5s36E0",
          "commit": {
            "abbreviatedOid": "d429a54"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-17T06:54:12Z",
          "updatedAt": "2024-01-17T06:54:19Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\nbut has received less analysis than this specification.\n```\n",
              "createdAt": "2024-01-17T06:54:13Z",
              "updatedAt": "2024-01-17T06:54:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5s96Na",
          "commit": {
            "abbreviatedOid": "d429a54"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-17T20:53:51Z",
          "updatedAt": "2024-01-17T20:53:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1337,
      "id": "PR_kwDOASA0os5k3_iD",
      "title": "AEAD-LIMITS ref",
      "url": "https://github.com/tlswg/tls13-spec/pull/1337",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I see a dead link for the ref to the AEAD-LIMITS ref. I believe this is the same paper just without the date on the 1st page.",
      "createdAt": "2024-01-23T19:08:02Z",
      "updatedAt": "2024-03-03T03:07:17Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "55a718b2314e60f5529a0769115c46584b7e912a",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "seanturner-aead-limits-ref",
      "headRefOid": "a2a2f0a71e8f947973a08bd5d8f7e4d9d8041d2f",
      "closedAt": "2024-03-03T03:07:17Z",
      "mergedAt": "2024-03-03T03:07:17Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3f61f01ce10351670de939d1ff88b17c951c6c7b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5wcwRO",
          "commit": {
            "abbreviatedOid": "a2a2f0a"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-17T14:52:54Z",
          "updatedAt": "2024-03-01T01:08:44Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Should we change this to January 2024, which is the ePrint submission date?",
              "createdAt": "2024-02-17T14:52:54Z",
              "updatedAt": "2024-03-01T01:08:44Z"
            },
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n       date: January 2024\r\n```",
              "createdAt": "2024-03-01T01:08:28Z",
              "updatedAt": "2024-03-01T01:08:44Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1340,
      "id": "PR_kwDOASA0os5oi-AN",
      "title": "Mention hybrid key exchange for split TLS ClientHello",
      "url": "https://github.com/tlswg/tls13-spec/pull/1340",
      "state": "CLOSED",
      "author": "loganaden",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Would it be worth mentioning this specific case https://tldr.fail/, where TLS ClientHello processing is not implemented correctly ? ",
      "createdAt": "2024-03-04T06:23:51Z",
      "updatedAt": "2024-04-05T12:57:51Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3f61f01ce10351670de939d1ff88b17c951c6c7b",
      "headRepository": null,
      "headRefName": "main",
      "headRefOid": "db1d02130df55714b4c15e4212b9b1489aa3483e",
      "closedAt": "2024-04-05T12:57:51Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The case in that website is not what the bullet point is talking about. The bullet point is talking about a single TLS ClientHello spread over multiple TLS _records_. That's about issues like CVE-2014-3511.\r\n\r\nThe common problem with hybrids is when a single-record ClientHello does not fit in a TCP packet.",
          "createdAt": "2024-03-07T21:30:59Z",
          "updatedAt": "2024-03-07T21:30:59Z"
        },
        {
          "author": "loganaden",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for point this out. I will change the PR to have a dedicate line for the tldr issue. Is that ok @davidben ?",
          "createdAt": "2024-03-08T09:25:45Z",
          "updatedAt": "2024-03-08T09:25:45Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This just seems like a basic failure of how the TLS stack interacts with the TCP layer. I'm not sure we need to mention it.",
          "createdAt": "2024-04-05T12:55:49Z",
          "updatedAt": "2024-04-05T12:55:49Z"
        },
        {
          "author": "loganaden",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Understood @ekr . I'm closing it.",
          "createdAt": "2024-04-05T12:57:26Z",
          "updatedAt": "2024-04-05T12:57:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1342,
      "id": "PR_kwDOASA0os5qCQHY",
      "title": "counting for IANA",
      "url": "https://github.com/tlswg/tls13-spec/pull/1342",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Two entries were updated not one; also see https://www.rfc-editor.org/errata/eid5976.",
      "createdAt": "2024-03-19T03:40:12Z",
      "updatedAt": "2024-04-05T12:56:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3f61f01ce10351670de939d1ff88b17c951c6c7b",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "seanturner-counting-4-iana",
      "headRefOid": "56c3c16f360f2322ca5bac395981c2c49a589ea5",
      "closedAt": "2024-04-05T12:56:22Z",
      "mergedAt": "2024-04-05T12:56:22Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "3d3b9a4f924f3a3d536cc46f4013d3b1f70f83f9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1343,
      "id": "PR_kwDOASA0os5qCSNQ",
      "title": "Forbid the sender from sending redundant update_requested KeyUpdates",
      "url": "https://github.com/tlswg/tls13-spec/pull/1343",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Otherwise we run into the issue described in issue #1341.\r\n\r\nFixes #1341",
      "createdAt": "2024-03-19T03:51:04Z",
      "updatedAt": "2024-07-07T02:55:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3f61f01ce10351670de939d1ff88b17c951c6c7b",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "key-update-storm",
      "headRefOid": "f2a555437974c4754a61a9b65ec1fbe14cf543d6",
      "closedAt": "2024-07-07T02:55:15Z",
      "mergedAt": "2024-07-07T02:55:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "54d6f2709c3778da828859647e30dd0c345505d6"
      },
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/tlswg/tls13-spec/issues/1341 is an obvious implementation error, I don't think we need explicit language for it",
          "createdAt": "2024-03-19T11:23:50Z",
          "updatedAt": "2024-03-19T11:23:50Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> That said, I think that you need to describe what happens when you do receive a second update request.\r\n\r\nWell, it's a little tricky. On the receiver side, you probably queue up the KeyUpdate response immediately after you saw the KeyUpdate request. So that means you observe the second KeyUpdate request *after* you've sent the response. So it's indistinguishable from a very very fast network and a peer that implemented a policy of \"request KeyUpdate after every 1 records\".\r\n\r\nIt's just that that's a stupid policy and should definitely trip DoS limits. The problem is the server misbehavior makes otherwise reasonable policies behave even worse than the stupid policy.",
          "createdAt": "2024-03-20T08:17:40Z",
          "updatedAt": "2024-03-20T08:17:40Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Without this, you can make some very useful simplifying assumptions in implementations. \r\n\r\nWhat kind of? You need to process the messages sequentially anyway, I don't see how doing lookahead is making the code simpler...",
          "createdAt": "2024-03-20T13:54:34Z",
          "updatedAt": "2024-03-20T13:54:34Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One assumption you can make is that sending you a bunch of KeyUpdate requests in a row is unreasonable and can be bucketed under DoS limits.\r\n\r\nThis is exactly the problem we've been having with the buggy implementation. A TLS implementation that says \"I will request the peer update after 100MB (to pick an arbitrary number) on the same key\" is reasonable given the mechanisms in the spec. If it's reasonable, DoS limits should admit it.\r\n\r\nHowever, if a valid implementation of this policy is to request KeyUpdate after *every* record, it is not possible to admit that without also admitting DoS in channels with a high BDP, or highly asymmetric send rate. This puts the TLS stack in a bind.\r\n\r\nInstead, we can observe that there is no reason to ever request a KeyUpdate if you already have one in flight. The peer isn't going to see your new one until it sees your previous one. If you haven't gotten a response yet,  sending a new one won't help. (The peer might not have anything to write right now, or the other channel may be slow or blocked on flow control.)\r\n\r\nSending that extra KeyUpdate is truly pointless and, as you say, an obvious implementation error... *once one points it out*. Yet we *know for a fact* that it was not obvious when not mentioned because a major TLS implementation didn't think to handle this! Thus we should mention it in the spec.\r\n\r\nPS: Although it is tricky for an implementation to directly observe this (except when it has gone so wrong as to hit DoS limits), it is obvious how to write a test for this behavior in a test stack. Just make the test stack indefinitely defer the KeyUpdate response, simulating a huge BDP, and assert you don't get a new KeyUpdate request despite continuing to trip whatever threshold the TLS implementation picked.",
          "createdAt": "2024-03-20T21:16:23Z",
          "updatedAt": "2024-03-20T21:17:17Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think \"DoS\" is enough of a reason for \"MUST\" language. At most, I think it should be a \"MAY\".\r\n\r\n> Instead, we can observe that there is no reason to ever request a KeyUpdate if you already have one in flight.\r\n\r\ndepends how you define \"in flight\", if it's TCP in flight, then maybe, if it's \"TLS in flight\" (as in, not read and interpreted by the TLS implementation), then no, there is no way for the sender to know when it was read. And with modern Internet network speeds resulting in hundreds of megabytes of data actually in flight, having multiple KeyUpdate messages in flight is reasonable.\r\n\r\nSo, either the text should describe the situation much more precisely, or it should spell out the whole issue and make recommendations how to handle it.",
          "createdAt": "2024-03-21T12:18:11Z",
          "updatedAt": "2024-03-21T12:18:11Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That faster internet speeds allow for a higher BDP, which is exactly why there's a risk of problems with multiple update_requested KeyUpdates in flight. There is no reason for a TLS stack _request_ a KeyUpdate from the _peer_ if it has already sent one and the peer hasn't reacted. It is _not_ reasonable to have multiple update_requested KeyUpdates in flight.\r\n\r\nI noticed you wrote \"having multiple KeyUpdate messages in flight\" without the qualifier. Perhaps that is what you are missing here. There are two kinds of KeyUpdates in TLS 1.3. If you're simply updating your own stream (update_not_requested), yes having several in flight is reasonable. That is not what this PR is talking about. When you specifically are requesting that the peer update the key, it does not make sense to send one when the previous one hasn't been acted on.\r\n\r\nIf your stack is simply sending a KeyUpdate every few MB, this PR does not impact you. Those will be update_not_requested. It's the update_requested ones that are relevant, when the stack is requesting the peer update, often based on counting the peer's byte count.",
          "createdAt": "2024-03-21T12:33:45Z",
          "updatedAt": "2024-03-21T12:33:45Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I am aware we're talking about `update_requested` ones.\r\n\r\nI'm talking about a situation where the client can anticipate that a key update will be necessary for the server sending side. If I can have 200 MiB in flight, and I want a key update from the server every 100 MiB, then I need to have up to two `update_requested` key updates in flight.\r\n\r\nSo maybe specify it explicitly like that? \"There must be no more than n+1 KeyUpdate in flight with no response, where n is the size of in flight data divided by the intended rekey interval\"?",
          "createdAt": "2024-03-21T15:22:15Z",
          "updatedAt": "2024-03-21T15:22:15Z"
        },
        {
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If I can have 200 MiB in flight, and I want a key update from the server every 100 MiB, then I need to have up to two update_requested key updates in flight.\r\n\r\nYou want a key update from the server for every 100 MiB that you send?  How can you know anything about the amount of traffic that the server is going to reply with (in any kind of generic case)?\r\n\r\nRegardless, the server's KeyUpdate policy is ... the server's.  Not the client's.  Can you present a scenario where there is a strong requirement for the server to KeyUpdate for every 100 MiB of data the client sends, that cannot be handled by  configuring policy on the server?",
          "createdAt": "2024-03-21T15:40:50Z",
          "updatedAt": "2024-03-21T15:40:50Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "200 MiB and 100MiB is an example, consider it to be 4 GiB and 2GiB respectively if that makes it more reasonable frequency to ask for KeyUpdate\r\n\r\n> How can you know anything about the amount of traffic that the server is going to reply with (in any kind of generic case)?\r\n\r\nI won't. But the point of the base TLS specification is to handle all the use cases, not an application-specific use case. And we don't need to search far to find examples where the client may know very well that the file it's downloading over HTTPS is few terabytes large.\r\n\r\n> Regardless, the server's KeyUpdate policy is ... the server's. Not the client's.\r\n\r\nif that was the case, then we wouldn't have `update_requested`",
          "createdAt": "2024-03-21T18:02:51Z",
          "updatedAt": "2024-03-21T18:02:51Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "At the point that your BDP exceeds the limits on your AEAD, you really need the sender to handle this. On the other side, you cannot know what the sender will do in the future anyway. Really, you need to get a new AEAD. While TLS gets to play on easy by running over TCP, this same design in all its sibling protocols is stricter. Too many unacked key updates and you can't even reconstruct the epoch:\r\nhttps://www.rfc-editor.org/rfc/rfc9147.html#section-8\r\nhttps://www.rfc-editor.org/rfc/rfc9001#section-6\r\n\r\nAs for why we have `update_requested` at all, I was actually the instigator for why KeyUpdate looks the way it does. \ud83d\ude1b  This scenario was honestly always pretty fuzzy. The history here is that the original KeyUpdate did not have two modes at all. Instead it was a symmetric scheme where the two sides were forced to catch up to the same number of updates at all points. In fact the channels' traffic secrets weren't separate ladders as they are now. There was one traffic secret for the two, and we KDFed \"client key\", \"server key\", \"client iv\", \"server iv\" secrets, so it *had* to be lockstep. In that model, it doesn't make sense to wonder whether you're updating for yourself or the other side because it's symmetric anyway.\r\n\r\nI observed that this design did not accommodate asymmetric sending rates *at all* and resulted in a DoS problem. In extreme case, protocols over TCP may have one direction sending data while the other direction isn't running *at all*. (Indeed it's quite comment. Consider HTTP/1.1. An HTTP/1.1 client does not read while it is sending a request. An HTTP/1.1 server does not read while it is sending a response.) To fix this, we split the two ladders, at which point sides could just unilaterally update themselves. And, honestly, we could and probably should have left it at that.\r\n\r\nHowever, unilateral-only updates loses the kinda speculative \"I know more about this AEAD than you\" case. There was some discomfort losing that, so this \"update_requested but the responses may be coalesced\" design was born. But this case was always fuzzy and it was always understood that, in the limit, you really have to rely on the sender. Just a goofy belt-and-suspenders thing.\r\n\r\nIndeed the extreme example where sides write without reading is precisely where you need this limit. If you don't, the side requesting KeyUpdates will not only DoS the peer, it will also _DoS itself_. If I'm sending you a blast of data (consider an HTTP or SQL request that results in GBs of data), but not reading because it's not my turn to read, you might try to request KeyUpdates. If you try to be clever and clock them, you'll add more and more data to the pipe and at some point the KeyUpdates themselves will exceed the transport buffers because I'm not reading *at all*. At this point:\r\n\r\n* Either your entire stack wedges up and blocks on the right and now the connection deadlocks\r\n* Or you just buffer up date in memory and unbounded buffer\r\n\r\nWhen I'm finally done sending, if you haven't managed to DoS yourself first, the torrent of `update_requested`s finally releases and now you DoS me instead because I'm suddenly draining a ton of data and churning the KDF.\r\n\r\nThis isn't theoretical. We saw this problem in the wild with a major client. We never finished patching the original KeyUpdate design for asymmetric rates. This PR is the last necessary step to do so. Limiting to `send_rate / bdp` does not make sense because if one side isn't reading, the BDP does not figure into it.",
          "createdAt": "2024-03-21T20:51:27Z",
          "updatedAt": "2024-03-21T20:51:27Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sure, if the sending side is not reading, then the client has no way of influencing its behaviour, thus sending KeyUpdates asynchronously is pointless.\r\n\r\nI'm not talking about this situation though. I'm considering a server that does the reading and writing asynchronously.\r\n\r\nWhat it sounds like to me, is that we basically need to define packet limits for the different AEADs, and require the sender to send KeyUpdate before they are reached, unprompted by the other side. Once we have this kind of requirement, we could either drop the `update_requested` completely, or indeed make it so that only one unanswered one can be in flight (and document that this is specifically to prevent deadlocks with synchronous implementations).",
          "createdAt": "2024-03-22T14:29:41Z",
          "updatedAt": "2024-03-22T14:29:41Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@tomato42  the kind of change you are proposing is out of scope for 8446-bis, which is largely about clarification, not redesign. If you want to propose this, you should write a new draft.\r\n\r\n@davidben I think what you are proposing is potentially still in scope, but would need WG consensus, as this document has already been WGLCed. Can you send email to the list to alert the chairs.\r\n\r\n\r\n",
          "createdAt": "2024-03-24T20:13:42Z",
          "updatedAt": "2024-03-24T20:13:42Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr to be clear, I'm trying to build an alternative solution, I'm not insisting on it. For the text itself, I'd be OK with a \"SHOULD NOT\" in place of \"MUST NOT\".",
          "createdAt": "2024-03-25T11:37:15Z",
          "updatedAt": "2024-03-25T11:37:15Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"SHOULD NOT\" wouldn't allow for enforcement, so I'm opposed to that.",
          "createdAt": "2024-03-26T01:06:25Z",
          "updatedAt": "2024-03-26T01:06:25Z"
        },
        {
          "author": "knekritz",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not sure about a MUST NOT here. This would require additional state tracking that currently is not required (for example with an application API to trigger peer updates). I'm also not sure this is possible to enforce without risking interop problems, since you have no way of knowing whether a received key update is actually in response to the update_requested that you sent.\r\n\r\nThe spec already allows for responding to multiple update_requested with a single KeyUpdate, so I don't see how this is a DoS problem for the peer.",
          "createdAt": "2024-03-27T17:57:10Z",
          "updatedAt": "2024-03-27T17:57:10Z"
        },
        {
          "author": "bob-beck",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This would require one bit of state  \"A Key Update is outstanding\" - that's not really that challenging. \r\n\r\nResponding to multiple key updates in a coalesced single update does not help in the situation described, since once you send the response, you have no idea in the misbehaving client sense how backlogged the client is on input before they will see your response.  In a DOS situation, you are still faced with attempting to keep enough state to differentiate this bad behavior from an attacker sending constant update requests.  While this change requires the sender to keep one bit of state this means that the recipient also needs to only keep one bit of state to prevent a DOS, (instead of an arbitrary limit chosen try to allow legitimate clients while not getting DOS'ed) and makes the protocol simpler all around\r\n\r\nHence I support MUST NOT. ",
          "createdAt": "2024-03-27T22:04:51Z",
          "updatedAt": "2024-03-27T22:04:51Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr this PR is ready to merge; see [mail](https://mailarchive.ietf.org/arch/msg/tls/oI1A3tBmpyck26aV3Ysy_yfgCTw/).",
          "createdAt": "2024-06-18T13:33:03Z",
          "updatedAt": "2024-06-18T13:33:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5z9U9i",
          "commit": {
            "abbreviatedOid": "6d99244"
          },
          "author": "bob-beck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "yes please. ",
          "createdAt": "2024-03-19T08:07:35Z",
          "updatedAt": "2024-03-19T08:07:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os50GPxc",
          "commit": {
            "abbreviatedOid": "6d99244"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I disagree with @tomato42.  Without this, you can make some very useful simplifying assumptions in implementations.  Without this, you need to deal with a denial of service hole, which is complicated.\r\n\r\nThat said, I think that you need to describe what happens when you do receive a second update request.",
          "createdAt": "2024-03-20T01:11:48Z",
          "updatedAt": "2024-03-20T01:11:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1345,
      "id": "PR_kwDOASA0os5rCSAW",
      "title": "Address erratum 5717",
      "url": "https://github.com/tlswg/tls13-spec/pull/1345",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1344.",
      "createdAt": "2024-03-28T10:36:47Z",
      "updatedAt": "2024-04-05T12:56:46Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3f61f01ce10351670de939d1ff88b17c951c6c7b",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "seanturner-erratum-5717",
      "headRefOid": "78196936856060f1b7b592808f1714fe746bd836",
      "closedAt": "2024-04-05T12:56:46Z",
      "mergedAt": "2024-04-05T12:56:46Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "cc1d6ee49e0d28a9200d5988c0c27dd3cce966bd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1347,
      "id": "PR_kwDOASA0os5rCl8r",
      "title": "Address erratum 5874",
      "url": "https://github.com/tlswg/tls13-spec/pull/1347",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1346.\r\n\r\nNote that I took the suggested text from Ben's message not from the submitted errata.",
      "createdAt": "2024-03-28T11:23:18Z",
      "updatedAt": "2024-04-05T12:57:08Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3f61f01ce10351670de939d1ff88b17c951c6c7b",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "seanturner-erratum-5874",
      "headRefOid": "ab83e0d22763c30c13337939a1c218f9a759861f",
      "closedAt": "2024-04-05T12:57:08Z",
      "mergedAt": "2024-04-05T12:57:08Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7dad2ebcb9345c5d41a27e810a37b1a38cc3691d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os51Mza8",
          "commit": {
            "abbreviatedOid": "ab83e0d"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-28T13:51:50Z",
          "updatedAt": "2024-03-28T13:51:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1348,
      "id": "PR_kwDOASA0os5rLjnA",
      "title": "IDnits: s/MUST not/MUST NOT",
      "url": "https://github.com/tlswg/tls13-spec/pull/1348",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix and IDnit.",
      "createdAt": "2024-03-29T15:45:06Z",
      "updatedAt": "2024-04-05T12:57:23Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3f61f01ce10351670de939d1ff88b17c951c6c7b",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "seanturner-idnit-mn",
      "headRefOid": "30e478851c3f5beb6136b25c9d20493cccde948d",
      "closedAt": "2024-04-05T12:57:23Z",
      "mergedAt": "2024-04-05T12:57:23Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "21e8a0bd6fd1a3e4fb4335a1c1b722ce5060ad94"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1349,
      "id": "PR_kwDOASA0os5rLkHQ",
      "title": "Update 6125bis ref",
      "url": "https://github.com/tlswg/tls13-spec/pull/1349",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "RFC 9525 is now published.",
      "createdAt": "2024-03-29T15:47:02Z",
      "updatedAt": "2024-04-05T12:58:11Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3f61f01ce10351670de939d1ff88b17c951c6c7b",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "seanturner-6125bis-ref",
      "headRefOid": "5c1fb50ebb4dbe3eb63369ef269898caf2694b24",
      "closedAt": "2024-04-05T12:58:10Z",
      "mergedAt": "2024-04-05T12:58:10Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "35725b79face87c2f19bc0fe353a51d3d1c07dfd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1350,
      "id": "PR_kwDOASA0os5rLlKs",
      "title": "Update HTTP/1.1 ref",
      "url": "https://github.com/tlswg/tls13-spec/pull/1350",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "RFC 7230 was obsoleted by 9112.  Not entirely sure we need to do this but it will get rid of one more IDnit.",
      "createdAt": "2024-03-29T15:50:49Z",
      "updatedAt": "2024-05-27T17:15:22Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3f61f01ce10351670de939d1ff88b17c951c6c7b",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "seanturner-7230bis-ref",
      "headRefOid": "4587d97861b3437ef9cc46c6bdb69c5711085173",
      "closedAt": "2024-05-27T17:15:22Z",
      "mergedAt": "2024-05-27T17:15:22Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "9cffcdfb445c29dd9743dbfde6136d6c9ea0a55f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1351,
      "id": "PR_kwDOASA0os5rLn_0",
      "title": "Add 8422 to abstract",
      "url": "https://github.com/tlswg/tls13-spec/pull/1351",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Knocking off another IDnit by including 8422 in the abstract; this I-D is updating it so it needs to be listed.",
      "createdAt": "2024-03-29T15:58:36Z",
      "updatedAt": "2024-04-05T12:58:30Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3f61f01ce10351670de939d1ff88b17c951c6c7b",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "seanturner-8422-abstract",
      "headRefOid": "902552de6da9a9eb7051cc24f31389920dd687dd",
      "closedAt": "2024-04-05T12:58:30Z",
      "mergedAt": "2024-04-05T12:58:30Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "301030b1deb2a9b684124fa65aed892f76751f29"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1353,
      "id": "PR_kwDOASA0os5rousz",
      "title": "Address erratum 6820",
      "url": "https://github.com/tlswg/tls13-spec/pull/1353",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1352.\r\n\r\nText is as suggested in [erratum](https://www.rfc-editor.org/errata/eid6820).",
      "createdAt": "2024-04-04T00:57:56Z",
      "updatedAt": "2024-04-05T13:46:48Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "3f61f01ce10351670de939d1ff88b17c951c6c7b",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "seanturner-erratum-6820",
      "headRefOid": "c16759e4c790f90c8cfef5603dfa1654b5d1da3e",
      "closedAt": "2024-04-05T12:59:07Z",
      "mergedAt": "2024-04-05T12:59:07Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "20f0452732dff65f1a6cc080f492d60492b91893"
      },
      "comments": [
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That makes it less clear wrt EncryptedExtensions message, I think that message should be listed explicitly if we remove the general handshake messages part.",
          "createdAt": "2024-04-04T12:30:38Z",
          "updatedAt": "2024-04-04T12:30:38Z"
        },
        {
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, I think HelloRetryRequest is in the same boat, it can't have arbitrary extensions.",
          "createdAt": "2024-04-04T12:31:58Z",
          "updatedAt": "2024-04-04T12:31:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os52GsIW",
          "commit": {
            "abbreviatedOid": "0bd0834"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-05T00:59:47Z",
          "updatedAt": "2024-04-05T00:59:47Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n  in a ServerHello, Certificate, or EncryptedExtensions not first offered in the\r\n```\r\n@tomato42 Like so?",
              "createdAt": "2024-04-05T00:59:47Z",
              "updatedAt": "2024-04-05T01:00:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os52GvPG",
          "commit": {
            "abbreviatedOid": "0bd0834"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-05T01:17:24Z",
          "updatedAt": "2024-04-05T01:17:24Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "or...\r\n\r\n```suggestion\r\n  in a ServerHello, HelloRetryRequest, EncryptedExtensions, or Certificate not first offered in the\r\n```",
              "createdAt": "2024-04-05T01:17:24Z",
              "updatedAt": "2024-04-05T01:17:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os52KDpe",
          "commit": {
            "abbreviatedOid": "0bd0834"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-05T08:27:35Z",
          "updatedAt": "2024-04-05T08:27:35Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "@martinthomson yes, I think we need `ServerHello, HelloRetryRequest, EncryptedExtensions, or Certificate` to actually be exhaustive ",
              "createdAt": "2024-04-05T08:27:35Z",
              "updatedAt": "2024-04-05T08:27:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os52NdEF",
          "commit": {
            "abbreviatedOid": "c16759e"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": ":+1: ",
          "createdAt": "2024-04-05T13:46:48Z",
          "updatedAt": "2024-04-05T13:46:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1354,
      "id": "PR_kwDOASA0os5sYrpr",
      "title": "Forbid the sender from sending duplicate supported groups entries.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1354",
      "state": "MERGED",
      "author": "bob-beck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Supported Groups is intimately tied to Key Share, where Key Share must be sent in the preference order specified by Supported Groups. \r\n\r\nDuplicate Key Shares for a group are already forbidden from being sent, but allowing duplicates in Supported Groups makes this a bit muddled if supported groups is permitted to be, for example,  ABA and the client sends key share B then A.  \r\n\r\nNow, nothing sane should actually be sending duplicate supported groups in a preference order, but it's still not forbidden to do so today. I'm suggesting we just not allow this so server side implementations can reject attempts to do so.",
      "createdAt": "2024-04-11T17:17:22Z",
      "updatedAt": "2024-07-07T02:54:52Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "20f0452732dff65f1a6cc080f492d60492b91893",
      "headRepository": "bob-beck/supported-groups-duplicates",
      "headRefName": "main",
      "headRefOid": "762606e6f2f0fb5f9bc6ed79d4388ecf7a855c07",
      "closedAt": "2024-07-07T02:54:52Z",
      "mergedAt": "2024-07-07T02:54:52Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "7ec60a54895d4c8030037887f9c7ac0dc2072c9a"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems reasonable, but it's a normative change, so the chairs need to tell us how to proceed.\r\n\r\n@seanturner @jsalowey @dconnolly ",
          "createdAt": "2024-04-11T17:45:37Z",
          "updatedAt": "2024-04-11T17:45:53Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@seanturner @jsalowey @dconnolly  do the chairs want to entertain this?",
          "createdAt": "2024-05-27T17:16:25Z",
          "updatedAt": "2024-05-27T17:16:45Z"
        },
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr this PR is ready to merge; see [mail](https://mailarchive.ietf.org/arch/msg/tls/oI1A3tBmpyck26aV3Ysy_yfgCTw/).",
          "createdAt": "2024-06-18T13:39:42Z",
          "updatedAt": "2024-06-18T13:39:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os53W18x",
          "commit": {
            "abbreviatedOid": "8462a66"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-04-16T02:36:04Z",
          "updatedAt": "2024-04-16T02:36:09Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "When you specify a requirement on the sender, it always helps to specify how the receiver might react if the sender misbehaves.  In this case, I think it best to only *allow* the receiver to reject the handshake, rather than require it.  After all, I believe that some implementations are tolerant of that.\r\n\r\n```suggestion\r\nMUST NOT contain any duplicate entries.  A sender MAY abort a connection\r\nwith a fatal illegal_parameter alert if it detects a duplicate entry.\r\n```\r\n\r\n(I'm guessing the alert type here.)\r\n\r\nMore generally, do we want to do this sort of thing with all such lists, not just groups?  key exchange mode? certificate type? etc...",
              "createdAt": "2024-04-16T02:36:04Z",
              "updatedAt": "2024-04-16T02:42:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os53ak6g",
          "commit": {
            "abbreviatedOid": "8462a66"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-16T12:13:51Z",
          "updatedAt": "2024-04-16T12:13:51Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "yes, probably \"MAY abort a connection with an `illegal_parameter` Alert\"",
              "createdAt": "2024-04-16T12:13:51Z",
              "updatedAt": "2024-04-16T12:13:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os59MiTN",
          "commit": {
            "abbreviatedOid": "8462a66"
          },
          "author": "bob-beck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-05T22:55:15Z",
          "updatedAt": "2024-06-05T22:55:15Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Belatedly, yes, I'd be completely fine with martin's suggestion.",
              "createdAt": "2024-06-05T22:55:15Z",
              "updatedAt": "2024-06-05T22:55:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5-5a_v",
          "commit": {
            "abbreviatedOid": "8462a66"
          },
          "author": "bob-beck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-19T20:13:02Z",
          "updatedAt": "2024-06-19T20:13:03Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Martin I beleatedly noticed you change says that the sender may abort the connection, it's the recipient that may abort the connection. Please ensure you are ok with this.",
              "createdAt": "2024-06-19T20:13:02Z",
              "updatedAt": "2024-06-19T20:13:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5-6LEu",
          "commit": {
            "abbreviatedOid": "8462a66"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T00:21:53Z",
          "updatedAt": "2024-06-20T00:21:53Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Yes, of course you are right :)",
              "createdAt": "2024-06-20T00:21:53Z",
              "updatedAt": "2024-06-20T00:21:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5-9Zoi",
          "commit": {
            "abbreviatedOid": "762606e"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-20T10:10:36Z",
          "updatedAt": "2024-06-20T10:10:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1356,
      "id": "PR_kwDOASA0os5vy60u",
      "title": "Addressing erratum",
      "url": "https://github.com/tlswg/tls13-spec/pull/1356",
      "state": "CLOSED",
      "author": "BenSmyth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-17T13:49:16Z",
      "updatedAt": "2024-05-17T14:30:41Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "20f0452732dff65f1a6cc080f492d60492b91893",
      "headRepository": "BenSmyth/tls13-spec",
      "headRefName": "main",
      "headRefOid": "909f05c16f1e6d03ec819e08b6efde9c1cf02dc2",
      "closedAt": "2024-05-17T14:30:41Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 1357,
      "id": "PR_kwDOASA0os5vzQzl",
      "title": "Addressing erratum ",
      "url": "https://github.com/tlswg/tls13-spec/pull/1357",
      "state": "CLOSED",
      "author": "BenSmyth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-17T14:31:08Z",
      "updatedAt": "2024-08-26T21:17:36Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "20f0452732dff65f1a6cc080f492d60492b91893",
      "headRepository": "BenSmyth/tls13-spec",
      "headRefName": "main",
      "headRefOid": "909f05c16f1e6d03ec819e08b6efde9c1cf02dc2",
      "closedAt": "2024-07-31T01:28:41Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For future reference, individual PRs would have been more helpful here :)",
          "createdAt": "2024-06-10T13:25:59Z",
          "updatedAt": "2024-06-10T13:25:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os59ohXY",
          "commit": {
            "abbreviatedOid": "909f05c"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T13:15:08Z",
          "updatedAt": "2024-06-10T14:39:48Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I don't believe this, and by extension Erratum 6152, is correct. The order of operations is:\r\n\r\n1. Look at SH.Random to determine if it's actually an HRR\r\n2. If it is a HRR, then follow the HRR processing steps described in 4.1.4.\r\n3. If it a SH, then follow the SH processing steps described in 4.2.1.",
              "createdAt": "2024-06-10T13:15:08Z",
              "updatedAt": "2024-06-10T14:39:48Z"
            },
            {
              "originalPosition": 64,
              "body": "```suggestion\r\nIf the client's hello contained a suitable \"psk_key_exchange_modes\" extension, at any time after the server has received the client Finished message,\r\n```",
              "createdAt": "2024-06-10T13:19:59Z",
              "updatedAt": "2024-06-10T14:39:48Z"
            },
            {
              "originalPosition": 6,
              "body": "This was discussed on the list with no clear resolution. I don't think the normative text Ben proposes is correct here, as it does not properly distinguish between the application and what it knows and the TLS stack (for instance, there might be an application-level \"no-more-data\" signal).  Here is the text change I proposed in the thread:\r\n\r\n\"Application protocols MAY choose to flush their send buffers and immediately send a close_notify upon receiving a close_notify, but this allows an attacker to influence the data that the peer receives by delaying the close_notify or by delaying the transport level delivery of the application's packets. These issues can be addressed at the application layer, for instance by ignoring packets received after transmitting the close_notify\" .",
              "createdAt": "2024-06-10T13:25:40Z",
              "updatedAt": "2024-06-10T14:39:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5-NF4X",
          "commit": {
            "abbreviatedOid": "909f05c"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-14T03:22:53Z",
          "updatedAt": "2024-06-14T03:22:53Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I prefer @ekr's language here.  I'm not a fan of \"SHOULD NOT have any effect\" as a normative statement.\r\n\r\nWith that preference, I would prefer to have it clearer what the expectations are about responsibility for handling this situation.  A TLS stack could choose to response to close_notify with close_notify, but if that has application-layer consequences, it shouldn't do that unless the application has asked it to.\r\n\r\nI think that's what @ekr is saying, but it's a little less direct.",
              "createdAt": "2024-06-14T03:22:53Z",
              "updatedAt": "2024-06-14T03:22:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1360,
      "id": "PR_kwDOASA0os5xkPfG",
      "title": "X25519 MTI",
      "url": "https://github.com/tlswg/tls13-spec/pull/1360",
      "state": "CLOSED",
      "author": "loganaden",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/tlswg/tls13-spec/issues/1359 for discussion.",
      "createdAt": "2024-06-05T14:42:20Z",
      "updatedAt": "2024-09-14T20:09:26Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "9cffcdfb445c29dd9743dbfde6136d6c9ea0a55f",
      "headRepository": "loganaden/tls13-spec",
      "headRefName": "main",
      "headRefOid": "443c3f232f65e7fef34aafe20b4e73171f2a8027",
      "closedAt": "2024-09-14T20:09:26Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ekr please close PR; see [mail](https://mailarchive.ietf.org/arch/msg/tls/T5l_cZD48t0fCWfUYV4b1l-hXbs/).",
          "createdAt": "2024-09-10T17:30:04Z",
          "updatedAt": "2024-09-10T17:30:04Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing per WG consensus.",
          "createdAt": "2024-09-14T20:09:26Z",
          "updatedAt": "2024-09-14T20:09:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os6IaPyc",
          "commit": {
            "abbreviatedOid": "443c3f2"
          },
          "author": "legna37",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-08T18:13:12Z",
          "updatedAt": "2024-09-08T18:13:21Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "- `\r\n[Uploading envvars_backend.txt\u2026]()\r\n`",
              "createdAt": "2024-09-08T18:13:12Z",
              "updatedAt": "2024-09-08T18:13:21Z"
            },
            {
              "originalPosition": 1,
              "body": "- ``",
              "createdAt": "2024-09-08T18:13:21Z",
              "updatedAt": "2024-09-08T18:13:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1361,
      "id": "PR_kwDOASA0os5yXn31",
      "title": "Unify client and server certificate selection text",
      "url": "https://github.com/tlswg/tls13-spec/pull/1361",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I noticed this as I was looking for where we officially wrote down the implications of the X.509 Key Usage extension. We wrote it down for the server, but forgot to for the client.\r\n\r\nThe root issue is that we unified certificate negotiation in TLS 1.3 (ClientHello/Certificate and CertificateRequest/Certificate are now nice and symmetric), but forgot to correspondingly unify some of this prose. As a result, we said the same thing in different ways, and forgot different things in either place.\r\n\r\nThis change merges the two.",
      "createdAt": "2024-06-13T14:02:29Z",
      "updatedAt": "2024-07-07T02:50:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "9cffcdfb445c29dd9743dbfde6136d6c9ea0a55f",
      "headRepository": "davidben/tls13-spec",
      "headRefName": "unify-cert-selection",
      "headRefOid": "405fa84ee932b0cff779fb6806079ebe05026b70",
      "closedAt": "2024-07-07T02:50:58Z",
      "mergedAt": "2024-07-07T02:50:58Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "976551d3eeb2e470cfd7d7757ce4e17c5786fdfe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os5-KQOS",
          "commit": {
            "abbreviatedOid": "5a4dfe7"
          },
          "author": "bob-beck",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T18:22:51Z",
          "updatedAt": "2024-06-13T18:22:51Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "Nit: it is a singular peer, so I believe this should be peer's ",
              "createdAt": "2024-06-13T18:22:51Z",
              "updatedAt": "2024-06-13T18:22:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5-KToW",
          "commit": {
            "abbreviatedOid": "5a4dfe7"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T18:30:03Z",
          "updatedAt": "2024-06-13T18:30:03Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "Ah yeah that was a typo.",
              "createdAt": "2024-06-13T18:30:03Z",
              "updatedAt": "2024-06-13T18:30:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5_JTHC",
          "commit": {
            "abbreviatedOid": "4ad3e4a"
          },
          "author": "Andrei-Popov",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-21T17:38:06Z",
          "updatedAt": "2024-06-21T17:38:07Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "\"Server\" or \"sender\"?\r\nIf the **server** cannot produce... then it SHOULD continue the handshake... not known to be supported by the **peer**.\r\nPerhaps it should be either \"server and client\" or \"sender and receiver\" or \"peer and peer\".\r\nE.g., \"server and peer\" does not make sense to me.",
              "createdAt": "2024-06-21T17:38:07Z",
              "updatedAt": "2024-06-21T17:39:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5_JUAM",
          "commit": {
            "abbreviatedOid": "4ad3e4a"
          },
          "author": "Andrei-Popov",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-21T17:40:41Z",
          "updatedAt": "2024-06-21T17:40:41Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "This is always the case; I see no reason to spell it out.",
              "createdAt": "2024-06-21T17:40:41Z",
              "updatedAt": "2024-06-21T17:40:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5_Ja6n",
          "commit": {
            "abbreviatedOid": "4ad3e4a"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-21T18:00:11Z",
          "updatedAt": "2024-06-21T18:37:33Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "Removed.",
              "createdAt": "2024-06-21T18:00:11Z",
              "updatedAt": "2024-06-21T18:37:33Z"
            },
            {
              "originalPosition": 76,
              "body": "Ah yeah, this part is weirdly written. It's because of the client can decline to send a cert but the server can't. Rephrased to hopefully be clearer.",
              "createdAt": "2024-06-21T18:37:29Z",
              "updatedAt": "2024-06-21T18:37:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5_WOzb",
          "commit": {
            "abbreviatedOid": "36f37a7"
          },
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-24T18:51:39Z",
          "updatedAt": "2024-06-24T18:51:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os5_WSqR",
          "commit": {
            "abbreviatedOid": "36f37a7"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-24T19:00:04Z",
          "updatedAt": "2024-06-24T19:00:04Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "s/rules/rule/ ?  ",
              "createdAt": "2024-06-24T19:00:04Z",
              "updatedAt": "2024-06-24T19:00:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5_WS1_",
          "commit": {
            "abbreviatedOid": "36f37a7"
          },
          "author": "richsalz",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-24T19:00:20Z",
          "updatedAt": "2024-06-24T19:00:20Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Likewise, s/rules/rule/ ?\r\n",
              "createdAt": "2024-06-24T19:00:20Z",
              "updatedAt": "2024-06-24T19:00:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os5_WVVI",
          "commit": {
            "abbreviatedOid": "36f37a7"
          },
          "author": "ilucas39",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "\n\u25e2\ud83d\udc99\u25e3            \u25e2\ud83d\udc96\u25e3\n\ud83d\udc99\ud83d\udc99\ud83d\udc99\u25e3 \u25e2\ud83d\udc96\ud83d\udc96\ud83d\udc96\n\u25e5\ud83d\udc99\ud83d\udc99\ud83d\udc99\ud83d\udc96\ud83d\udc96\ud83d\udc96\u25e4\n    \u25e5\ud83d\udc99\ud83d\udc99\ud83d\udc96\ud83d\udc96\u25e4\n         \u25e5\ud83d\udc99\ud83d\udc96\u25e4\n              \u25e5 \u25e4 ",
          "createdAt": "2024-06-24T19:06:13Z",
          "updatedAt": "2024-06-24T19:06:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os5_WXvE",
          "commit": {
            "abbreviatedOid": "36f37a7"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-24T19:11:14Z",
          "updatedAt": "2024-06-24T19:11:21Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "Done.",
              "createdAt": "2024-06-24T19:11:14Z",
              "updatedAt": "2024-06-24T19:11:21Z"
            },
            {
              "originalPosition": 63,
              "body": "Done.",
              "createdAt": "2024-06-24T19:11:19Z",
              "updatedAt": "2024-06-24T19:11:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1363,
      "id": "PR_kwDOASA0os52pyjG",
      "title": "Incorporate the accepted parts of PR #1357. Closes #1357.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1363",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-27T22:30:24Z",
      "updatedAt": "2024-07-31T01:28:40Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "54d6f2709c3778da828859647e30dd0c345505d6",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "bensmyth_errata",
      "headRefOid": "f997610e37fabc1931b6572db4232af84fc5ca8f",
      "closedAt": "2024-07-31T01:28:40Z",
      "mergedAt": "2024-07-31T01:28:40Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "659cd26f21ed3efd14ac8359d31cd6f9e3d21a81"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson  @chris-wood @davidben ",
          "createdAt": "2024-07-27T22:31:43Z",
          "updatedAt": "2024-07-27T22:31:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os6DqUOK",
          "commit": {
            "abbreviatedOid": "72f2da5"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-31T00:02:35Z",
          "updatedAt": "2024-07-31T00:05:01Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "This phrasing is weird.  You could just say:\r\n\r\n> This fallback chain MUST NOT use the deprecated SHA-1 hash,\r\n> unless the client specifically advertises that it is willing to accept SHA-1.\r\n\r\nThe \"MAY\" bit is implied.",
              "createdAt": "2024-07-31T00:02:35Z",
              "updatedAt": "2024-07-31T00:05:01Z"
            },
            {
              "originalPosition": 33,
              "body": "```suggestion\r\n| Post-Handshake | ClientHello ... client Finished + CertificateRequest | \\[sender]_application_traffic_secret_N |\r\n```\r\n\r\nI'm not 100% on this, but I think that you need this.",
              "createdAt": "2024-07-31T00:02:52Z",
              "updatedAt": "2024-07-31T00:05:01Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nsymmetric cipher/hash pairs; either a list of Diffie-Hellman key shares (in the\r\n```",
              "createdAt": "2024-07-31T00:04:43Z",
              "updatedAt": "2024-07-31T00:05:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6Dqj4r",
          "commit": {
            "abbreviatedOid": "f997610"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-31T01:26:03Z",
          "updatedAt": "2024-07-31T01:28:23Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "It seems to compile OK without this.\r\n\r\n![image](https://github.com/user-attachments/assets/221ca031-2493-47e2-8341-785b70d0754b)\r\n",
              "createdAt": "2024-07-31T01:26:03Z",
              "updatedAt": "2024-07-31T01:28:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1364,
      "id": "PR_kwDOASA0os53Vyhe",
      "title": "Specify checks for legacy_version and legacy_compression_method. Fixes #1355",
      "url": "https://github.com/tlswg/tls13-spec/pull/1364",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-03T18:20:44Z",
      "updatedAt": "2024-08-05T00:35:07Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "659cd26f21ed3efd14ac8359d31cd6f9e3d21a81",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "issue1355_errata_6136",
      "headRefOid": "a40fc49ba67e6edf12660c18c5e20885edb21899",
      "closedAt": "2024-08-05T00:35:07Z",
      "mergedAt": "2024-08-05T00:35:07Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "ec3aa9fc0cd12beee44151d37935e551d6509d34"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@davegarrett  @BenSmyth @martinthomson ",
          "createdAt": "2024-08-03T18:21:34Z",
          "updatedAt": "2024-08-03T18:21:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os6EKBBr",
          "commit": {
            "abbreviatedOid": "a40fc49"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-03T21:34:34Z",
          "updatedAt": "2024-08-03T21:34:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os6EMb7y",
          "commit": {
            "abbreviatedOid": "a40fc49"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "\ud83d\udc4c",
          "createdAt": "2024-08-05T00:31:03Z",
          "updatedAt": "2024-08-05T00:31:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1366,
      "id": "PR_kwDOASA0os6CMnBu",
      "title": "Appendix on RPK misbinding attacks",
      "url": "https://github.com/tlswg/tls13-spec/pull/1366",
      "state": "MERGED",
      "author": "ms-s",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-11-18T06:19:09Z",
      "updatedAt": "2025-02-13T04:37:44Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "ebe7722b2b34ad4d824bea8921b044c3d9c33bed",
      "headRepository": "ms-s/tls13-spec",
      "headRefName": "rpk-misbinding",
      "headRefOid": "100fd6bba6a29558813528a781d0e566e787678c",
      "closedAt": "2025-02-13T04:37:44Z",
      "mergedAt": "2025-02-13T04:37:44Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "100fd6bba6a29558813528a781d0e566e787678c"
      },
      "comments": [
        {
          "author": "ms-s",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm not sure what \"strict validation of the \"server_name\" extension\" is supposed to entail based on this text.\r\n\r\nGood point. Perhaps: \"the server SHOULD check that the name received in the \"server_name\" extension of the ClientHello is something that it recognizes and is willing to respond to, ensuring that the client intended to establish a connection with the server receiving the ClientHello.\"",
          "createdAt": "2024-11-18T09:00:25Z",
          "updatedAt": "2024-11-18T18:55:38Z"
        },
        {
          "author": "danwing",
          "authorAssociation": "NONE",
          "body": "Client has no way to know if SNI is validated by the server, so the SNI check is not reliable.  Only external_id_hash would be a reliable check.\r\n\r\nAlso, the suggestion to use application verification needs to be stronger; HTTP has its \"Host:\" header (which should probably be called out in the text), however the Host header also suffers the same weakness as TLS SNI:  the client has no way to determine if the server is validating the Host header.",
          "createdAt": "2024-12-12T19:59:36Z",
          "updatedAt": "2024-12-12T20:06:49Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ms-s @martinthomson @danwing see PR #1371 for proposed revised text.",
          "createdAt": "2025-02-09T20:05:10Z",
          "updatedAt": "2025-02-09T20:05:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os6RiwZx",
          "commit": {
            "abbreviatedOid": "100fd6b"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I'm not sure what \"strict validation of the \"server_name\" extension\" is supposed to entail based on this text.",
          "createdAt": "2024-11-18T08:11:53Z",
          "updatedAt": "2024-11-18T08:13:43Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\n## Misbinding Using Raw Public Keys\r\n```",
              "createdAt": "2024-11-18T08:11:53Z",
              "updatedAt": "2024-11-18T08:13:43Z"
            },
            {
              "originalPosition": 25,
              "body": "Wrap this paragraph for consistency with the rest of the document.",
              "createdAt": "2024-11-18T08:12:09Z",
              "updatedAt": "2024-11-18T08:13:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6VDT0m",
          "commit": {
            "abbreviatedOid": "100fd6b"
          },
          "author": "danwing",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-12T20:04:52Z",
          "updatedAt": "2024-12-12T20:04:53Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "In many applications, only the server identity is verified, so we want to allow the client to validate the server's identity (without requiring mutual TLS).  Suggested change below.\r\n\r\n```suggestion\r\nWhen TLS 1.3 is used with raw public keys {{RFC7250}} for peer authentication, it may be vulnerable to misbinding attacks {{MM24}}. To mitigate this risk, if only the TLS server is authenticated using the RawPublicKey certificate type, the server SHOULD enforce strict validation of the \"server_name\" extension received in the ClientHello to confirm that the client intended to establish a connection with the server. Alternatively, the endpoints SHOULD perform identity verification of the peer using the \"external_id_hash\" TLS extension {{RFC8844}}, or at the application layer after the TLS connection is established.\r\n```",
              "createdAt": "2024-12-12T20:04:52Z",
              "updatedAt": "2024-12-12T20:04:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1368,
      "id": "PR_kwDOASA0os6C86oB",
      "title": "Workflow update",
      "url": "https://github.com/tlswg/tls13-spec/pull/1368",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some of the stuff in the workflows you have are [expiring in December](https://github.blog/changelog/2024-04-16-deprecation-notice-v3-of-the-artifact-actions/).\r\n\r\nI ran the automated process to update them for you.",
      "createdAt": "2024-11-24T22:21:53Z",
      "updatedAt": "2025-01-20T18:28:44Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "ebe7722b2b34ad4d824bea8921b044c3d9c33bed",
      "headRepository": "martinthomson/tls13-spec",
      "headRefName": "workflow-update",
      "headRefOid": "5c061c697cd2820524136ce8883440dc26cb603d",
      "closedAt": "2025-01-20T18:28:44Z",
      "mergedAt": "2025-01-20T18:28:44Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "42bf01c04cab12c579a75d467f36f82aec5ff12a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1369,
      "id": "PR_kwDOASA0os6JwmwS",
      "title": "Editorial updates to references",
      "url": "https://github.com/tlswg/tls13-spec/pull/1369",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Editorial updates to references",
      "createdAt": "2025-02-02T12:20:09Z",
      "updatedAt": "2025-02-13T04:53:53Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "42bf01c04cab12c579a75d467f36f82aec5ff12a",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-26",
      "headRefOid": "ea0a1846dcec26025530c69ee0ccb02cb5aec530",
      "closedAt": "2025-02-13T04:53:53Z",
      "mergedAt": "2025-02-13T04:53:53Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "105f09b1448ef3e849e9922d1392895f6fa86377"
      },
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "- Added links to the normative references [GCM] and [X690].\r\n- Moved [DH76] to informal references and added a open-access link to Stanford University\r\n\r\nI got a compile error, but main itself has has not compiled since August 2024\r\nhttps://github.com/tlswg/tls13-spec/commits/main/draft-ietf-tls-rfc8446bis.md",
          "createdAt": "2025-02-02T12:24:39Z",
          "updatedAt": "2025-02-02T12:24:39Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that the reference to [DH76] is better as informational but I think we do need a normative reference for the shared key computation in that section.. Do you have a proposal?\r\n\r\nFWIW, `main` does compile for me, and it seems to be compiling properly in CI.",
          "createdAt": "2025-02-09T19:51:08Z",
          "updatedAt": "2025-02-09T19:51:08Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think [KEYAGREEMENT] is a good reference for FFDH computation as well. It even refers to the TLS RFC719 groups. I made this change in the PR.\r\n\r\n>FWIW, main does compile for me, and it seems to be compiling properly in CI.\r\nMust have been some temporary CI, problem.",
          "createdAt": "2025-02-11T05:55:16Z",
          "updatedAt": "2025-02-11T05:55:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os6bcEjC",
          "commit": {
            "abbreviatedOid": "6cba923"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-11T06:44:30Z",
          "updatedAt": "2025-02-11T06:44:31Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\n  DH76: DOI.10.1109/TIT.1976.1055638\r\n```\r\n\r\nThis works well enough.",
              "createdAt": "2025-02-11T06:44:30Z",
              "updatedAt": "2025-02-11T06:44:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1370,
      "id": "PR_kwDOASA0os6J5-DN",
      "title": "Remove normative references to paywalled crypto",
      "url": "https://github.com/tlswg/tls13-spec/pull/1370",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Remove normative references to paywalled crypto with the open access SP 800-56A [KEYAGREEMENT], which is already referenced for ECC public key validation.\r\n\r\nPaywalled crypto specifications is a cybersecurity risk and goes against everything the IETF stands for. People should not have to pay to implement or analyze TLS 1.3.\r\n\r\nRemoved text on parameter generation as all the curves are named curves. This is likely a left over from an earlier version of TLS.\r\n\r\nAn alternative/additional open-access reference for ECC key generation and shared secret calculation would be SECG SEC 1.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "createdAt": "2025-02-03T21:27:49Z",
      "updatedAt": "2025-02-09T19:39:01Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "42bf01c04cab12c579a75d467f36f82aec5ff12a",
      "headRepository": "emanjon/tls13-spec",
      "headRefName": "patch-27",
      "headRefOid": "ad237865ecdba1274a1893fd32da8bcb70789a29",
      "closedAt": "2025-02-09T19:39:01Z",
      "mergedAt": "2025-02-09T19:39:01Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "deddc13a533082be308416555971270224408ed7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os6ad88N",
          "commit": {
            "abbreviatedOid": "7c2f08d"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-04T02:18:36Z",
          "updatedAt": "2025-02-04T02:18:37Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "You could use the same DOI method to get SP 800-56Ar3. So why not?",
              "createdAt": "2025-02-04T02:18:37Z",
              "updatedAt": "2025-02-04T02:18:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6afHrn",
          "commit": {
            "abbreviatedOid": "ad23786"
          },
          "author": "emanjon",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-04T06:26:39Z",
          "updatedAt": "2025-02-04T06:26:40Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Yes, after all, why not?",
              "createdAt": "2025-02-04T06:26:39Z",
              "updatedAt": "2025-02-04T06:26:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bPKVK",
          "commit": {
            "abbreviatedOid": "ad23786"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2025-02-09T19:38:56Z",
          "updatedAt": "2025-02-09T19:38:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1371,
      "id": "PR_kwDOASA0os6KkJBP",
      "title": "Rpk misbinding",
      "url": "https://github.com/tlswg/tls13-spec/pull/1371",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a revised version of the text from @ms-s in #1366 that I think makes the point more sharply.\r\n",
      "createdAt": "2025-02-09T20:04:22Z",
      "updatedAt": "2025-02-13T04:37:43Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "deddc13a533082be308416555971270224408ed7",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "rpk-misbinding",
      "headRefOid": "f62a80280218f0a80bed022d3ed1e2b68e774de9",
      "closedAt": "2025-02-13T04:37:43Z",
      "mergedAt": "2025-02-13T04:37:42Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "2f2dca7d75c301cafb3583f99a57b0ad880d3fc7"
      },
      "comments": [
        {
          "author": "ms-s",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looks good to me!",
          "createdAt": "2025-02-12T05:41:19Z",
          "updatedAt": "2025-02-12T05:41:19Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 1372,
      "id": "PR_kwDOASA0os6KkKFY",
      "title": "Clarify the use of HKDF-Expand-Label.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1372",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See: \r\nhttps://github.com/tlswg/draft-ietf-tls-esni/pull/641/files",
      "createdAt": "2025-02-09T20:16:12Z",
      "updatedAt": "2025-02-18T00:20:27Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "deddc13a533082be308416555971270224408ed7",
      "headRepository": "tlswg/tls13-spec",
      "headRefName": "hkdf_label",
      "headRefOid": "2441a3455332c61279f3eaef70b70064666a6a5d",
      "closedAt": "2025-02-18T00:20:27Z",
      "mergedAt": "2025-02-18T00:20:27Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "d739ae82fb3621e39c8ac3f202dd48226dd833da"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os6bPOpF",
          "commit": {
            "abbreviatedOid": "2441a34"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-09T21:20:06Z",
          "updatedAt": "2025-02-09T21:20:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1373,
      "id": "PR_kwDOASA0os6KmOdL",
      "title": "Suggest getrandom interface which is available on newer OSes.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1373",
      "state": "CLOSED",
      "author": "loganaden",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-10T07:14:10Z",
      "updatedAt": "2025-02-13T04:12:58Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "deddc13a533082be308416555971270224408ed7",
      "headRepository": "loganaden/tls13-spec",
      "headRefName": "patch-1",
      "headRefOid": "8e6c1f9d244a5351d7f4a1270a2b14b67d00c859",
      "closedAt": "2025-02-13T04:12:58Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os6bYUKp",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-10T18:44:25Z",
          "updatedAt": "2025-02-10T18:44:26Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Not an objection per se, but I dunno if we want to get into a whole digression in the spec about different APIs to access the PRNG. E.g. getrandom is Linux-specific, then there's getentropy, and then there's the mess about which versions of Linux have which early boot behavior.\r\n\r\nMakes me wonder if we should say anything at all here.",
              "createdAt": "2025-02-10T18:44:26Z",
              "updatedAt": "2025-02-10T18:44:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bYmIz",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "tomato42",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-10T19:14:42Z",
          "updatedAt": "2025-02-10T19:14:42Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "yes, while the intention is good, I think it's too Linux specific",
              "createdAt": "2025-02-10T19:14:42Z",
              "updatedAt": "2025-02-10T19:14:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bYyUF",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-10T19:33:17Z",
          "updatedAt": "2025-02-10T19:33:17Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I do want to keep the guidance on \"use the OS CSPRNG rather than rolling your own\" (ISTR that I added it in the first place but apparently don't have a checkout on this device to look), and giving one example seems probably reasonable but maybe not necessary.  Going into the details of multiple different interfaces feels a bit overspecific for the protocol spec, though maybe in an \"implementation notes\" section it is still ok?",
              "createdAt": "2025-02-10T19:33:17Z",
              "updatedAt": "2025-02-10T19:33:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bY7FS",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-10T19:50:40Z",
          "updatedAt": "2025-02-10T19:50:40Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Oh yeah, +1 to keeping the mention of the OS. Sorry, \"say anything at all\" wasn't right. I was thinking just not saying anything about the specific API, but wrote something broader.",
              "createdAt": "2025-02-10T19:50:40Z",
              "updatedAt": "2025-02-10T19:50:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bZJjT",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "loganaden",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-10T20:19:06Z",
          "updatedAt": "2025-02-10T20:19:06Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "@davidben @kaduk would something like \"On newer operating systems, other interfaces, which do not require opening a file descriptor and can be used in in sandboxing environment, SHOULD be used\" ?\r\n",
              "createdAt": "2025-02-10T20:19:06Z",
              "updatedAt": "2025-02-10T20:19:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bZTDf",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-10T20:36:53Z",
          "updatedAt": "2025-02-10T20:36:53Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I don't think the TLS spec should opine about something as implementation-specific as which Linux-specific APIs are or aren't friendly for sandboxing. _Definitely_ not at the level of a SHOULD.\r\n\r\nI mean, depending on the sandboxing strategy and the TLS stack's structure, `/dev/urandom` might even be _better_ than `getrandom` for a sandbox. Imagine a syscall-filtering sandbox that hasn't been updated for `getrandom`, paired with a [capabilities-heavy](https://en.wikipedia.org/wiki/Capability-based_security) TLS stack that actually happily takes an externally-supplied `/dev/urandom` file descriptor.\r\n\r\n(Though, yes, `getrandom` is probably generally more sandboxing-friendly than `/dev/urandom` in most cases. Certainly we prefer it for Chrome's sandbox. I wouldn't expect most TLS libraries to happily take an externally-supplied fd in lieu of `/dev/urandom`. But it's a plausible enough design to disqualify this guidance IMO. And then you've got Windows, where the APIs and sandboxing considerations are completely different.)",
              "createdAt": "2025-02-10T20:36:53Z",
              "updatedAt": "2025-02-10T20:38:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bZT2t",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-10T20:38:16Z",
          "updatedAt": "2025-02-10T20:38:16Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Also, practically speaking, the TLS library is probably calling into its cryptography library's general-purpose PRNG interface, so it's not like it's going to do anything special anyway.",
              "createdAt": "2025-02-10T20:38:16Z",
              "updatedAt": "2025-02-10T20:38:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bawwF",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-11T01:06:06Z",
          "updatedAt": "2025-02-11T01:06:06Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I can't suggest this, but here's what I'd say:\r\n\r\n> A performant and appropriately-secure CSPRNG is provided\r\n> by most operating systems or can be sourced from a cryptographic library.",
              "createdAt": "2025-02-11T01:06:06Z",
              "updatedAt": "2025-02-11T01:06:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6baw5P",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-11T01:06:55Z",
          "updatedAt": "2025-02-11T01:06:55Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Isn't it true that compromised \\subsetof broken ?",
              "createdAt": "2025-02-11T01:06:55Z",
              "updatedAt": "2025-02-11T01:06:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bgwH8",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-11T15:07:23Z",
          "updatedAt": "2025-02-11T15:07:23Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Broken seems to be sufficient. This sentence is a counterpoint to `properly functioning CSPRNG` in the previous sentence.",
              "createdAt": "2025-02-11T15:07:23Z",
              "updatedAt": "2025-02-11T15:07:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bg2sJ",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "loganaden",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-11T15:16:20Z",
          "updatedAt": "2025-02-11T15:16:20Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Understood. Will remove this.",
              "createdAt": "2025-02-11T15:16:20Z",
              "updatedAt": "2025-02-11T15:16:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bg3LL",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "loganaden",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-11T15:16:57Z",
          "updatedAt": "2025-02-11T15:16:57Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "got it.\r\n",
              "createdAt": "2025-02-11T15:16:57Z",
              "updatedAt": "2025-02-11T15:16:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bg3wC",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "loganaden",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-11T15:17:45Z",
          "updatedAt": "2025-02-11T15:17:45Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Would something like this be better @davidben @kaduk : A performant and appropriately-secure CSPRNG is provided by most operating systems or can be sourced from a cryptographic library.",
              "createdAt": "2025-02-11T15:17:45Z",
              "updatedAt": "2025-02-11T15:17:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bllpn",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-11T23:11:08Z",
          "updatedAt": "2025-02-11T23:11:08Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "SGTM",
              "createdAt": "2025-02-11T23:11:08Z",
              "updatedAt": "2025-02-11T23:11:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bnFyh",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-12T03:08:15Z",
          "updatedAt": "2025-02-12T03:08:16Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I'm fine with this proposed text if yo want to prepare an appropriate PR.\r\n\r\nIn addition, please send a PR adding yourself to the contributor list.",
              "createdAt": "2025-02-12T03:08:15Z",
              "updatedAt": "2025-02-12T03:08:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bnIT8",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "loganaden",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-12T03:20:27Z",
          "updatedAt": "2025-02-12T03:20:27Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "working on it.",
              "createdAt": "2025-02-12T03:20:27Z",
              "updatedAt": "2025-02-12T03:20:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOASA0os6bv1H4",
          "commit": {
            "abbreviatedOid": "8e6c1f9"
          },
          "author": "loganaden",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-12T19:34:04Z",
          "updatedAt": "2025-02-12T19:34:04Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "@ekr  PR opened: https://github.com/tlswg/tls13-spec/pull/1375",
              "createdAt": "2025-02-12T19:34:04Z",
              "updatedAt": "2025-02-12T19:34:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1374,
      "id": "PR_kwDOASA0os6K0mlv",
      "title": "Fix redundant word.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1374",
      "state": "MERGED",
      "author": "loganaden",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-11T15:31:32Z",
      "updatedAt": "2025-02-12T03:07:15Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "deddc13a533082be308416555971270224408ed7",
      "headRepository": null,
      "headRefName": "loganaden-typo-fix",
      "headRefOid": "2e1c33c5ff5b93ee5f57e6595e33f5c594687ec9",
      "closedAt": "2025-02-12T03:07:15Z",
      "mergedAt": "2025-02-12T03:07:15Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "76a191fefbf6633351c6f5183ba9b6ca6c056ae1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os6bkr48",
          "commit": {
            "abbreviatedOid": "2e1c33c"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-11T21:24:14Z",
          "updatedAt": "2025-02-11T21:24:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os6bm4aq",
          "commit": {
            "abbreviatedOid": "2e1c33c"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-12T02:34:55Z",
          "updatedAt": "2025-02-12T02:34:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1375,
      "id": "PR_kwDOASA0os6K5riu",
      "title": "More generic recommendation for CSPRNG.",
      "url": "https://github.com/tlswg/tls13-spec/pull/1375",
      "state": "MERGED",
      "author": "loganaden",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(Thanks to Martin Thomson)",
      "createdAt": "2025-02-12T05:26:23Z",
      "updatedAt": "2025-02-13T04:12:43Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "76a191fefbf6633351c6f5183ba9b6ca6c056ae1",
      "headRepository": "cyberstormdotmu/tls13-spec",
      "headRefName": "loganaden-generic-csprng",
      "headRefOid": "f16bb05d35bfef7f161bd41c5a37fbd6d3073c81",
      "closedAt": "2025-02-13T04:12:43Z",
      "mergedAt": "2025-02-13T04:12:43Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "845dc78d039cc49ff08cec1a1606d8251e3c35cd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1376,
      "id": "PR_kwDOASA0os6LDGUr",
      "title": "Update contributors list",
      "url": "https://github.com/tlswg/tls13-spec/pull/1376",
      "state": "MERGED",
      "author": "loganaden",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-13T05:06:04Z",
      "updatedAt": "2025-02-14T04:46:46Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "105f09b1448ef3e849e9922d1392895f6fa86377",
      "headRepository": "cyberstormdotmu/tls13-spec",
      "headRefName": "main",
      "headRefOid": "63e57935b2415c804227039cc59308c210de8795",
      "closedAt": "2025-02-14T04:46:46Z",
      "mergedAt": "2025-02-14T04:46:46Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "bc0af8b5678e383e8725c32bb14e204e5e231d4d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os6bzDOT",
          "commit": {
            "abbreviatedOid": "63e5793"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-13T05:07:56Z",
          "updatedAt": "2025-02-13T05:07:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os6b4trQ",
          "commit": {
            "abbreviatedOid": "63e5793"
          },
          "author": "seanturner",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-13T15:08:28Z",
          "updatedAt": "2025-02-13T15:08:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOASA0os6b-HmK",
          "commit": {
            "abbreviatedOid": "63e5793"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-14T04:46:40Z",
          "updatedAt": "2025-02-14T04:46:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1377,
      "id": "PR_kwDOASA0os6LnBuM",
      "title": "Minor edits from Sue Hares's GenArt review:",
      "url": "https://github.com/tlswg/tls13-spec/pull/1377",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://datatracker.ietf.org/doc/review-ietf-tls-rfc8446bis-11-genart-lc-hares-2024-11-15/\r\n\r\nSue listed two other categories of text change she suggests:\r\n\r\n1. Semicolons:\r\n\r\n  One confusing nit is the usage of \";\" in the following locations.\r\n  The definition of \";\" according to scholarly writing for the\r\n  usage of (clause-1);(clause-2) is that the clauses are equivalent.\r\n\r\nI believe our usage is correct per CMS 5.89.\r\n\r\n2. --\r\n\r\n   Use of text offset by -- (text) ---\r\n\r\nThese are in place of em-dashes and should be rendered correctly in the final RFC.",
      "createdAt": "2025-02-18T14:44:38Z",
      "updatedAt": "2025-02-18T17:38:25Z",
      "baseRepository": "tlswg/tls13-spec",
      "baseRefName": "main",
      "baseRefOid": "d739ae82fb3621e39c8ac3f202dd48226dd833da",
      "headRepository": "ekr/tls13-spec",
      "headRefName": "genart_review",
      "headRefOid": "571e77050bdc6c3bb2abd9fc8c61e74783f6a123",
      "closedAt": "2025-02-18T17:38:24Z",
      "mergedAt": "2025-02-18T17:38:24Z",
      "mergedBy": "ekr",
      "mergeCommit": {
        "oid": "90ba604f4a441495cea8284bf79bfb9ca9c3e638"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOASA0os6cbQvx",
          "commit": {
            "abbreviatedOid": "571e770"
          },
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-18T17:35:03Z",
          "updatedAt": "2025-02-18T17:35:03Z",
          "comments": []
        }
      ]
    }
  ]
}